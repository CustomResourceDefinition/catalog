{
  "description": "HPCCache is the Schema for the HPCCaches API. Manages a HPC Cache.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "HPCCacheSpec defines the desired state of HPCCache",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "deletionPolicy": {
          "description": "DeletionPolicy specifies what will happen to the underlying external\nwhen this managed resource is deleted - either \"Delete\" or \"Orphan\" the\nexternal resource.\nThis field is planned to be deprecated in favor of the ManagementPolicies\nfield in a future release. Currently, both could be set independently and\nnon-default values would be honored if the feature flag is enabled.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "type": "string",
          "default": "Delete",
          "enum": [
            "Orphan",
            "Delete"
          ]
        },
        "forProvider": {
          "type": "object",
          "properties": {
            "automaticallyRotateKeyToLatestEnabled": {
              "description": "Specifies whether the HPC Cache automatically rotates Encryption Key to the latest version.",
              "type": "boolean"
            },
            "cacheSizeInGb": {
              "description": "The size of the HPC Cache, in GB. Possible values are 3072, 6144, 12288, 21623, 24576, 43246, 49152 and 86491. Changing this forces a new resource to be created.",
              "type": "number"
            },
            "defaultAccessPolicy": {
              "description": "A default_access_policy block as defined below.",
              "type": "object",
              "properties": {
                "accessRule": {
                  "description": "One or more access_rule blocks (up to three) as defined above.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "access": {
                        "description": "The access level for this rule. Possible values are: rw, ro, no.",
                        "type": "string"
                      },
                      "anonymousGid": {
                        "description": "The anonymous GID used when root_squash_enabled is true.",
                        "type": "number"
                      },
                      "anonymousUid": {
                        "description": "The anonymous UID used when root_squash_enabled is true.",
                        "type": "number"
                      },
                      "filter": {
                        "description": "The filter applied to the scope for this rule. The filter's format depends on its scope: default scope matches all clients and has no filter value; network scope takes a CIDR format; host takes an IP address or fully qualified domain name. If a client does not match any filter rule and there is no default rule, access is denied.",
                        "type": "string"
                      },
                      "rootSquashEnabled": {
                        "description": "Whether to enable root squash?",
                        "type": "boolean"
                      },
                      "scope": {
                        "description": "The scope of this rule. The scope and (potentially) the filter determine which clients match the rule. Possible values are: default, network, host.",
                        "type": "string"
                      },
                      "submountAccessEnabled": {
                        "description": "Whether allow access to subdirectories under the root export?",
                        "type": "boolean"
                      },
                      "suidEnabled": {
                        "description": "Whether SUID is allowed?",
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  }
                }
              },
              "additionalProperties": false
            },
            "directoryActiveDirectory": {
              "description": "A directory_active_directory block as defined below.",
              "type": "object",
              "properties": {
                "cacheNetbiosName": {
                  "description": "The NetBIOS name to assign to the HPC Cache when it joins the Active Directory domain as a server.",
                  "type": "string"
                },
                "dnsPrimaryIp": {
                  "description": "The primary DNS IP address used to resolve the Active Directory domain controller's FQDN.",
                  "type": "string"
                },
                "dnsSecondaryIp": {
                  "description": "The secondary DNS IP address used to resolve the Active Directory domain controller's FQDN.",
                  "type": "string"
                },
                "domainName": {
                  "description": "The fully qualified domain name of the Active Directory domain controller.",
                  "type": "string"
                },
                "domainNetbiosName": {
                  "description": "The Active Directory domain's NetBIOS name.",
                  "type": "string"
                },
                "passwordSecretRef": {
                  "description": "The password of the Active Directory domain administrator.",
                  "type": "object",
                  "required": [
                    "key",
                    "name",
                    "namespace"
                  ],
                  "properties": {
                    "key": {
                      "description": "The key to select.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the secret.",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace of the secret.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "username": {
                  "description": "The username of the Active Directory domain administrator.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "directoryFlatFile": {
              "description": "A directory_flat_file block as defined below.",
              "type": "object",
              "properties": {
                "groupFileUri": {
                  "description": "The URI of the file containing group information (/etc/group file format in Unix-like OS).",
                  "type": "string"
                },
                "passwordFileUri": {
                  "description": "The URI of the file containing user information (/etc/passwd file format in Unix-like OS).",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "directoryLdap": {
              "description": "A directory_ldap block as defined below.",
              "type": "object",
              "properties": {
                "baseDn": {
                  "description": "The base distinguished name (DN) for the LDAP domain.",
                  "type": "string"
                },
                "bind": {
                  "description": "A bind block as defined above.",
                  "type": "object",
                  "properties": {
                    "dn": {
                      "description": "The Bind Distinguished Name (DN) identity to be used in the secure LDAP connection.",
                      "type": "string"
                    },
                    "passwordSecretRef": {
                      "description": "The password of the Active Directory domain administrator.",
                      "type": "object",
                      "required": [
                        "key",
                        "name",
                        "namespace"
                      ],
                      "properties": {
                        "key": {
                          "description": "The key to select.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the secret.",
                          "type": "string"
                        },
                        "namespace": {
                          "description": "Namespace of the secret.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "certificateValidationUri": {
                  "description": "The URI of the CA certificate to validate the LDAP secure connection.",
                  "type": "string"
                },
                "downloadCertificateAutomatically": {
                  "description": "Whether the certificate should be automatically downloaded. This can be set to true only when certificate_validation_uri is provided.",
                  "type": "boolean"
                },
                "encrypted": {
                  "description": "Whether the LDAP connection should be encrypted?",
                  "type": "boolean"
                },
                "server": {
                  "description": "The FQDN or IP address of the LDAP server.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "dns": {
              "description": "A dns block as defined below.",
              "type": "object",
              "properties": {
                "searchDomain": {
                  "description": "The DNS search domain for the HPC Cache.",
                  "type": "string"
                },
                "servers": {
                  "description": "A list of DNS servers for the HPC Cache. At most three IP(s) are allowed to set.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "additionalProperties": false
            },
            "identity": {
              "description": "An identity block as defined below. Changing this forces a new resource to be created.",
              "type": "object",
              "properties": {
                "identityIds": {
                  "description": "Specifies a list of User Assigned Managed Identity IDs to be assigned to this HPC Cache. Changing this forces a new resource to be created.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "x-kubernetes-list-type": "set"
                },
                "type": {
                  "description": "Specifies the type of Managed Service Identity that should be configured on this HPC Cache. Possible values are SystemAssigned, UserAssigned, SystemAssigned, UserAssigned (to enable both). Changing this forces a new resource to be created.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "keyVaultKeyId": {
              "description": "The ID of the Key Vault Key which should be used to encrypt the data in this HPC Cache.",
              "type": "string"
            },
            "location": {
              "description": "Specifies the supported Azure Region where the HPC Cache should be created. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "mtu": {
              "description": "The IPv4 maximum transmission unit configured for the subnet of the HPC Cache. Possible values range from 576 - 1500. Defaults to 1500.",
              "type": "number"
            },
            "ntpServer": {
              "description": "The NTP server IP Address or FQDN for the HPC Cache. Defaults to time.windows.com.",
              "type": "string"
            },
            "resourceGroupName": {
              "description": "The name of the Resource Group in which to create the HPC Cache. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "resourceGroupNameRef": {
              "description": "Reference to a ResourceGroup in azure to populate resourceGroupName.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "resourceGroupNameSelector": {
              "description": "Selector for a ResourceGroup in azure to populate resourceGroupName.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "skuName": {
              "description": "The SKU of HPC Cache to use. Possible values are (ReadWrite) - Standard_2G, Standard_4G Standard_8G or (ReadOnly) - Standard_L4_5G, Standard_L9G, and Standard_L16G. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "subnetId": {
              "description": "The ID of the Subnet for the HPC Cache. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "subnetIdRef": {
              "description": "Reference to a Subnet in network to populate subnetId.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "subnetIdSelector": {
              "description": "Selector for a Subnet in network to populate subnetId.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "tags": {
              "description": "A mapping of tags to assign to the HPC Cache.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            }
          },
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored\nunless the Management Policies feature flag is disabled.\nInitProvider holds the same fields as ForProvider, with the exception\nof Identifier and other resource reference fields. The fields that are\nin InitProvider are merged into ForProvider when the resource is created.\nThe same fields are also added to the terraform ignore_changes hook, to\navoid updating them after creation. This is useful for fields that are\nrequired on creation, but we do not desire to update them after creation,\nfor example because of an external controller is managing them, like an\nautoscaler.",
          "type": "object",
          "properties": {
            "automaticallyRotateKeyToLatestEnabled": {
              "description": "Specifies whether the HPC Cache automatically rotates Encryption Key to the latest version.",
              "type": "boolean"
            },
            "cacheSizeInGb": {
              "description": "The size of the HPC Cache, in GB. Possible values are 3072, 6144, 12288, 21623, 24576, 43246, 49152 and 86491. Changing this forces a new resource to be created.",
              "type": "number"
            },
            "defaultAccessPolicy": {
              "description": "A default_access_policy block as defined below.",
              "type": "object",
              "properties": {
                "accessRule": {
                  "description": "One or more access_rule blocks (up to three) as defined above.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "access": {
                        "description": "The access level for this rule. Possible values are: rw, ro, no.",
                        "type": "string"
                      },
                      "anonymousGid": {
                        "description": "The anonymous GID used when root_squash_enabled is true.",
                        "type": "number"
                      },
                      "anonymousUid": {
                        "description": "The anonymous UID used when root_squash_enabled is true.",
                        "type": "number"
                      },
                      "filter": {
                        "description": "The filter applied to the scope for this rule. The filter's format depends on its scope: default scope matches all clients and has no filter value; network scope takes a CIDR format; host takes an IP address or fully qualified domain name. If a client does not match any filter rule and there is no default rule, access is denied.",
                        "type": "string"
                      },
                      "rootSquashEnabled": {
                        "description": "Whether to enable root squash?",
                        "type": "boolean"
                      },
                      "scope": {
                        "description": "The scope of this rule. The scope and (potentially) the filter determine which clients match the rule. Possible values are: default, network, host.",
                        "type": "string"
                      },
                      "submountAccessEnabled": {
                        "description": "Whether allow access to subdirectories under the root export?",
                        "type": "boolean"
                      },
                      "suidEnabled": {
                        "description": "Whether SUID is allowed?",
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  }
                }
              },
              "additionalProperties": false
            },
            "directoryActiveDirectory": {
              "description": "A directory_active_directory block as defined below.",
              "type": "object",
              "required": [
                "passwordSecretRef"
              ],
              "properties": {
                "cacheNetbiosName": {
                  "description": "The NetBIOS name to assign to the HPC Cache when it joins the Active Directory domain as a server.",
                  "type": "string"
                },
                "dnsPrimaryIp": {
                  "description": "The primary DNS IP address used to resolve the Active Directory domain controller's FQDN.",
                  "type": "string"
                },
                "dnsSecondaryIp": {
                  "description": "The secondary DNS IP address used to resolve the Active Directory domain controller's FQDN.",
                  "type": "string"
                },
                "domainName": {
                  "description": "The fully qualified domain name of the Active Directory domain controller.",
                  "type": "string"
                },
                "domainNetbiosName": {
                  "description": "The Active Directory domain's NetBIOS name.",
                  "type": "string"
                },
                "passwordSecretRef": {
                  "description": "The password of the Active Directory domain administrator.",
                  "type": "object",
                  "required": [
                    "key",
                    "name",
                    "namespace"
                  ],
                  "properties": {
                    "key": {
                      "description": "The key to select.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the secret.",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace of the secret.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "username": {
                  "description": "The username of the Active Directory domain administrator.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "directoryFlatFile": {
              "description": "A directory_flat_file block as defined below.",
              "type": "object",
              "properties": {
                "groupFileUri": {
                  "description": "The URI of the file containing group information (/etc/group file format in Unix-like OS).",
                  "type": "string"
                },
                "passwordFileUri": {
                  "description": "The URI of the file containing user information (/etc/passwd file format in Unix-like OS).",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "directoryLdap": {
              "description": "A directory_ldap block as defined below.",
              "type": "object",
              "properties": {
                "baseDn": {
                  "description": "The base distinguished name (DN) for the LDAP domain.",
                  "type": "string"
                },
                "bind": {
                  "description": "A bind block as defined above.",
                  "type": "object",
                  "required": [
                    "passwordSecretRef"
                  ],
                  "properties": {
                    "dn": {
                      "description": "The Bind Distinguished Name (DN) identity to be used in the secure LDAP connection.",
                      "type": "string"
                    },
                    "passwordSecretRef": {
                      "description": "The password of the Active Directory domain administrator.",
                      "type": "object",
                      "required": [
                        "key",
                        "name",
                        "namespace"
                      ],
                      "properties": {
                        "key": {
                          "description": "The key to select.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the secret.",
                          "type": "string"
                        },
                        "namespace": {
                          "description": "Namespace of the secret.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "certificateValidationUri": {
                  "description": "The URI of the CA certificate to validate the LDAP secure connection.",
                  "type": "string"
                },
                "downloadCertificateAutomatically": {
                  "description": "Whether the certificate should be automatically downloaded. This can be set to true only when certificate_validation_uri is provided.",
                  "type": "boolean"
                },
                "encrypted": {
                  "description": "Whether the LDAP connection should be encrypted?",
                  "type": "boolean"
                },
                "server": {
                  "description": "The FQDN or IP address of the LDAP server.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "dns": {
              "description": "A dns block as defined below.",
              "type": "object",
              "properties": {
                "searchDomain": {
                  "description": "The DNS search domain for the HPC Cache.",
                  "type": "string"
                },
                "servers": {
                  "description": "A list of DNS servers for the HPC Cache. At most three IP(s) are allowed to set.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "additionalProperties": false
            },
            "identity": {
              "description": "An identity block as defined below. Changing this forces a new resource to be created.",
              "type": "object",
              "properties": {
                "identityIds": {
                  "description": "Specifies a list of User Assigned Managed Identity IDs to be assigned to this HPC Cache. Changing this forces a new resource to be created.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "x-kubernetes-list-type": "set"
                },
                "type": {
                  "description": "Specifies the type of Managed Service Identity that should be configured on this HPC Cache. Possible values are SystemAssigned, UserAssigned, SystemAssigned, UserAssigned (to enable both). Changing this forces a new resource to be created.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "keyVaultKeyId": {
              "description": "The ID of the Key Vault Key which should be used to encrypt the data in this HPC Cache.",
              "type": "string"
            },
            "location": {
              "description": "Specifies the supported Azure Region where the HPC Cache should be created. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "mtu": {
              "description": "The IPv4 maximum transmission unit configured for the subnet of the HPC Cache. Possible values range from 576 - 1500. Defaults to 1500.",
              "type": "number"
            },
            "ntpServer": {
              "description": "The NTP server IP Address or FQDN for the HPC Cache. Defaults to time.windows.com.",
              "type": "string"
            },
            "skuName": {
              "description": "The SKU of HPC Cache to use. Possible values are (ReadWrite) - Standard_2G, Standard_4G Standard_8G or (ReadOnly) - Standard_L4_5G, Standard_L9G, and Standard_L16G. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "subnetId": {
              "description": "The ID of the Subnet for the HPC Cache. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "subnetIdRef": {
              "description": "Reference to a Subnet in network to populate subnetId.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "subnetIdSelector": {
              "description": "Selector for a Subnet in network to populate subnetId.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "tags": {
              "description": "A mapping of tags to assign to the HPC Cache.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            }
          },
          "additionalProperties": false
        },
        "managementPolicies": {
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out\nthrough a Crossplane feature flag.\nManagementPolicies specify the array of actions Crossplane is allowed to\ntake on the managed and external resources.\nThis field is planned to replace the DeletionPolicy field in a future\nrelease. Currently, both could be set independently and non-default\nvalues would be honored if the feature flag is enabled. If both are\ncustom, the DeletionPolicy field will be ignored.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223\nand this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers\ncan take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to\ncreate, observe, update, and delete this managed resource should be\nconfigured.",
          "type": "object",
          "default": {
            "name": "default"
          },
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "type": "object",
              "properties": {
                "resolution": {
                  "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                  "type": "string",
                  "default": "Required",
                  "enum": [
                    "Required",
                    "Optional"
                  ]
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                  "type": "string",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a\nSecret to which any connection details for this managed resource should\nbe written. Connection details frequently include the endpoint, username,\nand password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name",
            "namespace"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false,
      "x-kubernetes-validations": [
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.cacheSizeInGb) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.cacheSizeInGb))",
          "message": "spec.forProvider.cacheSizeInGb is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.location))",
          "message": "spec.forProvider.location is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.skuName) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.skuName))",
          "message": "spec.forProvider.skuName is a required parameter"
        }
      ]
    },
    "status": {
      "description": "HPCCacheStatus defines the observed state of HPCCache.",
      "type": "object",
      "properties": {
        "atProvider": {
          "type": "object",
          "properties": {
            "automaticallyRotateKeyToLatestEnabled": {
              "description": "Specifies whether the HPC Cache automatically rotates Encryption Key to the latest version.",
              "type": "boolean"
            },
            "cacheSizeInGb": {
              "description": "The size of the HPC Cache, in GB. Possible values are 3072, 6144, 12288, 21623, 24576, 43246, 49152 and 86491. Changing this forces a new resource to be created.",
              "type": "number"
            },
            "defaultAccessPolicy": {
              "description": "A default_access_policy block as defined below.",
              "type": "object",
              "properties": {
                "accessRule": {
                  "description": "One or more access_rule blocks (up to three) as defined above.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "access": {
                        "description": "The access level for this rule. Possible values are: rw, ro, no.",
                        "type": "string"
                      },
                      "anonymousGid": {
                        "description": "The anonymous GID used when root_squash_enabled is true.",
                        "type": "number"
                      },
                      "anonymousUid": {
                        "description": "The anonymous UID used when root_squash_enabled is true.",
                        "type": "number"
                      },
                      "filter": {
                        "description": "The filter applied to the scope for this rule. The filter's format depends on its scope: default scope matches all clients and has no filter value; network scope takes a CIDR format; host takes an IP address or fully qualified domain name. If a client does not match any filter rule and there is no default rule, access is denied.",
                        "type": "string"
                      },
                      "rootSquashEnabled": {
                        "description": "Whether to enable root squash?",
                        "type": "boolean"
                      },
                      "scope": {
                        "description": "The scope of this rule. The scope and (potentially) the filter determine which clients match the rule. Possible values are: default, network, host.",
                        "type": "string"
                      },
                      "submountAccessEnabled": {
                        "description": "Whether allow access to subdirectories under the root export?",
                        "type": "boolean"
                      },
                      "suidEnabled": {
                        "description": "Whether SUID is allowed?",
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  }
                }
              },
              "additionalProperties": false
            },
            "directoryActiveDirectory": {
              "description": "A directory_active_directory block as defined below.",
              "type": "object",
              "properties": {
                "cacheNetbiosName": {
                  "description": "The NetBIOS name to assign to the HPC Cache when it joins the Active Directory domain as a server.",
                  "type": "string"
                },
                "dnsPrimaryIp": {
                  "description": "The primary DNS IP address used to resolve the Active Directory domain controller's FQDN.",
                  "type": "string"
                },
                "dnsSecondaryIp": {
                  "description": "The secondary DNS IP address used to resolve the Active Directory domain controller's FQDN.",
                  "type": "string"
                },
                "domainName": {
                  "description": "The fully qualified domain name of the Active Directory domain controller.",
                  "type": "string"
                },
                "domainNetbiosName": {
                  "description": "The Active Directory domain's NetBIOS name.",
                  "type": "string"
                },
                "username": {
                  "description": "The username of the Active Directory domain administrator.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "directoryFlatFile": {
              "description": "A directory_flat_file block as defined below.",
              "type": "object",
              "properties": {
                "groupFileUri": {
                  "description": "The URI of the file containing group information (/etc/group file format in Unix-like OS).",
                  "type": "string"
                },
                "passwordFileUri": {
                  "description": "The URI of the file containing user information (/etc/passwd file format in Unix-like OS).",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "directoryLdap": {
              "description": "A directory_ldap block as defined below.",
              "type": "object",
              "properties": {
                "baseDn": {
                  "description": "The base distinguished name (DN) for the LDAP domain.",
                  "type": "string"
                },
                "bind": {
                  "description": "A bind block as defined above.",
                  "type": "object",
                  "properties": {
                    "dn": {
                      "description": "The Bind Distinguished Name (DN) identity to be used in the secure LDAP connection.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "certificateValidationUri": {
                  "description": "The URI of the CA certificate to validate the LDAP secure connection.",
                  "type": "string"
                },
                "downloadCertificateAutomatically": {
                  "description": "Whether the certificate should be automatically downloaded. This can be set to true only when certificate_validation_uri is provided.",
                  "type": "boolean"
                },
                "encrypted": {
                  "description": "Whether the LDAP connection should be encrypted?",
                  "type": "boolean"
                },
                "server": {
                  "description": "The FQDN or IP address of the LDAP server.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "dns": {
              "description": "A dns block as defined below.",
              "type": "object",
              "properties": {
                "searchDomain": {
                  "description": "The DNS search domain for the HPC Cache.",
                  "type": "string"
                },
                "servers": {
                  "description": "A list of DNS servers for the HPC Cache. At most three IP(s) are allowed to set.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "additionalProperties": false
            },
            "id": {
              "description": "The id of the HPC Cache.",
              "type": "string"
            },
            "identity": {
              "description": "An identity block as defined below. Changing this forces a new resource to be created.",
              "type": "object",
              "properties": {
                "identityIds": {
                  "description": "Specifies a list of User Assigned Managed Identity IDs to be assigned to this HPC Cache. Changing this forces a new resource to be created.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "x-kubernetes-list-type": "set"
                },
                "principalId": {
                  "description": "The Principal ID associated with this Managed Service Identity.",
                  "type": "string"
                },
                "tenantId": {
                  "description": "The Tenant ID associated with this Managed Service Identity.",
                  "type": "string"
                },
                "type": {
                  "description": "Specifies the type of Managed Service Identity that should be configured on this HPC Cache. Possible values are SystemAssigned, UserAssigned, SystemAssigned, UserAssigned (to enable both). Changing this forces a new resource to be created.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "keyVaultKeyId": {
              "description": "The ID of the Key Vault Key which should be used to encrypt the data in this HPC Cache.",
              "type": "string"
            },
            "location": {
              "description": "Specifies the supported Azure Region where the HPC Cache should be created. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "mountAddresses": {
              "description": "A list of IP Addresses where the HPC Cache can be mounted.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "mtu": {
              "description": "The IPv4 maximum transmission unit configured for the subnet of the HPC Cache. Possible values range from 576 - 1500. Defaults to 1500.",
              "type": "number"
            },
            "ntpServer": {
              "description": "The NTP server IP Address or FQDN for the HPC Cache. Defaults to time.windows.com.",
              "type": "string"
            },
            "resourceGroupName": {
              "description": "The name of the Resource Group in which to create the HPC Cache. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "skuName": {
              "description": "The SKU of HPC Cache to use. Possible values are (ReadWrite) - Standard_2G, Standard_4G Standard_8G or (ReadOnly) - Standard_L4_5G, Standard_L9G, and Standard_L16G. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "subnetId": {
              "description": "The ID of the Subnet for the HPC Cache. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "tags": {
              "description": "A mapping of tags to assign to the HPC Cache.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            }
          },
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "type": "array",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one\nstatus to another.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from\none status to another, if any.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to\na resource at any point in time.",
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest metadata.generation\nwhich resulted in either a ready state, or stalled due to error\nit can not recover from without human intervention.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    }
  }
}
