{
  "description": "RedisCache is the Schema for the RedisCaches API. Manages a Redis Cache",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "RedisCacheSpec defines the desired state of RedisCache",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "deletionPolicy": {
          "description": "DeletionPolicy specifies what will happen to the underlying external\nwhen this managed resource is deleted - either \"Delete\" or \"Orphan\" the\nexternal resource.\nThis field is planned to be deprecated in favor of the ManagementPolicies\nfield in a future release. Currently, both could be set independently and\nnon-default values would be honored if the feature flag is enabled.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "type": "string",
          "default": "Delete",
          "enum": [
            "Orphan",
            "Delete"
          ]
        },
        "forProvider": {
          "type": "object",
          "properties": {
            "accessKeysAuthenticationEnabled": {
              "description": "Whether access key authentication is enabled? Defaults to true. active_directory_authentication_enabled must be set to true to disable access key authentication.",
              "type": "boolean"
            },
            "capacity": {
              "description": "The size of the Redis cache to deploy. Valid values for a SKU family of C (Basic/Standard) are 0, 1, 2, 3, 4, 5, 6, and for P (Premium) family are 1, 2, 3, 4, 5.",
              "type": "number"
            },
            "family": {
              "description": "The SKU family/pricing group to use. Valid values are C (for Basic/Standard SKU family) and P (for Premium)",
              "type": "string"
            },
            "identity": {
              "description": "An identity block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "identityIds": {
                    "description": "A list of User Assigned Managed Identity IDs to be assigned to this Redis Cluster.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "x-kubernetes-list-type": "set"
                  },
                  "type": {
                    "description": "Specifies the type of Managed Service Identity that should be configured on this Redis Cluster. Possible values are SystemAssigned, UserAssigned, SystemAssigned, UserAssigned (to enable both).",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "location": {
              "description": "The location of the resource group. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "minimumTlsVersion": {
              "description": "The minimum TLS version. Possible values are 1.0, 1.1 and 1.2. Defaults to 1.0.",
              "type": "string"
            },
            "nonSslPortEnabled": {
              "description": "Enable the non-SSL port (6379) - disabled by default.",
              "type": "boolean"
            },
            "patchSchedule": {
              "description": "A list of patch_schedule blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "dayOfWeek": {
                    "description": "the Weekday name - possible values include Monday, Tuesday, Wednesday etc.",
                    "type": "string"
                  },
                  "maintenanceWindow": {
                    "description": "The ISO 8601 timespan which specifies the amount of time the Redis Cache can be updated. Defaults to PT5H.",
                    "type": "string"
                  },
                  "startHourUtc": {
                    "description": "the Start Hour for maintenance in UTC - possible values range from 0 - 23.",
                    "type": "number"
                  }
                },
                "additionalProperties": false
              }
            },
            "privateStaticIpAddress": {
              "description": "The Static IP Address to assign to the Redis Cache when hosted inside the Virtual Network. This argument implies the use of subnet_id. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "publicNetworkAccessEnabled": {
              "description": "Whether or not public network access is allowed for this Redis Cache. true means this resource could be accessed by both public and private endpoint. false means only private endpoint access is allowed. Defaults to true.",
              "type": "boolean"
            },
            "redisConfiguration": {
              "description": "A redis_configuration block as defined below - with some limitations by SKU - defaults/details are shown below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "activeDirectoryAuthenticationEnabled": {
                    "description": "Enable Microsoft Entra (AAD) authentication. Defaults to false.",
                    "type": "boolean"
                  },
                  "aofBackupEnabled": {
                    "description": "Enable or disable AOF persistence for this Redis Cache. Defaults to false.",
                    "type": "boolean"
                  },
                  "aofStorageConnectionString0SecretRef": {
                    "description": "First Storage Account connection string for AOF persistence.",
                    "type": "object",
                    "required": [
                      "key",
                      "name",
                      "namespace"
                    ],
                    "properties": {
                      "key": {
                        "description": "The key to select.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the secret.",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace of the secret.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "aofStorageConnectionString1SecretRef": {
                    "description": "Second Storage Account connection string for AOF persistence.",
                    "type": "object",
                    "required": [
                      "key",
                      "name",
                      "namespace"
                    ],
                    "properties": {
                      "key": {
                        "description": "The key to select.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the secret.",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace of the secret.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "authenticationEnabled": {
                    "description": "If set to false, the Redis instance will be accessible without authentication. Defaults to true.",
                    "type": "boolean"
                  },
                  "dataPersistenceAuthenticationMethod": {
                    "description": "Preferred auth method to communicate to storage account used for data persistence. Possible values are SAS and ManagedIdentity.",
                    "type": "string"
                  },
                  "maxfragmentationmemoryReserved": {
                    "description": "Value in megabytes reserved to accommodate for memory fragmentation. Defaults are shown below.",
                    "type": "number"
                  },
                  "maxmemoryDelta": {
                    "description": "The max-memory delta for this Redis instance. Defaults are shown below.",
                    "type": "number"
                  },
                  "maxmemoryPolicy": {
                    "description": "How Redis will select what to remove when maxmemory is reached. Defaults to volatile-lru.",
                    "type": "string"
                  },
                  "maxmemoryReserved": {
                    "description": "Value in megabytes reserved for non-cache usage e.g. failover. Defaults are shown below.",
                    "type": "number"
                  },
                  "notifyKeyspaceEvents": {
                    "description": "Keyspace notifications allows clients to subscribe to Pub/Sub channels in order to receive events affecting the Redis data set in some way. Reference",
                    "type": "string"
                  },
                  "rdbBackupEnabled": {
                    "description": "Is Backup Enabled? Only supported on Premium SKUs. Defaults to false.",
                    "type": "boolean"
                  },
                  "rdbBackupFrequency": {
                    "description": "The Backup Frequency in Minutes. Only supported on Premium SKUs. Possible values are: 15, 30, 60, 360, 720 and 1440.",
                    "type": "number"
                  },
                  "rdbBackupMaxSnapshotCount": {
                    "description": "The maximum number of snapshots to create as a backup. Only supported for Premium SKUs.",
                    "type": "number"
                  },
                  "rdbStorageConnectionStringSecretRef": {
                    "description": "The Connection String to the Storage Account. Only supported for Premium SKUs. In the format: DefaultEndpointsProtocol=https;BlobEndpoint=${azurerm_storage_account.example.primary_blob_endpoint};AccountName=${azurerm_storage_account.example.name};AccountKey=${azurerm_storage_account.example.primary_access_key}.",
                    "type": "object",
                    "required": [
                      "key",
                      "name",
                      "namespace"
                    ],
                    "properties": {
                      "key": {
                        "description": "The key to select.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the secret.",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace of the secret.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "storageAccountSubscriptionId": {
                    "description": "The ID of the Subscription containing the Storage Account.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "redisVersion": {
              "description": "Redis version. Only major version needed. Possible values are 4 and 6. Defaults to 6.",
              "type": "string"
            },
            "replicasPerMaster": {
              "description": "Amount of replicas to create per master for this Redis Cache.",
              "type": "number"
            },
            "replicasPerPrimary": {
              "description": "Amount of replicas to create per primary for this Redis Cache. If both replicas_per_primary and replicas_per_master are set, they need to be equal.",
              "type": "number"
            },
            "resourceGroupName": {
              "description": "The name of the resource group in which to create the Redis instance. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "resourceGroupNameRef": {
              "description": "Reference to a ResourceGroup in azure to populate resourceGroupName.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "resourceGroupNameSelector": {
              "description": "Selector for a ResourceGroup in azure to populate resourceGroupName.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "shardCount": {
              "description": "Only available when using the Premium SKU The number of Shards to create on the Redis Cluster.",
              "type": "number"
            },
            "skuName": {
              "description": "The SKU of Redis to use. Possible values are Basic, Standard and Premium.",
              "type": "string"
            },
            "subnetId": {
              "description": "Only available when using the Premium SKU The ID of the Subnet within which the Redis Cache should be deployed. This Subnet must only contain Azure Cache for Redis instances without any other type of resources. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "subnetIdRef": {
              "description": "Reference to a Subnet in network to populate subnetId.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "subnetIdSelector": {
              "description": "Selector for a Subnet in network to populate subnetId.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "tags": {
              "description": "A mapping of tags to assign to the resource.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "tenantSettings": {
              "description": "A mapping of tenant settings to assign to the resource.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "zones": {
              "description": "Specifies a list of Availability Zones in which this Redis Cache should be located. Changing this forces a new Redis Cache to be created.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-kubernetes-list-type": "set"
            }
          },
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored\nunless the Management Policies feature flag is disabled.\nInitProvider holds the same fields as ForProvider, with the exception\nof Identifier and other resource reference fields. The fields that are\nin InitProvider are merged into ForProvider when the resource is created.\nThe same fields are also added to the terraform ignore_changes hook, to\navoid updating them after creation. This is useful for fields that are\nrequired on creation, but we do not desire to update them after creation,\nfor example because of an external controller is managing them, like an\nautoscaler.",
          "type": "object",
          "properties": {
            "accessKeysAuthenticationEnabled": {
              "description": "Whether access key authentication is enabled? Defaults to true. active_directory_authentication_enabled must be set to true to disable access key authentication.",
              "type": "boolean"
            },
            "capacity": {
              "description": "The size of the Redis cache to deploy. Valid values for a SKU family of C (Basic/Standard) are 0, 1, 2, 3, 4, 5, 6, and for P (Premium) family are 1, 2, 3, 4, 5.",
              "type": "number"
            },
            "family": {
              "description": "The SKU family/pricing group to use. Valid values are C (for Basic/Standard SKU family) and P (for Premium)",
              "type": "string"
            },
            "identity": {
              "description": "An identity block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "identityIds": {
                    "description": "A list of User Assigned Managed Identity IDs to be assigned to this Redis Cluster.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "x-kubernetes-list-type": "set"
                  },
                  "type": {
                    "description": "Specifies the type of Managed Service Identity that should be configured on this Redis Cluster. Possible values are SystemAssigned, UserAssigned, SystemAssigned, UserAssigned (to enable both).",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "location": {
              "description": "The location of the resource group. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "minimumTlsVersion": {
              "description": "The minimum TLS version. Possible values are 1.0, 1.1 and 1.2. Defaults to 1.0.",
              "type": "string"
            },
            "nonSslPortEnabled": {
              "description": "Enable the non-SSL port (6379) - disabled by default.",
              "type": "boolean"
            },
            "patchSchedule": {
              "description": "A list of patch_schedule blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "dayOfWeek": {
                    "description": "the Weekday name - possible values include Monday, Tuesday, Wednesday etc.",
                    "type": "string"
                  },
                  "maintenanceWindow": {
                    "description": "The ISO 8601 timespan which specifies the amount of time the Redis Cache can be updated. Defaults to PT5H.",
                    "type": "string"
                  },
                  "startHourUtc": {
                    "description": "the Start Hour for maintenance in UTC - possible values range from 0 - 23.",
                    "type": "number"
                  }
                },
                "additionalProperties": false
              }
            },
            "privateStaticIpAddress": {
              "description": "The Static IP Address to assign to the Redis Cache when hosted inside the Virtual Network. This argument implies the use of subnet_id. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "publicNetworkAccessEnabled": {
              "description": "Whether or not public network access is allowed for this Redis Cache. true means this resource could be accessed by both public and private endpoint. false means only private endpoint access is allowed. Defaults to true.",
              "type": "boolean"
            },
            "redisConfiguration": {
              "description": "A redis_configuration block as defined below - with some limitations by SKU - defaults/details are shown below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "activeDirectoryAuthenticationEnabled": {
                    "description": "Enable Microsoft Entra (AAD) authentication. Defaults to false.",
                    "type": "boolean"
                  },
                  "aofBackupEnabled": {
                    "description": "Enable or disable AOF persistence for this Redis Cache. Defaults to false.",
                    "type": "boolean"
                  },
                  "aofStorageConnectionString0SecretRef": {
                    "description": "First Storage Account connection string for AOF persistence.",
                    "type": "object",
                    "required": [
                      "key",
                      "name",
                      "namespace"
                    ],
                    "properties": {
                      "key": {
                        "description": "The key to select.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the secret.",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace of the secret.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "aofStorageConnectionString1SecretRef": {
                    "description": "Second Storage Account connection string for AOF persistence.",
                    "type": "object",
                    "required": [
                      "key",
                      "name",
                      "namespace"
                    ],
                    "properties": {
                      "key": {
                        "description": "The key to select.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the secret.",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace of the secret.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "authenticationEnabled": {
                    "description": "If set to false, the Redis instance will be accessible without authentication. Defaults to true.",
                    "type": "boolean"
                  },
                  "dataPersistenceAuthenticationMethod": {
                    "description": "Preferred auth method to communicate to storage account used for data persistence. Possible values are SAS and ManagedIdentity.",
                    "type": "string"
                  },
                  "maxfragmentationmemoryReserved": {
                    "description": "Value in megabytes reserved to accommodate for memory fragmentation. Defaults are shown below.",
                    "type": "number"
                  },
                  "maxmemoryDelta": {
                    "description": "The max-memory delta for this Redis instance. Defaults are shown below.",
                    "type": "number"
                  },
                  "maxmemoryPolicy": {
                    "description": "How Redis will select what to remove when maxmemory is reached. Defaults to volatile-lru.",
                    "type": "string"
                  },
                  "maxmemoryReserved": {
                    "description": "Value in megabytes reserved for non-cache usage e.g. failover. Defaults are shown below.",
                    "type": "number"
                  },
                  "notifyKeyspaceEvents": {
                    "description": "Keyspace notifications allows clients to subscribe to Pub/Sub channels in order to receive events affecting the Redis data set in some way. Reference",
                    "type": "string"
                  },
                  "rdbBackupEnabled": {
                    "description": "Is Backup Enabled? Only supported on Premium SKUs. Defaults to false.",
                    "type": "boolean"
                  },
                  "rdbBackupFrequency": {
                    "description": "The Backup Frequency in Minutes. Only supported on Premium SKUs. Possible values are: 15, 30, 60, 360, 720 and 1440.",
                    "type": "number"
                  },
                  "rdbBackupMaxSnapshotCount": {
                    "description": "The maximum number of snapshots to create as a backup. Only supported for Premium SKUs.",
                    "type": "number"
                  },
                  "rdbStorageConnectionStringSecretRef": {
                    "description": "The Connection String to the Storage Account. Only supported for Premium SKUs. In the format: DefaultEndpointsProtocol=https;BlobEndpoint=${azurerm_storage_account.example.primary_blob_endpoint};AccountName=${azurerm_storage_account.example.name};AccountKey=${azurerm_storage_account.example.primary_access_key}.",
                    "type": "object",
                    "required": [
                      "key",
                      "name",
                      "namespace"
                    ],
                    "properties": {
                      "key": {
                        "description": "The key to select.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the secret.",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace of the secret.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "storageAccountSubscriptionId": {
                    "description": "The ID of the Subscription containing the Storage Account.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "redisVersion": {
              "description": "Redis version. Only major version needed. Possible values are 4 and 6. Defaults to 6.",
              "type": "string"
            },
            "replicasPerMaster": {
              "description": "Amount of replicas to create per master for this Redis Cache.",
              "type": "number"
            },
            "replicasPerPrimary": {
              "description": "Amount of replicas to create per primary for this Redis Cache. If both replicas_per_primary and replicas_per_master are set, they need to be equal.",
              "type": "number"
            },
            "shardCount": {
              "description": "Only available when using the Premium SKU The number of Shards to create on the Redis Cluster.",
              "type": "number"
            },
            "skuName": {
              "description": "The SKU of Redis to use. Possible values are Basic, Standard and Premium.",
              "type": "string"
            },
            "subnetId": {
              "description": "Only available when using the Premium SKU The ID of the Subnet within which the Redis Cache should be deployed. This Subnet must only contain Azure Cache for Redis instances without any other type of resources. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "subnetIdRef": {
              "description": "Reference to a Subnet in network to populate subnetId.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "subnetIdSelector": {
              "description": "Selector for a Subnet in network to populate subnetId.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "tags": {
              "description": "A mapping of tags to assign to the resource.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "tenantSettings": {
              "description": "A mapping of tenant settings to assign to the resource.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "zones": {
              "description": "Specifies a list of Availability Zones in which this Redis Cache should be located. Changing this forces a new Redis Cache to be created.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-kubernetes-list-type": "set"
            }
          },
          "additionalProperties": false
        },
        "managementPolicies": {
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out\nthrough a Crossplane feature flag.\nManagementPolicies specify the array of actions Crossplane is allowed to\ntake on the managed and external resources.\nThis field is planned to replace the DeletionPolicy field in a future\nrelease. Currently, both could be set independently and non-default\nvalues would be honored if the feature flag is enabled. If both are\ncustom, the DeletionPolicy field will be ignored.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223\nand this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers\ncan take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to\ncreate, observe, update, and delete this managed resource should be\nconfigured.",
          "type": "object",
          "default": {
            "name": "default"
          },
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "type": "object",
              "properties": {
                "resolution": {
                  "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                  "type": "string",
                  "default": "Required",
                  "enum": [
                    "Required",
                    "Optional"
                  ]
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                  "type": "string",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a\nSecret to which any connection details for this managed resource should\nbe written. Connection details frequently include the endpoint, username,\nand password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name",
            "namespace"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false,
      "x-kubernetes-validations": [
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.capacity) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.capacity))",
          "message": "spec.forProvider.capacity is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.family) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.family))",
          "message": "spec.forProvider.family is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.location))",
          "message": "spec.forProvider.location is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.redisVersion) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.redisVersion))",
          "message": "spec.forProvider.redisVersion is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.skuName) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.skuName))",
          "message": "spec.forProvider.skuName is a required parameter"
        }
      ]
    },
    "status": {
      "description": "RedisCacheStatus defines the observed state of RedisCache.",
      "type": "object",
      "properties": {
        "atProvider": {
          "type": "object",
          "properties": {
            "accessKeysAuthenticationEnabled": {
              "description": "Whether access key authentication is enabled? Defaults to true. active_directory_authentication_enabled must be set to true to disable access key authentication.",
              "type": "boolean"
            },
            "capacity": {
              "description": "The size of the Redis cache to deploy. Valid values for a SKU family of C (Basic/Standard) are 0, 1, 2, 3, 4, 5, 6, and for P (Premium) family are 1, 2, 3, 4, 5.",
              "type": "number"
            },
            "family": {
              "description": "The SKU family/pricing group to use. Valid values are C (for Basic/Standard SKU family) and P (for Premium)",
              "type": "string"
            },
            "hostname": {
              "description": "The Hostname of the Redis Instance",
              "type": "string"
            },
            "id": {
              "description": "The Route ID.",
              "type": "string"
            },
            "identity": {
              "description": "An identity block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "identityIds": {
                    "description": "A list of User Assigned Managed Identity IDs to be assigned to this Redis Cluster.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "x-kubernetes-list-type": "set"
                  },
                  "principalId": {
                    "description": "The Route ID.",
                    "type": "string"
                  },
                  "tenantId": {
                    "description": "The Route ID.",
                    "type": "string"
                  },
                  "type": {
                    "description": "Specifies the type of Managed Service Identity that should be configured on this Redis Cluster. Possible values are SystemAssigned, UserAssigned, SystemAssigned, UserAssigned (to enable both).",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "location": {
              "description": "The location of the resource group. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "minimumTlsVersion": {
              "description": "The minimum TLS version. Possible values are 1.0, 1.1 and 1.2. Defaults to 1.0.",
              "type": "string"
            },
            "nonSslPortEnabled": {
              "description": "Enable the non-SSL port (6379) - disabled by default.",
              "type": "boolean"
            },
            "patchSchedule": {
              "description": "A list of patch_schedule blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "dayOfWeek": {
                    "description": "the Weekday name - possible values include Monday, Tuesday, Wednesday etc.",
                    "type": "string"
                  },
                  "maintenanceWindow": {
                    "description": "The ISO 8601 timespan which specifies the amount of time the Redis Cache can be updated. Defaults to PT5H.",
                    "type": "string"
                  },
                  "startHourUtc": {
                    "description": "the Start Hour for maintenance in UTC - possible values range from 0 - 23.",
                    "type": "number"
                  }
                },
                "additionalProperties": false
              }
            },
            "port": {
              "description": "The non-SSL Port of the Redis Instance",
              "type": "number"
            },
            "privateStaticIpAddress": {
              "description": "The Static IP Address to assign to the Redis Cache when hosted inside the Virtual Network. This argument implies the use of subnet_id. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "publicNetworkAccessEnabled": {
              "description": "Whether or not public network access is allowed for this Redis Cache. true means this resource could be accessed by both public and private endpoint. false means only private endpoint access is allowed. Defaults to true.",
              "type": "boolean"
            },
            "redisConfiguration": {
              "description": "A redis_configuration block as defined below - with some limitations by SKU - defaults/details are shown below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "activeDirectoryAuthenticationEnabled": {
                    "description": "Enable Microsoft Entra (AAD) authentication. Defaults to false.",
                    "type": "boolean"
                  },
                  "aofBackupEnabled": {
                    "description": "Enable or disable AOF persistence for this Redis Cache. Defaults to false.",
                    "type": "boolean"
                  },
                  "authenticationEnabled": {
                    "description": "If set to false, the Redis instance will be accessible without authentication. Defaults to true.",
                    "type": "boolean"
                  },
                  "dataPersistenceAuthenticationMethod": {
                    "description": "Preferred auth method to communicate to storage account used for data persistence. Possible values are SAS and ManagedIdentity.",
                    "type": "string"
                  },
                  "maxclients": {
                    "description": "Returns the max number of connected clients at the same time.",
                    "type": "number"
                  },
                  "maxfragmentationmemoryReserved": {
                    "description": "Value in megabytes reserved to accommodate for memory fragmentation. Defaults are shown below.",
                    "type": "number"
                  },
                  "maxmemoryDelta": {
                    "description": "The max-memory delta for this Redis instance. Defaults are shown below.",
                    "type": "number"
                  },
                  "maxmemoryPolicy": {
                    "description": "How Redis will select what to remove when maxmemory is reached. Defaults to volatile-lru.",
                    "type": "string"
                  },
                  "maxmemoryReserved": {
                    "description": "Value in megabytes reserved for non-cache usage e.g. failover. Defaults are shown below.",
                    "type": "number"
                  },
                  "notifyKeyspaceEvents": {
                    "description": "Keyspace notifications allows clients to subscribe to Pub/Sub channels in order to receive events affecting the Redis data set in some way. Reference",
                    "type": "string"
                  },
                  "rdbBackupEnabled": {
                    "description": "Is Backup Enabled? Only supported on Premium SKUs. Defaults to false.",
                    "type": "boolean"
                  },
                  "rdbBackupFrequency": {
                    "description": "The Backup Frequency in Minutes. Only supported on Premium SKUs. Possible values are: 15, 30, 60, 360, 720 and 1440.",
                    "type": "number"
                  },
                  "rdbBackupMaxSnapshotCount": {
                    "description": "The maximum number of snapshots to create as a backup. Only supported for Premium SKUs.",
                    "type": "number"
                  },
                  "storageAccountSubscriptionId": {
                    "description": "The ID of the Subscription containing the Storage Account.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "redisVersion": {
              "description": "Redis version. Only major version needed. Possible values are 4 and 6. Defaults to 6.",
              "type": "string"
            },
            "replicasPerMaster": {
              "description": "Amount of replicas to create per master for this Redis Cache.",
              "type": "number"
            },
            "replicasPerPrimary": {
              "description": "Amount of replicas to create per primary for this Redis Cache. If both replicas_per_primary and replicas_per_master are set, they need to be equal.",
              "type": "number"
            },
            "resourceGroupName": {
              "description": "The name of the resource group in which to create the Redis instance. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "shardCount": {
              "description": "Only available when using the Premium SKU The number of Shards to create on the Redis Cluster.",
              "type": "number"
            },
            "skuName": {
              "description": "The SKU of Redis to use. Possible values are Basic, Standard and Premium.",
              "type": "string"
            },
            "sslPort": {
              "description": "The SSL Port of the Redis Instance",
              "type": "number"
            },
            "subnetId": {
              "description": "Only available when using the Premium SKU The ID of the Subnet within which the Redis Cache should be deployed. This Subnet must only contain Azure Cache for Redis instances without any other type of resources. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "tags": {
              "description": "A mapping of tags to assign to the resource.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "tenantSettings": {
              "description": "A mapping of tenant settings to assign to the resource.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "zones": {
              "description": "Specifies a list of Availability Zones in which this Redis Cache should be located. Changing this forces a new Redis Cache to be created.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-kubernetes-list-type": "set"
            }
          },
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "type": "array",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one\nstatus to another.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from\none status to another, if any.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to\na resource at any point in time.",
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest metadata.generation\nwhich resulted in either a ready state, or stalled due to error\nit can not recover from without human intervention.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    }
  }
}
