{
  "description": "Keys is the Schema for the Keyss API. Configures Managed Keys in Vault",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "KeysSpec defines the desired state of Keys",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "deletionPolicy": {
          "description": "DeletionPolicy specifies what will happen to the underlying external\nwhen this managed resource is deleted - either \"Delete\" or \"Orphan\" the\nexternal resource.\nThis field is planned to be deprecated in favor of the ManagementPolicies\nfield in a future release. Currently, both could be set independently and\nnon-default values would be honored if the feature flag is enabled.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "type": "string",
          "default": "Delete",
          "enum": [
            "Orphan",
            "Delete"
          ]
        },
        "forProvider": {
          "type": "object",
          "properties": {
            "aws": {
              "description": "Configuration block for AWS Managed Keys",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "accessKey": {
                    "description": "The AWS access key to use.\nThe AWS access key to use",
                    "type": "string"
                  },
                  "allowGenerateKey": {
                    "description": "If no existing key can be found in\nthe referenced backend, instructs Vault to generate a key within the backend.\nIf no existing key can be found in the referenced backend, instructs Vault to generate a key within the backend",
                    "type": "boolean"
                  },
                  "allowReplaceKey": {
                    "description": "Controls the ability for Vault to replace through\ngeneration or importing a key into the configured backend even\nif a key is present, if set to false those operations are forbidden\nif a key exists.\nControls the ability for Vault to replace through generation or importing a key into the configured backend even if a key is present, if set to false those operations are forbidden if a key exists.",
                    "type": "boolean"
                  },
                  "allowStoreKey": {
                    "description": "Controls the ability for Vault to import a key to the\nconfigured backend, if false, those operations will be forbidden.\nControls the ability for Vault to import a key to the configured backend, if 'false', those operations will be forbidden",
                    "type": "boolean"
                  },
                  "anyMount": {
                    "description": "If true, allows usage from any mount point within the\nnamespace.\nAllow usage from any mount point within the namespace if 'true'",
                    "type": "boolean"
                  },
                  "curve": {
                    "description": "The curve to use for an ECDSA key. Used when key_type\nis ECDSA. Required if allow_generate_key is true.\nThe curve to use for an ECDSA key. Used when key_type is 'ECDSA'. Required if 'allow_generate_key' is true",
                    "type": "string"
                  },
                  "endpoint": {
                    "description": "Used to specify a custom AWS endpoint.\nUsed to specify a custom AWS endpoint",
                    "type": "string"
                  },
                  "keyBits": {
                    "description": "The size in bits for an RSA key.\nThe size in bits for an RSA key. This field is required when 'key_type' is 'RSA'",
                    "type": "string"
                  },
                  "keyType": {
                    "description": "The type of key to use.\nThe type of key to use",
                    "type": "string"
                  },
                  "kmsKey": {
                    "description": "An identifier for the key.\nAn identifier for the key",
                    "type": "string"
                  },
                  "name": {
                    "description": "A unique lowercase name that serves as identifying the key.\nA unique lowercase name that serves as identifying the key",
                    "type": "string"
                  },
                  "region": {
                    "description": "The AWS region where the keys are stored (or will be stored).\nThe AWS region where the keys are stored (or will be stored)",
                    "type": "string"
                  },
                  "secretKey": {
                    "description": "The AWS access key to use.\nThe AWS secret key to use",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "azure": {
              "description": "Configuration block for Azure Managed Keys",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "allowGenerateKey": {
                    "description": "If no existing key can be found in\nthe referenced backend, instructs Vault to generate a key within the backend.\nIf no existing key can be found in the referenced backend, instructs Vault to generate a key within the backend",
                    "type": "boolean"
                  },
                  "allowReplaceKey": {
                    "description": "Controls the ability for Vault to replace through\ngeneration or importing a key into the configured backend even\nif a key is present, if set to false those operations are forbidden\nif a key exists.\nControls the ability for Vault to replace through generation or importing a key into the configured backend even if a key is present, if set to false those operations are forbidden if a key exists.",
                    "type": "boolean"
                  },
                  "allowStoreKey": {
                    "description": "Controls the ability for Vault to import a key to the\nconfigured backend, if false, those operations will be forbidden.\nControls the ability for Vault to import a key to the configured backend, if 'false', those operations will be forbidden",
                    "type": "boolean"
                  },
                  "anyMount": {
                    "description": "If true, allows usage from any mount point within the\nnamespace.\nAllow usage from any mount point within the namespace if 'true'",
                    "type": "boolean"
                  },
                  "clientId": {
                    "description": "The client id for credentials to query the Azure APIs.\nThe client id for credentials to query the Azure APIs",
                    "type": "string"
                  },
                  "clientSecret": {
                    "description": "The client secret for credentials to query the Azure APIs.\nThe client secret for credentials to query the Azure APIs",
                    "type": "string"
                  },
                  "environment": {
                    "description": "The Azure Cloud environment API endpoints to use.\nThe Azure Cloud environment API endpoints to use",
                    "type": "string"
                  },
                  "keyBits": {
                    "description": "The size in bits for an RSA key.\nThe size in bits for an RSA key. This field is required when 'key_type' is 'RSA' or when 'allow_generate_key' is true",
                    "type": "string"
                  },
                  "keyName": {
                    "description": "The Key Vault key to use for encryption and decryption.\nThe Key Vault key to use for encryption and decryption",
                    "type": "string"
                  },
                  "keyType": {
                    "description": "The type of key to use.\nThe type of key to use",
                    "type": "string"
                  },
                  "name": {
                    "description": "A unique lowercase name that serves as identifying the key.\nA unique lowercase name that serves as identifying the key",
                    "type": "string"
                  },
                  "resource": {
                    "description": "The Azure Key Vault resource's DNS Suffix to connect to.\nThe Azure Key Vault resource's DNS Suffix to connect to",
                    "type": "string"
                  },
                  "tenantId": {
                    "description": "The tenant id for the Azure Active Directory organization.\nThe tenant id for the Azure Active Directory organization",
                    "type": "string"
                  },
                  "vaultName": {
                    "description": "The Key Vault vault to use for encryption and decryption.\nThe Key Vault vault to use the encryption keys for encryption and decryption",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "namespace": {
              "description": "The namespace to provision the resource in.\nThe value should not contain leading or trailing forward slashes.\nThe namespace is always relative to the provider's configured namespace.\nAvailable only for Vault Enterprise.\nTarget namespace. (requires Enterprise)",
              "type": "string"
            },
            "pkcs": {
              "description": "Configuration block for PKCS Managed Keys",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "allowGenerateKey": {
                    "description": "If no existing key can be found in\nthe referenced backend, instructs Vault to generate a key within the backend.\nIf no existing key can be found in the referenced backend, instructs Vault to generate a key within the backend",
                    "type": "boolean"
                  },
                  "allowReplaceKey": {
                    "description": "Controls the ability for Vault to replace through\ngeneration or importing a key into the configured backend even\nif a key is present, if set to false those operations are forbidden\nif a key exists.\nControls the ability for Vault to replace through generation or importing a key into the configured backend even if a key is present, if set to false those operations are forbidden if a key exists.",
                    "type": "boolean"
                  },
                  "allowStoreKey": {
                    "description": "Controls the ability for Vault to import a key to the\nconfigured backend, if false, those operations will be forbidden.\nControls the ability for Vault to import a key to the configured backend, if 'false', those operations will be forbidden",
                    "type": "boolean"
                  },
                  "anyMount": {
                    "description": "If true, allows usage from any mount point within the\nnamespace.\nAllow usage from any mount point within the namespace if 'true'",
                    "type": "boolean"
                  },
                  "curve": {
                    "description": "The curve to use for an ECDSA key. Used when key_type\nis ECDSA. Required if allow_generate_key is true.\nSupplies the curve value when using the 'CKM_ECDSA' mechanism. Required if 'allow_generate_key' is true",
                    "type": "string"
                  },
                  "forceRwSession": {
                    "description": "Force all operations to open up a read-write session to\nthe HSM.\nForce all operations to open up a read-write session to the HSM",
                    "type": "string"
                  },
                  "keyBits": {
                    "description": "The size in bits for an RSA key.\nSupplies the size in bits of the key when using 'CKM_RSA_PKCS_PSS', 'CKM_RSA_PKCS_OAEP' or 'CKM_RSA_PKCS' as a value for 'mechanism'. Required if 'allow_generate_key' is true",
                    "type": "string"
                  },
                  "keyId": {
                    "description": "The id of a PKCS#11 key to use.\nThe id of a PKCS#11 key to use",
                    "type": "string"
                  },
                  "keyLabel": {
                    "description": "The label of the key to use.\nThe label of the key to use",
                    "type": "string"
                  },
                  "library": {
                    "description": "The name of the kms_library stanza to use from Vault's config\nto lookup the local library path.\nThe name of the kms_library stanza to use from Vault's config to lookup the local library path",
                    "type": "string"
                  },
                  "mechanism": {
                    "description": "The encryption/decryption mechanism to use, specified as a\nhexadecimal (prefixed by 0x) string.\nThe encryption/decryption mechanism to use, specified as a hexadecimal (prefixed by 0x) string.",
                    "type": "string"
                  },
                  "name": {
                    "description": "A unique lowercase name that serves as identifying the key.\nA unique lowercase name that serves as identifying the key",
                    "type": "string"
                  },
                  "pin": {
                    "description": "The PIN for login.\nThe PIN for login",
                    "type": "string"
                  },
                  "slot": {
                    "description": "The slot number to use, specified as a string in a decimal format\n(e.g. 2305843009213693953).\nThe slot number to use, specified as a string in a decimal format (e.g. '2305843009213693953')",
                    "type": "string"
                  },
                  "tokenLabel": {
                    "description": "The slot token label to use.\nThe slot token label to use",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored\nunless the Management Policies feature flag is disabled.\nInitProvider holds the same fields as ForProvider, with the exception\nof Identifier and other resource reference fields. The fields that are\nin InitProvider are merged into ForProvider when the resource is created.\nThe same fields are also added to the terraform ignore_changes hook, to\navoid updating them after creation. This is useful for fields that are\nrequired on creation, but we do not desire to update them after creation,\nfor example because of an external controller is managing them, like an\nautoscaler.",
          "type": "object",
          "properties": {
            "aws": {
              "description": "Configuration block for AWS Managed Keys",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "accessKey": {
                    "description": "The AWS access key to use.\nThe AWS access key to use",
                    "type": "string"
                  },
                  "allowGenerateKey": {
                    "description": "If no existing key can be found in\nthe referenced backend, instructs Vault to generate a key within the backend.\nIf no existing key can be found in the referenced backend, instructs Vault to generate a key within the backend",
                    "type": "boolean"
                  },
                  "allowReplaceKey": {
                    "description": "Controls the ability for Vault to replace through\ngeneration or importing a key into the configured backend even\nif a key is present, if set to false those operations are forbidden\nif a key exists.\nControls the ability for Vault to replace through generation or importing a key into the configured backend even if a key is present, if set to false those operations are forbidden if a key exists.",
                    "type": "boolean"
                  },
                  "allowStoreKey": {
                    "description": "Controls the ability for Vault to import a key to the\nconfigured backend, if false, those operations will be forbidden.\nControls the ability for Vault to import a key to the configured backend, if 'false', those operations will be forbidden",
                    "type": "boolean"
                  },
                  "anyMount": {
                    "description": "If true, allows usage from any mount point within the\nnamespace.\nAllow usage from any mount point within the namespace if 'true'",
                    "type": "boolean"
                  },
                  "curve": {
                    "description": "The curve to use for an ECDSA key. Used when key_type\nis ECDSA. Required if allow_generate_key is true.\nThe curve to use for an ECDSA key. Used when key_type is 'ECDSA'. Required if 'allow_generate_key' is true",
                    "type": "string"
                  },
                  "endpoint": {
                    "description": "Used to specify a custom AWS endpoint.\nUsed to specify a custom AWS endpoint",
                    "type": "string"
                  },
                  "keyBits": {
                    "description": "The size in bits for an RSA key.\nThe size in bits for an RSA key. This field is required when 'key_type' is 'RSA'",
                    "type": "string"
                  },
                  "keyType": {
                    "description": "The type of key to use.\nThe type of key to use",
                    "type": "string"
                  },
                  "kmsKey": {
                    "description": "An identifier for the key.\nAn identifier for the key",
                    "type": "string"
                  },
                  "name": {
                    "description": "A unique lowercase name that serves as identifying the key.\nA unique lowercase name that serves as identifying the key",
                    "type": "string"
                  },
                  "region": {
                    "description": "The AWS region where the keys are stored (or will be stored).\nThe AWS region where the keys are stored (or will be stored)",
                    "type": "string"
                  },
                  "secretKey": {
                    "description": "The AWS access key to use.\nThe AWS secret key to use",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "azure": {
              "description": "Configuration block for Azure Managed Keys",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "allowGenerateKey": {
                    "description": "If no existing key can be found in\nthe referenced backend, instructs Vault to generate a key within the backend.\nIf no existing key can be found in the referenced backend, instructs Vault to generate a key within the backend",
                    "type": "boolean"
                  },
                  "allowReplaceKey": {
                    "description": "Controls the ability for Vault to replace through\ngeneration or importing a key into the configured backend even\nif a key is present, if set to false those operations are forbidden\nif a key exists.\nControls the ability for Vault to replace through generation or importing a key into the configured backend even if a key is present, if set to false those operations are forbidden if a key exists.",
                    "type": "boolean"
                  },
                  "allowStoreKey": {
                    "description": "Controls the ability for Vault to import a key to the\nconfigured backend, if false, those operations will be forbidden.\nControls the ability for Vault to import a key to the configured backend, if 'false', those operations will be forbidden",
                    "type": "boolean"
                  },
                  "anyMount": {
                    "description": "If true, allows usage from any mount point within the\nnamespace.\nAllow usage from any mount point within the namespace if 'true'",
                    "type": "boolean"
                  },
                  "clientId": {
                    "description": "The client id for credentials to query the Azure APIs.\nThe client id for credentials to query the Azure APIs",
                    "type": "string"
                  },
                  "clientSecret": {
                    "description": "The client secret for credentials to query the Azure APIs.\nThe client secret for credentials to query the Azure APIs",
                    "type": "string"
                  },
                  "environment": {
                    "description": "The Azure Cloud environment API endpoints to use.\nThe Azure Cloud environment API endpoints to use",
                    "type": "string"
                  },
                  "keyBits": {
                    "description": "The size in bits for an RSA key.\nThe size in bits for an RSA key. This field is required when 'key_type' is 'RSA' or when 'allow_generate_key' is true",
                    "type": "string"
                  },
                  "keyName": {
                    "description": "The Key Vault key to use for encryption and decryption.\nThe Key Vault key to use for encryption and decryption",
                    "type": "string"
                  },
                  "keyType": {
                    "description": "The type of key to use.\nThe type of key to use",
                    "type": "string"
                  },
                  "name": {
                    "description": "A unique lowercase name that serves as identifying the key.\nA unique lowercase name that serves as identifying the key",
                    "type": "string"
                  },
                  "resource": {
                    "description": "The Azure Key Vault resource's DNS Suffix to connect to.\nThe Azure Key Vault resource's DNS Suffix to connect to",
                    "type": "string"
                  },
                  "tenantId": {
                    "description": "The tenant id for the Azure Active Directory organization.\nThe tenant id for the Azure Active Directory organization",
                    "type": "string"
                  },
                  "vaultName": {
                    "description": "The Key Vault vault to use for encryption and decryption.\nThe Key Vault vault to use the encryption keys for encryption and decryption",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "namespace": {
              "description": "The namespace to provision the resource in.\nThe value should not contain leading or trailing forward slashes.\nThe namespace is always relative to the provider's configured namespace.\nAvailable only for Vault Enterprise.\nTarget namespace. (requires Enterprise)",
              "type": "string"
            },
            "pkcs": {
              "description": "Configuration block for PKCS Managed Keys",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "allowGenerateKey": {
                    "description": "If no existing key can be found in\nthe referenced backend, instructs Vault to generate a key within the backend.\nIf no existing key can be found in the referenced backend, instructs Vault to generate a key within the backend",
                    "type": "boolean"
                  },
                  "allowReplaceKey": {
                    "description": "Controls the ability for Vault to replace through\ngeneration or importing a key into the configured backend even\nif a key is present, if set to false those operations are forbidden\nif a key exists.\nControls the ability for Vault to replace through generation or importing a key into the configured backend even if a key is present, if set to false those operations are forbidden if a key exists.",
                    "type": "boolean"
                  },
                  "allowStoreKey": {
                    "description": "Controls the ability for Vault to import a key to the\nconfigured backend, if false, those operations will be forbidden.\nControls the ability for Vault to import a key to the configured backend, if 'false', those operations will be forbidden",
                    "type": "boolean"
                  },
                  "anyMount": {
                    "description": "If true, allows usage from any mount point within the\nnamespace.\nAllow usage from any mount point within the namespace if 'true'",
                    "type": "boolean"
                  },
                  "curve": {
                    "description": "The curve to use for an ECDSA key. Used when key_type\nis ECDSA. Required if allow_generate_key is true.\nSupplies the curve value when using the 'CKM_ECDSA' mechanism. Required if 'allow_generate_key' is true",
                    "type": "string"
                  },
                  "forceRwSession": {
                    "description": "Force all operations to open up a read-write session to\nthe HSM.\nForce all operations to open up a read-write session to the HSM",
                    "type": "string"
                  },
                  "keyBits": {
                    "description": "The size in bits for an RSA key.\nSupplies the size in bits of the key when using 'CKM_RSA_PKCS_PSS', 'CKM_RSA_PKCS_OAEP' or 'CKM_RSA_PKCS' as a value for 'mechanism'. Required if 'allow_generate_key' is true",
                    "type": "string"
                  },
                  "keyId": {
                    "description": "The id of a PKCS#11 key to use.\nThe id of a PKCS#11 key to use",
                    "type": "string"
                  },
                  "keyLabel": {
                    "description": "The label of the key to use.\nThe label of the key to use",
                    "type": "string"
                  },
                  "library": {
                    "description": "The name of the kms_library stanza to use from Vault's config\nto lookup the local library path.\nThe name of the kms_library stanza to use from Vault's config to lookup the local library path",
                    "type": "string"
                  },
                  "mechanism": {
                    "description": "The encryption/decryption mechanism to use, specified as a\nhexadecimal (prefixed by 0x) string.\nThe encryption/decryption mechanism to use, specified as a hexadecimal (prefixed by 0x) string.",
                    "type": "string"
                  },
                  "name": {
                    "description": "A unique lowercase name that serves as identifying the key.\nA unique lowercase name that serves as identifying the key",
                    "type": "string"
                  },
                  "pin": {
                    "description": "The PIN for login.\nThe PIN for login",
                    "type": "string"
                  },
                  "slot": {
                    "description": "The slot number to use, specified as a string in a decimal format\n(e.g. 2305843009213693953).\nThe slot number to use, specified as a string in a decimal format (e.g. '2305843009213693953')",
                    "type": "string"
                  },
                  "tokenLabel": {
                    "description": "The slot token label to use.\nThe slot token label to use",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "additionalProperties": false
        },
        "managementPolicies": {
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out\nthrough a Crossplane feature flag.\nManagementPolicies specify the array of actions Crossplane is allowed to\ntake on the managed and external resources.\nThis field is planned to replace the DeletionPolicy field in a future\nrelease. Currently, both could be set independently and non-default\nvalues would be honored if the feature flag is enabled. If both are\ncustom, the DeletionPolicy field will be ignored.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223\nand this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers\ncan take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to\ncreate, observe, update, and delete this managed resource should be\nconfigured.",
          "type": "object",
          "default": {
            "name": "default"
          },
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "type": "object",
              "properties": {
                "resolution": {
                  "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                  "type": "string",
                  "default": "Required",
                  "enum": [
                    "Required",
                    "Optional"
                  ]
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                  "type": "string",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a\nSecret to which any connection details for this managed resource should\nbe written. Connection details frequently include the endpoint, username,\nand password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name",
            "namespace"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "KeysStatus defines the observed state of Keys.",
      "type": "object",
      "properties": {
        "atProvider": {
          "type": "object",
          "properties": {
            "aws": {
              "description": "Configuration block for AWS Managed Keys",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "accessKey": {
                    "description": "The AWS access key to use.\nThe AWS access key to use",
                    "type": "string"
                  },
                  "allowGenerateKey": {
                    "description": "If no existing key can be found in\nthe referenced backend, instructs Vault to generate a key within the backend.\nIf no existing key can be found in the referenced backend, instructs Vault to generate a key within the backend",
                    "type": "boolean"
                  },
                  "allowReplaceKey": {
                    "description": "Controls the ability for Vault to replace through\ngeneration or importing a key into the configured backend even\nif a key is present, if set to false those operations are forbidden\nif a key exists.\nControls the ability for Vault to replace through generation or importing a key into the configured backend even if a key is present, if set to false those operations are forbidden if a key exists.",
                    "type": "boolean"
                  },
                  "allowStoreKey": {
                    "description": "Controls the ability for Vault to import a key to the\nconfigured backend, if false, those operations will be forbidden.\nControls the ability for Vault to import a key to the configured backend, if 'false', those operations will be forbidden",
                    "type": "boolean"
                  },
                  "anyMount": {
                    "description": "If true, allows usage from any mount point within the\nnamespace.\nAllow usage from any mount point within the namespace if 'true'",
                    "type": "boolean"
                  },
                  "curve": {
                    "description": "The curve to use for an ECDSA key. Used when key_type\nis ECDSA. Required if allow_generate_key is true.\nThe curve to use for an ECDSA key. Used when key_type is 'ECDSA'. Required if 'allow_generate_key' is true",
                    "type": "string"
                  },
                  "endpoint": {
                    "description": "Used to specify a custom AWS endpoint.\nUsed to specify a custom AWS endpoint",
                    "type": "string"
                  },
                  "keyBits": {
                    "description": "The size in bits for an RSA key.\nThe size in bits for an RSA key. This field is required when 'key_type' is 'RSA'",
                    "type": "string"
                  },
                  "keyType": {
                    "description": "The type of key to use.\nThe type of key to use",
                    "type": "string"
                  },
                  "kmsKey": {
                    "description": "An identifier for the key.\nAn identifier for the key",
                    "type": "string"
                  },
                  "name": {
                    "description": "A unique lowercase name that serves as identifying the key.\nA unique lowercase name that serves as identifying the key",
                    "type": "string"
                  },
                  "region": {
                    "description": "The AWS region where the keys are stored (or will be stored).\nThe AWS region where the keys are stored (or will be stored)",
                    "type": "string"
                  },
                  "secretKey": {
                    "description": "The AWS access key to use.\nThe AWS secret key to use",
                    "type": "string"
                  },
                  "uuid": {
                    "description": "ID of the managed key read from Vault",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "azure": {
              "description": "Configuration block for Azure Managed Keys",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "allowGenerateKey": {
                    "description": "If no existing key can be found in\nthe referenced backend, instructs Vault to generate a key within the backend.\nIf no existing key can be found in the referenced backend, instructs Vault to generate a key within the backend",
                    "type": "boolean"
                  },
                  "allowReplaceKey": {
                    "description": "Controls the ability for Vault to replace through\ngeneration or importing a key into the configured backend even\nif a key is present, if set to false those operations are forbidden\nif a key exists.\nControls the ability for Vault to replace through generation or importing a key into the configured backend even if a key is present, if set to false those operations are forbidden if a key exists.",
                    "type": "boolean"
                  },
                  "allowStoreKey": {
                    "description": "Controls the ability for Vault to import a key to the\nconfigured backend, if false, those operations will be forbidden.\nControls the ability for Vault to import a key to the configured backend, if 'false', those operations will be forbidden",
                    "type": "boolean"
                  },
                  "anyMount": {
                    "description": "If true, allows usage from any mount point within the\nnamespace.\nAllow usage from any mount point within the namespace if 'true'",
                    "type": "boolean"
                  },
                  "clientId": {
                    "description": "The client id for credentials to query the Azure APIs.\nThe client id for credentials to query the Azure APIs",
                    "type": "string"
                  },
                  "clientSecret": {
                    "description": "The client secret for credentials to query the Azure APIs.\nThe client secret for credentials to query the Azure APIs",
                    "type": "string"
                  },
                  "environment": {
                    "description": "The Azure Cloud environment API endpoints to use.\nThe Azure Cloud environment API endpoints to use",
                    "type": "string"
                  },
                  "keyBits": {
                    "description": "The size in bits for an RSA key.\nThe size in bits for an RSA key. This field is required when 'key_type' is 'RSA' or when 'allow_generate_key' is true",
                    "type": "string"
                  },
                  "keyName": {
                    "description": "The Key Vault key to use for encryption and decryption.\nThe Key Vault key to use for encryption and decryption",
                    "type": "string"
                  },
                  "keyType": {
                    "description": "The type of key to use.\nThe type of key to use",
                    "type": "string"
                  },
                  "name": {
                    "description": "A unique lowercase name that serves as identifying the key.\nA unique lowercase name that serves as identifying the key",
                    "type": "string"
                  },
                  "resource": {
                    "description": "The Azure Key Vault resource's DNS Suffix to connect to.\nThe Azure Key Vault resource's DNS Suffix to connect to",
                    "type": "string"
                  },
                  "tenantId": {
                    "description": "The tenant id for the Azure Active Directory organization.\nThe tenant id for the Azure Active Directory organization",
                    "type": "string"
                  },
                  "uuid": {
                    "description": "ID of the managed key read from Vault",
                    "type": "string"
                  },
                  "vaultName": {
                    "description": "The Key Vault vault to use for encryption and decryption.\nThe Key Vault vault to use the encryption keys for encryption and decryption",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "id": {
              "type": "string"
            },
            "namespace": {
              "description": "The namespace to provision the resource in.\nThe value should not contain leading or trailing forward slashes.\nThe namespace is always relative to the provider's configured namespace.\nAvailable only for Vault Enterprise.\nTarget namespace. (requires Enterprise)",
              "type": "string"
            },
            "pkcs": {
              "description": "Configuration block for PKCS Managed Keys",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "allowGenerateKey": {
                    "description": "If no existing key can be found in\nthe referenced backend, instructs Vault to generate a key within the backend.\nIf no existing key can be found in the referenced backend, instructs Vault to generate a key within the backend",
                    "type": "boolean"
                  },
                  "allowReplaceKey": {
                    "description": "Controls the ability for Vault to replace through\ngeneration or importing a key into the configured backend even\nif a key is present, if set to false those operations are forbidden\nif a key exists.\nControls the ability for Vault to replace through generation or importing a key into the configured backend even if a key is present, if set to false those operations are forbidden if a key exists.",
                    "type": "boolean"
                  },
                  "allowStoreKey": {
                    "description": "Controls the ability for Vault to import a key to the\nconfigured backend, if false, those operations will be forbidden.\nControls the ability for Vault to import a key to the configured backend, if 'false', those operations will be forbidden",
                    "type": "boolean"
                  },
                  "anyMount": {
                    "description": "If true, allows usage from any mount point within the\nnamespace.\nAllow usage from any mount point within the namespace if 'true'",
                    "type": "boolean"
                  },
                  "curve": {
                    "description": "The curve to use for an ECDSA key. Used when key_type\nis ECDSA. Required if allow_generate_key is true.\nSupplies the curve value when using the 'CKM_ECDSA' mechanism. Required if 'allow_generate_key' is true",
                    "type": "string"
                  },
                  "forceRwSession": {
                    "description": "Force all operations to open up a read-write session to\nthe HSM.\nForce all operations to open up a read-write session to the HSM",
                    "type": "string"
                  },
                  "keyBits": {
                    "description": "The size in bits for an RSA key.\nSupplies the size in bits of the key when using 'CKM_RSA_PKCS_PSS', 'CKM_RSA_PKCS_OAEP' or 'CKM_RSA_PKCS' as a value for 'mechanism'. Required if 'allow_generate_key' is true",
                    "type": "string"
                  },
                  "keyId": {
                    "description": "The id of a PKCS#11 key to use.\nThe id of a PKCS#11 key to use",
                    "type": "string"
                  },
                  "keyLabel": {
                    "description": "The label of the key to use.\nThe label of the key to use",
                    "type": "string"
                  },
                  "library": {
                    "description": "The name of the kms_library stanza to use from Vault's config\nto lookup the local library path.\nThe name of the kms_library stanza to use from Vault's config to lookup the local library path",
                    "type": "string"
                  },
                  "mechanism": {
                    "description": "The encryption/decryption mechanism to use, specified as a\nhexadecimal (prefixed by 0x) string.\nThe encryption/decryption mechanism to use, specified as a hexadecimal (prefixed by 0x) string.",
                    "type": "string"
                  },
                  "name": {
                    "description": "A unique lowercase name that serves as identifying the key.\nA unique lowercase name that serves as identifying the key",
                    "type": "string"
                  },
                  "pin": {
                    "description": "The PIN for login.\nThe PIN for login",
                    "type": "string"
                  },
                  "slot": {
                    "description": "The slot number to use, specified as a string in a decimal format\n(e.g. 2305843009213693953).\nThe slot number to use, specified as a string in a decimal format (e.g. '2305843009213693953')",
                    "type": "string"
                  },
                  "tokenLabel": {
                    "description": "The slot token label to use.\nThe slot token label to use",
                    "type": "string"
                  },
                  "uuid": {
                    "description": "ID of the managed key read from Vault",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "type": "array",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one\nstatus to another.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from\none status to another, if any.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to\na resource at any point in time.",
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest metadata.generation\nwhich resulted in either a ready state, or stalled due to error\nit can not recover from without human intervention.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    }
  }
}
