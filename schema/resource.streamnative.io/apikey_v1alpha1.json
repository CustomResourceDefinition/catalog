{
  "description": "APIKey is the Schema for the APIKeys API",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "APIKeySpec defines the desired state of APIKey",
      "type": "object",
      "required": [
        "apiServerRef"
      ],
      "properties": {
        "apiServerRef": {
          "description": "APIServerRef is the reference to the StreamNativeCloudConnection",
          "type": "object",
          "properties": {
            "name": {
              "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nTODO: Add other useful fields. apiVersion, kind, uid?\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.",
              "type": "string",
              "default": ""
            }
          },
          "additionalProperties": false,
          "x-kubernetes-map-type": "atomic"
        },
        "description": {
          "description": "Description is a user defined description of the key",
          "type": "string"
        },
        "encryptionKey": {
          "description": "EncryptionKey contains the public key used to encrypt the token",
          "type": "object",
          "properties": {
            "pem": {
              "description": "PEM is the public key in PEM format",
              "type": "string"
            }
          },
          "additionalProperties": false,
          "x-kubernetes-map-type": "atomic"
        },
        "expirationTime": {
          "description": "ExpirationTime is a timestamp that defines when this API key will expire\nThis can only be set on initial creation and not updated later",
          "type": "string",
          "format": "date-time"
        },
        "exportPlaintextToken": {
          "description": "ExportPlaintextToken indicates whether the token should be exported in plaintext",
          "type": "boolean"
        },
        "instanceName": {
          "description": "InstanceName is the name of the instance this API key is for",
          "type": "string"
        },
        "revoke": {
          "description": "Revoke indicates whether this API key should be revoked",
          "type": "boolean"
        },
        "serviceAccountName": {
          "description": "ServiceAccountName is the name of the service account this API key is for",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "APIKeyStatus defines the observed state of APIKey",
      "type": "object",
      "properties": {
        "conditions": {
          "description": "Conditions represent the latest available observations of an object's state",
          "type": "array",
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource.\n---\nThis struct is intended for direct use as an array at the field path .status.conditions.  For example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the observations of a foo's current state.\n\t    // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    // +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t    // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t    // other fields\n\t}",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                "type": "string",
                "maxLength": 32768
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64",
                "minimum": 0
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                "type": "string",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "type": "string",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ]
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase.\n---\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions can be\nuseful (see .node.status.conditions), the ability to deconflict is important.\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                "type": "string",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
              }
            },
            "additionalProperties": false
          }
        },
        "encryptedToken": {
          "description": "EncryptedToken is the encrypted security token issued for the key",
          "type": "object",
          "properties": {
            "jwe": {
              "description": "JWE is the token as a JSON Web Encryption (JWE) message\nFor RSA public keys, the key encryption algorithm is RSA-OAEP, and the content encryption algorithm is AES GCM",
              "type": "string"
            }
          },
          "additionalProperties": false,
          "x-kubernetes-map-type": "atomic"
        },
        "expiresAt": {
          "description": "ExpiresAt is a timestamp of when the key expires",
          "type": "string",
          "format": "date-time"
        },
        "issuedAt": {
          "description": "IssuedAt is a timestamp of when the key was issued",
          "type": "string",
          "format": "date-time"
        },
        "keyId": {
          "description": "KeyID is a generated field that is a uid for the token",
          "type": "string"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the last observed generation",
          "type": "integer",
          "format": "int64"
        },
        "revokedAt": {
          "description": "RevokedAt is a timestamp of when the key was revoked, it triggers revocation action",
          "type": "string",
          "format": "date-time"
        },
        "token": {
          "description": "Token is the plaintext security token issued for the key",
          "type": "string"
        }
      },
      "additionalProperties": false
    }
  }
}
