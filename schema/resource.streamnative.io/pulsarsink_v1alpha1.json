{
  "description": "PulsarSink is the Schema for the pulsar functions API",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "PulsarSinkSpec defines the desired state of PulsarSink",
      "type": "object",
      "required": [
        "connectionRef"
      ],
      "properties": {
        "archive": {
          "description": "Archive is the archive of the PulsarSink",
          "type": "object",
          "properties": {
            "url": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "autoAck": {
          "description": "AutoAck is the flag to enable or disable the auto ack",
          "type": "boolean"
        },
        "className": {
          "description": "ClassName is the class name of the PulsarSink",
          "type": "string"
        },
        "cleanupSubscription": {
          "description": "CleanupSubscription is the flag to enable or disable the cleanup of subscription",
          "type": "boolean"
        },
        "configs": {
          "description": "Configs is the map of configs of the PulsarSink",
          "x-kubernetes-preserve-unknown-fields": true
        },
        "connectionRef": {
          "description": "ConnectionRef is the reference to the PulsarConnection resource",
          "type": "object",
          "properties": {
            "name": {
              "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nTODO: Add other useful fields. apiVersion, kind, uid?\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.",
              "type": "string",
              "default": ""
            }
          },
          "additionalProperties": false,
          "x-kubernetes-map-type": "atomic"
        },
        "customRuntimeOptions": {
          "description": "CustomRuntimeOptions is the custom runtime options of the PulsarSink",
          "x-kubernetes-preserve-unknown-fields": true
        },
        "deadLetterTopic": {
          "description": "DeadLetterTopic is the dead letter topic of the PulsarSink",
          "type": "string"
        },
        "inputSpecs": {
          "description": "InputSpecs is the map of input specs of the PulsarSink",
          "type": "object",
          "additionalProperties": {
            "description": "ConsumerConfig represents the configuration for the consumer of the pulsar functions and connectors",
            "type": "object",
            "properties": {
              "consumerProperties": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "cryptoConfig": {
                "description": "CryptoConfig represents the configuration for the crypto of the pulsar functions and connectors",
                "type": "object",
                "properties": {
                  "consumerCryptoFailureAction": {
                    "type": "string"
                  },
                  "cryptoKeyReaderClassName": {
                    "type": "string"
                  },
                  "cryptoKeyReaderConfig": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "encryptionKeys": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "producerCryptoFailureAction": {
                    "type": "string"
                  }
                }
              },
              "poolMessages": {
                "type": "boolean"
              },
              "receiverQueueSize": {
                "type": "integer"
              },
              "regexPattern": {
                "type": "boolean"
              },
              "schemaProperties": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "schemaType": {
                "type": "string"
              },
              "serdeClassName": {
                "type": "string"
              }
            }
          }
        },
        "inputs": {
          "description": "Inputs is the list of inputs of the PulsarSink",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "lifecyclePolicy": {
          "description": "PulsarResourceLifeCyclePolicy defines the behavior for managing Pulsar resources\nwhen the corresponding custom resource (CR) is deleted from the Kubernetes cluster.\nThis policy allows users to control whether Pulsar resources should be retained or\nremoved from the Pulsar cluster after the CR is deleted.",
          "type": "string",
          "enum": [
            "CleanUpAfterDeletion",
            "KeepAfterDeletion"
          ]
        },
        "maxMessageRetries": {
          "description": "MaxMessageRetries is the max message retries of the PulsarSink",
          "type": "integer"
        },
        "name": {
          "description": "Name is the name of the PulsarSink",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace is the namespace of the PulsarSink",
          "type": "string"
        },
        "negativeAckRedeliveryDelayMs": {
          "description": "NegativeAckRedeliveryDelayMs is the negative ack redelivery delay in milliseconds of the PulsarSink",
          "type": "integer",
          "format": "int64"
        },
        "parallelism": {
          "description": "Parallelism is the parallelism of the PulsarSink",
          "type": "integer"
        },
        "processingGuarantees": {
          "description": "ProcessingGuarantees is the processing guarantees of the PulsarSink",
          "type": "string"
        },
        "resources": {
          "description": "Resources is the resource requirements for the PulsarSink",
          "type": "object",
          "properties": {
            "cpu": {
              "type": "string"
            },
            "disk": {
              "type": "integer",
              "format": "int64"
            },
            "ram": {
              "type": "integer",
              "format": "int64"
            }
          },
          "additionalProperties": false
        },
        "retainKeyOrdering": {
          "description": "RetainKeyOrdering is the flag to enable or disable the retain key ordering",
          "type": "boolean"
        },
        "retainOrdering": {
          "description": "RetainOrdering is the flag to enable or disable the retain ordering",
          "type": "boolean"
        },
        "runtimeFlags": {
          "description": "RuntimeFlags is the runtime flags of the PulsarSink",
          "type": "string"
        },
        "secrets": {
          "description": "Secrets is the map of secrets of the PulsarSink",
          "type": "object",
          "additionalProperties": {
            "description": "FunctionSecretKeyRef indicates a secret name and key",
            "type": "object",
            "required": [
              "key",
              "path"
            ],
            "properties": {
              "key": {
                "type": "string"
              },
              "path": {
                "type": "string"
              }
            }
          }
        },
        "sinkType": {
          "description": "SinkType is the type of the PulsarSink",
          "type": "string"
        },
        "sourceSubscriptionName": {
          "description": "SourceSubscriptionName is the source subscription name of the PulsarSink",
          "type": "string"
        },
        "sourceSubscriptionPosition": {
          "description": "SourceSubscriptionPosition is the source subscription position of the PulsarSink",
          "type": "string"
        },
        "tenant": {
          "description": "Tenant is the tenant of the PulsarSink",
          "type": "string"
        },
        "timeoutMs": {
          "description": "TimeoutMs is the timeout in milliseconds for the PulsarSink",
          "type": "integer",
          "format": "int64"
        },
        "topicToSchemaProperties": {
          "description": "TopicToSchemaProperties is the map of topic to schema properties of the PulsarSink",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "topicToSchemaType": {
          "description": "TopicToSchemaType is the map of topic to schema type of the PulsarSink",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "topicToSerdeClassName": {
          "description": "TopicToSerdeClassName is the map of topic to serde class name of the PulsarSink",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "topicsPattern": {
          "description": "TopicsPattern is the pattern of topics to consume from Pulsar",
          "type": "string"
        },
        "transformFunction": {
          "description": "TransformFunction is the transform function of the PulsarSink",
          "type": "string"
        },
        "transformFunctionClassName": {
          "description": "TransformFunctionClassName is the transform function class name of the PulsarSink",
          "type": "string"
        },
        "transformFunctionConfig": {
          "description": "TransformFunctionConfig is the transform function config of the PulsarSink",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "PulsarSinkStatus defines the observed state of PulsarSink",
      "type": "object",
      "properties": {
        "conditions": {
          "description": "Represents the observations of a connection's current state.",
          "type": "array",
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource.\n---\nThis struct is intended for direct use as an array at the field path .status.conditions.  For example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the observations of a foo's current state.\n\t    // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    // +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t    // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t    // other fields\n\t}",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                "type": "string",
                "maxLength": 32768
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64",
                "minimum": 0
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                "type": "string",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "type": "string",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ]
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase.\n---\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions can be\nuseful (see .node.status.conditions), the ability to deconflict is important.\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                "type": "string",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the most recent generation observed for this resource.\nIt corresponds to the metadata generation, which is updated on mutation by the API Server.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    }
  }
}
