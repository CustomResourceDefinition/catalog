{
  "description": "RoleBinding is the Schema for the RoleBindings API",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "RoleBindingSpec defines the desired state of RoleBinding",
      "type": "object",
      "required": [
        "apiServerRef",
        "clusterRole"
      ],
      "properties": {
        "apiServerRef": {
          "description": "APIServerRef is the reference to the StreamNativeCloudConnection",
          "type": "object",
          "properties": {
            "name": {
              "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nTODO: Add other useful fields. apiVersion, kind, uid?\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.",
              "type": "string",
              "default": ""
            }
          },
          "additionalProperties": false,
          "x-kubernetes-map-type": "atomic"
        },
        "cel": {
          "description": "CEL is an optional CEL expression for the role binding",
          "type": "string"
        },
        "clusterRole": {
          "description": "ClusterRole is the reference to the role that will be granted",
          "type": "string"
        },
        "identityPools": {
          "description": "IdentityPools is a list of IdentityPools that will be granted the role",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "serviceAccounts": {
          "description": "ServiceAccounts is a list of ServiceAccounts that will be granted the role",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "srnCluster": {
          "description": "SRNCluster is the cluster of the SRN",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "srnInstance": {
          "description": "SRNInstance is the pulsar instance of the SRN",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "srnNamespace": {
          "description": "SRNNamespace is the namespace of the SRN",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "srnOrganization": {
          "description": "SRNOrganization is the organization of the SRN",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "srnSecret": {
          "description": "SRNSecret is the secret of the SRN",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "srnServiceAccount": {
          "description": "SRNServiceAccount is the service account of the SRN",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "srnSubscription": {
          "description": "SRNSubscription is the subscription of the SRN",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "srnTenant": {
          "description": "SRNTenant is the tenant of the SRN",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "srnTopicDomain": {
          "description": "SRNTopicDomain is the topic domain of the SRN",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "srnTopicName": {
          "description": "SRNTopicName is the topic of the SRN",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "users": {
          "description": "Users is a list of Users that will be granted the role",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "RoleBindingStatus defines the observed state of RoleBinding",
      "type": "object",
      "properties": {
        "conditions": {
          "description": "Conditions represent the latest available observations of an object's state",
          "type": "array",
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource.\n---\nThis struct is intended for direct use as an array at the field path .status.conditions.  For example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the observations of a foo's current state.\n\t    // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    // +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t    // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t    // other fields\n\t}",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                "type": "string",
                "maxLength": 32768
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64",
                "minimum": 0
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                "type": "string",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "type": "string",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ]
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase.\n---\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions can be\nuseful (see .node.status.conditions), the ability to deconflict is important.\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                "type": "string",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
              }
            },
            "additionalProperties": false
          }
        },
        "failedClusters": {
          "description": "FailedClusters is a list of clusters where the role binding failed",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the last observed generation",
          "type": "integer",
          "format": "int64"
        },
        "syncedClusters": {
          "description": "SyncedClusters is a map of clusters where the role binding is synced",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    }
  }
}
