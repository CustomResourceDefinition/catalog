{
  "type": "object",
  "properties": {
    "apiVersion": {
      "type": "string"
    },
    "kind": {
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "type": "object",
      "required": [
        "amiSelectorTerms",
        "securityGroupSelectorTerms",
        "subnetSelectorTerms"
      ],
      "properties": {
        "amiFamily": {
          "type": "string",
          "enum": [
            "AL2",
            "AL2023",
            "Bottlerocket",
            "Custom",
            "Windows2019",
            "Windows2022"
          ]
        },
        "amiSelectorTerms": {
          "type": "array",
          "maxItems": 30,
          "minItems": 1,
          "items": {
            "type": "object",
            "properties": {
              "alias": {
                "type": "string",
                "maxLength": 30,
                "x-kubernetes-validations": [
                  {
                    "rule": "self.matches('^[a-zA-Z0-9]+@.+$')",
                    "message": "'alias' is improperly formatted, must match the format 'family@version'"
                  },
                  {
                    "rule": "self.split('@')[0] in ['al2','al2023','bottlerocket','windows2019','windows2022']",
                    "message": "family is not supported, must be one of the following: 'al2', 'al2023', 'bottlerocket', 'windows2019', 'windows2022'"
                  },
                  {
                    "rule": "self.split('@')[0] in ['windows2019','windows2022'] ? self.split('@')[1] == 'latest' : true",
                    "message": "windows families may only specify version 'latest'"
                  }
                ]
              },
              "id": {
                "type": "string",
                "pattern": "ami-[0-9a-z]+"
              },
              "name": {
                "type": "string"
              },
              "owner": {
                "type": "string"
              },
              "ssmParameter": {
                "type": "string"
              },
              "tags": {
                "type": "object",
                "maxProperties": 20,
                "additionalProperties": {
                  "type": "string"
                },
                "x-kubernetes-validations": [
                  {
                    "rule": "self.all(k, k != '' \u0026\u0026 self[k] != '')",
                    "message": "empty tag keys or values aren't supported"
                  }
                ]
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-validations": [
            {
              "rule": "self.all(x, has(x.tags) || has(x.id) || has(x.name) || has(x.alias) || has(x.ssmParameter))",
              "message": "expected at least one, got none, ['tags', 'id', 'name', 'alias', 'ssmParameter']"
            },
            {
              "rule": "!self.exists(x, has(x.id) \u0026\u0026 (has(x.alias) || has(x.tags) || has(x.name) || has(x.owner)))",
              "message": "'id' is mutually exclusive, cannot be set with a combination of other fields in amiSelectorTerms"
            },
            {
              "rule": "!self.exists(x, has(x.alias) \u0026\u0026 (has(x.id) || has(x.tags) || has(x.name) || has(x.owner)))",
              "message": "'alias' is mutually exclusive, cannot be set with a combination of other fields in amiSelectorTerms"
            },
            {
              "rule": "!(self.exists(x, has(x.alias)) \u0026\u0026 self.size() != 1)",
              "message": "'alias' is mutually exclusive, cannot be set with a combination of other amiSelectorTerms"
            }
          ]
        },
        "associatePublicIPAddress": {
          "type": "boolean"
        },
        "blockDeviceMappings": {
          "type": "array",
          "maxItems": 50,
          "items": {
            "type": "object",
            "properties": {
              "deviceName": {
                "type": "string"
              },
              "ebs": {
                "type": "object",
                "properties": {
                  "deleteOnTermination": {
                    "type": "boolean"
                  },
                  "encrypted": {
                    "type": "boolean"
                  },
                  "iops": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "kmsKeyID": {
                    "type": "string"
                  },
                  "snapshotID": {
                    "type": "string"
                  },
                  "throughput": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "volumeInitializationRate": {
                    "type": "integer",
                    "format": "int32",
                    "maximum": 300,
                    "minimum": 100
                  },
                  "volumeSize": {
                    "type": "string",
                    "pattern": "^((?:[1-9][0-9]{0,3}|[1-4][0-9]{4}|[5][0-8][0-9]{3}|59000)Gi|(?:[1-9][0-9]{0,3}|[1-5][0-9]{4}|[6][0-3][0-9]{3}|64000)G|([1-9]||[1-5][0-7]|58)Ti|([1-9]||[1-5][0-9]|6[0-3]|64)T)$"
                  },
                  "volumeType": {
                    "type": "string",
                    "enum": [
                      "standard",
                      "io1",
                      "io2",
                      "gp2",
                      "sc1",
                      "st1",
                      "gp3"
                    ]
                  }
                },
                "additionalProperties": false,
                "x-kubernetes-validations": [
                  {
                    "rule": "has(self.snapshotID) || has(self.volumeSize)",
                    "message": "snapshotID or volumeSize must be defined"
                  },
                  {
                    "rule": "!has(self.volumeInitializationRate) || (has(self.snapshotID) \u0026\u0026 self.snapshotID != '')",
                    "message": "snapshotID must be set when volumeInitializationRate is set"
                  }
                ]
              },
              "rootVolume": {
                "type": "boolean"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-validations": [
            {
              "rule": "self.filter(x, has(x.rootVolume)?x.rootVolume==true:false).size() \u003c= 1",
              "message": "must have only one blockDeviceMappings with rootVolume"
            }
          ]
        },
        "capacityReservationSelectorTerms": {
          "type": "array",
          "maxItems": 30,
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^cr-[0-9a-z]+$"
              },
              "ownerID": {
                "type": "string",
                "pattern": "^[0-9]{12}$"
              },
              "tags": {
                "type": "object",
                "maxProperties": 20,
                "additionalProperties": {
                  "type": "string"
                },
                "x-kubernetes-validations": [
                  {
                    "rule": "self.all(k, k != '' \u0026\u0026 self[k] != '')",
                    "message": "empty tag keys or values aren't supported"
                  }
                ]
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-validations": [
            {
              "rule": "self.all(x, has(x.tags) || has(x.id))",
              "message": "expected at least one, got none, ['tags', 'id']"
            },
            {
              "rule": "!self.all(x, has(x.id) \u0026\u0026 (has(x.tags) || has(x.ownerID)))",
              "message": "'id' is mutually exclusive, cannot be set along with tags in a capacity reservation selector term"
            }
          ]
        },
        "context": {
          "type": "string"
        },
        "detailedMonitoring": {
          "type": "boolean"
        },
        "instanceProfile": {
          "type": "string",
          "x-kubernetes-validations": [
            {
              "rule": "self != ''",
              "message": "instanceProfile cannot be empty"
            }
          ]
        },
        "instanceStorePolicy": {
          "type": "string",
          "enum": [
            "RAID0"
          ]
        },
        "kubelet": {
          "type": "object",
          "properties": {
            "clusterDNS": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "cpuCFSQuota": {
              "type": "boolean"
            },
            "evictionHard": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "pattern": "^((\\d{1,2}(\\.\\d{1,2})?|100(\\.0{1,2})?)%||(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?)$"
              },
              "x-kubernetes-validations": [
                {
                  "rule": "self.all(x, x in ['memory.available','nodefs.available','nodefs.inodesFree','imagefs.available','imagefs.inodesFree','pid.available'])",
                  "message": "valid keys for evictionHard are ['memory.available','nodefs.available','nodefs.inodesFree','imagefs.available','imagefs.inodesFree','pid.available']"
                }
              ]
            },
            "evictionMaxPodGracePeriod": {
              "type": "integer",
              "format": "int32"
            },
            "evictionSoft": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "pattern": "^((\\d{1,2}(\\.\\d{1,2})?|100(\\.0{1,2})?)%||(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?)$"
              },
              "x-kubernetes-validations": [
                {
                  "rule": "self.all(x, x in ['memory.available','nodefs.available','nodefs.inodesFree','imagefs.available','imagefs.inodesFree','pid.available'])",
                  "message": "valid keys for evictionSoft are ['memory.available','nodefs.available','nodefs.inodesFree','imagefs.available','imagefs.inodesFree','pid.available']"
                }
              ]
            },
            "evictionSoftGracePeriod": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-validations": [
                {
                  "rule": "self.all(x, x in ['memory.available','nodefs.available','nodefs.inodesFree','imagefs.available','imagefs.inodesFree','pid.available'])",
                  "message": "valid keys for evictionSoftGracePeriod are ['memory.available','nodefs.available','nodefs.inodesFree','imagefs.available','imagefs.inodesFree','pid.available']"
                }
              ]
            },
            "imageGCHighThresholdPercent": {
              "type": "integer",
              "format": "int32",
              "maximum": 100,
              "minimum": 0
            },
            "imageGCLowThresholdPercent": {
              "type": "integer",
              "format": "int32",
              "maximum": 100,
              "minimum": 0
            },
            "kubeReserved": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"
              },
              "x-kubernetes-validations": [
                {
                  "rule": "self.all(x, x=='cpu' || x=='memory' || x=='ephemeral-storage' || x=='pid')",
                  "message": "valid keys for kubeReserved are ['cpu','memory','ephemeral-storage','pid']"
                },
                {
                  "rule": "self.all(x, !self[x].startsWith('-'))",
                  "message": "kubeReserved value cannot be a negative resource quantity"
                }
              ]
            },
            "maxPods": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            "podsPerCore": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            "systemReserved": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"
              },
              "x-kubernetes-validations": [
                {
                  "rule": "self.all(x, x=='cpu' || x=='memory' || x=='ephemeral-storage' || x=='pid')",
                  "message": "valid keys for systemReserved are ['cpu','memory','ephemeral-storage','pid']"
                },
                {
                  "rule": "self.all(x, !self[x].startsWith('-'))",
                  "message": "systemReserved value cannot be a negative resource quantity"
                }
              ]
            }
          },
          "additionalProperties": false,
          "x-kubernetes-validations": [
            {
              "rule": "has(self.imageGCHighThresholdPercent) \u0026\u0026 has(self.imageGCLowThresholdPercent) ?  self.imageGCHighThresholdPercent \u003e self.imageGCLowThresholdPercent  : true",
              "message": "imageGCHighThresholdPercent must be greater than imageGCLowThresholdPercent"
            },
            {
              "rule": "has(self.evictionSoft) ? self.evictionSoft.all(e, (e in self.evictionSoftGracePeriod)):true",
              "message": "evictionSoft OwnerKey does not have a matching evictionSoftGracePeriod"
            },
            {
              "rule": "has(self.evictionSoftGracePeriod) ? self.evictionSoftGracePeriod.all(e, (e in self.evictionSoft)):true",
              "message": "evictionSoftGracePeriod OwnerKey does not have a matching evictionSoft"
            }
          ]
        },
        "metadataOptions": {
          "type": "object",
          "default": {
            "httpEndpoint": "enabled",
            "httpProtocolIPv6": "disabled",
            "httpPutResponseHopLimit": 1,
            "httpTokens": "required"
          },
          "properties": {
            "httpEndpoint": {
              "type": "string",
              "default": "enabled",
              "enum": [
                "enabled",
                "disabled"
              ]
            },
            "httpProtocolIPv6": {
              "type": "string",
              "default": "disabled",
              "enum": [
                "enabled",
                "disabled"
              ]
            },
            "httpPutResponseHopLimit": {
              "type": "integer",
              "format": "int64",
              "default": 1,
              "maximum": 64,
              "minimum": 1
            },
            "httpTokens": {
              "type": "string",
              "default": "required",
              "enum": [
                "required",
                "optional"
              ]
            }
          },
          "additionalProperties": false
        },
        "role": {
          "type": "string",
          "x-kubernetes-validations": [
            {
              "rule": "self != ''",
              "message": "role cannot be empty"
            },
            {
              "rule": "self == oldSelf",
              "message": "immutable field changed"
            }
          ]
        },
        "securityGroupSelectorTerms": {
          "type": "array",
          "maxItems": 30,
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "sg-[0-9a-z]+"
              },
              "name": {
                "type": "string"
              },
              "tags": {
                "type": "object",
                "maxProperties": 20,
                "additionalProperties": {
                  "type": "string"
                },
                "x-kubernetes-validations": [
                  {
                    "rule": "self.all(k, k != '' \u0026\u0026 self[k] != '')",
                    "message": "empty tag keys or values aren't supported"
                  }
                ]
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-validations": [
            {
              "rule": "self.size() != 0",
              "message": "securityGroupSelectorTerms cannot be empty"
            },
            {
              "rule": "self.all(x, has(x.tags) || has(x.id) || has(x.name))",
              "message": "expected at least one, got none, ['tags', 'id', 'name']"
            },
            {
              "rule": "!self.all(x, has(x.id) \u0026\u0026 (has(x.tags) || has(x.name)))",
              "message": "'id' is mutually exclusive, cannot be set with a combination of other fields in a security group selector term"
            },
            {
              "rule": "!self.all(x, has(x.name) \u0026\u0026 (has(x.tags) || has(x.id)))",
              "message": "'name' is mutually exclusive, cannot be set with a combination of other fields in a security group selector term"
            }
          ]
        },
        "subnetSelectorTerms": {
          "type": "array",
          "maxItems": 30,
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "subnet-[0-9a-z]+"
              },
              "tags": {
                "type": "object",
                "maxProperties": 20,
                "additionalProperties": {
                  "type": "string"
                },
                "x-kubernetes-validations": [
                  {
                    "rule": "self.all(k, k != '' \u0026\u0026 self[k] != '')",
                    "message": "empty tag keys or values aren't supported"
                  }
                ]
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-validations": [
            {
              "rule": "self.size() != 0",
              "message": "subnetSelectorTerms cannot be empty"
            },
            {
              "rule": "self.all(x, has(x.tags) || has(x.id))",
              "message": "expected at least one, got none, ['tags', 'id']"
            },
            {
              "rule": "!self.all(x, has(x.id) \u0026\u0026 has(x.tags))",
              "message": "'id' is mutually exclusive, cannot be set with a combination of other fields in a subnet selector term"
            }
          ]
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-kubernetes-validations": [
            {
              "rule": "self.all(k, k != '')",
              "message": "empty tag keys aren't supported"
            },
            {
              "rule": "self.all(k, k !='eks:eks-cluster-name')",
              "message": "tag contains a restricted tag matching eks:eks-cluster-name"
            },
            {
              "rule": "self.all(k, !k.startsWith('kubernetes.io/cluster') )",
              "message": "tag contains a restricted tag matching kubernetes.io/cluster/"
            },
            {
              "rule": "self.all(k, k != 'karpenter.sh/nodepool')",
              "message": "tag contains a restricted tag matching karpenter.sh/nodepool"
            },
            {
              "rule": "self.all(k, k !='karpenter.sh/nodeclaim')",
              "message": "tag contains a restricted tag matching karpenter.sh/nodeclaim"
            },
            {
              "rule": "self.all(k, k !='karpenter.k8s.aws/ec2nodeclass')",
              "message": "tag contains a restricted tag matching karpenter.k8s.aws/ec2nodeclass"
            }
          ]
        },
        "userData": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "x-kubernetes-validations": [
        {
          "rule": "(has(self.role) \u0026\u0026 !has(self.instanceProfile)) || (!has(self.role) \u0026\u0026 has(self.instanceProfile))",
          "message": "must specify exactly one of ['role', 'instanceProfile']"
        },
        {
          "rule": "(has(oldSelf.role) \u0026\u0026 has(self.role)) || (has(oldSelf.instanceProfile) \u0026\u0026 has(self.instanceProfile))",
          "message": "changing from 'instanceProfile' to 'role' is not supported. You must delete and recreate this node class if you want to change this."
        },
        {
          "rule": "!has(self.amiFamily) || (self.amiSelectorTerms.exists(x, has(x.alias) \u0026\u0026 x.alias.find('^[^@]+') == 'al2') ? (self.amiFamily == 'Custom' || self.amiFamily == 'AL2') : true)",
          "message": "if set, amiFamily must be 'AL2' or 'Custom' when using an AL2 alias"
        },
        {
          "rule": "!has(self.amiFamily) || (self.amiSelectorTerms.exists(x, has(x.alias) \u0026\u0026 x.alias.find('^[^@]+') == 'al2023') ? (self.amiFamily == 'Custom' || self.amiFamily == 'AL2023') : true)",
          "message": "if set, amiFamily must be 'AL2023' or 'Custom' when using an AL2023 alias"
        },
        {
          "rule": "!has(self.amiFamily) || (self.amiSelectorTerms.exists(x, has(x.alias) \u0026\u0026 x.alias.find('^[^@]+') == 'bottlerocket') ? (self.amiFamily == 'Custom' || self.amiFamily == 'Bottlerocket') : true)",
          "message": "if set, amiFamily must be 'Bottlerocket' or 'Custom' when using a Bottlerocket alias"
        },
        {
          "rule": "!has(self.amiFamily) || (self.amiSelectorTerms.exists(x, has(x.alias) \u0026\u0026 x.alias.find('^[^@]+') == 'windows2019') ? (self.amiFamily == 'Custom' || self.amiFamily == 'Windows2019') : true)",
          "message": "if set, amiFamily must be 'Windows2019' or 'Custom' when using a Windows2019 alias"
        },
        {
          "rule": "!has(self.amiFamily) || (self.amiSelectorTerms.exists(x, has(x.alias) \u0026\u0026 x.alias.find('^[^@]+') == 'windows2022') ? (self.amiFamily == 'Custom' || self.amiFamily == 'Windows2022') : true)",
          "message": "if set, amiFamily must be 'Windows2022' or 'Custom' when using a Windows2022 alias"
        },
        {
          "rule": "self.amiSelectorTerms.exists(x, has(x.alias)) ? true : has(self.amiFamily)",
          "message": "must specify amiFamily if amiSelectorTerms does not contain an alias"
        }
      ]
    },
    "status": {
      "type": "object",
      "properties": {
        "amis": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "id",
              "requirements"
            ],
            "properties": {
              "deprecated": {
                "type": "boolean"
              },
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "requirements": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "key",
                    "operator"
                  ],
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "operator": {
                      "type": "string"
                    },
                    "values": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "x-kubernetes-list-type": "atomic"
                    }
                  },
                  "additionalProperties": false
                }
              }
            },
            "additionalProperties": false
          }
        },
        "capacityReservations": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "availabilityZone",
              "id",
              "instanceMatchCriteria",
              "instanceType",
              "ownerID"
            ],
            "properties": {
              "availabilityZone": {
                "type": "string"
              },
              "endTime": {
                "type": "string",
                "format": "date-time"
              },
              "id": {
                "type": "string",
                "pattern": "^cr-[0-9a-z]+$"
              },
              "instanceMatchCriteria": {
                "type": "string",
                "enum": [
                  "open",
                  "targeted"
                ]
              },
              "instanceType": {
                "type": "string"
              },
              "ownerID": {
                "type": "string",
                "pattern": "^[0-9]{12}$"
              },
              "reservationType": {
                "type": "string",
                "default": "default",
                "enum": [
                  "default",
                  "capacity-block"
                ]
              },
              "state": {
                "type": "string",
                "default": "active",
                "enum": [
                  "active",
                  "expiring"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "conditions": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "type": "string",
                "maxLength": 32768
              },
              "observedGeneration": {
                "type": "integer",
                "format": "int64",
                "minimum": 0
              },
              "reason": {
                "type": "string",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
              },
              "status": {
                "type": "string",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ]
              },
              "type": {
                "type": "string",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
              }
            },
            "additionalProperties": false
          }
        },
        "instanceProfile": {
          "type": "string"
        },
        "securityGroups": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "subnets": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "id",
              "zone"
            ],
            "properties": {
              "id": {
                "type": "string"
              },
              "zone": {
                "type": "string"
              },
              "zoneID": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        }
      },
      "additionalProperties": false
    }
  }
}
