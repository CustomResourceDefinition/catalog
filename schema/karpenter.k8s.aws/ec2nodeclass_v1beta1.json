{
  "type": "object",
  "properties": {
    "apiVersion": {
      "type": "string"
    },
    "kind": {
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "type": "object",
      "required": [
        "amiFamily",
        "securityGroupSelectorTerms",
        "subnetSelectorTerms"
      ],
      "properties": {
        "amiFamily": {
          "type": "string",
          "enum": [
            "AL2",
            "AL2023",
            "Bottlerocket",
            "Ubuntu",
            "Custom",
            "Windows2019",
            "Windows2022"
          ]
        },
        "amiSelectorTerms": {
          "type": "array",
          "maxItems": 30,
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "ami-[0-9a-z]+"
              },
              "name": {
                "type": "string"
              },
              "owner": {
                "type": "string"
              },
              "tags": {
                "type": "object",
                "maxProperties": 20,
                "additionalProperties": {
                  "type": "string"
                },
                "x-kubernetes-validations": [
                  {
                    "rule": "self.all(k, k != '' \u0026\u0026 self[k] != '')",
                    "message": "empty tag keys or values aren't supported"
                  }
                ]
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-validations": [
            {
              "rule": "self.all(x, has(x.tags) || has(x.id) || has(x.name))",
              "message": "expected at least one, got none, ['tags', 'id', 'name']"
            },
            {
              "rule": "!self.all(x, has(x.id) \u0026\u0026 (has(x.tags) || has(x.name) || has(x.owner)))",
              "message": "'id' is mutually exclusive, cannot be set with a combination of other fields in amiSelectorTerms"
            }
          ]
        },
        "associatePublicIPAddress": {
          "type": "boolean"
        },
        "blockDeviceMappings": {
          "type": "array",
          "maxItems": 50,
          "items": {
            "type": "object",
            "properties": {
              "deviceName": {
                "type": "string"
              },
              "ebs": {
                "type": "object",
                "properties": {
                  "deleteOnTermination": {
                    "type": "boolean"
                  },
                  "encrypted": {
                    "type": "boolean"
                  },
                  "iops": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "kmsKeyID": {
                    "type": "string"
                  },
                  "snapshotID": {
                    "type": "string"
                  },
                  "throughput": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "volumeSize": {
                    "type": "string",
                    "pattern": "^((?:[1-9][0-9]{0,3}|[1-4][0-9]{4}|[5][0-8][0-9]{3}|59000)Gi|(?:[1-9][0-9]{0,3}|[1-5][0-9]{4}|[6][0-3][0-9]{3}|64000)G|([1-9]||[1-5][0-7]|58)Ti|([1-9]||[1-5][0-9]|6[0-3]|64)T)$"
                  },
                  "volumeType": {
                    "type": "string",
                    "enum": [
                      "standard",
                      "io1",
                      "io2",
                      "gp2",
                      "sc1",
                      "st1",
                      "gp3"
                    ]
                  }
                },
                "additionalProperties": false,
                "x-kubernetes-validations": [
                  {
                    "rule": "has(self.snapshotID) || has(self.volumeSize)",
                    "message": "snapshotID or volumeSize must be defined"
                  }
                ]
              },
              "rootVolume": {
                "type": "boolean"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-validations": [
            {
              "rule": "self.filter(x, has(x.rootVolume)?x.rootVolume==true:false).size() \u003c= 1",
              "message": "must have only one blockDeviceMappings with rootVolume"
            }
          ]
        },
        "context": {
          "type": "string"
        },
        "detailedMonitoring": {
          "type": "boolean"
        },
        "instanceProfile": {
          "type": "string",
          "x-kubernetes-validations": [
            {
              "rule": "self != ''",
              "message": "instanceProfile cannot be empty"
            }
          ]
        },
        "instanceStorePolicy": {
          "type": "string",
          "enum": [
            "RAID0"
          ]
        },
        "metadataOptions": {
          "type": "object",
          "default": {
            "httpEndpoint": "enabled",
            "httpProtocolIPv6": "disabled",
            "httpPutResponseHopLimit": 1,
            "httpTokens": "required"
          },
          "properties": {
            "httpEndpoint": {
              "type": "string",
              "default": "enabled",
              "enum": [
                "enabled",
                "disabled"
              ]
            },
            "httpProtocolIPv6": {
              "type": "string",
              "default": "disabled",
              "enum": [
                "enabled",
                "disabled"
              ]
            },
            "httpPutResponseHopLimit": {
              "type": "integer",
              "format": "int64",
              "default": 2,
              "maximum": 64,
              "minimum": 1
            },
            "httpTokens": {
              "type": "string",
              "default": "required",
              "enum": [
                "required",
                "optional"
              ]
            }
          },
          "additionalProperties": false
        },
        "role": {
          "type": "string",
          "x-kubernetes-validations": [
            {
              "rule": "self != ''",
              "message": "role cannot be empty"
            },
            {
              "rule": "self == oldSelf",
              "message": "immutable field changed"
            }
          ]
        },
        "securityGroupSelectorTerms": {
          "type": "array",
          "maxItems": 30,
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "sg-[0-9a-z]+"
              },
              "name": {
                "type": "string"
              },
              "tags": {
                "type": "object",
                "maxProperties": 20,
                "additionalProperties": {
                  "type": "string"
                },
                "x-kubernetes-validations": [
                  {
                    "rule": "self.all(k, k != '' \u0026\u0026 self[k] != '')",
                    "message": "empty tag keys or values aren't supported"
                  }
                ]
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-validations": [
            {
              "rule": "self.size() != 0",
              "message": "securityGroupSelectorTerms cannot be empty"
            },
            {
              "rule": "self.all(x, has(x.tags) || has(x.id) || has(x.name))",
              "message": "expected at least one, got none, ['tags', 'id', 'name']"
            },
            {
              "rule": "!self.all(x, has(x.id) \u0026\u0026 (has(x.tags) || has(x.name)))",
              "message": "'id' is mutually exclusive, cannot be set with a combination of other fields in securityGroupSelectorTerms"
            },
            {
              "rule": "!self.all(x, has(x.name) \u0026\u0026 (has(x.tags) || has(x.id)))",
              "message": "'name' is mutually exclusive, cannot be set with a combination of other fields in securityGroupSelectorTerms"
            }
          ]
        },
        "subnetSelectorTerms": {
          "type": "array",
          "maxItems": 30,
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "subnet-[0-9a-z]+"
              },
              "tags": {
                "type": "object",
                "maxProperties": 20,
                "additionalProperties": {
                  "type": "string"
                },
                "x-kubernetes-validations": [
                  {
                    "rule": "self.all(k, k != '' \u0026\u0026 self[k] != '')",
                    "message": "empty tag keys or values aren't supported"
                  }
                ]
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-validations": [
            {
              "rule": "self.size() != 0",
              "message": "subnetSelectorTerms cannot be empty"
            },
            {
              "rule": "self.all(x, has(x.tags) || has(x.id))",
              "message": "expected at least one, got none, ['tags', 'id']"
            },
            {
              "rule": "!self.all(x, has(x.id) \u0026\u0026 has(x.tags))",
              "message": "'id' is mutually exclusive, cannot be set with a combination of other fields in subnetSelectorTerms"
            }
          ]
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-kubernetes-validations": [
            {
              "rule": "self.all(k, k != '')",
              "message": "empty tag keys aren't supported"
            },
            {
              "rule": "self.all(k, !k.startsWith('kubernetes.io/cluster') )",
              "message": "tag contains a restricted tag matching kubernetes.io/cluster/"
            },
            {
              "rule": "self.all(k, k != 'karpenter.sh/nodepool')",
              "message": "tag contains a restricted tag matching karpenter.sh/nodepool"
            },
            {
              "rule": "self.all(k, k !='karpenter.sh/managed-by')",
              "message": "tag contains a restricted tag matching karpenter.sh/managed-by"
            },
            {
              "rule": "self.all(k, k !='karpenter.sh/nodeclaim')",
              "message": "tag contains a restricted tag matching karpenter.sh/nodeclaim"
            },
            {
              "rule": "self.all(k, k !='karpenter.k8s.aws/ec2nodeclass')",
              "message": "tag contains a restricted tag matching karpenter.k8s.aws/ec2nodeclass"
            }
          ]
        },
        "userData": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "x-kubernetes-validations": [
        {
          "rule": "self.amiFamily == 'Custom' ? self.amiSelectorTerms.size() != 0 : true",
          "message": "amiSelectorTerms is required when amiFamily == 'Custom'"
        },
        {
          "rule": "(has(self.role) \u0026\u0026 !has(self.instanceProfile)) || (!has(self.role) \u0026\u0026 has(self.instanceProfile))",
          "message": "must specify exactly one of ['role', 'instanceProfile']"
        },
        {
          "rule": "(has(oldSelf.role) \u0026\u0026 has(self.role)) || (has(oldSelf.instanceProfile) \u0026\u0026 has(self.instanceProfile))",
          "message": "changing from 'instanceProfile' to 'role' is not supported. You must delete and recreate this node class if you want to change this."
        }
      ]
    },
    "status": {
      "type": "object",
      "properties": {
        "amis": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "id",
              "requirements"
            ],
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "requirements": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "key",
                    "operator"
                  ],
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "operator": {
                      "type": "string"
                    },
                    "values": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "x-kubernetes-list-type": "atomic"
                    }
                  },
                  "additionalProperties": false
                }
              }
            },
            "additionalProperties": false
          }
        },
        "conditions": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "type": "string",
                "maxLength": 32768
              },
              "observedGeneration": {
                "type": "integer",
                "format": "int64",
                "minimum": 0
              },
              "reason": {
                "type": "string",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
              },
              "status": {
                "type": "string",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ]
              },
              "type": {
                "type": "string",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
              }
            },
            "additionalProperties": false
          }
        },
        "instanceProfile": {
          "type": "string"
        },
        "securityGroups": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "subnets": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "id",
              "zone"
            ],
            "properties": {
              "id": {
                "type": "string"
              },
              "zone": {
                "type": "string"
              },
              "zoneID": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        }
      },
      "additionalProperties": false
    }
  }
}
