{
  "description": "FrontdoorOriginGroup is the Schema for the FrontdoorOriginGroups API. Manages a Front Door (standard/premium) Origin Group.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "FrontdoorOriginGroupSpec defines the desired state of FrontdoorOriginGroup",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "deletionPolicy": {
          "description": "DeletionPolicy specifies what will happen to the underlying external\nwhen this managed resource is deleted - either \"Delete\" or \"Orphan\" the\nexternal resource.\nThis field is planned to be deprecated in favor of the ManagementPolicies\nfield in a future release. Currently, both could be set independently and\nnon-default values would be honored if the feature flag is enabled.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "type": "string",
          "default": "Delete",
          "enum": [
            "Orphan",
            "Delete"
          ]
        },
        "forProvider": {
          "type": "object",
          "properties": {
            "cdnFrontdoorProfileId": {
              "description": "The ID of the Front Door Profile within which this Front Door Origin Group should exist. Changing this forces a new Front Door Origin Group to be created.",
              "type": "string"
            },
            "cdnFrontdoorProfileIdRef": {
              "description": "Reference to a FrontdoorProfile in cdn to populate cdnFrontdoorProfileId.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "cdnFrontdoorProfileIdSelector": {
              "description": "Selector for a FrontdoorProfile in cdn to populate cdnFrontdoorProfileId.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "healthProbe": {
              "description": "A health_probe block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "intervalInSeconds": {
                    "description": "Specifies the number of seconds between health probes. Possible values are between 5 and 31536000 seconds (inclusive).",
                    "type": "number"
                  },
                  "path": {
                    "description": "Specifies the path relative to the origin that is used to determine the health of the origin. Defaults to /.",
                    "type": "string"
                  },
                  "protocol": {
                    "description": "Specifies the protocol to use for health probe. Possible values are Http and Https.",
                    "type": "string"
                  },
                  "requestType": {
                    "description": "Specifies the type of health probe request that is made. Possible values are GET and HEAD. Defaults to HEAD.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "loadBalancing": {
              "description": "A load_balancing block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "additionalLatencyInMilliseconds": {
                    "description": "Specifies the additional latency in milliseconds for probes to fall into the lowest latency bucket. Possible values are between 0 and 1000 milliseconds (inclusive). Defaults to 50.",
                    "type": "number"
                  },
                  "sampleSize": {
                    "description": "Specifies the number of samples to consider for load balancing decisions. Possible values are between 0 and 255 (inclusive). Defaults to 4.",
                    "type": "number"
                  },
                  "successfulSamplesRequired": {
                    "description": "Specifies the number of samples within the sample period that must succeed. Possible values are between 0 and 255 (inclusive). Defaults to 3.",
                    "type": "number"
                  }
                },
                "additionalProperties": false
              }
            },
            "restoreTrafficTimeToHealedOrNewEndpointInMinutes": {
              "description": "Specifies the amount of time which should elapse before shifting traffic to another endpoint when a healthy endpoint becomes unhealthy or a new endpoint is added. Possible values are between 0 and 50 minutes (inclusive). Default is 10 minutes.",
              "type": "number"
            },
            "sessionAffinityEnabled": {
              "description": "Specifies whether session affinity should be enabled on this host. Defaults to true.",
              "type": "boolean"
            }
          },
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored\nunless the Management Policies feature flag is disabled.\nInitProvider holds the same fields as ForProvider, with the exception\nof Identifier and other resource reference fields. The fields that are\nin InitProvider are merged into ForProvider when the resource is created.\nThe same fields are also added to the terraform ignore_changes hook, to\navoid updating them after creation. This is useful for fields that are\nrequired on creation, but we do not desire to update them after creation,\nfor example because of an external controller is managing them, like an\nautoscaler.",
          "type": "object",
          "properties": {
            "healthProbe": {
              "description": "A health_probe block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "intervalInSeconds": {
                    "description": "Specifies the number of seconds between health probes. Possible values are between 5 and 31536000 seconds (inclusive).",
                    "type": "number"
                  },
                  "path": {
                    "description": "Specifies the path relative to the origin that is used to determine the health of the origin. Defaults to /.",
                    "type": "string"
                  },
                  "protocol": {
                    "description": "Specifies the protocol to use for health probe. Possible values are Http and Https.",
                    "type": "string"
                  },
                  "requestType": {
                    "description": "Specifies the type of health probe request that is made. Possible values are GET and HEAD. Defaults to HEAD.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "loadBalancing": {
              "description": "A load_balancing block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "additionalLatencyInMilliseconds": {
                    "description": "Specifies the additional latency in milliseconds for probes to fall into the lowest latency bucket. Possible values are between 0 and 1000 milliseconds (inclusive). Defaults to 50.",
                    "type": "number"
                  },
                  "sampleSize": {
                    "description": "Specifies the number of samples to consider for load balancing decisions. Possible values are between 0 and 255 (inclusive). Defaults to 4.",
                    "type": "number"
                  },
                  "successfulSamplesRequired": {
                    "description": "Specifies the number of samples within the sample period that must succeed. Possible values are between 0 and 255 (inclusive). Defaults to 3.",
                    "type": "number"
                  }
                },
                "additionalProperties": false
              }
            },
            "restoreTrafficTimeToHealedOrNewEndpointInMinutes": {
              "description": "Specifies the amount of time which should elapse before shifting traffic to another endpoint when a healthy endpoint becomes unhealthy or a new endpoint is added. Possible values are between 0 and 50 minutes (inclusive). Default is 10 minutes.",
              "type": "number"
            },
            "sessionAffinityEnabled": {
              "description": "Specifies whether session affinity should be enabled on this host. Defaults to true.",
              "type": "boolean"
            }
          },
          "additionalProperties": false
        },
        "managementPolicies": {
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out\nthrough a Crossplane feature flag.\nManagementPolicies specify the array of actions Crossplane is allowed to\ntake on the managed and external resources.\nThis field is planned to replace the DeletionPolicy field in a future\nrelease. Currently, both could be set independently and non-default\nvalues would be honored if the feature flag is enabled. If both are\ncustom, the DeletionPolicy field will be ignored.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223\nand this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers\ncan take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to\ncreate, observe, update, and delete this managed resource should be\nconfigured.",
          "type": "object",
          "default": {
            "name": "default"
          },
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "type": "object",
              "properties": {
                "resolution": {
                  "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                  "type": "string",
                  "default": "Required",
                  "enum": [
                    "Required",
                    "Optional"
                  ]
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                  "type": "string",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a\nSecret to which any connection details for this managed resource should\nbe written. Connection details frequently include the endpoint, username,\nand password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name",
            "namespace"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false,
      "x-kubernetes-validations": [
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.loadBalancing) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.loadBalancing))",
          "message": "spec.forProvider.loadBalancing is a required parameter"
        }
      ]
    },
    "status": {
      "description": "FrontdoorOriginGroupStatus defines the observed state of FrontdoorOriginGroup.",
      "type": "object",
      "properties": {
        "atProvider": {
          "type": "object",
          "properties": {
            "cdnFrontdoorProfileId": {
              "description": "The ID of the Front Door Profile within which this Front Door Origin Group should exist. Changing this forces a new Front Door Origin Group to be created.",
              "type": "string"
            },
            "healthProbe": {
              "description": "A health_probe block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "intervalInSeconds": {
                    "description": "Specifies the number of seconds between health probes. Possible values are between 5 and 31536000 seconds (inclusive).",
                    "type": "number"
                  },
                  "path": {
                    "description": "Specifies the path relative to the origin that is used to determine the health of the origin. Defaults to /.",
                    "type": "string"
                  },
                  "protocol": {
                    "description": "Specifies the protocol to use for health probe. Possible values are Http and Https.",
                    "type": "string"
                  },
                  "requestType": {
                    "description": "Specifies the type of health probe request that is made. Possible values are GET and HEAD. Defaults to HEAD.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "id": {
              "description": "The ID of the Front Door Origin Group.",
              "type": "string"
            },
            "loadBalancing": {
              "description": "A load_balancing block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "additionalLatencyInMilliseconds": {
                    "description": "Specifies the additional latency in milliseconds for probes to fall into the lowest latency bucket. Possible values are between 0 and 1000 milliseconds (inclusive). Defaults to 50.",
                    "type": "number"
                  },
                  "sampleSize": {
                    "description": "Specifies the number of samples to consider for load balancing decisions. Possible values are between 0 and 255 (inclusive). Defaults to 4.",
                    "type": "number"
                  },
                  "successfulSamplesRequired": {
                    "description": "Specifies the number of samples within the sample period that must succeed. Possible values are between 0 and 255 (inclusive). Defaults to 3.",
                    "type": "number"
                  }
                },
                "additionalProperties": false
              }
            },
            "restoreTrafficTimeToHealedOrNewEndpointInMinutes": {
              "description": "Specifies the amount of time which should elapse before shifting traffic to another endpoint when a healthy endpoint becomes unhealthy or a new endpoint is added. Possible values are between 0 and 50 minutes (inclusive). Default is 10 minutes.",
              "type": "number"
            },
            "sessionAffinityEnabled": {
              "description": "Specifies whether session affinity should be enabled on this host. Defaults to true.",
              "type": "boolean"
            }
          },
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "type": "array",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one\nstatus to another.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from\none status to another, if any.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to\na resource at any point in time.",
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest metadata.generation\nwhich resulted in either a ready state, or stalled due to error\nit can not recover from without human intervention.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    }
  }
}
