{
  "description": "SecretBackend is the Schema for the SecretBackends API. Creates an Active Directory secret backend for Vault.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "SecretBackendSpec defines the desired state of SecretBackend",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "deletionPolicy": {
          "description": "DeletionPolicy specifies what will happen to the underlying external\nwhen this managed resource is deleted - either \"Delete\" or \"Orphan\" the\nexternal resource.\nThis field is planned to be deprecated in favor of the ManagementPolicies\nfield in a future release. Currently, both could be set independently and\nnon-default values would be honored if the feature flag is enabled.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "type": "string",
          "default": "Delete",
          "enum": [
            "Orphan",
            "Delete"
          ]
        },
        "forProvider": {
          "type": "object",
          "properties": {
            "anonymousGroupSearch": {
              "description": "Use anonymous binds when performing LDAP group searches\n(if true the initial credentials will still be used for the initial connection test).\nUse anonymous binds when performing LDAP group searches (if true the initial credentials will still be used for the initial connection test).",
              "type": "boolean"
            },
            "backend": {
              "description": "The unique path this backend should be mounted at. Must\nnot begin or end with a /. Defaults to ad.\nThe mount path for a backend, for example, the path given in \"$ vault auth enable -path=my-ad ad\".",
              "type": "string"
            },
            "binddn": {
              "description": "Distinguished name of object to bind when performing user and group search.\nDistinguished name of object to bind when performing user and group search.",
              "type": "string"
            },
            "bindpassSecretRef": {
              "description": "Password to use along with binddn when performing user search.\nLDAP password for searching for the user DN.",
              "type": "object",
              "required": [
                "key",
                "name",
                "namespace"
              ],
              "properties": {
                "key": {
                  "description": "The key to select.",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the secret.",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the secret.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "caseSensitiveNames": {
              "description": "If set, user and group names assigned to policies within the\nbackend will be case sensitive. Otherwise, names will be normalized to lower case.\nIf true, case sensitivity will be used when comparing usernames and groups for matching policies.",
              "type": "boolean"
            },
            "certificate": {
              "description": "CA certificate to use when verifying LDAP server certificate, must be\nx509 PEM encoded.\nCA certificate to use when verifying LDAP server certificate, must be x509 PEM encoded.",
              "type": "string"
            },
            "clientTlsCertSecretRef": {
              "description": "Client certificate to provide to the LDAP server, must be x509 PEM encoded.\nClient certificate to provide to the LDAP server, must be x509 PEM encoded.",
              "type": "object",
              "required": [
                "key",
                "name",
                "namespace"
              ],
              "properties": {
                "key": {
                  "description": "The key to select.",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the secret.",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the secret.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "clientTlsKeySecretRef": {
              "description": "Client certificate key to provide to the LDAP server, must be x509 PEM encoded.\nClient certificate key to provide to the LDAP server, must be x509 PEM encoded.",
              "type": "object",
              "required": [
                "key",
                "name",
                "namespace"
              ],
              "properties": {
                "key": {
                  "description": "The key to select.",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the secret.",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the secret.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "defaultLeaseTtlSeconds": {
              "description": "Default lease duration for secrets in seconds.\nDefault lease duration for secrets in seconds",
              "type": "number"
            },
            "denyNullBind": {
              "description": "Denies an unauthenticated LDAP bind request if the user's password is empty;\ndefaults to true.\nDenies an unauthenticated LDAP bind request if the user's password is empty; defaults to true",
              "type": "boolean"
            },
            "description": {
              "description": "Human-friendly description of the mount for the Active Directory backend.\nHuman-friendly description of the mount for the backend.",
              "type": "string"
            },
            "disableRemount": {
              "description": "If set, opts out of mount migration on path updates.\nSee here for more info on Mount Migration\nIf set, opts out of mount migration on path updates.",
              "type": "boolean"
            },
            "discoverdn": {
              "description": "Use anonymous bind to discover the bind Distinguished Name of a user.\nUse anonymous bind to discover the bind DN of a user.",
              "type": "boolean"
            },
            "groupattr": {
              "description": "LDAP attribute to follow on objects returned by  in order to enumerate\nuser group membership. Examples: cn or memberOf, etc. Defaults to cn.\nLDAP attribute to follow on objects returned by \u003cgroupfilter\u003e in order to enumerate user group membership. Examples: \"cn\" or \"memberOf\", etc. Default: cn",
              "type": "string"
            },
            "groupdn": {
              "description": "LDAP search base to use for group membership search (eg: ou=Groups,dc=example,dc=org).\nLDAP search base to use for group membership search (eg: ou=Groups,dc=example,dc=org)",
              "type": "string"
            },
            "groupfilter": {
              "description": "Go template for querying group membership of user  The template can access\nthe following context variables: UserDN, Username. Defaults to (|(memberUid={{.Username}})(member={{.UserDN}})(uniqueMember={{.UserDN}}))\nGo template for querying group membership of user. The template can access the following context variables: UserDN, Username Example: (\u0026(objectClass=group)(member:1.2.840.113556.1.4.1941:={{.UserDN}})) Default: (|(memberUid={{.Username}})(member={{.UserDN}})(uniqueMember={{.UserDN}}))",
              "type": "string"
            },
            "insecureTls": {
              "description": "Skip LDAP server SSL Certificate verification. This is not recommended for production.\nDefaults to false.\nSkip LDAP server SSL Certificate verification - insecure and not recommended for production use.",
              "type": "boolean"
            },
            "lastRotationTolerance": {
              "description": "The number of seconds after a Vault rotation where, if Active Directory\nshows a later rotation, it should be considered out-of-band\nThe number of seconds after a Vault rotation where, if Active Directory shows a later rotation, it should be considered out-of-band.",
              "type": "number"
            },
            "local": {
              "description": "Mark the secrets engine as local-only. Local engines are not replicated or removed by\nreplication.Tolerance duration to use when checking the last rotation time.\nMark the secrets engine as local-only. Local engines are not replicated or removed by replication.Tolerance duration to use when checking the last rotation time.",
              "type": "boolean"
            },
            "maxLeaseTtlSeconds": {
              "description": "Maximum possible lease duration for secrets in seconds.\nMaximum possible lease duration for secrets in seconds.",
              "type": "number"
            },
            "maxTtl": {
              "description": "In seconds, the maximum password time-to-live.\nIn seconds, the maximum password time-to-live.",
              "type": "number"
            },
            "namespace": {
              "description": "The namespace to provision the resource in.\nThe value should not contain leading or trailing forward slashes.\nThe namespace is always relative to the provider's configured namespace.\nAvailable only for Vault Enterprise.\nTarget namespace. (requires Enterprise)",
              "type": "string"
            },
            "passwordPolicy": {
              "description": "Name of the password policy to use to generate passwords.\nName of the password policy to use to generate passwords.",
              "type": "string"
            },
            "requestTimeout": {
              "description": "Timeout, in seconds, for the connection when making requests against the server\nbefore returning back an error.\nTimeout, in seconds, for the connection when making requests against the server before returning back an error.",
              "type": "number"
            },
            "starttls": {
              "description": "Issue a StartTLS command after establishing unencrypted connection.\nIssue a StartTLS command after establishing unencrypted connection.",
              "type": "boolean"
            },
            "tlsMaxVersion": {
              "description": "Maximum TLS version to use. Accepted values are tls10, tls11,\ntls12 or tls13. Defaults to tls12.\nMaximum TLS version to use. Accepted values are 'tls10', 'tls11', 'tls12' or 'tls13'. Defaults to 'tls12'",
              "type": "string"
            },
            "tlsMinVersion": {
              "description": "Minimum TLS version to use. Accepted values are tls10, tls11,\ntls12 or tls13. Defaults to tls12.\nMinimum TLS version to use. Accepted values are 'tls10', 'tls11', 'tls12' or 'tls13'. Defaults to 'tls12'",
              "type": "string"
            },
            "ttl": {
              "description": "In seconds, the default password time-to-live.\nIn seconds, the default password time-to-live.",
              "type": "number"
            },
            "upndomain": {
              "description": "Enables userPrincipalDomain login with [username]@UPNDomain.\nEnables userPrincipalDomain login with [username]@UPNDomain.",
              "type": "string"
            },
            "url": {
              "description": "LDAP URL to connect to. Multiple URLs can be specified by concatenating\nthem with commas; they will be tried in-order. Defaults to ldap://127.0.0.1.\nLDAP URL to connect to (default: ldap://127.0.0.1). Multiple URLs can be specified by concatenating them with commas; they will be tried in-order.",
              "type": "string"
            },
            "usePre111GroupCnBehavior": {
              "description": "In Vault 1.1.1 a fix for handling group CN values of\ndifferent cases unfortunately introduced a regression that could cause previously defined groups\nto not be found due to a change in the resulting name. If set true, the pre-1.1.1 behavior for\nmatching group CNs will be used. This is only needed in some upgrade scenarios for backwards\ncompatibility. It is enabled by default if the config is upgraded but disabled by default on\nnew configurations.\nIn Vault 1.1.1 a fix for handling group CN values of different cases unfortunately introduced a regression that could cause previously defined groups to not be found due to a change in the resulting name. If set true, the pre-1.1.1 behavior for matching group CNs will be used. This is only needed in some upgrade scenarios for backwards compatibility. It is enabled by default if the config is upgraded but disabled by default on new configurations.",
              "type": "boolean"
            },
            "useTokenGroups": {
              "description": "If true, use the Active Directory tokenGroups constructed attribute of the\nuser to find the group memberships. This will find all security groups including nested ones.\nIf true, use the Active Directory tokenGroups constructed attribute of the user to find the group memberships. This will find all security groups including nested ones.",
              "type": "boolean"
            },
            "userattr": {
              "description": "Attribute used when searching users. Defaults to cn.\nAttribute used for users (default: cn)",
              "type": "string"
            },
            "userdn": {
              "description": "LDAP domain to use for users (eg: ou=People,dc=example,dc=org)`.\nLDAP domain to use for users (eg: ou=People,dc=example,dc=org)",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored\nunless the Management Policies feature flag is disabled.\nInitProvider holds the same fields as ForProvider, with the exception\nof Identifier and other resource reference fields. The fields that are\nin InitProvider are merged into ForProvider when the resource is created.\nThe same fields are also added to the terraform ignore_changes hook, to\navoid updating them after creation. This is useful for fields that are\nrequired on creation, but we do not desire to update them after creation,\nfor example because of an external controller is managing them, like an\nautoscaler.",
          "type": "object",
          "required": [
            "bindpassSecretRef"
          ],
          "properties": {
            "anonymousGroupSearch": {
              "description": "Use anonymous binds when performing LDAP group searches\n(if true the initial credentials will still be used for the initial connection test).\nUse anonymous binds when performing LDAP group searches (if true the initial credentials will still be used for the initial connection test).",
              "type": "boolean"
            },
            "backend": {
              "description": "The unique path this backend should be mounted at. Must\nnot begin or end with a /. Defaults to ad.\nThe mount path for a backend, for example, the path given in \"$ vault auth enable -path=my-ad ad\".",
              "type": "string"
            },
            "binddn": {
              "description": "Distinguished name of object to bind when performing user and group search.\nDistinguished name of object to bind when performing user and group search.",
              "type": "string"
            },
            "bindpassSecretRef": {
              "description": "Password to use along with binddn when performing user search.\nLDAP password for searching for the user DN.",
              "type": "object",
              "required": [
                "key",
                "name",
                "namespace"
              ],
              "properties": {
                "key": {
                  "description": "The key to select.",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the secret.",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the secret.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "caseSensitiveNames": {
              "description": "If set, user and group names assigned to policies within the\nbackend will be case sensitive. Otherwise, names will be normalized to lower case.\nIf true, case sensitivity will be used when comparing usernames and groups for matching policies.",
              "type": "boolean"
            },
            "certificate": {
              "description": "CA certificate to use when verifying LDAP server certificate, must be\nx509 PEM encoded.\nCA certificate to use when verifying LDAP server certificate, must be x509 PEM encoded.",
              "type": "string"
            },
            "clientTlsCertSecretRef": {
              "description": "Client certificate to provide to the LDAP server, must be x509 PEM encoded.\nClient certificate to provide to the LDAP server, must be x509 PEM encoded.",
              "type": "object",
              "required": [
                "key",
                "name",
                "namespace"
              ],
              "properties": {
                "key": {
                  "description": "The key to select.",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the secret.",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the secret.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "clientTlsKeySecretRef": {
              "description": "Client certificate key to provide to the LDAP server, must be x509 PEM encoded.\nClient certificate key to provide to the LDAP server, must be x509 PEM encoded.",
              "type": "object",
              "required": [
                "key",
                "name",
                "namespace"
              ],
              "properties": {
                "key": {
                  "description": "The key to select.",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the secret.",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the secret.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "defaultLeaseTtlSeconds": {
              "description": "Default lease duration for secrets in seconds.\nDefault lease duration for secrets in seconds",
              "type": "number"
            },
            "denyNullBind": {
              "description": "Denies an unauthenticated LDAP bind request if the user's password is empty;\ndefaults to true.\nDenies an unauthenticated LDAP bind request if the user's password is empty; defaults to true",
              "type": "boolean"
            },
            "description": {
              "description": "Human-friendly description of the mount for the Active Directory backend.\nHuman-friendly description of the mount for the backend.",
              "type": "string"
            },
            "disableRemount": {
              "description": "If set, opts out of mount migration on path updates.\nSee here for more info on Mount Migration\nIf set, opts out of mount migration on path updates.",
              "type": "boolean"
            },
            "discoverdn": {
              "description": "Use anonymous bind to discover the bind Distinguished Name of a user.\nUse anonymous bind to discover the bind DN of a user.",
              "type": "boolean"
            },
            "groupattr": {
              "description": "LDAP attribute to follow on objects returned by  in order to enumerate\nuser group membership. Examples: cn or memberOf, etc. Defaults to cn.\nLDAP attribute to follow on objects returned by \u003cgroupfilter\u003e in order to enumerate user group membership. Examples: \"cn\" or \"memberOf\", etc. Default: cn",
              "type": "string"
            },
            "groupdn": {
              "description": "LDAP search base to use for group membership search (eg: ou=Groups,dc=example,dc=org).\nLDAP search base to use for group membership search (eg: ou=Groups,dc=example,dc=org)",
              "type": "string"
            },
            "groupfilter": {
              "description": "Go template for querying group membership of user  The template can access\nthe following context variables: UserDN, Username. Defaults to (|(memberUid={{.Username}})(member={{.UserDN}})(uniqueMember={{.UserDN}}))\nGo template for querying group membership of user. The template can access the following context variables: UserDN, Username Example: (\u0026(objectClass=group)(member:1.2.840.113556.1.4.1941:={{.UserDN}})) Default: (|(memberUid={{.Username}})(member={{.UserDN}})(uniqueMember={{.UserDN}}))",
              "type": "string"
            },
            "insecureTls": {
              "description": "Skip LDAP server SSL Certificate verification. This is not recommended for production.\nDefaults to false.\nSkip LDAP server SSL Certificate verification - insecure and not recommended for production use.",
              "type": "boolean"
            },
            "lastRotationTolerance": {
              "description": "The number of seconds after a Vault rotation where, if Active Directory\nshows a later rotation, it should be considered out-of-band\nThe number of seconds after a Vault rotation where, if Active Directory shows a later rotation, it should be considered out-of-band.",
              "type": "number"
            },
            "local": {
              "description": "Mark the secrets engine as local-only. Local engines are not replicated or removed by\nreplication.Tolerance duration to use when checking the last rotation time.\nMark the secrets engine as local-only. Local engines are not replicated or removed by replication.Tolerance duration to use when checking the last rotation time.",
              "type": "boolean"
            },
            "maxLeaseTtlSeconds": {
              "description": "Maximum possible lease duration for secrets in seconds.\nMaximum possible lease duration for secrets in seconds.",
              "type": "number"
            },
            "maxTtl": {
              "description": "In seconds, the maximum password time-to-live.\nIn seconds, the maximum password time-to-live.",
              "type": "number"
            },
            "namespace": {
              "description": "The namespace to provision the resource in.\nThe value should not contain leading or trailing forward slashes.\nThe namespace is always relative to the provider's configured namespace.\nAvailable only for Vault Enterprise.\nTarget namespace. (requires Enterprise)",
              "type": "string"
            },
            "passwordPolicy": {
              "description": "Name of the password policy to use to generate passwords.\nName of the password policy to use to generate passwords.",
              "type": "string"
            },
            "requestTimeout": {
              "description": "Timeout, in seconds, for the connection when making requests against the server\nbefore returning back an error.\nTimeout, in seconds, for the connection when making requests against the server before returning back an error.",
              "type": "number"
            },
            "starttls": {
              "description": "Issue a StartTLS command after establishing unencrypted connection.\nIssue a StartTLS command after establishing unencrypted connection.",
              "type": "boolean"
            },
            "tlsMaxVersion": {
              "description": "Maximum TLS version to use. Accepted values are tls10, tls11,\ntls12 or tls13. Defaults to tls12.\nMaximum TLS version to use. Accepted values are 'tls10', 'tls11', 'tls12' or 'tls13'. Defaults to 'tls12'",
              "type": "string"
            },
            "tlsMinVersion": {
              "description": "Minimum TLS version to use. Accepted values are tls10, tls11,\ntls12 or tls13. Defaults to tls12.\nMinimum TLS version to use. Accepted values are 'tls10', 'tls11', 'tls12' or 'tls13'. Defaults to 'tls12'",
              "type": "string"
            },
            "ttl": {
              "description": "In seconds, the default password time-to-live.\nIn seconds, the default password time-to-live.",
              "type": "number"
            },
            "upndomain": {
              "description": "Enables userPrincipalDomain login with [username]@UPNDomain.\nEnables userPrincipalDomain login with [username]@UPNDomain.",
              "type": "string"
            },
            "url": {
              "description": "LDAP URL to connect to. Multiple URLs can be specified by concatenating\nthem with commas; they will be tried in-order. Defaults to ldap://127.0.0.1.\nLDAP URL to connect to (default: ldap://127.0.0.1). Multiple URLs can be specified by concatenating them with commas; they will be tried in-order.",
              "type": "string"
            },
            "usePre111GroupCnBehavior": {
              "description": "In Vault 1.1.1 a fix for handling group CN values of\ndifferent cases unfortunately introduced a regression that could cause previously defined groups\nto not be found due to a change in the resulting name. If set true, the pre-1.1.1 behavior for\nmatching group CNs will be used. This is only needed in some upgrade scenarios for backwards\ncompatibility. It is enabled by default if the config is upgraded but disabled by default on\nnew configurations.\nIn Vault 1.1.1 a fix for handling group CN values of different cases unfortunately introduced a regression that could cause previously defined groups to not be found due to a change in the resulting name. If set true, the pre-1.1.1 behavior for matching group CNs will be used. This is only needed in some upgrade scenarios for backwards compatibility. It is enabled by default if the config is upgraded but disabled by default on new configurations.",
              "type": "boolean"
            },
            "useTokenGroups": {
              "description": "If true, use the Active Directory tokenGroups constructed attribute of the\nuser to find the group memberships. This will find all security groups including nested ones.\nIf true, use the Active Directory tokenGroups constructed attribute of the user to find the group memberships. This will find all security groups including nested ones.",
              "type": "boolean"
            },
            "userattr": {
              "description": "Attribute used when searching users. Defaults to cn.\nAttribute used for users (default: cn)",
              "type": "string"
            },
            "userdn": {
              "description": "LDAP domain to use for users (eg: ou=People,dc=example,dc=org)`.\nLDAP domain to use for users (eg: ou=People,dc=example,dc=org)",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "managementPolicies": {
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out\nthrough a Crossplane feature flag.\nManagementPolicies specify the array of actions Crossplane is allowed to\ntake on the managed and external resources.\nThis field is planned to replace the DeletionPolicy field in a future\nrelease. Currently, both could be set independently and non-default\nvalues would be honored if the feature flag is enabled. If both are\ncustom, the DeletionPolicy field will be ignored.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223\nand this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers\ncan take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to\ncreate, observe, update, and delete this managed resource should be\nconfigured.",
          "type": "object",
          "default": {
            "name": "default"
          },
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "type": "object",
              "properties": {
                "resolution": {
                  "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                  "type": "string",
                  "default": "Required",
                  "enum": [
                    "Required",
                    "Optional"
                  ]
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                  "type": "string",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a\nSecret to which any connection details for this managed resource should\nbe written. Connection details frequently include the endpoint, username,\nand password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name",
            "namespace"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false,
      "x-kubernetes-validations": [
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.binddn) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.binddn))",
          "message": "spec.forProvider.binddn is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.bindpassSecretRef)",
          "message": "spec.forProvider.bindpassSecretRef is a required parameter"
        }
      ]
    },
    "status": {
      "description": "SecretBackendStatus defines the observed state of SecretBackend.",
      "type": "object",
      "properties": {
        "atProvider": {
          "type": "object",
          "properties": {
            "anonymousGroupSearch": {
              "description": "Use anonymous binds when performing LDAP group searches\n(if true the initial credentials will still be used for the initial connection test).\nUse anonymous binds when performing LDAP group searches (if true the initial credentials will still be used for the initial connection test).",
              "type": "boolean"
            },
            "backend": {
              "description": "The unique path this backend should be mounted at. Must\nnot begin or end with a /. Defaults to ad.\nThe mount path for a backend, for example, the path given in \"$ vault auth enable -path=my-ad ad\".",
              "type": "string"
            },
            "binddn": {
              "description": "Distinguished name of object to bind when performing user and group search.\nDistinguished name of object to bind when performing user and group search.",
              "type": "string"
            },
            "caseSensitiveNames": {
              "description": "If set, user and group names assigned to policies within the\nbackend will be case sensitive. Otherwise, names will be normalized to lower case.\nIf true, case sensitivity will be used when comparing usernames and groups for matching policies.",
              "type": "boolean"
            },
            "certificate": {
              "description": "CA certificate to use when verifying LDAP server certificate, must be\nx509 PEM encoded.\nCA certificate to use when verifying LDAP server certificate, must be x509 PEM encoded.",
              "type": "string"
            },
            "defaultLeaseTtlSeconds": {
              "description": "Default lease duration for secrets in seconds.\nDefault lease duration for secrets in seconds",
              "type": "number"
            },
            "denyNullBind": {
              "description": "Denies an unauthenticated LDAP bind request if the user's password is empty;\ndefaults to true.\nDenies an unauthenticated LDAP bind request if the user's password is empty; defaults to true",
              "type": "boolean"
            },
            "description": {
              "description": "Human-friendly description of the mount for the Active Directory backend.\nHuman-friendly description of the mount for the backend.",
              "type": "string"
            },
            "disableRemount": {
              "description": "If set, opts out of mount migration on path updates.\nSee here for more info on Mount Migration\nIf set, opts out of mount migration on path updates.",
              "type": "boolean"
            },
            "discoverdn": {
              "description": "Use anonymous bind to discover the bind Distinguished Name of a user.\nUse anonymous bind to discover the bind DN of a user.",
              "type": "boolean"
            },
            "groupattr": {
              "description": "LDAP attribute to follow on objects returned by  in order to enumerate\nuser group membership. Examples: cn or memberOf, etc. Defaults to cn.\nLDAP attribute to follow on objects returned by \u003cgroupfilter\u003e in order to enumerate user group membership. Examples: \"cn\" or \"memberOf\", etc. Default: cn",
              "type": "string"
            },
            "groupdn": {
              "description": "LDAP search base to use for group membership search (eg: ou=Groups,dc=example,dc=org).\nLDAP search base to use for group membership search (eg: ou=Groups,dc=example,dc=org)",
              "type": "string"
            },
            "groupfilter": {
              "description": "Go template for querying group membership of user  The template can access\nthe following context variables: UserDN, Username. Defaults to (|(memberUid={{.Username}})(member={{.UserDN}})(uniqueMember={{.UserDN}}))\nGo template for querying group membership of user. The template can access the following context variables: UserDN, Username Example: (\u0026(objectClass=group)(member:1.2.840.113556.1.4.1941:={{.UserDN}})) Default: (|(memberUid={{.Username}})(member={{.UserDN}})(uniqueMember={{.UserDN}}))",
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "insecureTls": {
              "description": "Skip LDAP server SSL Certificate verification. This is not recommended for production.\nDefaults to false.\nSkip LDAP server SSL Certificate verification - insecure and not recommended for production use.",
              "type": "boolean"
            },
            "lastRotationTolerance": {
              "description": "The number of seconds after a Vault rotation where, if Active Directory\nshows a later rotation, it should be considered out-of-band\nThe number of seconds after a Vault rotation where, if Active Directory shows a later rotation, it should be considered out-of-band.",
              "type": "number"
            },
            "local": {
              "description": "Mark the secrets engine as local-only. Local engines are not replicated or removed by\nreplication.Tolerance duration to use when checking the last rotation time.\nMark the secrets engine as local-only. Local engines are not replicated or removed by replication.Tolerance duration to use when checking the last rotation time.",
              "type": "boolean"
            },
            "maxLeaseTtlSeconds": {
              "description": "Maximum possible lease duration for secrets in seconds.\nMaximum possible lease duration for secrets in seconds.",
              "type": "number"
            },
            "maxTtl": {
              "description": "In seconds, the maximum password time-to-live.\nIn seconds, the maximum password time-to-live.",
              "type": "number"
            },
            "namespace": {
              "description": "The namespace to provision the resource in.\nThe value should not contain leading or trailing forward slashes.\nThe namespace is always relative to the provider's configured namespace.\nAvailable only for Vault Enterprise.\nTarget namespace. (requires Enterprise)",
              "type": "string"
            },
            "passwordPolicy": {
              "description": "Name of the password policy to use to generate passwords.\nName of the password policy to use to generate passwords.",
              "type": "string"
            },
            "requestTimeout": {
              "description": "Timeout, in seconds, for the connection when making requests against the server\nbefore returning back an error.\nTimeout, in seconds, for the connection when making requests against the server before returning back an error.",
              "type": "number"
            },
            "starttls": {
              "description": "Issue a StartTLS command after establishing unencrypted connection.\nIssue a StartTLS command after establishing unencrypted connection.",
              "type": "boolean"
            },
            "tlsMaxVersion": {
              "description": "Maximum TLS version to use. Accepted values are tls10, tls11,\ntls12 or tls13. Defaults to tls12.\nMaximum TLS version to use. Accepted values are 'tls10', 'tls11', 'tls12' or 'tls13'. Defaults to 'tls12'",
              "type": "string"
            },
            "tlsMinVersion": {
              "description": "Minimum TLS version to use. Accepted values are tls10, tls11,\ntls12 or tls13. Defaults to tls12.\nMinimum TLS version to use. Accepted values are 'tls10', 'tls11', 'tls12' or 'tls13'. Defaults to 'tls12'",
              "type": "string"
            },
            "ttl": {
              "description": "In seconds, the default password time-to-live.\nIn seconds, the default password time-to-live.",
              "type": "number"
            },
            "upndomain": {
              "description": "Enables userPrincipalDomain login with [username]@UPNDomain.\nEnables userPrincipalDomain login with [username]@UPNDomain.",
              "type": "string"
            },
            "url": {
              "description": "LDAP URL to connect to. Multiple URLs can be specified by concatenating\nthem with commas; they will be tried in-order. Defaults to ldap://127.0.0.1.\nLDAP URL to connect to (default: ldap://127.0.0.1). Multiple URLs can be specified by concatenating them with commas; they will be tried in-order.",
              "type": "string"
            },
            "usePre111GroupCnBehavior": {
              "description": "In Vault 1.1.1 a fix for handling group CN values of\ndifferent cases unfortunately introduced a regression that could cause previously defined groups\nto not be found due to a change in the resulting name. If set true, the pre-1.1.1 behavior for\nmatching group CNs will be used. This is only needed in some upgrade scenarios for backwards\ncompatibility. It is enabled by default if the config is upgraded but disabled by default on\nnew configurations.\nIn Vault 1.1.1 a fix for handling group CN values of different cases unfortunately introduced a regression that could cause previously defined groups to not be found due to a change in the resulting name. If set true, the pre-1.1.1 behavior for matching group CNs will be used. This is only needed in some upgrade scenarios for backwards compatibility. It is enabled by default if the config is upgraded but disabled by default on new configurations.",
              "type": "boolean"
            },
            "useTokenGroups": {
              "description": "If true, use the Active Directory tokenGroups constructed attribute of the\nuser to find the group memberships. This will find all security groups including nested ones.\nIf true, use the Active Directory tokenGroups constructed attribute of the user to find the group memberships. This will find all security groups including nested ones.",
              "type": "boolean"
            },
            "userattr": {
              "description": "Attribute used when searching users. Defaults to cn.\nAttribute used for users (default: cn)",
              "type": "string"
            },
            "userdn": {
              "description": "LDAP domain to use for users (eg: ou=People,dc=example,dc=org)`.\nLDAP domain to use for users (eg: ou=People,dc=example,dc=org)",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "type": "array",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one\nstatus to another.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from\none status to another, if any.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to\na resource at any point in time.",
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest metadata.generation\nwhich resulted in either a ready state, or stalled due to error\nit can not recover from without human intervention.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    }
  }
}
