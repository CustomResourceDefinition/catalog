{
  "description": "DataSetDelimitedText is the Schema for the DataSetDelimitedTexts API. Manages an Azure Delimited Text Dataset inside an Azure Data Factory.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "DataSetDelimitedTextSpec defines the desired state of DataSetDelimitedText",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "deletionPolicy": {
          "description": "DeletionPolicy specifies what will happen to the underlying external\nwhen this managed resource is deleted - either \"Delete\" or \"Orphan\" the\nexternal resource.\nThis field is planned to be deprecated in favor of the ManagementPolicies\nfield in a future release. Currently, both could be set independently and\nnon-default values would be honored if the feature flag is enabled.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "type": "string",
          "default": "Delete",
          "enum": [
            "Orphan",
            "Delete"
          ]
        },
        "forProvider": {
          "type": "object",
          "properties": {
            "additionalProperties": {
              "description": "A map of additional properties to associate with the Data Factory Dataset.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "annotations": {
              "description": "List of tags that can be used for describing the Data Factory Dataset.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "azureBlobFsLocation": {
              "description": "An azure_blob_fs_location block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "dynamicFileSystemEnabled": {
                    "description": "Is the file_system using dynamic expression, function or system variables? Defaults to false.",
                    "type": "boolean"
                  },
                  "dynamicFilenameEnabled": {
                    "description": "Is the filename using dynamic expression, function or system variables? Defaults to false.",
                    "type": "boolean"
                  },
                  "dynamicPathEnabled": {
                    "description": "Is the path using dynamic expression, function or system variables? Defaults to false.",
                    "type": "boolean"
                  },
                  "fileSystem": {
                    "description": "The storage data lake gen2 file system on the Azure Blob Storage Account hosting the file.",
                    "type": "string"
                  },
                  "filename": {
                    "description": "The filename of the file.",
                    "type": "string"
                  },
                  "path": {
                    "description": "The folder path to the file.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "azureBlobStorageLocation": {
              "description": "An azure_blob_storage_location block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "container": {
                    "description": "The container on the Azure Blob Storage Account hosting the file.",
                    "type": "string"
                  },
                  "dynamicContainerEnabled": {
                    "description": "Is the container using dynamic expression, function or system variables? Defaults to false.",
                    "type": "boolean"
                  },
                  "dynamicFilenameEnabled": {
                    "description": "Is the filename using dynamic expression, function or system variables? Defaults to false.",
                    "type": "boolean"
                  },
                  "dynamicPathEnabled": {
                    "description": "Is the path using dynamic expression, function or system variables? Defaults to false.",
                    "type": "boolean"
                  },
                  "filename": {
                    "description": "The filename of the file.",
                    "type": "string"
                  },
                  "path": {
                    "description": "The folder path to the file. This can be an empty string.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "columnDelimiter": {
              "description": "The column delimiter. Defaults to ,.",
              "type": "string"
            },
            "compressionCodec": {
              "description": "The compression codec used to read/write text files. Valid values are None, bzip2, gzip, deflate, ZipDeflate, TarGzip, Tar, snappy and lz4. Please note these values are case sensitive.",
              "type": "string"
            },
            "compressionLevel": {
              "description": "The compression ratio for the Data Factory Dataset. Valid values are Fastest or Optimal. Please note these values are case sensitive.",
              "type": "string"
            },
            "dataFactoryId": {
              "description": "The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.",
              "type": "string"
            },
            "dataFactoryIdRef": {
              "description": "Reference to a Factory in datafactory to populate dataFactoryId.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "dataFactoryIdSelector": {
              "description": "Selector for a Factory in datafactory to populate dataFactoryId.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "description": {
              "description": "The description for the Data Factory Dataset.",
              "type": "string"
            },
            "encoding": {
              "description": "The encoding format for the file.",
              "type": "string"
            },
            "escapeCharacter": {
              "description": "The escape character. Defaults to \\.",
              "type": "string"
            },
            "firstRowAsHeader": {
              "description": "When used as input, treat the first row of data as headers. When used as output, write the headers into the output as the first row of data. Defaults to false.",
              "type": "boolean"
            },
            "folder": {
              "description": "The folder that this Dataset is in. If not specified, the Dataset will appear at the root level.",
              "type": "string"
            },
            "httpServerLocation": {
              "description": "A http_server_location block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "dynamicFilenameEnabled": {
                    "description": "Is the filename using dynamic expression, function or system variables? Defaults to false.",
                    "type": "boolean"
                  },
                  "dynamicPathEnabled": {
                    "description": "Is the path using dynamic expression, function or system variables? Defaults to false.",
                    "type": "boolean"
                  },
                  "filename": {
                    "description": "The filename of the file on the web server.",
                    "type": "string"
                  },
                  "path": {
                    "description": "The folder path to the file on the web server.",
                    "type": "string"
                  },
                  "relativeUrl": {
                    "description": "The base URL to the web server hosting the file.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "linkedServiceName": {
              "description": "The Data Factory Linked Service name in which to associate the Dataset with.",
              "type": "string"
            },
            "linkedServiceNameRef": {
              "description": "Reference to a LinkedServiceWeb in datafactory to populate linkedServiceName.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "linkedServiceNameSelector": {
              "description": "Selector for a LinkedServiceWeb in datafactory to populate linkedServiceName.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "nullValue": {
              "description": "The null value string. Defaults to \"\".",
              "type": "string"
            },
            "parameters": {
              "description": "A map of parameters to associate with the Data Factory Dataset.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "quoteCharacter": {
              "description": "The quote character. Defaults to \".",
              "type": "string"
            },
            "rowDelimiter": {
              "description": "The row delimiter. Defaults to any of the following values on read: \\r\\n, \\r, \\n, and \\n or \\r\\n on write by mapping data flow and Copy activity respectively.",
              "type": "string"
            },
            "schemaColumn": {
              "description": "A schema_column block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "description": {
                    "description": "The description of the column.",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the column.",
                    "type": "string"
                  },
                  "type": {
                    "description": "Type of the column. Valid values are Byte, Byte[], Boolean, Date, DateTime,DateTimeOffset, Decimal, Double, Guid, Int16, Int32, Int64, Single, String, TimeSpan. Please note these values are case sensitive.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored\nunless the Management Policies feature flag is disabled.\nInitProvider holds the same fields as ForProvider, with the exception\nof Identifier and other resource reference fields. The fields that are\nin InitProvider are merged into ForProvider when the resource is created.\nThe same fields are also added to the terraform ignore_changes hook, to\navoid updating them after creation. This is useful for fields that are\nrequired on creation, but we do not desire to update them after creation,\nfor example because of an external controller is managing them, like an\nautoscaler.",
          "type": "object",
          "properties": {
            "additionalProperties": {
              "description": "A map of additional properties to associate with the Data Factory Dataset.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "annotations": {
              "description": "List of tags that can be used for describing the Data Factory Dataset.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "azureBlobFsLocation": {
              "description": "An azure_blob_fs_location block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "dynamicFileSystemEnabled": {
                    "description": "Is the file_system using dynamic expression, function or system variables? Defaults to false.",
                    "type": "boolean"
                  },
                  "dynamicFilenameEnabled": {
                    "description": "Is the filename using dynamic expression, function or system variables? Defaults to false.",
                    "type": "boolean"
                  },
                  "dynamicPathEnabled": {
                    "description": "Is the path using dynamic expression, function or system variables? Defaults to false.",
                    "type": "boolean"
                  },
                  "fileSystem": {
                    "description": "The storage data lake gen2 file system on the Azure Blob Storage Account hosting the file.",
                    "type": "string"
                  },
                  "filename": {
                    "description": "The filename of the file.",
                    "type": "string"
                  },
                  "path": {
                    "description": "The folder path to the file.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "azureBlobStorageLocation": {
              "description": "An azure_blob_storage_location block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "container": {
                    "description": "The container on the Azure Blob Storage Account hosting the file.",
                    "type": "string"
                  },
                  "dynamicContainerEnabled": {
                    "description": "Is the container using dynamic expression, function or system variables? Defaults to false.",
                    "type": "boolean"
                  },
                  "dynamicFilenameEnabled": {
                    "description": "Is the filename using dynamic expression, function or system variables? Defaults to false.",
                    "type": "boolean"
                  },
                  "dynamicPathEnabled": {
                    "description": "Is the path using dynamic expression, function or system variables? Defaults to false.",
                    "type": "boolean"
                  },
                  "filename": {
                    "description": "The filename of the file.",
                    "type": "string"
                  },
                  "path": {
                    "description": "The folder path to the file. This can be an empty string.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "columnDelimiter": {
              "description": "The column delimiter. Defaults to ,.",
              "type": "string"
            },
            "compressionCodec": {
              "description": "The compression codec used to read/write text files. Valid values are None, bzip2, gzip, deflate, ZipDeflate, TarGzip, Tar, snappy and lz4. Please note these values are case sensitive.",
              "type": "string"
            },
            "compressionLevel": {
              "description": "The compression ratio for the Data Factory Dataset. Valid values are Fastest or Optimal. Please note these values are case sensitive.",
              "type": "string"
            },
            "description": {
              "description": "The description for the Data Factory Dataset.",
              "type": "string"
            },
            "encoding": {
              "description": "The encoding format for the file.",
              "type": "string"
            },
            "escapeCharacter": {
              "description": "The escape character. Defaults to \\.",
              "type": "string"
            },
            "firstRowAsHeader": {
              "description": "When used as input, treat the first row of data as headers. When used as output, write the headers into the output as the first row of data. Defaults to false.",
              "type": "boolean"
            },
            "folder": {
              "description": "The folder that this Dataset is in. If not specified, the Dataset will appear at the root level.",
              "type": "string"
            },
            "httpServerLocation": {
              "description": "A http_server_location block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "dynamicFilenameEnabled": {
                    "description": "Is the filename using dynamic expression, function or system variables? Defaults to false.",
                    "type": "boolean"
                  },
                  "dynamicPathEnabled": {
                    "description": "Is the path using dynamic expression, function or system variables? Defaults to false.",
                    "type": "boolean"
                  },
                  "filename": {
                    "description": "The filename of the file on the web server.",
                    "type": "string"
                  },
                  "path": {
                    "description": "The folder path to the file on the web server.",
                    "type": "string"
                  },
                  "relativeUrl": {
                    "description": "The base URL to the web server hosting the file.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "linkedServiceName": {
              "description": "The Data Factory Linked Service name in which to associate the Dataset with.",
              "type": "string"
            },
            "linkedServiceNameRef": {
              "description": "Reference to a LinkedServiceWeb in datafactory to populate linkedServiceName.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "linkedServiceNameSelector": {
              "description": "Selector for a LinkedServiceWeb in datafactory to populate linkedServiceName.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "nullValue": {
              "description": "The null value string. Defaults to \"\".",
              "type": "string"
            },
            "parameters": {
              "description": "A map of parameters to associate with the Data Factory Dataset.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "quoteCharacter": {
              "description": "The quote character. Defaults to \".",
              "type": "string"
            },
            "rowDelimiter": {
              "description": "The row delimiter. Defaults to any of the following values on read: \\r\\n, \\r, \\n, and \\n or \\r\\n on write by mapping data flow and Copy activity respectively.",
              "type": "string"
            },
            "schemaColumn": {
              "description": "A schema_column block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "description": {
                    "description": "The description of the column.",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the column.",
                    "type": "string"
                  },
                  "type": {
                    "description": "Type of the column. Valid values are Byte, Byte[], Boolean, Date, DateTime,DateTimeOffset, Decimal, Double, Guid, Int16, Int32, Int64, Single, String, TimeSpan. Please note these values are case sensitive.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "additionalProperties": false
        },
        "managementPolicies": {
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out\nthrough a Crossplane feature flag.\nManagementPolicies specify the array of actions Crossplane is allowed to\ntake on the managed and external resources.\nThis field is planned to replace the DeletionPolicy field in a future\nrelease. Currently, both could be set independently and non-default\nvalues would be honored if the feature flag is enabled. If both are\ncustom, the DeletionPolicy field will be ignored.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223\nand this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers\ncan take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to\ncreate, observe, update, and delete this managed resource should be\nconfigured.",
          "type": "object",
          "default": {
            "name": "default"
          },
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "type": "object",
              "properties": {
                "resolution": {
                  "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                  "type": "string",
                  "default": "Required",
                  "enum": [
                    "Required",
                    "Optional"
                  ]
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                  "type": "string",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a\nSecret to which any connection details for this managed resource should\nbe written. Connection details frequently include the endpoint, username,\nand password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name",
            "namespace"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "DataSetDelimitedTextStatus defines the observed state of DataSetDelimitedText.",
      "type": "object",
      "properties": {
        "atProvider": {
          "type": "object",
          "properties": {
            "additionalProperties": {
              "description": "A map of additional properties to associate with the Data Factory Dataset.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "annotations": {
              "description": "List of tags that can be used for describing the Data Factory Dataset.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "azureBlobFsLocation": {
              "description": "An azure_blob_fs_location block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "dynamicFileSystemEnabled": {
                    "description": "Is the file_system using dynamic expression, function or system variables? Defaults to false.",
                    "type": "boolean"
                  },
                  "dynamicFilenameEnabled": {
                    "description": "Is the filename using dynamic expression, function or system variables? Defaults to false.",
                    "type": "boolean"
                  },
                  "dynamicPathEnabled": {
                    "description": "Is the path using dynamic expression, function or system variables? Defaults to false.",
                    "type": "boolean"
                  },
                  "fileSystem": {
                    "description": "The storage data lake gen2 file system on the Azure Blob Storage Account hosting the file.",
                    "type": "string"
                  },
                  "filename": {
                    "description": "The filename of the file.",
                    "type": "string"
                  },
                  "path": {
                    "description": "The folder path to the file.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "azureBlobStorageLocation": {
              "description": "An azure_blob_storage_location block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "container": {
                    "description": "The container on the Azure Blob Storage Account hosting the file.",
                    "type": "string"
                  },
                  "dynamicContainerEnabled": {
                    "description": "Is the container using dynamic expression, function or system variables? Defaults to false.",
                    "type": "boolean"
                  },
                  "dynamicFilenameEnabled": {
                    "description": "Is the filename using dynamic expression, function or system variables? Defaults to false.",
                    "type": "boolean"
                  },
                  "dynamicPathEnabled": {
                    "description": "Is the path using dynamic expression, function or system variables? Defaults to false.",
                    "type": "boolean"
                  },
                  "filename": {
                    "description": "The filename of the file.",
                    "type": "string"
                  },
                  "path": {
                    "description": "The folder path to the file. This can be an empty string.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "columnDelimiter": {
              "description": "The column delimiter. Defaults to ,.",
              "type": "string"
            },
            "compressionCodec": {
              "description": "The compression codec used to read/write text files. Valid values are None, bzip2, gzip, deflate, ZipDeflate, TarGzip, Tar, snappy and lz4. Please note these values are case sensitive.",
              "type": "string"
            },
            "compressionLevel": {
              "description": "The compression ratio for the Data Factory Dataset. Valid values are Fastest or Optimal. Please note these values are case sensitive.",
              "type": "string"
            },
            "dataFactoryId": {
              "description": "The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.",
              "type": "string"
            },
            "description": {
              "description": "The description for the Data Factory Dataset.",
              "type": "string"
            },
            "encoding": {
              "description": "The encoding format for the file.",
              "type": "string"
            },
            "escapeCharacter": {
              "description": "The escape character. Defaults to \\.",
              "type": "string"
            },
            "firstRowAsHeader": {
              "description": "When used as input, treat the first row of data as headers. When used as output, write the headers into the output as the first row of data. Defaults to false.",
              "type": "boolean"
            },
            "folder": {
              "description": "The folder that this Dataset is in. If not specified, the Dataset will appear at the root level.",
              "type": "string"
            },
            "httpServerLocation": {
              "description": "A http_server_location block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "dynamicFilenameEnabled": {
                    "description": "Is the filename using dynamic expression, function or system variables? Defaults to false.",
                    "type": "boolean"
                  },
                  "dynamicPathEnabled": {
                    "description": "Is the path using dynamic expression, function or system variables? Defaults to false.",
                    "type": "boolean"
                  },
                  "filename": {
                    "description": "The filename of the file on the web server.",
                    "type": "string"
                  },
                  "path": {
                    "description": "The folder path to the file on the web server.",
                    "type": "string"
                  },
                  "relativeUrl": {
                    "description": "The base URL to the web server hosting the file.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "id": {
              "description": "The ID of the Data Factory Dataset.",
              "type": "string"
            },
            "linkedServiceName": {
              "description": "The Data Factory Linked Service name in which to associate the Dataset with.",
              "type": "string"
            },
            "nullValue": {
              "description": "The null value string. Defaults to \"\".",
              "type": "string"
            },
            "parameters": {
              "description": "A map of parameters to associate with the Data Factory Dataset.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "quoteCharacter": {
              "description": "The quote character. Defaults to \".",
              "type": "string"
            },
            "rowDelimiter": {
              "description": "The row delimiter. Defaults to any of the following values on read: \\r\\n, \\r, \\n, and \\n or \\r\\n on write by mapping data flow and Copy activity respectively.",
              "type": "string"
            },
            "schemaColumn": {
              "description": "A schema_column block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "description": {
                    "description": "The description of the column.",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the column.",
                    "type": "string"
                  },
                  "type": {
                    "description": "Type of the column. Valid values are Byte, Byte[], Boolean, Date, DateTime,DateTimeOffset, Decimal, Double, Guid, Int16, Int32, Int64, Single, String, TimeSpan. Please note these values are case sensitive.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "type": "array",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one\nstatus to another.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from\none status to another, if any.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to\na resource at any point in time.",
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest metadata.generation\nwhich resulted in either a ready state, or stalled due to error\nit can not recover from without human intervention.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    }
  }
}
