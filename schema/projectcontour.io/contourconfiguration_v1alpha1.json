{
  "description": "ContourConfiguration is the schema for a Contour instance.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "ContourConfigurationSpec represents a configuration of a Contour controller.\nIt contains most of all the options that can be customized, the\nother remaining options being command line flags.",
      "type": "object",
      "properties": {
        "debug": {
          "description": "Debug contains parameters to enable debug logging\nand debug interfaces inside Contour.",
          "type": "object",
          "properties": {
            "address": {
              "description": "Defines the Contour debug address interface.\nContour's default is \"127.0.0.1\".",
              "type": "string"
            },
            "port": {
              "description": "Defines the Contour debug address port.\nContour's default is 6060.",
              "type": "integer"
            }
          },
          "additionalProperties": false
        },
        "enableExternalNameService": {
          "description": "EnableExternalNameService allows processing of ExternalNameServices\nContour's default is false for security reasons.",
          "type": "boolean"
        },
        "envoy": {
          "description": "Envoy contains parameters for Envoy as well\nas how to optionally configure a managed Envoy fleet.",
          "type": "object",
          "properties": {
            "clientCertificate": {
              "description": "ClientCertificate defines the namespace/name of the Kubernetes\nsecret containing the client certificate and private key\nto be used when establishing TLS connection to upstream\ncluster.",
              "type": "object",
              "required": [
                "name",
                "namespace"
              ],
              "properties": {
                "name": {
                  "type": "string"
                },
                "namespace": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "cluster": {
              "description": "Cluster holds various configurable Envoy cluster values that can\nbe set in the config file.",
              "type": "object",
              "properties": {
                "circuitBreakers": {
                  "description": "GlobalCircuitBreakerDefaults specifies default circuit breaker budget across all services.\nIf defined, this will be used as the default for all services.",
                  "type": "object",
                  "properties": {
                    "maxConnections": {
                      "description": "The maximum number of connections that a single Envoy instance allows to the Kubernetes Service; defaults to 1024.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "maxPendingRequests": {
                      "description": "The maximum number of pending requests that a single Envoy instance allows to the Kubernetes Service; defaults to 1024.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "maxRequests": {
                      "description": "The maximum parallel requests a single Envoy instance allows to the Kubernetes Service; defaults to 1024",
                      "type": "integer",
                      "format": "int32"
                    },
                    "maxRetries": {
                      "description": "The maximum number of parallel retries a single Envoy instance allows to the Kubernetes Service; defaults to 3.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "perHostMaxConnections": {
                      "description": "PerHostMaxConnections is the maximum number of connections\nthat Envoy will allow to each individual host in a cluster.",
                      "type": "integer",
                      "format": "int32"
                    }
                  },
                  "additionalProperties": false
                },
                "dnsLookupFamily": {
                  "description": "DNSLookupFamily defines how external names are looked up\nWhen configured as V4, the DNS resolver will only perform a lookup\nfor addresses in the IPv4 family. If V6 is configured, the DNS resolver\nwill only perform a lookup for addresses in the IPv6 family.\nIf AUTO is configured, the DNS resolver will first perform a lookup\nfor addresses in the IPv6 family and fallback to a lookup for addresses\nin the IPv4 family. If ALL is specified, the DNS resolver will perform a lookup for\nboth IPv4 and IPv6 families, and return all resolved addresses.\nWhen this is used, Happy Eyeballs will be enabled for upstream connections.\nRefer to Happy Eyeballs Support for more information.\nNote: This only applies to externalName clusters.\nSee https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/cluster/v3/cluster.proto.html#envoy-v3-api-enum-config-cluster-v3-cluster-dnslookupfamily\nfor more information.\nValues: `auto` (default), `v4`, `v6`, `all`.\nOther values will produce an error.",
                  "type": "string"
                },
                "maxRequestsPerConnection": {
                  "description": "Defines the maximum requests for upstream connections. If not specified, there is no limit.\nsee https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/core/v3/protocol.proto#envoy-v3-api-msg-config-core-v3-httpprotocoloptions\nfor more information.",
                  "type": "integer",
                  "format": "int32",
                  "minimum": 1
                },
                "per-connection-buffer-limit-bytes": {
                  "description": "Defines the soft limit on size of the clusterâ€™s new connection read and write buffers in bytes.\nIf unspecified, an implementation defined default is applied (1MiB).\nsee https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/cluster/v3/cluster.proto#envoy-v3-api-field-config-cluster-v3-cluster-per-connection-buffer-limit-bytes\nfor more information.",
                  "type": "integer",
                  "format": "int32",
                  "minimum": 1
                },
                "upstreamTLS": {
                  "description": "UpstreamTLS contains the TLS policy parameters for upstream connections",
                  "type": "object",
                  "properties": {
                    "cipherSuites": {
                      "description": "CipherSuites defines the TLS ciphers to be supported by Envoy TLS\nlisteners when negotiating TLS 1.2. Ciphers are validated against the\nset that Envoy supports by default. This parameter should only be used\nby advanced users. Note that these will be ignored when TLS 1.3 is in\nuse.\nThis field is optional; when it is undefined, a Contour-managed ciphersuite list\nwill be used, which may be updated to keep it secure.\nContour's default list is:\n  - \"[ECDHE-ECDSA-AES128-GCM-SHA256|ECDHE-ECDSA-CHACHA20-POLY1305]\"\n  - \"[ECDHE-RSA-AES128-GCM-SHA256|ECDHE-RSA-CHACHA20-POLY1305]\"\n  - \"ECDHE-ECDSA-AES256-GCM-SHA384\"\n  - \"ECDHE-RSA-AES256-GCM-SHA384\"\nCiphers provided are validated against the following list:\n  - \"[ECDHE-ECDSA-AES128-GCM-SHA256|ECDHE-ECDSA-CHACHA20-POLY1305]\"\n  - \"[ECDHE-RSA-AES128-GCM-SHA256|ECDHE-RSA-CHACHA20-POLY1305]\"\n  - \"ECDHE-ECDSA-AES128-GCM-SHA256\"\n  - \"ECDHE-RSA-AES128-GCM-SHA256\"\n  - \"ECDHE-ECDSA-AES128-SHA\"\n  - \"ECDHE-RSA-AES128-SHA\"\n  - \"AES128-GCM-SHA256\"\n  - \"AES128-SHA\"\n  - \"ECDHE-ECDSA-AES256-GCM-SHA384\"\n  - \"ECDHE-RSA-AES256-GCM-SHA384\"\n  - \"ECDHE-ECDSA-AES256-SHA\"\n  - \"ECDHE-RSA-AES256-SHA\"\n  - \"AES256-GCM-SHA384\"\n  - \"AES256-SHA\"\nContour recommends leaving this undefined unless you are sure you must.\nSee: https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/transport_sockets/tls/v3/common.proto#extensions-transport-sockets-tls-v3-tlsparameters\nNote: This list is a superset of what is valid for stock Envoy builds and those using BoringSSL FIPS.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "maximumProtocolVersion": {
                      "description": "MaximumProtocolVersion is the maximum TLS version this vhost should\nnegotiate.\nValues: `1.2`, `1.3`(default).\nOther values will produce an error.",
                      "type": "string"
                    },
                    "minimumProtocolVersion": {
                      "description": "MinimumProtocolVersion is the minimum TLS version this vhost should\nnegotiate.\nValues: `1.2` (default), `1.3`.\nOther values will produce an error.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "defaultHTTPVersions": {
              "description": "DefaultHTTPVersions defines the default set of HTTPS\nversions the proxy should accept. HTTP versions are\nstrings of the form \"HTTP/xx\". Supported versions are\n\"HTTP/1.1\" and \"HTTP/2\".\nValues: `HTTP/1.1`, `HTTP/2` (default: both).\nOther values will produce an error.",
              "type": "array",
              "items": {
                "description": "HTTPVersionType is the name of a supported HTTP version.",
                "type": "string"
              }
            },
            "health": {
              "description": "Health defines the endpoint Envoy uses to serve health checks.\nContour's default is { address: \"0.0.0.0\", port: 8002 }.",
              "type": "object",
              "properties": {
                "address": {
                  "description": "Defines the health address interface.",
                  "type": "string",
                  "minLength": 1
                },
                "port": {
                  "description": "Defines the health port.",
                  "type": "integer"
                }
              },
              "additionalProperties": false
            },
            "http": {
              "description": "Defines the HTTP Listener for Envoy.\nContour's default is { address: \"0.0.0.0\", port: 8080, accessLog: \"/dev/stdout\" }.",
              "type": "object",
              "properties": {
                "accessLog": {
                  "description": "AccessLog defines where Envoy logs are outputted for this listener.",
                  "type": "string"
                },
                "address": {
                  "description": "Defines an Envoy Listener Address.",
                  "type": "string",
                  "minLength": 1
                },
                "port": {
                  "description": "Defines an Envoy listener Port.",
                  "type": "integer"
                }
              },
              "additionalProperties": false
            },
            "https": {
              "description": "Defines the HTTPS Listener for Envoy.\nContour's default is { address: \"0.0.0.0\", port: 8443, accessLog: \"/dev/stdout\" }.",
              "type": "object",
              "properties": {
                "accessLog": {
                  "description": "AccessLog defines where Envoy logs are outputted for this listener.",
                  "type": "string"
                },
                "address": {
                  "description": "Defines an Envoy Listener Address.",
                  "type": "string",
                  "minLength": 1
                },
                "port": {
                  "description": "Defines an Envoy listener Port.",
                  "type": "integer"
                }
              },
              "additionalProperties": false
            },
            "listener": {
              "description": "Listener hold various configurable Envoy listener values.",
              "type": "object",
              "properties": {
                "compression": {
                  "description": "Compression defines configuration related to compression in the default HTTP Listener filters.",
                  "type": "object",
                  "properties": {
                    "algorithm": {
                      "description": "Algorithm selects the response compression type applied in the compression HTTP filter of the default Listener filters.\nValues: `gzip` (default), `brotli`, `zstd`, `disabled`.\nSetting this to `disabled` will make Envoy skip \"Accept-Encoding: gzip,deflate\" request header and always return uncompressed response.",
                      "type": "string",
                      "enum": [
                        "gzip",
                        "brotli",
                        "zstd",
                        "disabled"
                      ]
                    }
                  },
                  "additionalProperties": false
                },
                "connectionBalancer": {
                  "description": "ConnectionBalancer. If the value is exact, the listener will use the exact connection balancer\nSee https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/listener.proto#envoy-api-msg-listener-connectionbalanceconfig\nfor more information.\nValues: (empty string): use the default ConnectionBalancer, `exact`: use the Exact ConnectionBalancer.\nOther values will produce an error.",
                  "type": "string"
                },
                "disableAllowChunkedLength": {
                  "description": "DisableAllowChunkedLength disables the RFC-compliant Envoy behavior to\nstrip the \"Content-Length\" header if \"Transfer-Encoding: chunked\" is\nalso set. This is an emergency off-switch to revert back to Envoy's\ndefault behavior in case of failures. Please file an issue if failures\nare encountered.\nSee: https://github.com/projectcontour/contour/issues/3221\nContour's default is false.",
                  "type": "boolean"
                },
                "disableMergeSlashes": {
                  "description": "DisableMergeSlashes disables Envoy's non-standard merge_slashes path transformation option\nwhich strips duplicate slashes from request URL paths.\nContour's default is false.",
                  "type": "boolean"
                },
                "httpMaxConcurrentStreams": {
                  "description": "Defines the value for SETTINGS_MAX_CONCURRENT_STREAMS Envoy will advertise in the\nSETTINGS frame in HTTP/2 connections and the limit for concurrent streams allowed\nfor a peer on a single HTTP/2 connection. It is recommended to not set this lower\nthan 100 but this field can be used to bound resource usage by HTTP/2 connections\nand mitigate attacks like CVE-2023-44487. The default value when this is not set is\nunlimited.",
                  "type": "integer",
                  "format": "int32",
                  "minimum": 1
                },
                "maxConnectionsPerListener": {
                  "description": "Defines the limit on number of active connections to a listener. The limit is applied\nper listener. The default value when this is not set is unlimited.",
                  "type": "integer",
                  "format": "int32",
                  "minimum": 1
                },
                "maxRequestsPerConnection": {
                  "description": "Defines the maximum requests for downstream connections. If not specified, there is no limit.\nsee https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/core/v3/protocol.proto#envoy-v3-api-msg-config-core-v3-httpprotocoloptions\nfor more information.",
                  "type": "integer",
                  "format": "int32",
                  "minimum": 1
                },
                "maxRequestsPerIOCycle": {
                  "description": "Defines the limit on number of HTTP requests that Envoy will process from a single\nconnection in a single I/O cycle. Requests over this limit are processed in subsequent\nI/O cycles. Can be used as a mitigation for CVE-2023-44487 when abusive traffic is\ndetected. Configures the http.max_requests_per_io_cycle Envoy runtime setting. The default\nvalue when this is not set is no limit.",
                  "type": "integer",
                  "format": "int32",
                  "minimum": 1
                },
                "per-connection-buffer-limit-bytes": {
                  "description": "Defines the soft limit on size of the listenerâ€™s new connection read and write buffers in bytes.\nIf unspecified, an implementation defined default is applied (1MiB).\nsee https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/listener/v3/listener.proto#envoy-v3-api-field-config-listener-v3-listener-per-connection-buffer-limit-bytes\nfor more information.",
                  "type": "integer",
                  "format": "int32",
                  "minimum": 1
                },
                "serverHeaderTransformation": {
                  "description": "Defines the action to be applied to the Server header on the response path.\nWhen configured as overwrite, overwrites any Server header with \"envoy\".\nWhen configured as append_if_absent, if a Server header is present, pass it through, otherwise set it to \"envoy\".\nWhen configured as pass_through, pass through the value of the Server header, and do not append a header if none is present.\nValues: `overwrite` (default), `append_if_absent`, `pass_through`\nOther values will produce an error.\nContour's default is overwrite.",
                  "type": "string"
                },
                "socketOptions": {
                  "description": "SocketOptions defines configurable socket options for the listeners.\nSingle set of options are applied to all listeners.",
                  "type": "object",
                  "properties": {
                    "tos": {
                      "description": "Defines the value for IPv4 TOS field (including 6 bit DSCP field) for IP packets originating from Envoy listeners.\nSingle value is applied to all listeners.\nIf listeners are bound to IPv6-only addresses, setting this option will cause an error.",
                      "type": "integer",
                      "format": "int32",
                      "maximum": 255,
                      "minimum": 0
                    },
                    "trafficClass": {
                      "description": "Defines the value for IPv6 Traffic Class field (including 6 bit DSCP field) for IP packets originating from the Envoy listeners.\nSingle value is applied to all listeners.\nIf listeners are bound to IPv4-only addresses, setting this option will cause an error.",
                      "type": "integer",
                      "format": "int32",
                      "maximum": 255,
                      "minimum": 0
                    }
                  },
                  "additionalProperties": false
                },
                "tls": {
                  "description": "TLS holds various configurable Envoy TLS listener values.",
                  "type": "object",
                  "properties": {
                    "cipherSuites": {
                      "description": "CipherSuites defines the TLS ciphers to be supported by Envoy TLS\nlisteners when negotiating TLS 1.2. Ciphers are validated against the\nset that Envoy supports by default. This parameter should only be used\nby advanced users. Note that these will be ignored when TLS 1.3 is in\nuse.\nThis field is optional; when it is undefined, a Contour-managed ciphersuite list\nwill be used, which may be updated to keep it secure.\nContour's default list is:\n  - \"[ECDHE-ECDSA-AES128-GCM-SHA256|ECDHE-ECDSA-CHACHA20-POLY1305]\"\n  - \"[ECDHE-RSA-AES128-GCM-SHA256|ECDHE-RSA-CHACHA20-POLY1305]\"\n  - \"ECDHE-ECDSA-AES256-GCM-SHA384\"\n  - \"ECDHE-RSA-AES256-GCM-SHA384\"\nCiphers provided are validated against the following list:\n  - \"[ECDHE-ECDSA-AES128-GCM-SHA256|ECDHE-ECDSA-CHACHA20-POLY1305]\"\n  - \"[ECDHE-RSA-AES128-GCM-SHA256|ECDHE-RSA-CHACHA20-POLY1305]\"\n  - \"ECDHE-ECDSA-AES128-GCM-SHA256\"\n  - \"ECDHE-RSA-AES128-GCM-SHA256\"\n  - \"ECDHE-ECDSA-AES128-SHA\"\n  - \"ECDHE-RSA-AES128-SHA\"\n  - \"AES128-GCM-SHA256\"\n  - \"AES128-SHA\"\n  - \"ECDHE-ECDSA-AES256-GCM-SHA384\"\n  - \"ECDHE-RSA-AES256-GCM-SHA384\"\n  - \"ECDHE-ECDSA-AES256-SHA\"\n  - \"ECDHE-RSA-AES256-SHA\"\n  - \"AES256-GCM-SHA384\"\n  - \"AES256-SHA\"\nContour recommends leaving this undefined unless you are sure you must.\nSee: https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/transport_sockets/tls/v3/common.proto#extensions-transport-sockets-tls-v3-tlsparameters\nNote: This list is a superset of what is valid for stock Envoy builds and those using BoringSSL FIPS.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "maximumProtocolVersion": {
                      "description": "MaximumProtocolVersion is the maximum TLS version this vhost should\nnegotiate.\nValues: `1.2`, `1.3`(default).\nOther values will produce an error.",
                      "type": "string"
                    },
                    "minimumProtocolVersion": {
                      "description": "MinimumProtocolVersion is the minimum TLS version this vhost should\nnegotiate.\nValues: `1.2` (default), `1.3`.\nOther values will produce an error.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "useProxyProtocol": {
                  "description": "Use PROXY protocol for all listeners.\nContour's default is false.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "logging": {
              "description": "Logging defines how Envoy's logs can be configured.",
              "type": "object",
              "properties": {
                "accessLogFormat": {
                  "description": "AccessLogFormat sets the global access log format.\nValues: `envoy` (default), `json`.\nOther values will produce an error.",
                  "type": "string"
                },
                "accessLogFormatString": {
                  "description": "AccessLogFormatString sets the access log format when format is set to `envoy`.\nWhen empty, Envoy's default format is used.",
                  "type": "string"
                },
                "accessLogJSONFields": {
                  "description": "AccessLogJSONFields sets the fields that JSON logging will\noutput when AccessLogFormat is json.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "accessLogLevel": {
                  "description": "AccessLogLevel sets the verbosity level of the access log.\nValues: `info` (default, all requests are logged), `error` (all non-success requests, i.e. 300+ response code, are logged), `critical` (all 5xx requests are logged) and `disabled`.\nOther values will produce an error.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "metrics": {
              "description": "Metrics defines the endpoint Envoy uses to serve metrics.\nContour's default is { address: \"0.0.0.0\", port: 8002 }.",
              "type": "object",
              "properties": {
                "address": {
                  "description": "Defines the metrics address interface.",
                  "type": "string",
                  "maxLength": 253,
                  "minLength": 1
                },
                "port": {
                  "description": "Defines the metrics port.",
                  "type": "integer"
                },
                "tls": {
                  "description": "TLS holds TLS file config details.\nMetrics and health endpoints cannot have same port number when metrics is served over HTTPS.",
                  "type": "object",
                  "properties": {
                    "caFile": {
                      "description": "CA filename.",
                      "type": "string"
                    },
                    "certFile": {
                      "description": "Client certificate filename.",
                      "type": "string"
                    },
                    "keyFile": {
                      "description": "Client key filename.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "network": {
              "description": "Network holds various configurable Envoy network values.",
              "type": "object",
              "properties": {
                "adminPort": {
                  "description": "Configure the port used to access the Envoy Admin interface.\nIf configured to port \"0\" then the admin interface is disabled.\nContour's default is 9001.",
                  "type": "integer"
                },
                "numTrustedHops": {
                  "description": "XffNumTrustedHops defines the number of additional ingress proxy hops from the\nright side of the x-forwarded-for HTTP header to trust when determining the origin\nclientâ€™s IP address.\nSee https://www.envoyproxy.io/docs/envoy/v1.17.0/api-v3/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto?highlight=xff_num_trusted_hops\nfor more information.\nContour's default is 0.",
                  "type": "integer",
                  "format": "int32"
                },
                "stripTrailingHostDot": {
                  "description": "EnvoyStripTrailingHostDot defines if trailing dot of the host should be removed from host/authority header\nbefore any processing of request by HTTP filters or routing. This\naffects the upstream host header. Without setting this option to true, incoming\nrequests with host example.com. will not match against route with domains\nmatch set to example.com.\nSee https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto?highlight=strip_trailing_host_dot\nfor more information.\nContour's default is false.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "omEnforcedHealth": {
              "description": "OMEnforcedHealth defines the endpoint Envoy uses to serve health checks with\nthe envoy overload manager actions, such as global connection limits, enforced.\nThe configured values must be different from the endpoints\nconfigured by [EnvoyConfig.Metrics] and [EnvoyConfig.Health]\nThis is disabled by default",
              "type": "object",
              "properties": {
                "address": {
                  "description": "Defines the health address interface.",
                  "type": "string",
                  "minLength": 1
                },
                "port": {
                  "description": "Defines the health port.",
                  "type": "integer"
                }
              },
              "additionalProperties": false
            },
            "service": {
              "description": "Service holds Envoy service parameters for setting Ingress status.\nContour's default is { namespace: \"projectcontour\", name: \"envoy\" }.",
              "type": "object",
              "required": [
                "name",
                "namespace"
              ],
              "properties": {
                "name": {
                  "type": "string"
                },
                "namespace": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "timeouts": {
              "description": "Timeouts holds various configurable timeouts that can\nbe set in the config file.",
              "type": "object",
              "properties": {
                "connectTimeout": {
                  "description": "ConnectTimeout defines how long the proxy should wait when establishing connection to upstream service.\nIf not set, a default value of 2 seconds will be used.\nSee https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/cluster/v3/cluster.proto#envoy-v3-api-field-config-cluster-v3-cluster-connect-timeout\nfor more information.",
                  "type": "string"
                },
                "connectionIdleTimeout": {
                  "description": "ConnectionIdleTimeout defines how long the proxy should wait while there are\nno active requests (for HTTP/1.1) or streams (for HTTP/2) before terminating\nan HTTP connection. Set to \"infinity\" to disable the timeout entirely.\nSee https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/core/v3/protocol.proto#envoy-v3-api-field-config-core-v3-httpprotocoloptions-idle-timeout\nfor more information.",
                  "type": "string"
                },
                "connectionShutdownGracePeriod": {
                  "description": "ConnectionShutdownGracePeriod defines how long the proxy will wait between sending an\ninitial GOAWAY frame and a second, final GOAWAY frame when terminating an HTTP/2 connection.\nDuring this grace period, the proxy will continue to respond to new streams. After the final\nGOAWAY frame has been sent, the proxy will refuse new streams.\nSee https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto#envoy-v3-api-field-extensions-filters-network-http-connection-manager-v3-httpconnectionmanager-drain-timeout\nfor more information.",
                  "type": "string"
                },
                "delayedCloseTimeout": {
                  "description": "DelayedCloseTimeout defines how long envoy will wait, once connection\nclose processing has been initiated, for the downstream peer to close\nthe connection before Envoy closes the socket associated with the connection.\nSetting this timeout to 'infinity' will disable it, equivalent to setting it to '0'\nin Envoy. Leaving it unset will result in the Envoy default value being used.\nSee https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto#envoy-v3-api-field-extensions-filters-network-http-connection-manager-v3-httpconnectionmanager-delayed-close-timeout\nfor more information.",
                  "type": "string"
                },
                "maxConnectionDuration": {
                  "description": "MaxConnectionDuration defines the maximum period of time after an HTTP connection\nhas been established from the client to the proxy before it is closed by the proxy,\nregardless of whether there has been activity or not. Omit or set to \"infinity\" for\nno max duration.\nSee https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/core/v3/protocol.proto#envoy-v3-api-field-config-core-v3-httpprotocoloptions-max-connection-duration\nfor more information.",
                  "type": "string"
                },
                "requestTimeout": {
                  "description": "RequestTimeout sets the client request timeout globally for Contour. Note that\nthis is a timeout for the entire request, not an idle timeout. Omit or set to\n\"infinity\" to disable the timeout entirely.\nSee https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto#envoy-v3-api-field-extensions-filters-network-http-connection-manager-v3-httpconnectionmanager-request-timeout\nfor more information.",
                  "type": "string"
                },
                "streamIdleTimeout": {
                  "description": "StreamIdleTimeout defines how long the proxy should wait while there is no\nrequest activity (for HTTP/1.1) or stream activity (for HTTP/2) before\nterminating the HTTP request or stream. Set to \"infinity\" to disable the\ntimeout entirely.\nSee https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto#envoy-v3-api-field-extensions-filters-network-http-connection-manager-v3-httpconnectionmanager-stream-idle-timeout\nfor more information.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "featureFlags": {
          "description": "FeatureFlags defines toggle to enable new contour features.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "gateway": {
          "description": "Gateway contains parameters for the gateway-api Gateway that Contour\nis configured to serve traffic.",
          "type": "object",
          "required": [
            "gatewayRef"
          ],
          "properties": {
            "gatewayRef": {
              "description": "GatewayRef defines the specific Gateway that this Contour\ninstance corresponds to.",
              "type": "object",
              "required": [
                "name",
                "namespace"
              ],
              "properties": {
                "name": {
                  "type": "string"
                },
                "namespace": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "globalExtAuth": {
          "description": "GlobalExternalAuthorization allows envoys external authorization filter\nto be enabled for all virtual hosts.",
          "type": "object",
          "properties": {
            "authPolicy": {
              "description": "AuthPolicy sets a default authorization policy for client requests.\nThis policy will be used unless overridden by individual routes.",
              "type": "object",
              "properties": {
                "context": {
                  "description": "Context is a set of key/value pairs that are sent to the\nauthentication server in the check request. If a context\nis provided at an enclosing scope, the entries are merged\nsuch that the inner scope overrides matching keys from the\nouter scope.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "disabled": {
                  "description": "When true, this field disables client request authentication\nfor the scope of the policy.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "extensionRef": {
              "description": "ExtensionServiceRef specifies the extension resource that will authorize client requests.",
              "type": "object",
              "properties": {
                "apiVersion": {
                  "description": "API version of the referent.\nIf this field is not specified, the default \"projectcontour.io/v1alpha1\" will be used",
                  "type": "string",
                  "minLength": 1
                },
                "name": {
                  "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                  "type": "string",
                  "minLength": 1
                },
                "namespace": {
                  "description": "Namespace of the referent.\nIf this field is not specifies, the namespace of the resource that targets the referent will be used.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                  "type": "string",
                  "minLength": 1
                }
              },
              "additionalProperties": false
            },
            "failOpen": {
              "description": "If FailOpen is true, the client request is forwarded to the upstream service\neven if the authorization server fails to respond. This field should not be\nset in most cases. It is intended for use only while migrating applications\nfrom internal authorization to Contour external authorization.",
              "type": "boolean"
            },
            "responseTimeout": {
              "description": "ResponseTimeout configures maximum time to wait for a check response from the authorization server.\nTimeout durations are expressed in the Go [Duration format](https://godoc.org/time#ParseDuration).\nValid time units are \"ns\", \"us\" (or \"Âµs\"), \"ms\", \"s\", \"m\", \"h\".\nThe string \"infinity\" is also a valid input and specifies no timeout.",
              "type": "string",
              "pattern": "^(((\\d*(\\.\\d*)?h)|(\\d*(\\.\\d*)?m)|(\\d*(\\.\\d*)?s)|(\\d*(\\.\\d*)?ms)|(\\d*(\\.\\d*)?us)|(\\d*(\\.\\d*)?Âµs)|(\\d*(\\.\\d*)?ns))+|infinity|infinite)$"
            },
            "withRequestBody": {
              "description": "WithRequestBody specifies configuration for sending the client request's body to authorization server.",
              "type": "object",
              "properties": {
                "allowPartialMessage": {
                  "description": "If AllowPartialMessage is true, then Envoy will buffer the body until MaxRequestBytes are reached.",
                  "type": "boolean"
                },
                "maxRequestBytes": {
                  "description": "MaxRequestBytes sets the maximum size of message body ExtAuthz filter will hold in-memory.",
                  "type": "integer",
                  "format": "int32",
                  "default": 1024,
                  "minimum": 1
                },
                "packAsBytes": {
                  "description": "If PackAsBytes is true, the body sent to Authorization Server is in raw bytes.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "health": {
          "description": "Health defines the endpoints Contour uses to serve health checks.\nContour's default is { address: \"0.0.0.0\", port: 8000 }.",
          "type": "object",
          "properties": {
            "address": {
              "description": "Defines the health address interface.",
              "type": "string",
              "minLength": 1
            },
            "port": {
              "description": "Defines the health port.",
              "type": "integer"
            }
          },
          "additionalProperties": false
        },
        "httpproxy": {
          "description": "HTTPProxy defines parameters on HTTPProxy.",
          "type": "object",
          "properties": {
            "disablePermitInsecure": {
              "description": "DisablePermitInsecure disables the use of the\npermitInsecure field in HTTPProxy.\nContour's default is false.",
              "type": "boolean"
            },
            "fallbackCertificate": {
              "description": "FallbackCertificate defines the namespace/name of the Kubernetes secret to\nuse as fallback when a non-SNI request is received.",
              "type": "object",
              "required": [
                "name",
                "namespace"
              ],
              "properties": {
                "name": {
                  "type": "string"
                },
                "namespace": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "rootNamespaces": {
              "description": "Restrict Contour to searching these namespaces for root ingress routes.",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false
        },
        "ingress": {
          "description": "Ingress contains parameters for ingress options.",
          "type": "object",
          "properties": {
            "classNames": {
              "description": "Ingress Class Names Contour should use.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "statusAddress": {
              "description": "Address to set in Ingress object status.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "metrics": {
          "description": "Metrics defines the endpoint Contour uses to serve metrics.\nContour's default is { address: \"0.0.0.0\", port: 8000 }.",
          "type": "object",
          "properties": {
            "address": {
              "description": "Defines the metrics address interface.",
              "type": "string",
              "maxLength": 253,
              "minLength": 1
            },
            "port": {
              "description": "Defines the metrics port.",
              "type": "integer"
            },
            "tls": {
              "description": "TLS holds TLS file config details.\nMetrics and health endpoints cannot have same port number when metrics is served over HTTPS.",
              "type": "object",
              "properties": {
                "caFile": {
                  "description": "CA filename.",
                  "type": "string"
                },
                "certFile": {
                  "description": "Client certificate filename.",
                  "type": "string"
                },
                "keyFile": {
                  "description": "Client key filename.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "policy": {
          "description": "Policy specifies default policy applied if not overridden by the user",
          "type": "object",
          "properties": {
            "applyToIngress": {
              "description": "ApplyToIngress determines if the Policies will apply to ingress objects\nContour's default is false.",
              "type": "boolean"
            },
            "requestHeaders": {
              "description": "RequestHeadersPolicy defines the request headers set/removed on all routes",
              "type": "object",
              "properties": {
                "remove": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "set": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              },
              "additionalProperties": false
            },
            "responseHeaders": {
              "description": "ResponseHeadersPolicy defines the response headers set/removed on all routes",
              "type": "object",
              "properties": {
                "remove": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "set": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "rateLimitService": {
          "description": "RateLimitService optionally holds properties of the Rate Limit Service\nto be used for global rate limiting.",
          "type": "object",
          "required": [
            "extensionService"
          ],
          "properties": {
            "defaultGlobalRateLimitPolicy": {
              "description": "DefaultGlobalRateLimitPolicy allows setting a default global rate limit policy for every HTTPProxy.\nHTTPProxy can overwrite this configuration.",
              "type": "object",
              "properties": {
                "descriptors": {
                  "description": "Descriptors defines the list of descriptors that will\nbe generated and sent to the rate limit service. Each\ndescriptor contains 1+ key-value pair entries.",
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "description": "RateLimitDescriptor defines a list of key-value pair generators.",
                    "type": "object",
                    "required": [
                      "entries"
                    ],
                    "properties": {
                      "entries": {
                        "description": "Entries is the list of key-value pair generators.",
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "description": "RateLimitDescriptorEntry is a key-value pair generator. Exactly\none field on this struct must be non-nil.",
                          "type": "object",
                          "properties": {
                            "genericKey": {
                              "description": "GenericKey defines a descriptor entry with a static key and value.",
                              "type": "object",
                              "required": [
                                "value"
                              ],
                              "properties": {
                                "key": {
                                  "description": "Key defines the key of the descriptor entry. If not set, the\nkey is set to \"generic_key\".",
                                  "type": "string"
                                },
                                "value": {
                                  "description": "Value defines the value of the descriptor entry.",
                                  "type": "string",
                                  "minLength": 1
                                }
                              },
                              "additionalProperties": false
                            },
                            "remoteAddress": {
                              "description": "RemoteAddress defines a descriptor entry with a key of \"remote_address\"\nand a value equal to the client's IP address (from x-forwarded-for).",
                              "type": "object"
                            },
                            "requestHeader": {
                              "description": "RequestHeader defines a descriptor entry that's populated only if\na given header is present on the request. The descriptor key is static,\nand the descriptor value is equal to the value of the header.",
                              "type": "object",
                              "required": [
                                "descriptorKey",
                                "headerName"
                              ],
                              "properties": {
                                "descriptorKey": {
                                  "description": "DescriptorKey defines the key to use on the descriptor entry.",
                                  "type": "string",
                                  "minLength": 1
                                },
                                "headerName": {
                                  "description": "HeaderName defines the name of the header to look for on the request.",
                                  "type": "string",
                                  "minLength": 1
                                }
                              },
                              "additionalProperties": false
                            },
                            "requestHeaderValueMatch": {
                              "description": "RequestHeaderValueMatch defines a descriptor entry that's populated\nif the request's headers match a set of 1+ match criteria. The\ndescriptor key is \"header_match\", and the descriptor value is static.",
                              "type": "object",
                              "required": [
                                "value"
                              ],
                              "properties": {
                                "expectMatch": {
                                  "description": "ExpectMatch defines whether the request must positively match the match\ncriteria in order to generate a descriptor entry (i.e. true), or not\nmatch the match criteria in order to generate a descriptor entry (i.e. false).\nThe default is true.",
                                  "type": "boolean",
                                  "default": true
                                },
                                "headers": {
                                  "description": "Headers is a list of 1+ match criteria to apply against the request\nto determine whether to populate the descriptor entry or not.",
                                  "type": "array",
                                  "minItems": 1,
                                  "items": {
                                    "description": "HeaderMatchCondition specifies how to conditionally match against HTTP\nheaders. The Name field is required, only one of Present, NotPresent,\nContains, NotContains, Exact, NotExact and Regex can be set.\nFor negative matching rules only (e.g. NotContains or NotExact) you can set\nTreatMissingAsEmpty.\nIgnoreCase has no effect for Regex.",
                                    "type": "object",
                                    "required": [
                                      "name"
                                    ],
                                    "properties": {
                                      "contains": {
                                        "description": "Contains specifies a substring that must be present in\nthe header value.",
                                        "type": "string"
                                      },
                                      "exact": {
                                        "description": "Exact specifies a string that the header value must be equal to.",
                                        "type": "string"
                                      },
                                      "ignoreCase": {
                                        "description": "IgnoreCase specifies that string matching should be case insensitive.\nNote that this has no effect on the Regex parameter.",
                                        "type": "boolean"
                                      },
                                      "name": {
                                        "description": "Name is the name of the header to match against. Name is required.\nHeader names are case insensitive.",
                                        "type": "string"
                                      },
                                      "notcontains": {
                                        "description": "NotContains specifies a substring that must not be present\nin the header value.",
                                        "type": "string"
                                      },
                                      "notexact": {
                                        "description": "NoExact specifies a string that the header value must not be\nequal to. The condition is true if the header has any other value.",
                                        "type": "string"
                                      },
                                      "notpresent": {
                                        "description": "NotPresent specifies that condition is true when the named header\nis not present. Note that setting NotPresent to false does not\nmake the condition true if the named header is present.",
                                        "type": "boolean"
                                      },
                                      "present": {
                                        "description": "Present specifies that condition is true when the named header\nis present, regardless of its value. Note that setting Present\nto false does not make the condition true if the named header\nis absent.",
                                        "type": "boolean"
                                      },
                                      "regex": {
                                        "description": "Regex specifies a regular expression pattern that must match the header\nvalue.",
                                        "type": "string"
                                      },
                                      "treatMissingAsEmpty": {
                                        "description": "TreatMissingAsEmpty specifies if the header match rule specified header\ndoes not exist, this header value will be treated as empty. Defaults to false.\nUnlike the underlying Envoy implementation this is **only** supported for\nnegative matches (e.g. NotContains, NotExact).",
                                        "type": "boolean"
                                      }
                                    },
                                    "additionalProperties": false
                                  }
                                },
                                "value": {
                                  "description": "Value defines the value of the descriptor entry.",
                                  "type": "string",
                                  "minLength": 1
                                }
                              },
                              "additionalProperties": false
                            }
                          },
                          "additionalProperties": false
                        }
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "disabled": {
                  "description": "Disabled configures the HTTPProxy to not use\nthe default global rate limit policy defined by the Contour configuration.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "domain": {
              "description": "Domain is passed to the Rate Limit Service.",
              "type": "string"
            },
            "enableResourceExhaustedCode": {
              "description": "EnableResourceExhaustedCode enables translating error code 429 to\ngrpc code RESOURCE_EXHAUSTED. When disabled it's translated to UNAVAILABLE",
              "type": "boolean"
            },
            "enableXRateLimitHeaders": {
              "description": "EnableXRateLimitHeaders defines whether to include the X-RateLimit\nheaders X-RateLimit-Limit, X-RateLimit-Remaining, and X-RateLimit-Reset\n(as defined by the IETF Internet-Draft linked below), on responses\nto clients when the Rate Limit Service is consulted for a request.\nref. https://tools.ietf.org/id/draft-polli-ratelimit-headers-03.html",
              "type": "boolean"
            },
            "extensionService": {
              "description": "ExtensionService identifies the extension service defining the RLS.",
              "type": "object",
              "required": [
                "name",
                "namespace"
              ],
              "properties": {
                "name": {
                  "type": "string"
                },
                "namespace": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "failOpen": {
              "description": "FailOpen defines whether to allow requests to proceed when the\nRate Limit Service fails to respond with a valid rate limit\ndecision within the timeout defined on the extension service.",
              "type": "boolean"
            }
          },
          "additionalProperties": false
        },
        "tracing": {
          "description": "Tracing defines properties for exporting trace data to OpenTelemetry.",
          "type": "object",
          "required": [
            "extensionService"
          ],
          "properties": {
            "customTags": {
              "description": "CustomTags defines a list of custom tags with unique tag name.",
              "type": "array",
              "items": {
                "description": "CustomTag defines custom tags with unique tag name\nto create tags for the active span.",
                "type": "object",
                "required": [
                  "tagName"
                ],
                "properties": {
                  "literal": {
                    "description": "Literal is a static custom tag value.\nPrecisely one of Literal, RequestHeaderName must be set.",
                    "type": "string"
                  },
                  "requestHeaderName": {
                    "description": "RequestHeaderName indicates which request header\nthe label value is obtained from.\nPrecisely one of Literal, RequestHeaderName must be set.",
                    "type": "string"
                  },
                  "tagName": {
                    "description": "TagName is the unique name of the custom tag.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "extensionService": {
              "description": "ExtensionService identifies the extension service defining the otel-collector.",
              "type": "object",
              "required": [
                "name",
                "namespace"
              ],
              "properties": {
                "name": {
                  "type": "string"
                },
                "namespace": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "includePodDetail": {
              "description": "IncludePodDetail defines a flag.\nIf it is true, contour will add the pod name and namespace to the span of the trace.\nthe default is true.\nNote: The Envoy pods MUST have the HOSTNAME and CONTOUR_NAMESPACE environment variables set for this to work properly.",
              "type": "boolean"
            },
            "maxPathTagLength": {
              "description": "MaxPathTagLength defines maximum length of the request path\nto extract and include in the HttpUrl tag.\ncontour's default is 256.",
              "type": "integer",
              "format": "int32"
            },
            "overallSampling": {
              "description": "OverallSampling defines the sampling rate of trace data.\ncontour's default is 100.",
              "type": "string"
            },
            "serviceName": {
              "description": "ServiceName defines the name for the service.\ncontour's default is contour.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "xdsServer": {
          "description": "XDSServer contains parameters for the xDS server.",
          "type": "object",
          "properties": {
            "address": {
              "description": "Defines the xDS gRPC API address which Contour will serve.\nContour's default is \"0.0.0.0\".",
              "type": "string",
              "minLength": 1
            },
            "port": {
              "description": "Defines the xDS gRPC API port which Contour will serve.\nContour's default is 8001.",
              "type": "integer"
            },
            "tls": {
              "description": "TLS holds TLS file config details.\nContour's default is { caFile: \"/certs/ca.crt\", certFile: \"/certs/tls.cert\", keyFile: \"/certs/tls.key\", insecure: false }.",
              "type": "object",
              "properties": {
                "caFile": {
                  "description": "CA filename.",
                  "type": "string"
                },
                "certFile": {
                  "description": "Client certificate filename.",
                  "type": "string"
                },
                "insecure": {
                  "description": "Allow serving the xDS gRPC API without TLS.",
                  "type": "boolean"
                },
                "keyFile": {
                  "description": "Client key filename.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "ContourConfigurationStatus defines the observed state of a ContourConfiguration resource.",
      "type": "object",
      "properties": {
        "conditions": {
          "description": "Conditions contains the current status of the Contour resource.\nContour will update a single condition, `Valid`, that is in normal-true polarity.\nContour will not modify any other Conditions set in this block,\nin case some other controller wants to add a Condition.",
          "type": "array",
          "items": {
            "description": "DetailedCondition is an extension of the normal Kubernetes conditions, with two extra\nfields to hold sub-conditions, which provide more detailed reasons for the state (True or False)\nof the condition.\n`errors` holds information about sub-conditions which are fatal to that condition and render its state False.\n`warnings` holds information about sub-conditions which are not fatal to that condition and do not force the state to be False.\nRemember that Conditions have a type, a status, and a reason.\nThe type is the type of the condition, the most important one in this CRD set is `Valid`.\n`Valid` is a positive-polarity condition: when it is `status: true` there are no problems.\nIn more detail, `status: true` means that the object is has been ingested into Contour with no errors.\n`warnings` may still be present, and will be indicated in the Reason field. There must be zero entries in the `errors`\nslice in this case.\n`Valid`, `status: false` means that the object has had one or more fatal errors during processing into Contour.\nThe details of the errors will be present under the `errors` field. There must be at least one error in the `errors`\nslice if `status` is `false`.\nFor DetailedConditions of types other than `Valid`, the Condition must be in the negative polarity.\nWhen they have `status` `true`, there is an error. There must be at least one entry in the `errors` Subcondition slice.\nWhen they have `status` `false`, there are no serious errors, and there must be zero entries in the `errors` slice.\nIn either case, there may be entries in the `warnings` slice.\nRegardless of the polarity, the `reason` and `message` fields must be updated with either the detail of the reason\n(if there is one and only one entry in total across both the `errors` and `warnings` slices), or\n`MultipleReasons` if there is more than one entry.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "errors": {
                "description": "Errors contains a slice of relevant error subconditions for this object.\nSubconditions are expected to appear when relevant (when there is a error), and disappear when not relevant.\nAn empty slice here indicates no errors.",
                "type": "array",
                "items": {
                  "description": "SubCondition is a Condition-like type intended for use as a subcondition inside a DetailedCondition.\nIt contains a subset of the Condition fields.\nIt is intended for warnings and errors, so `type` names should use abnormal-true polarity,\nthat is, they should be of the form \"ErrorPresent: true\".\nThe expected lifecycle for these errors is that they should only be present when the error or warning is,\nand should be removed when they are not relevant.",
                  "type": "object",
                  "required": [
                    "message",
                    "reason",
                    "status",
                    "type"
                  ],
                  "properties": {
                    "message": {
                      "description": "Message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                      "type": "string",
                      "maxLength": 32768
                    },
                    "reason": {
                      "description": "Reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                      "type": "string",
                      "maxLength": 1024,
                      "minLength": 1,
                      "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
                    },
                    "status": {
                      "description": "Status of the condition, one of True, False, Unknown.",
                      "type": "string",
                      "enum": [
                        "True",
                        "False",
                        "Unknown"
                      ]
                    },
                    "type": {
                      "description": "Type of condition in `CamelCase` or in `foo.example.com/CamelCase`.\nThis must be in abnormal-true polarity, that is, `ErrorFound` or `controller.io/ErrorFound`.\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                      "type": "string",
                      "maxLength": 316,
                      "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                "type": "string",
                "maxLength": 32768
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64",
                "minimum": 0
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                "type": "string",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "type": "string",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ]
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                "type": "string",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
              },
              "warnings": {
                "description": "Warnings contains a slice of relevant warning subconditions for this object.\nSubconditions are expected to appear when relevant (when there is a warning), and disappear when not relevant.\nAn empty slice here indicates no warnings.",
                "type": "array",
                "items": {
                  "description": "SubCondition is a Condition-like type intended for use as a subcondition inside a DetailedCondition.\nIt contains a subset of the Condition fields.\nIt is intended for warnings and errors, so `type` names should use abnormal-true polarity,\nthat is, they should be of the form \"ErrorPresent: true\".\nThe expected lifecycle for these errors is that they should only be present when the error or warning is,\nand should be removed when they are not relevant.",
                  "type": "object",
                  "required": [
                    "message",
                    "reason",
                    "status",
                    "type"
                  ],
                  "properties": {
                    "message": {
                      "description": "Message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                      "type": "string",
                      "maxLength": 32768
                    },
                    "reason": {
                      "description": "Reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                      "type": "string",
                      "maxLength": 1024,
                      "minLength": 1,
                      "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
                    },
                    "status": {
                      "description": "Status of the condition, one of True, False, Unknown.",
                      "type": "string",
                      "enum": [
                        "True",
                        "False",
                        "Unknown"
                      ]
                    },
                    "type": {
                      "description": "Type of condition in `CamelCase` or in `foo.example.com/CamelCase`.\nThis must be in abnormal-true polarity, that is, `ErrorFound` or `controller.io/ErrorFound`.\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                      "type": "string",
                      "maxLength": 316,
                      "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                    }
                  },
                  "additionalProperties": false
                }
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        }
      },
      "additionalProperties": false
    }
  }
}
