{
  "description": "DeploymentConfig is the Schema for the DeploymentConfigs API. Provides a CodeDeploy deployment config.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "DeploymentConfigSpec defines the desired state of DeploymentConfig",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "forProvider": {
          "type": "object",
          "required": [
            "region"
          ],
          "properties": {
            "computePlatform": {
              "description": "The compute platform can be Server, Lambda, or ECS. Default is Server.",
              "type": "string"
            },
            "minimumHealthyHosts": {
              "description": "A minimum_healthy_hosts block. Required for Server compute platform. Minimum Healthy Hosts are documented below.",
              "type": "object",
              "properties": {
                "type": {
                  "description": "The type can either be FLEET_PERCENT or HOST_COUNT.",
                  "type": "string"
                },
                "value": {
                  "description": "The value when the type is FLEET_PERCENT represents the minimum number of healthy instances as\na percentage of the total number of instances in the deployment. If you specify FLEET_PERCENT, at the start of the\ndeployment, AWS CodeDeploy converts the percentage to the equivalent number of instance and rounds up fractional instances.\nWhen the type is HOST_COUNT, the value represents the minimum number of healthy instances as an absolute value.",
                  "type": "number"
                }
              },
              "additionalProperties": false
            },
            "region": {
              "description": "Region where this resource will be managed. Defaults to the Region set in the provider configuration.\nRegion is the region you'd like your resource to be created in.",
              "type": "string"
            },
            "trafficRoutingConfig": {
              "description": "A traffic_routing_config block. Traffic Routing Config is documented below.",
              "type": "object",
              "properties": {
                "timeBasedCanary": {
                  "description": "The time based canary configuration information. If type is TimeBasedLinear, use time_based_linear instead.",
                  "type": "object",
                  "properties": {
                    "interval": {
                      "description": "The number of minutes between the first and second traffic shifts of a TimeBasedCanary deployment.",
                      "type": "number"
                    },
                    "percentage": {
                      "description": "The percentage of traffic to shift in the first increment of a TimeBasedCanary deployment.",
                      "type": "number"
                    }
                  },
                  "additionalProperties": false
                },
                "timeBasedLinear": {
                  "description": "The time based linear configuration information. If type is TimeBasedCanary, use time_based_canary instead.",
                  "type": "object",
                  "properties": {
                    "interval": {
                      "description": "The number of minutes between the first and second traffic shifts of a TimeBasedCanary deployment.",
                      "type": "number"
                    },
                    "percentage": {
                      "description": "The percentage of traffic to shift in the first increment of a TimeBasedCanary deployment.",
                      "type": "number"
                    }
                  },
                  "additionalProperties": false
                },
                "type": {
                  "description": "Type of traffic routing config. One of TimeBasedCanary, TimeBasedLinear, AllAtOnce.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "zonalConfig": {
              "description": "A zonal_config block. Zonal Config is documented below.",
              "type": "object",
              "properties": {
                "firstZoneMonitorDurationInSeconds": {
                  "description": "The period of time, in seconds, that CodeDeploy must wait after completing a deployment to the first Availability Zone. CodeDeploy will wait this amount of time before starting a deployment to the second Availability Zone. If you don't specify a value for first_zone_monitor_duration_in_seconds, then CodeDeploy uses the monitor_duration_in_seconds value for the first Availability Zone.",
                  "type": "number"
                },
                "minimumHealthyHostsPerZone": {
                  "description": "The number or percentage of instances that must remain available per Availability Zone during a deployment. If you don't specify a value under minimum_healthy_hosts_per_zone, then CodeDeploy uses a default value of 0 percent. This block is more documented below.",
                  "type": "object",
                  "properties": {
                    "type": {
                      "description": "The type can either be FLEET_PERCENT or HOST_COUNT.",
                      "type": "string"
                    },
                    "value": {
                      "description": "The value when the type is FLEET_PERCENT represents the minimum number of healthy instances as a percentage of the total number of instances in the Availability Zone during a deployment. If you specify FLEET_PERCENT, at the start of the deployment, AWS CodeDeploy converts the percentage to the equivalent number of instance and rounds up fractional instances. When the type is HOST_COUNT, the value represents the minimum number of healthy instances in the Availability Zone as an absolute value.",
                      "type": "number"
                    }
                  },
                  "additionalProperties": false
                },
                "monitorDurationInSeconds": {
                  "description": "The period of time, in seconds, that CodeDeploy must wait after completing a deployment to an Availability Zone. CodeDeploy will wait this amount of time before starting a deployment to the next Availability Zone. If you don't specify a monitor_duration_in_seconds, CodeDeploy starts deploying to the next Availability Zone immediately.",
                  "type": "number"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored\nunless the Management Policies feature flag is disabled.\nInitProvider holds the same fields as ForProvider, with the exception\nof Identifier and other resource reference fields. The fields that are\nin InitProvider are merged into ForProvider when the resource is created.\nThe same fields are also added to the terraform ignore_changes hook, to\navoid updating them after creation. This is useful for fields that are\nrequired on creation, but we do not desire to update them after creation,\nfor example because of an external controller is managing them, like an\nautoscaler.",
          "type": "object",
          "properties": {
            "computePlatform": {
              "description": "The compute platform can be Server, Lambda, or ECS. Default is Server.",
              "type": "string"
            },
            "minimumHealthyHosts": {
              "description": "A minimum_healthy_hosts block. Required for Server compute platform. Minimum Healthy Hosts are documented below.",
              "type": "object",
              "properties": {
                "type": {
                  "description": "The type can either be FLEET_PERCENT or HOST_COUNT.",
                  "type": "string"
                },
                "value": {
                  "description": "The value when the type is FLEET_PERCENT represents the minimum number of healthy instances as\na percentage of the total number of instances in the deployment. If you specify FLEET_PERCENT, at the start of the\ndeployment, AWS CodeDeploy converts the percentage to the equivalent number of instance and rounds up fractional instances.\nWhen the type is HOST_COUNT, the value represents the minimum number of healthy instances as an absolute value.",
                  "type": "number"
                }
              },
              "additionalProperties": false
            },
            "trafficRoutingConfig": {
              "description": "A traffic_routing_config block. Traffic Routing Config is documented below.",
              "type": "object",
              "properties": {
                "timeBasedCanary": {
                  "description": "The time based canary configuration information. If type is TimeBasedLinear, use time_based_linear instead.",
                  "type": "object",
                  "properties": {
                    "interval": {
                      "description": "The number of minutes between the first and second traffic shifts of a TimeBasedCanary deployment.",
                      "type": "number"
                    },
                    "percentage": {
                      "description": "The percentage of traffic to shift in the first increment of a TimeBasedCanary deployment.",
                      "type": "number"
                    }
                  },
                  "additionalProperties": false
                },
                "timeBasedLinear": {
                  "description": "The time based linear configuration information. If type is TimeBasedCanary, use time_based_canary instead.",
                  "type": "object",
                  "properties": {
                    "interval": {
                      "description": "The number of minutes between the first and second traffic shifts of a TimeBasedCanary deployment.",
                      "type": "number"
                    },
                    "percentage": {
                      "description": "The percentage of traffic to shift in the first increment of a TimeBasedCanary deployment.",
                      "type": "number"
                    }
                  },
                  "additionalProperties": false
                },
                "type": {
                  "description": "Type of traffic routing config. One of TimeBasedCanary, TimeBasedLinear, AllAtOnce.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "zonalConfig": {
              "description": "A zonal_config block. Zonal Config is documented below.",
              "type": "object",
              "properties": {
                "firstZoneMonitorDurationInSeconds": {
                  "description": "The period of time, in seconds, that CodeDeploy must wait after completing a deployment to the first Availability Zone. CodeDeploy will wait this amount of time before starting a deployment to the second Availability Zone. If you don't specify a value for first_zone_monitor_duration_in_seconds, then CodeDeploy uses the monitor_duration_in_seconds value for the first Availability Zone.",
                  "type": "number"
                },
                "minimumHealthyHostsPerZone": {
                  "description": "The number or percentage of instances that must remain available per Availability Zone during a deployment. If you don't specify a value under minimum_healthy_hosts_per_zone, then CodeDeploy uses a default value of 0 percent. This block is more documented below.",
                  "type": "object",
                  "properties": {
                    "type": {
                      "description": "The type can either be FLEET_PERCENT or HOST_COUNT.",
                      "type": "string"
                    },
                    "value": {
                      "description": "The value when the type is FLEET_PERCENT represents the minimum number of healthy instances as a percentage of the total number of instances in the Availability Zone during a deployment. If you specify FLEET_PERCENT, at the start of the deployment, AWS CodeDeploy converts the percentage to the equivalent number of instance and rounds up fractional instances. When the type is HOST_COUNT, the value represents the minimum number of healthy instances in the Availability Zone as an absolute value.",
                      "type": "number"
                    }
                  },
                  "additionalProperties": false
                },
                "monitorDurationInSeconds": {
                  "description": "The period of time, in seconds, that CodeDeploy must wait after completing a deployment to an Availability Zone. CodeDeploy will wait this amount of time before starting a deployment to the next Availability Zone. If you don't specify a monitor_duration_in_seconds, CodeDeploy starts deploying to the next Availability Zone immediately.",
                  "type": "number"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "managementPolicies": {
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out\nthrough a Crossplane feature flag.\nManagementPolicies specify the array of actions Crossplane is allowed to\ntake on the managed and external resources.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223\nand this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers\ncan take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to\ncreate, observe, update, and delete this managed resource should be\nconfigured.",
          "type": "object",
          "default": {
            "kind": "ClusterProviderConfig",
            "name": "default"
          },
          "required": [
            "kind",
            "name"
          ],
          "properties": {
            "kind": {
              "description": "Kind of the referenced object.",
              "type": "string"
            },
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a\nSecret to which any connection details for this managed resource should\nbe written. Connection details frequently include the endpoint, username,\nand password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "DeploymentConfigStatus defines the observed state of DeploymentConfig.",
      "type": "object",
      "properties": {
        "atProvider": {
          "type": "object",
          "properties": {
            "arn": {
              "description": "The ARN of the deployment config.",
              "type": "string"
            },
            "computePlatform": {
              "description": "The compute platform can be Server, Lambda, or ECS. Default is Server.",
              "type": "string"
            },
            "deploymentConfigId": {
              "description": "The AWS Assigned deployment config id",
              "type": "string"
            },
            "id": {
              "description": "The deployment group's config name.",
              "type": "string"
            },
            "minimumHealthyHosts": {
              "description": "A minimum_healthy_hosts block. Required for Server compute platform. Minimum Healthy Hosts are documented below.",
              "type": "object",
              "properties": {
                "type": {
                  "description": "The type can either be FLEET_PERCENT or HOST_COUNT.",
                  "type": "string"
                },
                "value": {
                  "description": "The value when the type is FLEET_PERCENT represents the minimum number of healthy instances as\na percentage of the total number of instances in the deployment. If you specify FLEET_PERCENT, at the start of the\ndeployment, AWS CodeDeploy converts the percentage to the equivalent number of instance and rounds up fractional instances.\nWhen the type is HOST_COUNT, the value represents the minimum number of healthy instances as an absolute value.",
                  "type": "number"
                }
              },
              "additionalProperties": false
            },
            "region": {
              "description": "Region where this resource will be managed. Defaults to the Region set in the provider configuration.\nRegion is the region you'd like your resource to be created in.",
              "type": "string"
            },
            "trafficRoutingConfig": {
              "description": "A traffic_routing_config block. Traffic Routing Config is documented below.",
              "type": "object",
              "properties": {
                "timeBasedCanary": {
                  "description": "The time based canary configuration information. If type is TimeBasedLinear, use time_based_linear instead.",
                  "type": "object",
                  "properties": {
                    "interval": {
                      "description": "The number of minutes between the first and second traffic shifts of a TimeBasedCanary deployment.",
                      "type": "number"
                    },
                    "percentage": {
                      "description": "The percentage of traffic to shift in the first increment of a TimeBasedCanary deployment.",
                      "type": "number"
                    }
                  },
                  "additionalProperties": false
                },
                "timeBasedLinear": {
                  "description": "The time based linear configuration information. If type is TimeBasedCanary, use time_based_canary instead.",
                  "type": "object",
                  "properties": {
                    "interval": {
                      "description": "The number of minutes between the first and second traffic shifts of a TimeBasedCanary deployment.",
                      "type": "number"
                    },
                    "percentage": {
                      "description": "The percentage of traffic to shift in the first increment of a TimeBasedCanary deployment.",
                      "type": "number"
                    }
                  },
                  "additionalProperties": false
                },
                "type": {
                  "description": "Type of traffic routing config. One of TimeBasedCanary, TimeBasedLinear, AllAtOnce.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "zonalConfig": {
              "description": "A zonal_config block. Zonal Config is documented below.",
              "type": "object",
              "properties": {
                "firstZoneMonitorDurationInSeconds": {
                  "description": "The period of time, in seconds, that CodeDeploy must wait after completing a deployment to the first Availability Zone. CodeDeploy will wait this amount of time before starting a deployment to the second Availability Zone. If you don't specify a value for first_zone_monitor_duration_in_seconds, then CodeDeploy uses the monitor_duration_in_seconds value for the first Availability Zone.",
                  "type": "number"
                },
                "minimumHealthyHostsPerZone": {
                  "description": "The number or percentage of instances that must remain available per Availability Zone during a deployment. If you don't specify a value under minimum_healthy_hosts_per_zone, then CodeDeploy uses a default value of 0 percent. This block is more documented below.",
                  "type": "object",
                  "properties": {
                    "type": {
                      "description": "The type can either be FLEET_PERCENT or HOST_COUNT.",
                      "type": "string"
                    },
                    "value": {
                      "description": "The value when the type is FLEET_PERCENT represents the minimum number of healthy instances as a percentage of the total number of instances in the Availability Zone during a deployment. If you specify FLEET_PERCENT, at the start of the deployment, AWS CodeDeploy converts the percentage to the equivalent number of instance and rounds up fractional instances. When the type is HOST_COUNT, the value represents the minimum number of healthy instances in the Availability Zone as an absolute value.",
                      "type": "number"
                    }
                  },
                  "additionalProperties": false
                },
                "monitorDurationInSeconds": {
                  "description": "The period of time, in seconds, that CodeDeploy must wait after completing a deployment to an Availability Zone. CodeDeploy will wait this amount of time before starting a deployment to the next Availability Zone. If you don't specify a monitor_duration_in_seconds, CodeDeploy starts deploying to the next Availability Zone immediately.",
                  "type": "number"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "type": "array",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one\nstatus to another.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from\none status to another, if any.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to\na resource at any point in time.",
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest metadata.generation\nwhich resulted in either a ready state, or stalled due to error\nit can not recover from without human intervention.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    }
  }
}
