{
  "description": "Schema is the Schema for the schemas API",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "SchemaSpec defines the desired state of Schema",
      "type": "object",
      "required": [
        "data",
        "schemaRegistryClusterRef"
      ],
      "properties": {
        "compatibilityLevel": {
          "description": "SubjectCompatibility specifies the desired state for the mirror topic.",
          "type": "string",
          "enum": [
            "BACKWARD",
            "BACKWARD_TRANSITIVE",
            "FORWARD",
            "FORWARD_TRANSITIVE",
            "FULL",
            "FULL_TRANSITIVE",
            "NONE"
          ]
        },
        "data": {
          "description": "data defines the data required to create the schema.",
          "type": "object",
          "required": [
            "configRef",
            "format"
          ],
          "properties": {
            "configRef": {
              "description": "configRef is the name of the Kubernetes ConfigMap resource containing the schema.",
              "type": "string",
              "minLength": 1
            },
            "format": {
              "description": "format is the format type of the encoded schema. Valid options are `avro`, `json`, and `protobuf`.",
              "type": "string",
              "minLength": 1,
              "enum": [
                "avro",
                "json",
                "protobuf"
              ]
            }
          },
          "additionalProperties": false
        },
        "deleteSchemaVersions": {
          "description": "deleteSchemaVersions allow deleting versions either in soft or hard delete mode the version id information is available in the /status",
          "type": "object",
          "properties": {
            "hardDelete": {
              "description": "hardDelete defines the list of version to trigger  hard delete the /status will provide information whether the request is successful",
              "type": "object",
              "required": [
                "versions"
              ],
              "properties": {
                "versions": {
                  "description": "versions defines the list of schema version id information about the version id is available in the /status",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "additionalProperties": false
            },
            "softDelete": {
              "description": "softDelete defines the list of version to trigger soft delete the /status will provide information whether the request is successful",
              "type": "object",
              "required": [
                "versions"
              ],
              "properties": {
                "versions": {
                  "description": "versions defines the list of schema version id information about the version id is available in the /status",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "name": {
          "description": "Name of the object.",
          "type": "string",
          "maxLength": 63,
          "minLength": 1,
          "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
        },
        "schemaReferences": {
          "description": "schemaReferences defines the schema references in the schema data.",
          "type": "array",
          "items": {
            "description": "SchemaReference is the schema to be used as a reference for the new schema.",
            "type": "object",
            "required": [
              "format",
              "subject",
              "version"
            ],
            "properties": {
              "avro": {
                "description": "avro is the data for the referenced Avro schema.",
                "type": "object",
                "required": [
                  "avro"
                ],
                "properties": {
                  "avro": {
                    "description": "name is the fully qualified name of the referenced Avro schema.",
                    "type": "string",
                    "minLength": 1
                  }
                },
                "additionalProperties": false
              },
              "format": {
                "description": "format is the format type of the referenced schema. Valid options are `avro`, `json`, and `protobuf`.",
                "type": "string",
                "minLength": 1,
                "enum": [
                  "avro",
                  "json",
                  "protobuf"
                ]
              },
              "json": {
                "description": "json is the data for the referenced JSON schema.",
                "type": "object",
                "required": [
                  "url"
                ],
                "properties": {
                  "url": {
                    "description": "url is the referenced JSON schema url.",
                    "type": "string",
                    "minLength": 1
                  }
                },
                "additionalProperties": false
              },
              "protobuf": {
                "description": "protobuf is the data for the referenced Protobuf schema.",
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "description": "file is the file name of the referenced Protobuf schema.",
                    "type": "string",
                    "minLength": 1
                  }
                },
                "additionalProperties": false
              },
              "subject": {
                "description": "subject is the subject name for the referenced schema through the configRef.",
                "type": "string",
                "minLength": 1
              },
              "version": {
                "description": "version is the version type of the referenced schema.",
                "type": "integer",
                "format": "int32"
              }
            },
            "additionalProperties": false
          }
        },
        "schemaRegistryClusterRef": {
          "description": "schemaRegistryClusterRef references the schemaRegistry cluster",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name is the name of the referenced CR",
              "type": "string",
              "maxLength": 63,
              "minLength": 1,
              "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
            },
            "namespace": {
              "description": "Namespace of the CR. Defaults to the current namespace of the CR making the reference",
              "type": "string",
              "maxLength": 255,
              "minLength": 1,
              "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "SchemaStatus defines the observed state of Schema",
      "type": "object",
      "properties": {
        "compatibilityLevel": {
          "description": "compatibilityLevel specifies the compatibility level of the schema under the subject.",
          "type": "string"
        },
        "conditions": {
          "description": "conditions specify the latest available observations of the current state.",
          "type": "array",
          "items": {
            "description": "Condition represents the latest available observations of the current state.",
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime shows the last time the condition was transitioned from one status to another.",
                "type": "string",
                "format": "date-time"
              },
              "lastUpdateTime": {
                "description": "lastUpdateTime shows the last time the condition was evaluated.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "message shows a human-readable message with details about the transition.",
                "type": "string"
              },
              "reason": {
                "description": "reason shows the reason for the last transition of the condition.",
                "type": "string"
              },
              "status": {
                "description": "status shows the status of the condition, one of `True`, `False`, or `Unknown`.",
                "type": "string"
              },
              "type": {
                "description": "type shows the condition type.",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "deletedVersions": {
          "description": "deletedVersions are the successfully hard deleted versions for the subject.",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "format": {
          "description": "format is the format of the latest schema for the subject.",
          "type": "string"
        },
        "id": {
          "description": "id is the id of the latest schema for the subject.",
          "type": "integer",
          "format": "int32"
        },
        "observedGeneration": {
          "description": "observedGeneration is the most recent generation observed for this app.",
          "type": "integer",
          "format": "int64"
        },
        "phase": {
          "description": "phase describes the state of the Application resource.",
          "type": "string",
          "default": "Unknown",
          "enum": [
            "Unknown",
            "Bound"
          ]
        },
        "schemaReferences": {
          "description": "schemaReferences are the schema references for the subject.",
          "type": "array",
          "items": {
            "description": "SchemaReference is the schema to be used as a reference for the new schema.",
            "type": "object",
            "required": [
              "format",
              "subject",
              "version"
            ],
            "properties": {
              "avro": {
                "description": "avro is the data for the referenced Avro schema.",
                "type": "object",
                "required": [
                  "avro"
                ],
                "properties": {
                  "avro": {
                    "description": "name is the fully qualified name of the referenced Avro schema.",
                    "type": "string",
                    "minLength": 1
                  }
                },
                "additionalProperties": false
              },
              "format": {
                "description": "format is the format type of the referenced schema. Valid options are `avro`, `json`, and `protobuf`.",
                "type": "string",
                "minLength": 1,
                "enum": [
                  "avro",
                  "json",
                  "protobuf"
                ]
              },
              "json": {
                "description": "json is the data for the referenced JSON schema.",
                "type": "object",
                "required": [
                  "url"
                ],
                "properties": {
                  "url": {
                    "description": "url is the referenced JSON schema url.",
                    "type": "string",
                    "minLength": 1
                  }
                },
                "additionalProperties": false
              },
              "protobuf": {
                "description": "protobuf is the data for the referenced Protobuf schema.",
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "description": "file is the file name of the referenced Protobuf schema.",
                    "type": "string",
                    "minLength": 1
                  }
                },
                "additionalProperties": false
              },
              "subject": {
                "description": "subject is the subject name for the referenced schema through the configRef.",
                "type": "string",
                "minLength": 1
              },
              "version": {
                "description": "version is the version type of the referenced schema.",
                "type": "integer",
                "format": "int32"
              }
            },
            "additionalProperties": false
          }
        },
        "schemaRegistryCluster": {
          "description": "schemaRegistryCluster references schemaRegistry cluster",
          "type": "string"
        },
        "softDeletedVersions": {
          "description": "softDeletedVersions are the successfully soft deleted versions for the subject.",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "state": {
          "description": "state is the state of the application",
          "type": "string",
          "default": "Unknown",
          "enum": [
            "Unknown",
            "Created",
            "Provisioning",
            "Failed",
            "DeleteRequested",
            "Error"
          ]
        },
        "subject": {
          "description": "subject is the subject of the schema.",
          "type": "string"
        },
        "version": {
          "description": "version is the version of the latest schema for the subject.",
          "type": "integer",
          "format": "int32"
        }
      },
      "additionalProperties": false
    }
  }
}
