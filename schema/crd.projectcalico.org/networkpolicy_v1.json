{
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "type": "object",
      "properties": {
        "egress": {
          "description": "The ordered set of egress rules.  Each rule contains a set of packet match criteria and\na corresponding action to apply.",
          "type": "array",
          "items": {
            "description": "A Rule encapsulates a set of match criteria and an action.  Both selector-based security Policy\nand security Profiles reference rules - separated out as a list of rules for both\ningress and egress packet matching.\n\nEach positive match criteria has a negated version, prefixed with \"Not\". All the match\ncriteria within a rule must be satisfied for a packet to match. A single rule can contain\nthe positive and negative version of a match and both must be satisfied for the rule to match.",
            "type": "object",
            "required": [
              "action"
            ],
            "properties": {
              "action": {
                "type": "string"
              },
              "destination": {
                "description": "Destination contains the match criteria that apply to destination entity.",
                "type": "object",
                "properties": {
                  "namespaceSelector": {
                    "description": "NamespaceSelector is an optional field that contains a selector expression. Only traffic\nthat originates from (or terminates at) endpoints within the selected namespaces will be\nmatched. When both NamespaceSelector and another selector are defined on the same rule, then only\nworkload endpoints that are matched by both selectors will be selected by the rule.\n\nFor NetworkPolicy, an empty NamespaceSelector implies that the Selector is limited to selecting\nonly workload endpoints in the same namespace as the NetworkPolicy.\n\nFor NetworkPolicy, `global()` NamespaceSelector implies that the Selector is limited to selecting\nonly GlobalNetworkSet or HostEndpoint.\n\nFor GlobalNetworkPolicy, an empty NamespaceSelector implies the Selector applies to workload\nendpoints across all namespaces.",
                    "type": "string"
                  },
                  "nets": {
                    "description": "Nets is an optional field that restricts the rule to only apply to traffic that\noriginates from (or terminates at) IP addresses in any of the given subnets.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "notNets": {
                    "description": "NotNets is the negated version of the Nets field.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "notPorts": {
                    "description": "NotPorts is the negated version of the Ports field.\nSince only some protocols have ports, if any ports are specified it requires the\nProtocol match in the Rule to be set to \"TCP\" or \"UDP\".",
                    "type": "array",
                    "items": {
                      "pattern": "^.*",
                      "anyOf": [
                        {
                          "type": "integer"
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "x-kubernetes-int-or-string": true
                    }
                  },
                  "notSelector": {
                    "description": "NotSelector is the negated version of the Selector field.  See Selector field for\nsubtleties with negated selectors.",
                    "type": "string"
                  },
                  "ports": {
                    "description": "Ports is an optional field that restricts the rule to only apply to traffic that has a\nsource (destination) port that matches one of these ranges/values. This value is a\nlist of integers or strings that represent ranges of ports.\n\nSince only some protocols have ports, if any ports are specified it requires the\nProtocol match in the Rule to be set to \"TCP\" or \"UDP\".",
                    "type": "array",
                    "items": {
                      "pattern": "^.*",
                      "anyOf": [
                        {
                          "type": "integer"
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "x-kubernetes-int-or-string": true
                    }
                  },
                  "selector": {
                    "description": "Selector is an optional field that contains a selector expression (see Policy for\nsample syntax).  Only traffic that originates from (terminates at) endpoints matching\nthe selector will be matched.\n\nNote that: in addition to the negated version of the Selector (see NotSelector below), the\nselector expression syntax itself supports negation.  The two types of negation are subtly\ndifferent. One negates the set of matched endpoints, the other negates the whole match:\n\n\tSelector = \"!has(my_label)\" matches packets that are from other Calico-controlled\n\tendpoints that do not have the label \"my_label\".\n\n\tNotSelector = \"has(my_label)\" matches packets that are not from Calico-controlled\n\tendpoints that do have the label \"my_label\".\n\nThe effect is that the latter will accept packets from non-Calico sources whereas the\nformer is limited to packets from Calico-controlled endpoints.",
                    "type": "string"
                  },
                  "serviceAccounts": {
                    "description": "ServiceAccounts is an optional field that restricts the rule to only apply to traffic that originates from (or\nterminates at) a pod running as a matching service account.",
                    "type": "object",
                    "properties": {
                      "names": {
                        "description": "Names is an optional field that restricts the rule to only apply to traffic that originates from (or terminates\nat) a pod running as a service account whose name is in the list.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "selector": {
                        "description": "Selector is an optional field that restricts the rule to only apply to traffic that originates from\n(or terminates at) a pod running as a service account that matches the given label selector.\nIf both Names and Selector are specified then they are AND'ed.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "services": {
                    "description": "Services is an optional field that contains options for matching Kubernetes Services.\nIf specified, only traffic that originates from or terminates at endpoints within the selected\nservice(s) will be matched, and only to/from each endpoint's port.\n\nServices cannot be specified on the same rule as Selector, NotSelector, NamespaceSelector, Nets,\nNotNets or ServiceAccounts.\n\nPorts and NotPorts can only be specified with Services on ingress rules.",
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "Name specifies the name of a Kubernetes Service to match.",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace specifies the namespace of the given Service. If left empty, the rule\nwill match within this policy's namespace.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              },
              "http": {
                "description": "HTTP contains match criteria that apply to HTTP requests.",
                "type": "object",
                "properties": {
                  "methods": {
                    "description": "Methods is an optional field that restricts the rule to apply only to HTTP requests that use one of the listed\nHTTP Methods (e.g. GET, PUT, etc.)\nMultiple methods are OR'd together.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "paths": {
                    "description": "Paths is an optional field that restricts the rule to apply to HTTP requests that use one of the listed\nHTTP Paths.\nMultiple paths are OR'd together.\ne.g:\n- exact: /foo\n- prefix: /bar\nNOTE: Each entry may ONLY specify either a `exact` or a `prefix` match. The validator will check for it.",
                    "type": "array",
                    "items": {
                      "description": "HTTPPath specifies an HTTP path to match. It may be either of the form:\nexact: \u003cpath\u003e: which matches the path exactly or\nprefix: \u003cpath-prefix\u003e: which matches the path prefix",
                      "type": "object",
                      "properties": {
                        "exact": {
                          "type": "string"
                        },
                        "prefix": {
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  }
                },
                "additionalProperties": false
              },
              "icmp": {
                "description": "ICMP is an optional field that restricts the rule to apply to a specific type and\ncode of ICMP traffic.  This should only be specified if the Protocol field is set to\n\"ICMP\" or \"ICMPv6\".",
                "type": "object",
                "properties": {
                  "code": {
                    "description": "Match on a specific ICMP code.  If specified, the Type value must also be specified.\nThis is a technical limitation imposed by the kernel's iptables firewall, which\nCalico uses to enforce the rule.",
                    "type": "integer"
                  },
                  "type": {
                    "description": "Match on a specific ICMP type.  For example a value of 8 refers to ICMP Echo Request\n(i.e. pings).",
                    "type": "integer"
                  }
                },
                "additionalProperties": false
              },
              "ipVersion": {
                "description": "IPVersion is an optional field that restricts the rule to only match a specific IP\nversion.",
                "type": "integer"
              },
              "metadata": {
                "description": "Metadata contains additional information for this rule",
                "type": "object",
                "properties": {
                  "annotations": {
                    "description": "Annotations is a set of key value pairs that give extra information about the rule",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                },
                "additionalProperties": false
              },
              "notICMP": {
                "description": "NotICMP is the negated version of the ICMP field.",
                "type": "object",
                "properties": {
                  "code": {
                    "description": "Match on a specific ICMP code.  If specified, the Type value must also be specified.\nThis is a technical limitation imposed by the kernel's iptables firewall, which\nCalico uses to enforce the rule.",
                    "type": "integer"
                  },
                  "type": {
                    "description": "Match on a specific ICMP type.  For example a value of 8 refers to ICMP Echo Request\n(i.e. pings).",
                    "type": "integer"
                  }
                },
                "additionalProperties": false
              },
              "notProtocol": {
                "description": "NotProtocol is the negated version of the Protocol field.",
                "pattern": "^.*",
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "string"
                  }
                ],
                "x-kubernetes-int-or-string": true
              },
              "protocol": {
                "description": "Protocol is an optional field that restricts the rule to only apply to traffic of\na specific IP protocol. Required if any of the EntityRules contain Ports\n(because ports only apply to certain protocols).\n\nMust be one of these string values: \"TCP\", \"UDP\", \"ICMP\", \"ICMPv6\", \"SCTP\", \"UDPLite\"\nor an integer in the range 1-255.",
                "pattern": "^.*",
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "string"
                  }
                ],
                "x-kubernetes-int-or-string": true
              },
              "source": {
                "description": "Source contains the match criteria that apply to source entity.",
                "type": "object",
                "properties": {
                  "namespaceSelector": {
                    "description": "NamespaceSelector is an optional field that contains a selector expression. Only traffic\nthat originates from (or terminates at) endpoints within the selected namespaces will be\nmatched. When both NamespaceSelector and another selector are defined on the same rule, then only\nworkload endpoints that are matched by both selectors will be selected by the rule.\n\nFor NetworkPolicy, an empty NamespaceSelector implies that the Selector is limited to selecting\nonly workload endpoints in the same namespace as the NetworkPolicy.\n\nFor NetworkPolicy, `global()` NamespaceSelector implies that the Selector is limited to selecting\nonly GlobalNetworkSet or HostEndpoint.\n\nFor GlobalNetworkPolicy, an empty NamespaceSelector implies the Selector applies to workload\nendpoints across all namespaces.",
                    "type": "string"
                  },
                  "nets": {
                    "description": "Nets is an optional field that restricts the rule to only apply to traffic that\noriginates from (or terminates at) IP addresses in any of the given subnets.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "notNets": {
                    "description": "NotNets is the negated version of the Nets field.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "notPorts": {
                    "description": "NotPorts is the negated version of the Ports field.\nSince only some protocols have ports, if any ports are specified it requires the\nProtocol match in the Rule to be set to \"TCP\" or \"UDP\".",
                    "type": "array",
                    "items": {
                      "pattern": "^.*",
                      "anyOf": [
                        {
                          "type": "integer"
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "x-kubernetes-int-or-string": true
                    }
                  },
                  "notSelector": {
                    "description": "NotSelector is the negated version of the Selector field.  See Selector field for\nsubtleties with negated selectors.",
                    "type": "string"
                  },
                  "ports": {
                    "description": "Ports is an optional field that restricts the rule to only apply to traffic that has a\nsource (destination) port that matches one of these ranges/values. This value is a\nlist of integers or strings that represent ranges of ports.\n\nSince only some protocols have ports, if any ports are specified it requires the\nProtocol match in the Rule to be set to \"TCP\" or \"UDP\".",
                    "type": "array",
                    "items": {
                      "pattern": "^.*",
                      "anyOf": [
                        {
                          "type": "integer"
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "x-kubernetes-int-or-string": true
                    }
                  },
                  "selector": {
                    "description": "Selector is an optional field that contains a selector expression (see Policy for\nsample syntax).  Only traffic that originates from (terminates at) endpoints matching\nthe selector will be matched.\n\nNote that: in addition to the negated version of the Selector (see NotSelector below), the\nselector expression syntax itself supports negation.  The two types of negation are subtly\ndifferent. One negates the set of matched endpoints, the other negates the whole match:\n\n\tSelector = \"!has(my_label)\" matches packets that are from other Calico-controlled\n\tendpoints that do not have the label \"my_label\".\n\n\tNotSelector = \"has(my_label)\" matches packets that are not from Calico-controlled\n\tendpoints that do have the label \"my_label\".\n\nThe effect is that the latter will accept packets from non-Calico sources whereas the\nformer is limited to packets from Calico-controlled endpoints.",
                    "type": "string"
                  },
                  "serviceAccounts": {
                    "description": "ServiceAccounts is an optional field that restricts the rule to only apply to traffic that originates from (or\nterminates at) a pod running as a matching service account.",
                    "type": "object",
                    "properties": {
                      "names": {
                        "description": "Names is an optional field that restricts the rule to only apply to traffic that originates from (or terminates\nat) a pod running as a service account whose name is in the list.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "selector": {
                        "description": "Selector is an optional field that restricts the rule to only apply to traffic that originates from\n(or terminates at) a pod running as a service account that matches the given label selector.\nIf both Names and Selector are specified then they are AND'ed.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "services": {
                    "description": "Services is an optional field that contains options for matching Kubernetes Services.\nIf specified, only traffic that originates from or terminates at endpoints within the selected\nservice(s) will be matched, and only to/from each endpoint's port.\n\nServices cannot be specified on the same rule as Selector, NotSelector, NamespaceSelector, Nets,\nNotNets or ServiceAccounts.\n\nPorts and NotPorts can only be specified with Services on ingress rules.",
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "Name specifies the name of a Kubernetes Service to match.",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace specifies the namespace of the given Service. If left empty, the rule\nwill match within this policy's namespace.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        },
        "ingress": {
          "description": "The ordered set of ingress rules.  Each rule contains a set of packet match criteria and\na corresponding action to apply.",
          "type": "array",
          "items": {
            "description": "A Rule encapsulates a set of match criteria and an action.  Both selector-based security Policy\nand security Profiles reference rules - separated out as a list of rules for both\ningress and egress packet matching.\n\nEach positive match criteria has a negated version, prefixed with \"Not\". All the match\ncriteria within a rule must be satisfied for a packet to match. A single rule can contain\nthe positive and negative version of a match and both must be satisfied for the rule to match.",
            "type": "object",
            "required": [
              "action"
            ],
            "properties": {
              "action": {
                "type": "string"
              },
              "destination": {
                "description": "Destination contains the match criteria that apply to destination entity.",
                "type": "object",
                "properties": {
                  "namespaceSelector": {
                    "description": "NamespaceSelector is an optional field that contains a selector expression. Only traffic\nthat originates from (or terminates at) endpoints within the selected namespaces will be\nmatched. When both NamespaceSelector and another selector are defined on the same rule, then only\nworkload endpoints that are matched by both selectors will be selected by the rule.\n\nFor NetworkPolicy, an empty NamespaceSelector implies that the Selector is limited to selecting\nonly workload endpoints in the same namespace as the NetworkPolicy.\n\nFor NetworkPolicy, `global()` NamespaceSelector implies that the Selector is limited to selecting\nonly GlobalNetworkSet or HostEndpoint.\n\nFor GlobalNetworkPolicy, an empty NamespaceSelector implies the Selector applies to workload\nendpoints across all namespaces.",
                    "type": "string"
                  },
                  "nets": {
                    "description": "Nets is an optional field that restricts the rule to only apply to traffic that\noriginates from (or terminates at) IP addresses in any of the given subnets.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "notNets": {
                    "description": "NotNets is the negated version of the Nets field.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "notPorts": {
                    "description": "NotPorts is the negated version of the Ports field.\nSince only some protocols have ports, if any ports are specified it requires the\nProtocol match in the Rule to be set to \"TCP\" or \"UDP\".",
                    "type": "array",
                    "items": {
                      "pattern": "^.*",
                      "anyOf": [
                        {
                          "type": "integer"
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "x-kubernetes-int-or-string": true
                    }
                  },
                  "notSelector": {
                    "description": "NotSelector is the negated version of the Selector field.  See Selector field for\nsubtleties with negated selectors.",
                    "type": "string"
                  },
                  "ports": {
                    "description": "Ports is an optional field that restricts the rule to only apply to traffic that has a\nsource (destination) port that matches one of these ranges/values. This value is a\nlist of integers or strings that represent ranges of ports.\n\nSince only some protocols have ports, if any ports are specified it requires the\nProtocol match in the Rule to be set to \"TCP\" or \"UDP\".",
                    "type": "array",
                    "items": {
                      "pattern": "^.*",
                      "anyOf": [
                        {
                          "type": "integer"
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "x-kubernetes-int-or-string": true
                    }
                  },
                  "selector": {
                    "description": "Selector is an optional field that contains a selector expression (see Policy for\nsample syntax).  Only traffic that originates from (terminates at) endpoints matching\nthe selector will be matched.\n\nNote that: in addition to the negated version of the Selector (see NotSelector below), the\nselector expression syntax itself supports negation.  The two types of negation are subtly\ndifferent. One negates the set of matched endpoints, the other negates the whole match:\n\n\tSelector = \"!has(my_label)\" matches packets that are from other Calico-controlled\n\tendpoints that do not have the label \"my_label\".\n\n\tNotSelector = \"has(my_label)\" matches packets that are not from Calico-controlled\n\tendpoints that do have the label \"my_label\".\n\nThe effect is that the latter will accept packets from non-Calico sources whereas the\nformer is limited to packets from Calico-controlled endpoints.",
                    "type": "string"
                  },
                  "serviceAccounts": {
                    "description": "ServiceAccounts is an optional field that restricts the rule to only apply to traffic that originates from (or\nterminates at) a pod running as a matching service account.",
                    "type": "object",
                    "properties": {
                      "names": {
                        "description": "Names is an optional field that restricts the rule to only apply to traffic that originates from (or terminates\nat) a pod running as a service account whose name is in the list.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "selector": {
                        "description": "Selector is an optional field that restricts the rule to only apply to traffic that originates from\n(or terminates at) a pod running as a service account that matches the given label selector.\nIf both Names and Selector are specified then they are AND'ed.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "services": {
                    "description": "Services is an optional field that contains options for matching Kubernetes Services.\nIf specified, only traffic that originates from or terminates at endpoints within the selected\nservice(s) will be matched, and only to/from each endpoint's port.\n\nServices cannot be specified on the same rule as Selector, NotSelector, NamespaceSelector, Nets,\nNotNets or ServiceAccounts.\n\nPorts and NotPorts can only be specified with Services on ingress rules.",
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "Name specifies the name of a Kubernetes Service to match.",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace specifies the namespace of the given Service. If left empty, the rule\nwill match within this policy's namespace.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              },
              "http": {
                "description": "HTTP contains match criteria that apply to HTTP requests.",
                "type": "object",
                "properties": {
                  "methods": {
                    "description": "Methods is an optional field that restricts the rule to apply only to HTTP requests that use one of the listed\nHTTP Methods (e.g. GET, PUT, etc.)\nMultiple methods are OR'd together.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "paths": {
                    "description": "Paths is an optional field that restricts the rule to apply to HTTP requests that use one of the listed\nHTTP Paths.\nMultiple paths are OR'd together.\ne.g:\n- exact: /foo\n- prefix: /bar\nNOTE: Each entry may ONLY specify either a `exact` or a `prefix` match. The validator will check for it.",
                    "type": "array",
                    "items": {
                      "description": "HTTPPath specifies an HTTP path to match. It may be either of the form:\nexact: \u003cpath\u003e: which matches the path exactly or\nprefix: \u003cpath-prefix\u003e: which matches the path prefix",
                      "type": "object",
                      "properties": {
                        "exact": {
                          "type": "string"
                        },
                        "prefix": {
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  }
                },
                "additionalProperties": false
              },
              "icmp": {
                "description": "ICMP is an optional field that restricts the rule to apply to a specific type and\ncode of ICMP traffic.  This should only be specified if the Protocol field is set to\n\"ICMP\" or \"ICMPv6\".",
                "type": "object",
                "properties": {
                  "code": {
                    "description": "Match on a specific ICMP code.  If specified, the Type value must also be specified.\nThis is a technical limitation imposed by the kernel's iptables firewall, which\nCalico uses to enforce the rule.",
                    "type": "integer"
                  },
                  "type": {
                    "description": "Match on a specific ICMP type.  For example a value of 8 refers to ICMP Echo Request\n(i.e. pings).",
                    "type": "integer"
                  }
                },
                "additionalProperties": false
              },
              "ipVersion": {
                "description": "IPVersion is an optional field that restricts the rule to only match a specific IP\nversion.",
                "type": "integer"
              },
              "metadata": {
                "description": "Metadata contains additional information for this rule",
                "type": "object",
                "properties": {
                  "annotations": {
                    "description": "Annotations is a set of key value pairs that give extra information about the rule",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                },
                "additionalProperties": false
              },
              "notICMP": {
                "description": "NotICMP is the negated version of the ICMP field.",
                "type": "object",
                "properties": {
                  "code": {
                    "description": "Match on a specific ICMP code.  If specified, the Type value must also be specified.\nThis is a technical limitation imposed by the kernel's iptables firewall, which\nCalico uses to enforce the rule.",
                    "type": "integer"
                  },
                  "type": {
                    "description": "Match on a specific ICMP type.  For example a value of 8 refers to ICMP Echo Request\n(i.e. pings).",
                    "type": "integer"
                  }
                },
                "additionalProperties": false
              },
              "notProtocol": {
                "description": "NotProtocol is the negated version of the Protocol field.",
                "pattern": "^.*",
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "string"
                  }
                ],
                "x-kubernetes-int-or-string": true
              },
              "protocol": {
                "description": "Protocol is an optional field that restricts the rule to only apply to traffic of\na specific IP protocol. Required if any of the EntityRules contain Ports\n(because ports only apply to certain protocols).\n\nMust be one of these string values: \"TCP\", \"UDP\", \"ICMP\", \"ICMPv6\", \"SCTP\", \"UDPLite\"\nor an integer in the range 1-255.",
                "pattern": "^.*",
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "string"
                  }
                ],
                "x-kubernetes-int-or-string": true
              },
              "source": {
                "description": "Source contains the match criteria that apply to source entity.",
                "type": "object",
                "properties": {
                  "namespaceSelector": {
                    "description": "NamespaceSelector is an optional field that contains a selector expression. Only traffic\nthat originates from (or terminates at) endpoints within the selected namespaces will be\nmatched. When both NamespaceSelector and another selector are defined on the same rule, then only\nworkload endpoints that are matched by both selectors will be selected by the rule.\n\nFor NetworkPolicy, an empty NamespaceSelector implies that the Selector is limited to selecting\nonly workload endpoints in the same namespace as the NetworkPolicy.\n\nFor NetworkPolicy, `global()` NamespaceSelector implies that the Selector is limited to selecting\nonly GlobalNetworkSet or HostEndpoint.\n\nFor GlobalNetworkPolicy, an empty NamespaceSelector implies the Selector applies to workload\nendpoints across all namespaces.",
                    "type": "string"
                  },
                  "nets": {
                    "description": "Nets is an optional field that restricts the rule to only apply to traffic that\noriginates from (or terminates at) IP addresses in any of the given subnets.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "notNets": {
                    "description": "NotNets is the negated version of the Nets field.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "notPorts": {
                    "description": "NotPorts is the negated version of the Ports field.\nSince only some protocols have ports, if any ports are specified it requires the\nProtocol match in the Rule to be set to \"TCP\" or \"UDP\".",
                    "type": "array",
                    "items": {
                      "pattern": "^.*",
                      "anyOf": [
                        {
                          "type": "integer"
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "x-kubernetes-int-or-string": true
                    }
                  },
                  "notSelector": {
                    "description": "NotSelector is the negated version of the Selector field.  See Selector field for\nsubtleties with negated selectors.",
                    "type": "string"
                  },
                  "ports": {
                    "description": "Ports is an optional field that restricts the rule to only apply to traffic that has a\nsource (destination) port that matches one of these ranges/values. This value is a\nlist of integers or strings that represent ranges of ports.\n\nSince only some protocols have ports, if any ports are specified it requires the\nProtocol match in the Rule to be set to \"TCP\" or \"UDP\".",
                    "type": "array",
                    "items": {
                      "pattern": "^.*",
                      "anyOf": [
                        {
                          "type": "integer"
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "x-kubernetes-int-or-string": true
                    }
                  },
                  "selector": {
                    "description": "Selector is an optional field that contains a selector expression (see Policy for\nsample syntax).  Only traffic that originates from (terminates at) endpoints matching\nthe selector will be matched.\n\nNote that: in addition to the negated version of the Selector (see NotSelector below), the\nselector expression syntax itself supports negation.  The two types of negation are subtly\ndifferent. One negates the set of matched endpoints, the other negates the whole match:\n\n\tSelector = \"!has(my_label)\" matches packets that are from other Calico-controlled\n\tendpoints that do not have the label \"my_label\".\n\n\tNotSelector = \"has(my_label)\" matches packets that are not from Calico-controlled\n\tendpoints that do have the label \"my_label\".\n\nThe effect is that the latter will accept packets from non-Calico sources whereas the\nformer is limited to packets from Calico-controlled endpoints.",
                    "type": "string"
                  },
                  "serviceAccounts": {
                    "description": "ServiceAccounts is an optional field that restricts the rule to only apply to traffic that originates from (or\nterminates at) a pod running as a matching service account.",
                    "type": "object",
                    "properties": {
                      "names": {
                        "description": "Names is an optional field that restricts the rule to only apply to traffic that originates from (or terminates\nat) a pod running as a service account whose name is in the list.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "selector": {
                        "description": "Selector is an optional field that restricts the rule to only apply to traffic that originates from\n(or terminates at) a pod running as a service account that matches the given label selector.\nIf both Names and Selector are specified then they are AND'ed.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "services": {
                    "description": "Services is an optional field that contains options for matching Kubernetes Services.\nIf specified, only traffic that originates from or terminates at endpoints within the selected\nservice(s) will be matched, and only to/from each endpoint's port.\n\nServices cannot be specified on the same rule as Selector, NotSelector, NamespaceSelector, Nets,\nNotNets or ServiceAccounts.\n\nPorts and NotPorts can only be specified with Services on ingress rules.",
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "Name specifies the name of a Kubernetes Service to match.",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace specifies the namespace of the given Service. If left empty, the rule\nwill match within this policy's namespace.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        },
        "order": {
          "description": "Order is an optional field that specifies the order in which the policy is applied.\nPolicies with higher \"order\" are applied after those with lower\norder within the same tier.  If the order is omitted, it may be considered to be \"infinite\" - i.e. the\npolicy will be applied last.  Policies with identical order will be applied in\nalphanumerical order based on the Policy \"Name\" within the tier.",
          "type": "number"
        },
        "performanceHints": {
          "description": "PerformanceHints contains a list of hints to Calico's policy engine to\nhelp process the policy more efficiently.  Hints never change the\nenforcement behaviour of the policy.\n\nCurrently, the only available hint is \"AssumeNeededOnEveryNode\".  When\nthat hint is set on a policy, Felix will act as if the policy matches\na local endpoint even if it does not. This is useful for \"preloading\"\nany large static policies that are known to be used on every node.\nIf the policy is _not_ used on a particular node then the work\ndone to preload the policy (and to maintain it) is wasted.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "selector": {
          "description": "The selector is an expression used to pick out the endpoints that the policy should\nbe applied to.\n\nSelector expressions follow this syntax:\n\n\tlabel == \"string_literal\"  -\u003e  comparison, e.g. my_label == \"foo bar\"\n\tlabel != \"string_literal\"   -\u003e  not equal; also matches if label is not present\n\tlabel in { \"a\", \"b\", \"c\", ... }  -\u003e  true if the value of label X is one of \"a\", \"b\", \"c\"\n\tlabel not in { \"a\", \"b\", \"c\", ... }  -\u003e  true if the value of label X is not one of \"a\", \"b\", \"c\"\n\thas(label_name)  -\u003e True if that label is present\n\t! expr -\u003e negation of expr\n\texpr \u0026\u0026 expr  -\u003e Short-circuit and\n\texpr || expr  -\u003e Short-circuit or\n\t( expr ) -\u003e parens for grouping\n\tall() or the empty selector -\u003e matches all endpoints.\n\nLabel names are allowed to contain alphanumerics, -, _ and /. String literals are more permissive\nbut they do not support escape characters.\n\nExamples (with made-up labels):\n\n\ttype == \"webserver\" \u0026\u0026 deployment == \"prod\"\n\ttype in {\"frontend\", \"backend\"}\n\tdeployment != \"dev\"\n\t! has(label_name)",
          "type": "string"
        },
        "serviceAccountSelector": {
          "description": "ServiceAccountSelector is an optional field for an expression used to select a pod based on service accounts.",
          "type": "string"
        },
        "tier": {
          "description": "The name of the tier that this policy belongs to.  If this is omitted, the default\ntier (name is \"default\") is assumed.  The specified tier must exist in order to create\nsecurity policies within the tier, the \"default\" tier is created automatically if it\ndoes not exist, this means for deployments requiring only a single Tier, the tier name\nmay be omitted on all policy management requests.",
          "type": "string"
        },
        "types": {
          "description": "Types indicates whether this policy applies to ingress, or to egress, or to both.  When\nnot explicitly specified (and so the value on creation is empty or nil), Calico defaults\nTypes according to what Ingress and Egress are present in the policy.  The\ndefault is:\n\n- [ PolicyTypeIngress ], if there are no Egress rules (including the case where there are\n  also no Ingress rules)\n\n- [ PolicyTypeEgress ], if there are Egress rules but no Ingress rules\n\n- [ PolicyTypeIngress, PolicyTypeEgress ], if there are both Ingress and Egress rules.\n\nWhen the policy is read back again, Types will always be one of these values, never empty\nor nil.",
          "type": "array",
          "items": {
            "description": "PolicyType enumerates the possible values of the PolicySpec Types field.",
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    }
  }
}
