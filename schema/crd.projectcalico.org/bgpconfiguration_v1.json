{
  "description": "BGPConfiguration contains the configuration for any BGP routing.",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "BGPConfigurationSpec contains the values of the BGP configuration.",
      "type": "object",
      "properties": {
        "asNumber": {
          "description": "ASNumber is the default AS number used by a node. [Default: 64512]",
          "type": "integer",
          "format": "int32"
        },
        "bindMode": {
          "description": "BindMode indicates whether to listen for BGP connections on all addresses (None)\nor only on the node's canonical IP address Node.Spec.BGP.IPvXAddress (NodeIP).\nDefault behaviour is to listen for BGP connections on all addresses.",
          "type": "string"
        },
        "communities": {
          "description": "Communities is a list of BGP community values and their arbitrary names for tagging routes.",
          "type": "array",
          "items": {
            "description": "Community contains standard or large community value and its name.",
            "type": "object",
            "properties": {
              "name": {
                "description": "Name given to community value.",
                "type": "string"
              },
              "value": {
                "description": "Value must be of format `aa:nn` or `aa:nn:mm`.\nFor standard community use `aa:nn` format, where `aa` and `nn` are 16 bit number.\nFor large community use `aa:nn:mm` format, where `aa`, `nn` and `mm` are 32 bit number.\nWhere, `aa` is an AS Number, `nn` and `mm` are per-AS identifier.",
                "type": "string",
                "pattern": "^(\\d+):(\\d+)$|^(\\d+):(\\d+):(\\d+)$"
              }
            },
            "additionalProperties": false
          }
        },
        "ignoredInterfaces": {
          "description": "IgnoredInterfaces indicates the network interfaces that needs to be excluded when reading device routes.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "listenPort": {
          "description": "ListenPort is the port where BGP protocol should listen. Defaults to 179",
          "type": "integer",
          "maximum": 65535,
          "minimum": 1
        },
        "localWorkloadPeeringIPV4": {
          "description": "The virtual IPv4 address of the node with which its local workload is expected to peer.\nIt is recommended to use a link-local address.",
          "type": "string"
        },
        "localWorkloadPeeringIPV6": {
          "description": "The virtual IPv6 address of the node with which its local workload is expected to peer.\nIt is recommended to use a link-local address.",
          "type": "string"
        },
        "logSeverityScreen": {
          "description": "LogSeverityScreen is the log severity above which logs are sent to the stdout. [Default: INFO]",
          "type": "string"
        },
        "nodeMeshMaxRestartTime": {
          "description": "Time to allow for software restart for node-to-mesh peerings.  When specified, this is configured\nas the graceful restart timeout.  When not specified, the BIRD default of 120s is used.\nThis field can only be set on the default BGPConfiguration instance and requires that NodeMesh is enabled",
          "type": "string"
        },
        "nodeMeshPassword": {
          "description": "Optional BGP password for full node-to-mesh peerings.\nThis field can only be set on the default BGPConfiguration instance and requires that NodeMesh is enabled",
          "type": "object",
          "properties": {
            "secretKeyRef": {
              "description": "Selects a key of a secret in the node pod's namespace.",
              "type": "object",
              "required": [
                "key"
              ],
              "properties": {
                "key": {
                  "description": "The key of the secret to select from.  Must be a valid secret key.",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                  "type": "string",
                  "default": ""
                },
                "optional": {
                  "description": "Specify whether the Secret or its key must be defined",
                  "type": "boolean"
                }
              },
              "additionalProperties": false,
              "x-kubernetes-map-type": "atomic"
            }
          },
          "additionalProperties": false
        },
        "nodeToNodeMeshEnabled": {
          "description": "NodeToNodeMeshEnabled sets whether full node to node BGP mesh is enabled. [Default: true]",
          "type": "boolean"
        },
        "prefixAdvertisements": {
          "description": "PrefixAdvertisements contains per-prefix advertisement configuration.",
          "type": "array",
          "items": {
            "description": "PrefixAdvertisement configures advertisement properties for the specified CIDR.",
            "type": "object",
            "properties": {
              "cidr": {
                "description": "CIDR for which properties should be advertised.",
                "type": "string"
              },
              "communities": {
                "description": "Communities can be list of either community names already defined in `Specs.Communities` or community value of format `aa:nn` or `aa:nn:mm`.\nFor standard community use `aa:nn` format, where `aa` and `nn` are 16 bit number.\nFor large community use `aa:nn:mm` format, where `aa`, `nn` and `mm` are 32 bit number.\nWhere,`aa` is an AS Number, `nn` and `mm` are per-AS identifier.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "serviceClusterIPs": {
          "description": "ServiceClusterIPs are the CIDR blocks from which service cluster IPs are allocated.\nIf specified, Calico will advertise these blocks, as well as any cluster IPs within them.",
          "type": "array",
          "items": {
            "description": "ServiceClusterIPBlock represents a single allowed ClusterIP CIDR block.",
            "type": "object",
            "properties": {
              "cidr": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "serviceExternalIPs": {
          "description": "ServiceExternalIPs are the CIDR blocks for Kubernetes Service External IPs.\nKubernetes Service ExternalIPs will only be advertised if they are within one of these blocks.",
          "type": "array",
          "items": {
            "description": "ServiceExternalIPBlock represents a single allowed External IP CIDR block.",
            "type": "object",
            "properties": {
              "cidr": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "serviceLoadBalancerIPs": {
          "description": "ServiceLoadBalancerIPs are the CIDR blocks for Kubernetes Service LoadBalancer IPs.\nKubernetes Service status.LoadBalancer.Ingress IPs will only be advertised if they are within one of these blocks.",
          "type": "array",
          "items": {
            "description": "ServiceLoadBalancerIPBlock represents a single allowed LoadBalancer IP CIDR block.",
            "type": "object",
            "properties": {
              "cidr": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        }
      },
      "additionalProperties": false
    }
  }
}
