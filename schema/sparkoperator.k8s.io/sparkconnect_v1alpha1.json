{
  "description": "SparkConnect is the Schema for the sparkconnections API.",
  "type": "object",
  "required": [
    "metadata",
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "SparkConnectSpec defines the desired state of SparkConnect.",
      "type": "object",
      "required": [
        "executor",
        "server",
        "sparkVersion"
      ],
      "properties": {
        "dynamicAllocation": {
          "description": "DynamicAllocation configures dynamic allocation that becomes available for the Kubernetes\nscheduler backend since Spark 3.0.",
          "type": "object",
          "properties": {
            "enabled": {
              "description": "Enabled controls whether dynamic allocation is enabled or not.",
              "type": "boolean"
            },
            "initialExecutors": {
              "description": "InitialExecutors is the initial number of executors to request. If .spec.executor.instances\nis also set, the initial number of executors is set to the bigger of that and this option.",
              "type": "integer",
              "format": "int32"
            },
            "maxExecutors": {
              "description": "MaxExecutors is the upper bound for the number of executors if dynamic allocation is enabled.",
              "type": "integer",
              "format": "int32"
            },
            "minExecutors": {
              "description": "MinExecutors is the lower bound for the number of executors if dynamic allocation is enabled.",
              "type": "integer",
              "format": "int32"
            },
            "shuffleTrackingEnabled": {
              "description": "ShuffleTrackingEnabled enables shuffle file tracking for executors, which allows dynamic allocation without\nthe need for an external shuffle service. This option will try to keep alive executors that are storing\nshuffle data for active jobs. If external shuffle service is enabled, set ShuffleTrackingEnabled to false.\nShuffleTrackingEnabled is true by default if dynamicAllocation.enabled is true.",
              "type": "boolean"
            },
            "shuffleTrackingTimeout": {
              "description": "ShuffleTrackingTimeout controls the timeout in milliseconds for executors that are holding\nshuffle data if shuffle tracking is enabled (true by default if dynamic allocation is enabled).",
              "type": "integer",
              "format": "int64"
            }
          },
          "additionalProperties": false
        },
        "executor": {
          "description": "Executor is the Spark executor specification.",
          "type": "object",
          "properties": {
            "cores": {
              "description": "Cores maps to `spark.driver.cores` or `spark.executor.cores` for the driver and executors, respectively.",
              "type": "integer",
              "format": "int32",
              "minimum": 1
            },
            "instances": {
              "description": "Instances is the number of executor instances.",
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            "memory": {
              "description": "Memory is the amount of memory to request for the pod.",
              "type": "string"
            },
            "template": {
              "description": "Template is a pod template that can be used to define the driver or executor pod configurations that Spark configurations do not support.\nSpark version \u003e= 3.0.0 is required.\nRef: https://spark.apache.org/docs/latest/running-on-kubernetes.html#pod-template.",
              "type": "object",
              "x-kubernetes-preserve-unknown-fields": true
            }
          },
          "additionalProperties": false
        },
        "hadoopConf": {
          "description": "HadoopConf carries user-specified Hadoop configuration properties as they would use the \"--conf\" option\nin spark-submit. The SparkApplication controller automatically adds prefix \"spark.hadoop.\" to Hadoop\nconfiguration properties.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "image": {
          "description": "Image is the container image for the driver, executor, and init-container. Any custom container images for the\ndriver, executor, or init-container takes precedence over this.",
          "type": "string"
        },
        "server": {
          "description": "Server is the Spark connect server specification.",
          "type": "object",
          "properties": {
            "cores": {
              "description": "Cores maps to `spark.driver.cores` or `spark.executor.cores` for the driver and executors, respectively.",
              "type": "integer",
              "format": "int32",
              "minimum": 1
            },
            "memory": {
              "description": "Memory is the amount of memory to request for the pod.",
              "type": "string"
            },
            "template": {
              "description": "Template is a pod template that can be used to define the driver or executor pod configurations that Spark configurations do not support.\nSpark version \u003e= 3.0.0 is required.\nRef: https://spark.apache.org/docs/latest/running-on-kubernetes.html#pod-template.",
              "type": "object",
              "x-kubernetes-preserve-unknown-fields": true
            }
          },
          "additionalProperties": false
        },
        "sparkConf": {
          "description": "SparkConf carries user-specified Spark configuration properties as they would use the \"--conf\" option in\nspark-submit.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "sparkVersion": {
          "description": "SparkVersion is the version of Spark the spark connect use.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "SparkConnectStatus defines the observed state of SparkConnect.",
      "type": "object",
      "properties": {
        "conditions": {
          "description": "Represents the latest available observations of a SparkConnect's current state.",
          "type": "array",
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                "type": "string",
                "maxLength": 32768
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64",
                "minimum": 0
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                "type": "string",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "type": "string",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ]
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                "type": "string",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "executors": {
          "description": "Executors represents the current state of the SparkConnect executors.",
          "type": "object",
          "additionalProperties": {
            "type": "integer"
          }
        },
        "lastUpdateTime": {
          "description": "LastUpdateTime is the time at which the SparkConnect controller last updated the SparkConnect.",
          "type": "string",
          "format": "date-time"
        },
        "server": {
          "description": "Server represents the current state of the SparkConnect server.",
          "type": "object",
          "properties": {
            "podIp": {
              "description": "PodIP is the IP address of the pod that is running the Spark Connect server.",
              "type": "string"
            },
            "podName": {
              "description": "PodName is the name of the pod that is running the Spark Connect server.",
              "type": "string"
            },
            "serviceName": {
              "description": "ServiceName is the name of the service that is exposing the Spark Connect server.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "startTime": {
          "description": "StartTime is the time at which the SparkConnect controller started processing the SparkConnect.",
          "type": "string",
          "format": "date-time"
        },
        "state": {
          "description": "State represents the current state of the SparkConnect.",
          "type": "string"
        }
      },
      "additionalProperties": false
    }
  }
}
