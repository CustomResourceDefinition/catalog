{
  "description": "ModifySet allows the user to modify non-keyed lists, such as\nthe list of arguments to a container.",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "ModifySetSpec defines the desired state of ModifySet.",
      "type": "object",
      "properties": {
        "applyTo": {
          "description": "ApplyTo lists the specific groups, versions and kinds a mutation will be applied to.\nThis is necessary because every mutation implies part of an object schema and object\nschemas are associated with specific GVKs.",
          "type": "array",
          "items": {
            "description": "ApplyTo determines what GVKs items the mutation should apply to.\nGlobs are not allowed.",
            "type": "object",
            "properties": {
              "groups": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "kinds": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "versions": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "location": {
          "description": "Location describes the path to be mutated, for example: `spec.containers[name: main].args`.",
          "type": "string"
        },
        "match": {
          "description": "Match allows the user to limit which resources get mutated.\nIndividual match criteria are AND-ed together. An undefined\nmatch criteria matches everything.",
          "type": "object",
          "properties": {
            "excludedNamespaces": {
              "description": "ExcludedNamespaces is a list of namespace names. If defined, a\nconstraint only applies to resources not in a listed namespace.\nExcludedNamespaces also supports a prefix or suffix based glob.  For example,\n`excludedNamespaces: [kube-*]` matches both `kube-system` and\n`kube-public`, and `excludedNamespaces: [*-system]` matches both `kube-system` and\n`gatekeeper-system`.",
              "type": "array",
              "items": {
                "description": "A string that supports globbing at its front and end. Ex: \"kube-*\" will match \"kube-system\" or\n\"kube-public\", \"*-system\" will match \"kube-system\" or \"gatekeeper-system\", \"*system*\" will\nmatch \"system-kube\" or \"kube-system\".  The asterisk is required for wildcard matching.",
                "type": "string",
                "pattern": "^\\*?[-:a-z0-9]*\\*?$"
              }
            },
            "kinds": {
              "type": "array",
              "items": {
                "description": "Kinds accepts a list of objects with apiGroups and kinds fields\nthat list the groups/kinds of objects to which the mutation will apply.\nIf multiple groups/kinds objects are specified,\nonly one match is needed for the resource to be in scope.",
                "type": "object",
                "properties": {
                  "apiGroups": {
                    "description": "APIGroups is the API groups the resources belong to. '*' is all groups.\nIf '*' is present, the length of the slice must be one.\nRequired.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "kinds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "labelSelector": {
              "description": "LabelSelector is the combination of two optional fields: `matchLabels`\nand `matchExpressions`.  These two fields provide different methods of\nselecting or excluding k8s objects based on the label keys and values\nincluded in object metadata.  All selection expressions from both\nsections are ANDed to determine if an object meets the cumulative\nrequirements of the selector.",
              "type": "object",
              "properties": {
                "matchExpressions": {
                  "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                  "type": "array",
                  "items": {
                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                    "type": "object",
                    "required": [
                      "key",
                      "operator"
                    ],
                    "properties": {
                      "key": {
                        "description": "key is the label key that the selector applies to.",
                        "type": "string"
                      },
                      "operator": {
                        "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                        "type": "string"
                      },
                      "values": {
                        "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "x-kubernetes-list-type": "atomic"
                      }
                    },
                    "additionalProperties": false
                  },
                  "x-kubernetes-list-type": "atomic"
                },
                "matchLabels": {
                  "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              },
              "additionalProperties": false,
              "x-kubernetes-map-type": "atomic"
            },
            "name": {
              "description": "Name is the name of an object.  If defined, it will match against objects with the specified\nname.  Name also supports a prefix or suffix glob.  For example, `name: pod-*` would match\nboth `pod-a` and `pod-b`, and `name: *-pod` would match both `a-pod` and `b-pod`.",
              "type": "string",
              "pattern": "^\\*?[-:a-z0-9]*\\*?$"
            },
            "namespaceSelector": {
              "description": "NamespaceSelector is a label selector against an object's containing\nnamespace or the object itself, if the object is a namespace.",
              "type": "object",
              "properties": {
                "matchExpressions": {
                  "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                  "type": "array",
                  "items": {
                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                    "type": "object",
                    "required": [
                      "key",
                      "operator"
                    ],
                    "properties": {
                      "key": {
                        "description": "key is the label key that the selector applies to.",
                        "type": "string"
                      },
                      "operator": {
                        "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                        "type": "string"
                      },
                      "values": {
                        "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "x-kubernetes-list-type": "atomic"
                      }
                    },
                    "additionalProperties": false
                  },
                  "x-kubernetes-list-type": "atomic"
                },
                "matchLabels": {
                  "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              },
              "additionalProperties": false,
              "x-kubernetes-map-type": "atomic"
            },
            "namespaces": {
              "description": "Namespaces is a list of namespace names. If defined, a constraint only\napplies to resources in a listed namespace.  Namespaces also supports a\nprefix or suffix based glob.  For example, `namespaces: [kube-*]` matches both\n`kube-system` and `kube-public`, and `namespaces: [*-system]` matches both\n`kube-system` and `gatekeeper-system`.",
              "type": "array",
              "items": {
                "description": "A string that supports globbing at its front and end. Ex: \"kube-*\" will match \"kube-system\" or\n\"kube-public\", \"*-system\" will match \"kube-system\" or \"gatekeeper-system\", \"*system*\" will\nmatch \"system-kube\" or \"kube-system\".  The asterisk is required for wildcard matching.",
                "type": "string",
                "pattern": "^\\*?[-:a-z0-9]*\\*?$"
              }
            },
            "scope": {
              "description": "Scope determines if cluster-scoped and/or namespaced-scoped resources\nare matched.  Accepts `*`, `Cluster`, or `Namespaced`. (defaults to `*`)",
              "type": "string"
            },
            "source": {
              "description": "Source determines whether generated or original resources are matched.\nAccepts `Generated`|`Original`|`All` (defaults to `All`). A value of\n`Generated` will only match generated resources, while `Original` will only\nmatch regular resources.",
              "type": "string",
              "enum": [
                "All",
                "Generated",
                "Original"
              ]
            }
          },
          "additionalProperties": false
        },
        "parameters": {
          "description": "Parameters define the behavior of the mutator.",
          "type": "object",
          "properties": {
            "operation": {
              "description": "Operation describes whether values should be merged in (\"merge\"), or pruned (\"prune\"). Default value is \"merge\"",
              "type": "string",
              "default": "merge",
              "enum": [
                "merge",
                "prune"
              ]
            },
            "pathTests": {
              "description": "PathTests are a series of existence tests that can be checked\nbefore a mutation is applied",
              "type": "array",
              "items": {
                "description": "PathTest allows the user to customize how the mutation works if parent\npaths are missing. It traverses the list in order. All sub paths are\ntested against the provided condition, if the test fails, the mutation is\nnot applied. All `subPath` entries must be a prefix of `location`. Any\nglob characters will take on the same value as was used to\nexpand the matching glob in `location`.\n\n\nAvailable Tests:\n* MustExist    - the path must exist or do not mutate\n* MustNotExist - the path must not exist or do not mutate.",
                "type": "object",
                "properties": {
                  "condition": {
                    "description": "Condition describes whether the path either MustExist or MustNotExist in the original object",
                    "type": "string",
                    "enum": [
                      "MustExist",
                      "MustNotExist"
                    ]
                  },
                  "subPath": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "values": {
              "description": "Values describes the values provided to the operation as `values.fromList`.",
              "type": "object",
              "x-kubernetes-preserve-unknown-fields": true
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "ModifySetStatus defines the observed state of ModifySet.",
      "type": "object",
      "properties": {
        "byPod": {
          "type": "array",
          "items": {
            "description": "MutatorPodStatusStatus defines the observed state of MutatorPodStatus.",
            "type": "object",
            "properties": {
              "enforced": {
                "type": "boolean"
              },
              "errors": {
                "type": "array",
                "items": {
                  "description": "MutatorError represents a single error caught while adding a mutator to a system.",
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "description": "Type indicates a specific class of error for use by controller code.\nIf not present, the error should be treated as not matching any known type.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "id": {
                "type": "string"
              },
              "mutatorUID": {
                "description": "Storing the mutator UID allows us to detect drift, such as\nwhen a mutator has been recreated after its CRD was deleted\nout from under it, interrupting the watch",
                "type": "string"
              },
              "observedGeneration": {
                "type": "integer",
                "format": "int64"
              },
              "operations": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false
          }
        }
      },
      "additionalProperties": false
    }
  }
}
