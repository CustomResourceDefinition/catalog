{
  "description": "Datasource is the Schema for the Datasources API. Provides an AppSync Data Source.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "DatasourceSpec defines the desired state of Datasource",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "deletionPolicy": {
          "description": "DeletionPolicy specifies what will happen to the underlying external\nwhen this managed resource is deleted - either \"Delete\" or \"Orphan\" the\nexternal resource.\nThis field is planned to be deprecated in favor of the ManagementPolicies\nfield in a future release. Currently, both could be set independently and\nnon-default values would be honored if the feature flag is enabled.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "type": "string",
          "default": "Delete",
          "enum": [
            "Orphan",
            "Delete"
          ]
        },
        "forProvider": {
          "type": "object",
          "required": [
            "region"
          ],
          "properties": {
            "apiId": {
              "description": "API ID for the GraphQL API for the data source.",
              "type": "string"
            },
            "apiIdRef": {
              "description": "Reference to a GraphQLAPI in appsync to populate apiId.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "apiIdSelector": {
              "description": "Selector for a GraphQLAPI in appsync to populate apiId.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "description": {
              "description": "Description of the data source.",
              "type": "string"
            },
            "dynamodbConfig": {
              "description": "DynamoDB settings. See dynamodb_config Block for details.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "deltaSyncConfig": {
                    "description": "The DeltaSyncConfig for a versioned data source. See delta_sync_config Block for details.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "baseTableTtl": {
                          "description": "The number of minutes that an Item is stored in the data source.",
                          "type": "number"
                        },
                        "deltaSyncTableName": {
                          "description": "The table name.",
                          "type": "string"
                        },
                        "deltaSyncTableTtl": {
                          "description": "The number of minutes that a Delta Sync log entry is stored in the Delta Sync table.",
                          "type": "number"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "region": {
                    "description": "AWS region of the DynamoDB table. Defaults to current region.",
                    "type": "string"
                  },
                  "tableName": {
                    "description": "Name of the DynamoDB table.",
                    "type": "string"
                  },
                  "tableNameRef": {
                    "description": "Reference to a Table in dynamodb to populate tableName.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  },
                  "tableNameSelector": {
                    "description": "Selector for a Table in dynamodb to populate tableName.",
                    "type": "object",
                    "properties": {
                      "matchControllerRef": {
                        "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                        "type": "boolean"
                      },
                      "matchLabels": {
                        "description": "MatchLabels ensures an object with matching labels is selected.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "policy": {
                        "description": "Policies for selection.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  },
                  "useCallerCredentials": {
                    "description": "Set to true to use Amazon Cognito credentials with this data source.",
                    "type": "boolean"
                  },
                  "versioned": {
                    "description": "Detects Conflict Detection and Resolution with this data source.",
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              }
            },
            "elasticsearchConfig": {
              "description": "Amazon Elasticsearch settings. See elasticsearch_config Block for details.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "endpoint": {
                    "description": "HTTP endpoint of the Elasticsearch domain.",
                    "type": "string"
                  },
                  "region": {
                    "description": "AWS region of Elasticsearch domain. Defaults to current region.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "eventBridgeConfig": {
              "description": "AWS EventBridge settings. See event_bridge_config Block for details.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "eventBusArn": {
                    "description": "ARN for the EventBridge bus.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "httpConfig": {
              "description": "HTTP settings. See http_config Block for details.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "authorizationConfig": {
                    "description": "Authorization configuration in case the HTTP endpoint requires authorization. See authorization_config Block for details.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "authorizationType": {
                          "description": "Authorization type that the HTTP endpoint requires. Default values is AWS_IAM.",
                          "type": "string"
                        },
                        "awsIamConfig": {
                          "description": "Identity and Access Management (IAM) settings. See aws_iam_config Block for details.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "signingRegion": {
                                "description": "Signing Amazon Web Services Region for IAM authorization.",
                                "type": "string"
                              },
                              "signingServiceName": {
                                "description": "Signing service name for IAM authorization.",
                                "type": "string"
                              }
                            },
                            "additionalProperties": false
                          }
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "endpoint": {
                    "description": "HTTP URL.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "lambdaConfig": {
              "description": "AWS Lambda settings. See lambda_config Block for details.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "functionArn": {
                    "description": "ARN for the Lambda function.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "opensearchserviceConfig": {
              "description": "Amazon OpenSearch Service settings. See opensearchservice_config Block for details.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "endpoint": {
                    "description": "HTTP endpoint of the OpenSearch domain.",
                    "type": "string"
                  },
                  "region": {
                    "description": "AWS region of the OpenSearch domain. Defaults to current region.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "region": {
              "description": "Region where this resource will be managed. Defaults to the Region set in the provider configuration.\nRegion is the region you'd like your resource to be created in.",
              "type": "string"
            },
            "relationalDatabaseConfig": {
              "description": "AWS RDS settings. See relational_database_config Block for details.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "httpEndpointConfig": {
                    "description": "Amazon RDS HTTP endpoint configuration. See http_endpoint_config Block for details.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "awsSecretStoreArn": {
                          "description": "AWS secret store ARN for database credentials.",
                          "type": "string"
                        },
                        "databaseName": {
                          "description": "Logical database name.",
                          "type": "string"
                        },
                        "dbClusterIdentifier": {
                          "description": "Amazon RDS cluster identifier.",
                          "type": "string"
                        },
                        "region": {
                          "description": "AWS Region for RDS HTTP endpoint. Defaults to current region.",
                          "type": "string"
                        },
                        "schema": {
                          "description": "Logical schema name.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "sourceType": {
                    "description": "Source type for the relational database. Valid values: RDS_HTTP_ENDPOINT.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "serviceRoleArn": {
              "description": "IAM service role ARN for the data source. Required if type is specified as AWS_LAMBDA, AMAZON_DYNAMODB, AMAZON_ELASTICSEARCH, AMAZON_EVENTBRIDGE, or AMAZON_OPENSEARCH_SERVICE.",
              "type": "string"
            },
            "serviceRoleArnRef": {
              "description": "Reference to a Role in iam to populate serviceRoleArn.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "serviceRoleArnSelector": {
              "description": "Selector for a Role in iam to populate serviceRoleArn.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "type": {
              "description": "Type of the Data Source. Valid values: AWS_LAMBDA, AMAZON_DYNAMODB, AMAZON_ELASTICSEARCH, HTTP, NONE, RELATIONAL_DATABASE, AMAZON_EVENTBRIDGE, AMAZON_OPENSEARCH_SERVICE.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored\nunless the Management Policies feature flag is disabled.\nInitProvider holds the same fields as ForProvider, with the exception\nof Identifier and other resource reference fields. The fields that are\nin InitProvider are merged into ForProvider when the resource is created.\nThe same fields are also added to the terraform ignore_changes hook, to\navoid updating them after creation. This is useful for fields that are\nrequired on creation, but we do not desire to update them after creation,\nfor example because of an external controller is managing them, like an\nautoscaler.",
          "type": "object",
          "properties": {
            "description": {
              "description": "Description of the data source.",
              "type": "string"
            },
            "dynamodbConfig": {
              "description": "DynamoDB settings. See dynamodb_config Block for details.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "deltaSyncConfig": {
                    "description": "The DeltaSyncConfig for a versioned data source. See delta_sync_config Block for details.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "baseTableTtl": {
                          "description": "The number of minutes that an Item is stored in the data source.",
                          "type": "number"
                        },
                        "deltaSyncTableName": {
                          "description": "The table name.",
                          "type": "string"
                        },
                        "deltaSyncTableTtl": {
                          "description": "The number of minutes that a Delta Sync log entry is stored in the Delta Sync table.",
                          "type": "number"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "tableName": {
                    "description": "Name of the DynamoDB table.",
                    "type": "string"
                  },
                  "tableNameRef": {
                    "description": "Reference to a Table in dynamodb to populate tableName.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  },
                  "tableNameSelector": {
                    "description": "Selector for a Table in dynamodb to populate tableName.",
                    "type": "object",
                    "properties": {
                      "matchControllerRef": {
                        "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                        "type": "boolean"
                      },
                      "matchLabels": {
                        "description": "MatchLabels ensures an object with matching labels is selected.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "policy": {
                        "description": "Policies for selection.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  },
                  "useCallerCredentials": {
                    "description": "Set to true to use Amazon Cognito credentials with this data source.",
                    "type": "boolean"
                  },
                  "versioned": {
                    "description": "Detects Conflict Detection and Resolution with this data source.",
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              }
            },
            "elasticsearchConfig": {
              "description": "Amazon Elasticsearch settings. See elasticsearch_config Block for details.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "endpoint": {
                    "description": "HTTP endpoint of the Elasticsearch domain.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "eventBridgeConfig": {
              "description": "AWS EventBridge settings. See event_bridge_config Block for details.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "eventBusArn": {
                    "description": "ARN for the EventBridge bus.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "httpConfig": {
              "description": "HTTP settings. See http_config Block for details.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "authorizationConfig": {
                    "description": "Authorization configuration in case the HTTP endpoint requires authorization. See authorization_config Block for details.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "authorizationType": {
                          "description": "Authorization type that the HTTP endpoint requires. Default values is AWS_IAM.",
                          "type": "string"
                        },
                        "awsIamConfig": {
                          "description": "Identity and Access Management (IAM) settings. See aws_iam_config Block for details.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "signingRegion": {
                                "description": "Signing Amazon Web Services Region for IAM authorization.",
                                "type": "string"
                              },
                              "signingServiceName": {
                                "description": "Signing service name for IAM authorization.",
                                "type": "string"
                              }
                            },
                            "additionalProperties": false
                          }
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "endpoint": {
                    "description": "HTTP URL.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "lambdaConfig": {
              "description": "AWS Lambda settings. See lambda_config Block for details.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "functionArn": {
                    "description": "ARN for the Lambda function.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "opensearchserviceConfig": {
              "description": "Amazon OpenSearch Service settings. See opensearchservice_config Block for details.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "endpoint": {
                    "description": "HTTP endpoint of the OpenSearch domain.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "relationalDatabaseConfig": {
              "description": "AWS RDS settings. See relational_database_config Block for details.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "httpEndpointConfig": {
                    "description": "Amazon RDS HTTP endpoint configuration. See http_endpoint_config Block for details.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "awsSecretStoreArn": {
                          "description": "AWS secret store ARN for database credentials.",
                          "type": "string"
                        },
                        "databaseName": {
                          "description": "Logical database name.",
                          "type": "string"
                        },
                        "dbClusterIdentifier": {
                          "description": "Amazon RDS cluster identifier.",
                          "type": "string"
                        },
                        "schema": {
                          "description": "Logical schema name.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "sourceType": {
                    "description": "Source type for the relational database. Valid values: RDS_HTTP_ENDPOINT.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "serviceRoleArn": {
              "description": "IAM service role ARN for the data source. Required if type is specified as AWS_LAMBDA, AMAZON_DYNAMODB, AMAZON_ELASTICSEARCH, AMAZON_EVENTBRIDGE, or AMAZON_OPENSEARCH_SERVICE.",
              "type": "string"
            },
            "serviceRoleArnRef": {
              "description": "Reference to a Role in iam to populate serviceRoleArn.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "serviceRoleArnSelector": {
              "description": "Selector for a Role in iam to populate serviceRoleArn.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "type": {
              "description": "Type of the Data Source. Valid values: AWS_LAMBDA, AMAZON_DYNAMODB, AMAZON_ELASTICSEARCH, HTTP, NONE, RELATIONAL_DATABASE, AMAZON_EVENTBRIDGE, AMAZON_OPENSEARCH_SERVICE.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "managementPolicies": {
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out\nthrough a Crossplane feature flag.\nManagementPolicies specify the array of actions Crossplane is allowed to\ntake on the managed and external resources.\nThis field is planned to replace the DeletionPolicy field in a future\nrelease. Currently, both could be set independently and non-default\nvalues would be honored if the feature flag is enabled. If both are\ncustom, the DeletionPolicy field will be ignored.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223\nand this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers\ncan take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to\ncreate, observe, update, and delete this managed resource should be\nconfigured.",
          "type": "object",
          "default": {
            "name": "default"
          },
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "type": "object",
              "properties": {
                "resolution": {
                  "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                  "type": "string",
                  "default": "Required",
                  "enum": [
                    "Required",
                    "Optional"
                  ]
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                  "type": "string",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a\nSecret to which any connection details for this managed resource should\nbe written. Connection details frequently include the endpoint, username,\nand password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name",
            "namespace"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false,
      "x-kubernetes-validations": [
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.type))",
          "message": "spec.forProvider.type is a required parameter"
        }
      ]
    },
    "status": {
      "description": "DatasourceStatus defines the observed state of Datasource.",
      "type": "object",
      "properties": {
        "atProvider": {
          "type": "object",
          "properties": {
            "apiId": {
              "description": "API ID for the GraphQL API for the data source.",
              "type": "string"
            },
            "arn": {
              "description": "ARN",
              "type": "string"
            },
            "description": {
              "description": "Description of the data source.",
              "type": "string"
            },
            "dynamodbConfig": {
              "description": "DynamoDB settings. See dynamodb_config Block for details.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "deltaSyncConfig": {
                    "description": "The DeltaSyncConfig for a versioned data source. See delta_sync_config Block for details.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "baseTableTtl": {
                          "description": "The number of minutes that an Item is stored in the data source.",
                          "type": "number"
                        },
                        "deltaSyncTableName": {
                          "description": "The table name.",
                          "type": "string"
                        },
                        "deltaSyncTableTtl": {
                          "description": "The number of minutes that a Delta Sync log entry is stored in the Delta Sync table.",
                          "type": "number"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "region": {
                    "description": "AWS region of the DynamoDB table. Defaults to current region.",
                    "type": "string"
                  },
                  "tableName": {
                    "description": "Name of the DynamoDB table.",
                    "type": "string"
                  },
                  "useCallerCredentials": {
                    "description": "Set to true to use Amazon Cognito credentials with this data source.",
                    "type": "boolean"
                  },
                  "versioned": {
                    "description": "Detects Conflict Detection and Resolution with this data source.",
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              }
            },
            "elasticsearchConfig": {
              "description": "Amazon Elasticsearch settings. See elasticsearch_config Block for details.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "endpoint": {
                    "description": "HTTP endpoint of the Elasticsearch domain.",
                    "type": "string"
                  },
                  "region": {
                    "description": "AWS region of Elasticsearch domain. Defaults to current region.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "eventBridgeConfig": {
              "description": "AWS EventBridge settings. See event_bridge_config Block for details.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "eventBusArn": {
                    "description": "ARN for the EventBridge bus.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "httpConfig": {
              "description": "HTTP settings. See http_config Block for details.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "authorizationConfig": {
                    "description": "Authorization configuration in case the HTTP endpoint requires authorization. See authorization_config Block for details.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "authorizationType": {
                          "description": "Authorization type that the HTTP endpoint requires. Default values is AWS_IAM.",
                          "type": "string"
                        },
                        "awsIamConfig": {
                          "description": "Identity and Access Management (IAM) settings. See aws_iam_config Block for details.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "signingRegion": {
                                "description": "Signing Amazon Web Services Region for IAM authorization.",
                                "type": "string"
                              },
                              "signingServiceName": {
                                "description": "Signing service name for IAM authorization.",
                                "type": "string"
                              }
                            },
                            "additionalProperties": false
                          }
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "endpoint": {
                    "description": "HTTP URL.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "id": {
              "type": "string"
            },
            "lambdaConfig": {
              "description": "AWS Lambda settings. See lambda_config Block for details.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "functionArn": {
                    "description": "ARN for the Lambda function.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "opensearchserviceConfig": {
              "description": "Amazon OpenSearch Service settings. See opensearchservice_config Block for details.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "endpoint": {
                    "description": "HTTP endpoint of the OpenSearch domain.",
                    "type": "string"
                  },
                  "region": {
                    "description": "AWS region of the OpenSearch domain. Defaults to current region.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "region": {
              "description": "Region where this resource will be managed. Defaults to the Region set in the provider configuration.\nRegion is the region you'd like your resource to be created in.",
              "type": "string"
            },
            "relationalDatabaseConfig": {
              "description": "AWS RDS settings. See relational_database_config Block for details.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "httpEndpointConfig": {
                    "description": "Amazon RDS HTTP endpoint configuration. See http_endpoint_config Block for details.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "awsSecretStoreArn": {
                          "description": "AWS secret store ARN for database credentials.",
                          "type": "string"
                        },
                        "databaseName": {
                          "description": "Logical database name.",
                          "type": "string"
                        },
                        "dbClusterIdentifier": {
                          "description": "Amazon RDS cluster identifier.",
                          "type": "string"
                        },
                        "region": {
                          "description": "AWS Region for RDS HTTP endpoint. Defaults to current region.",
                          "type": "string"
                        },
                        "schema": {
                          "description": "Logical schema name.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "sourceType": {
                    "description": "Source type for the relational database. Valid values: RDS_HTTP_ENDPOINT.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "serviceRoleArn": {
              "description": "IAM service role ARN for the data source. Required if type is specified as AWS_LAMBDA, AMAZON_DYNAMODB, AMAZON_ELASTICSEARCH, AMAZON_EVENTBRIDGE, or AMAZON_OPENSEARCH_SERVICE.",
              "type": "string"
            },
            "type": {
              "description": "Type of the Data Source. Valid values: AWS_LAMBDA, AMAZON_DYNAMODB, AMAZON_ELASTICSEARCH, HTTP, NONE, RELATIONAL_DATABASE, AMAZON_EVENTBRIDGE, AMAZON_OPENSEARCH_SERVICE.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "type": "array",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one\nstatus to another.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from\none status to another, if any.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to\na resource at any point in time.",
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest metadata.generation\nwhich resulted in either a ready state, or stalled due to error\nit can not recover from without human intervention.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    }
  }
}
