{
  "description": "GraphQLAPI is the Schema for the GraphQLAPIs API. Provides an AppSync GraphQL API.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "GraphQLAPISpec defines the desired state of GraphQLAPI",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "deletionPolicy": {
          "description": "DeletionPolicy specifies what will happen to the underlying external\nwhen this managed resource is deleted - either \"Delete\" or \"Orphan\" the\nexternal resource.\nThis field is planned to be deprecated in favor of the ManagementPolicies\nfield in a future release. Currently, both could be set independently and\nnon-default values would be honored if the feature flag is enabled.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "type": "string",
          "default": "Delete",
          "enum": [
            "Orphan",
            "Delete"
          ]
        },
        "forProvider": {
          "type": "object",
          "required": [
            "region"
          ],
          "properties": {
            "additionalAuthenticationProvider": {
              "description": "One or more additional authentication providers for the GraphQL API. See additional_authentication_provider Block for details.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "authenticationType": {
                    "description": "Authentication type. Valid values: API_KEY, AWS_IAM, AMAZON_COGNITO_USER_POOLS, OPENID_CONNECT, AWS_LAMBDA",
                    "type": "string"
                  },
                  "lambdaAuthorizerConfig": {
                    "description": "Nested argument containing Lambda authorizer configuration. See lambda_authorizer_config Block for details.",
                    "type": "object",
                    "properties": {
                      "authorizerResultTtlInSeconds": {
                        "description": "Number of seconds a response should be cached for. The default is 5 minutes (300 seconds). The Lambda function can override this by returning a ttlOverride key in its response. A value of 0 disables caching of responses. Minimum value of 0. Maximum value of 3600.",
                        "type": "number"
                      },
                      "authorizerUri": {
                        "description": "ARN of the Lambda function to be called for authorization. Note: This Lambda function must have a resource-based policy assigned to it, to allow lambda:InvokeFunction from service principal appsync.amazonaws.com.",
                        "type": "string"
                      },
                      "identityValidationExpression": {
                        "description": "Regular expression for validation of tokens before the Lambda function is called.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "openidConnectConfig": {
                    "description": "Nested argument containing OpenID Connect configuration. See openid_connect_config Block for details.",
                    "type": "object",
                    "properties": {
                      "authTtl": {
                        "description": "Number of milliseconds a token is valid after being authenticated.",
                        "type": "number"
                      },
                      "clientId": {
                        "description": "Client identifier of the Relying party at the OpenID identity provider. This identifier is typically obtained when the Relying party is registered with the OpenID identity provider. You can specify a regular expression so the AWS AppSync can validate against multiple client identifiers at a time.",
                        "type": "string"
                      },
                      "iatTtl": {
                        "description": "Number of milliseconds a token is valid after being issued to a user.",
                        "type": "number"
                      },
                      "issuer": {
                        "description": "Issuer for the OpenID Connect configuration. The issuer returned by discovery MUST exactly match the value of iss in the ID Token.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "userPoolConfig": {
                    "description": "Amazon Cognito User Pool configuration. See user_pool_config Block for details.",
                    "type": "object",
                    "properties": {
                      "appIdClientRegex": {
                        "description": "Regular expression for validating the incoming Amazon Cognito User Pool app client ID.",
                        "type": "string"
                      },
                      "awsRegion": {
                        "description": "AWS region in which the user pool was created.",
                        "type": "string"
                      },
                      "userPoolId": {
                        "description": "User pool ID.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              }
            },
            "apiType": {
              "description": "API type. Valid values are GRAPHQL or MERGED. A MERGED type requires merged_api_execution_role_arn to be set.",
              "type": "string"
            },
            "authenticationType": {
              "description": "Authentication type. Valid values: API_KEY, AWS_IAM, AMAZON_COGNITO_USER_POOLS, OPENID_CONNECT, AWS_LAMBDA",
              "type": "string"
            },
            "enhancedMetricsConfig": {
              "description": "Enables and controls the enhanced metrics feature. See enhanced_metrics_config Block for details.",
              "type": "object",
              "properties": {
                "dataSourceLevelMetricsBehavior": {
                  "description": "How data source metrics will be emitted to CloudWatch. Valid values: FULL_REQUEST_DATA_SOURCE_METRICS, PER_DATA_SOURCE_METRICS",
                  "type": "string"
                },
                "operationLevelMetricsConfig": {
                  "description": "How operation metrics will be emitted to CloudWatch. Valid values: ENABLED, DISABLED",
                  "type": "string"
                },
                "resolverLevelMetricsBehavior": {
                  "description": "How resolver metrics will be emitted to CloudWatch. Valid values: FULL_REQUEST_RESOLVER_METRICS, PER_RESOLVER_METRICS",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "introspectionConfig": {
              "description": "Sets the value of the GraphQL API to enable (ENABLED) or disable (DISABLED) introspection. If no value is provided, the introspection configuration will be set to ENABLED by default. This field will produce an error if the operation attempts to use the introspection feature while this field is disabled. For more information about introspection, see GraphQL introspection.",
              "type": "string"
            },
            "lambdaAuthorizerConfig": {
              "description": "Nested argument containing Lambda authorizer configuration. See lambda_authorizer_config Block for details.",
              "type": "object",
              "properties": {
                "authorizerResultTtlInSeconds": {
                  "description": "Number of seconds a response should be cached for. The default is 5 minutes (300 seconds). The Lambda function can override this by returning a ttlOverride key in its response. A value of 0 disables caching of responses. Minimum value of 0. Maximum value of 3600.",
                  "type": "number"
                },
                "authorizerUri": {
                  "description": "ARN of the Lambda function to be called for authorization. Note: This Lambda function must have a resource-based policy assigned to it, to allow lambda:InvokeFunction from service principal appsync.amazonaws.com.",
                  "type": "string"
                },
                "identityValidationExpression": {
                  "description": "Regular expression for validation of tokens before the Lambda function is called.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "logConfig": {
              "description": "Nested argument containing logging configuration. See log_config Block for details.",
              "type": "object",
              "properties": {
                "cloudwatchLogsRoleArn": {
                  "description": "Amazon Resource Name of the service role that AWS AppSync will assume to publish to Amazon CloudWatch logs in your account.",
                  "type": "string"
                },
                "cloudwatchLogsRoleArnRef": {
                  "description": "Reference to a Role in iam to populate cloudwatchLogsRoleArn.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name of the referenced object.",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for referencing.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "cloudwatchLogsRoleArnSelector": {
                  "description": "Selector for a Role in iam to populate cloudwatchLogsRoleArn.",
                  "type": "object",
                  "properties": {
                    "matchControllerRef": {
                      "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                      "type": "boolean"
                    },
                    "matchLabels": {
                      "description": "MatchLabels ensures an object with matching labels is selected.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "policy": {
                      "description": "Policies for selection.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "excludeVerboseContent": {
                  "description": "Set to TRUE to exclude sections that contain information such as headers, context, and evaluated mapping templates, regardless of logging  level. Valid values: true, false. Default value: false",
                  "type": "boolean"
                },
                "fieldLogLevel": {
                  "description": "Field logging level. Valid values: ALL, ERROR, NONE.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "mergedApiExecutionRoleArn": {
              "description": "ARN of the execution role when api_type is set to MERGED.",
              "type": "string"
            },
            "mergedApiExecutionRoleArnRef": {
              "description": "Reference to a Role in iam to populate mergedApiExecutionRoleArn.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "mergedApiExecutionRoleArnSelector": {
              "description": "Selector for a Role in iam to populate mergedApiExecutionRoleArn.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "name": {
              "description": "User-supplied name for the GraphQL API.",
              "type": "string"
            },
            "openidConnectConfig": {
              "description": "Nested argument containing OpenID Connect configuration. See openid_connect_config Block for details.",
              "type": "object",
              "properties": {
                "authTtl": {
                  "description": "Number of milliseconds a token is valid after being authenticated.",
                  "type": "number"
                },
                "clientId": {
                  "description": "Client identifier of the Relying party at the OpenID identity provider. This identifier is typically obtained when the Relying party is registered with the OpenID identity provider. You can specify a regular expression so the AWS AppSync can validate against multiple client identifiers at a time.",
                  "type": "string"
                },
                "iatTtl": {
                  "description": "Number of milliseconds a token is valid after being issued to a user.",
                  "type": "number"
                },
                "issuer": {
                  "description": "Issuer for the OpenID Connect configuration. The issuer returned by discovery MUST exactly match the value of iss in the ID Token.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "queryDepthLimit": {
              "description": "The maximum depth a query can have in a single request. Depth refers to the amount of nested levels allowed in the body of query. The default value is 0 (or unspecified), which indicates there's no depth limit. If you set a limit, it can be between 1 and 75 nested levels. This field will produce a limit error if the operation falls out of bounds.",
              "type": "number"
            },
            "region": {
              "description": "Region where this resource will be managed. Defaults to the Region set in the provider configuration.\nRegion is the region you'd like your resource to be created in.",
              "type": "string"
            },
            "resolverCountLimit": {
              "description": "The maximum number of resolvers that can be invoked in a single request. The default value is 0 (or unspecified), which will set the limit to 10000. When specified, the limit value can be between 1 and 10000. This field will produce a limit error if the operation falls out of bounds.",
              "type": "number"
            },
            "schema": {
              "description": "Schema definition, in GraphQL schema language format.",
              "type": "string"
            },
            "tags": {
              "description": "Key-value map of resource tags.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "userPoolConfig": {
              "description": "Amazon Cognito User Pool configuration. See user_pool_config Block for details.",
              "type": "object",
              "properties": {
                "appIdClientRegex": {
                  "description": "Regular expression for validating the incoming Amazon Cognito User Pool app client ID.",
                  "type": "string"
                },
                "awsRegion": {
                  "description": "AWS region in which the user pool was created.",
                  "type": "string"
                },
                "defaultAction": {
                  "description": "Action that you want your GraphQL API to take when a request that uses Amazon Cognito User Pool authentication doesn't match the Amazon Cognito User Pool configuration. Valid: ALLOW and DENY",
                  "type": "string"
                },
                "userPoolId": {
                  "description": "User pool ID.",
                  "type": "string"
                },
                "userPoolIdRef": {
                  "description": "Reference to a UserPool in cognitoidp to populate userPoolId.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name of the referenced object.",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for referencing.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "userPoolIdSelector": {
                  "description": "Selector for a UserPool in cognitoidp to populate userPoolId.",
                  "type": "object",
                  "properties": {
                    "matchControllerRef": {
                      "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                      "type": "boolean"
                    },
                    "matchLabels": {
                      "description": "MatchLabels ensures an object with matching labels is selected.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "policy": {
                      "description": "Policies for selection.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "visibility": {
              "description": "Sets the value of the GraphQL API to public (GLOBAL) or private (PRIVATE). If no value is provided, the visibility will be set to GLOBAL by default. This value cannot be changed once the API has been created.",
              "type": "string"
            },
            "xrayEnabled": {
              "description": "Whether tracing with X-ray is enabled. Defaults to false.",
              "type": "boolean"
            }
          },
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored\nunless the Management Policies feature flag is disabled.\nInitProvider holds the same fields as ForProvider, with the exception\nof Identifier and other resource reference fields. The fields that are\nin InitProvider are merged into ForProvider when the resource is created.\nThe same fields are also added to the terraform ignore_changes hook, to\navoid updating them after creation. This is useful for fields that are\nrequired on creation, but we do not desire to update them after creation,\nfor example because of an external controller is managing them, like an\nautoscaler.",
          "type": "object",
          "properties": {
            "additionalAuthenticationProvider": {
              "description": "One or more additional authentication providers for the GraphQL API. See additional_authentication_provider Block for details.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "authenticationType": {
                    "description": "Authentication type. Valid values: API_KEY, AWS_IAM, AMAZON_COGNITO_USER_POOLS, OPENID_CONNECT, AWS_LAMBDA",
                    "type": "string"
                  },
                  "lambdaAuthorizerConfig": {
                    "description": "Nested argument containing Lambda authorizer configuration. See lambda_authorizer_config Block for details.",
                    "type": "object",
                    "properties": {
                      "authorizerResultTtlInSeconds": {
                        "description": "Number of seconds a response should be cached for. The default is 5 minutes (300 seconds). The Lambda function can override this by returning a ttlOverride key in its response. A value of 0 disables caching of responses. Minimum value of 0. Maximum value of 3600.",
                        "type": "number"
                      },
                      "authorizerUri": {
                        "description": "ARN of the Lambda function to be called for authorization. Note: This Lambda function must have a resource-based policy assigned to it, to allow lambda:InvokeFunction from service principal appsync.amazonaws.com.",
                        "type": "string"
                      },
                      "identityValidationExpression": {
                        "description": "Regular expression for validation of tokens before the Lambda function is called.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "openidConnectConfig": {
                    "description": "Nested argument containing OpenID Connect configuration. See openid_connect_config Block for details.",
                    "type": "object",
                    "properties": {
                      "authTtl": {
                        "description": "Number of milliseconds a token is valid after being authenticated.",
                        "type": "number"
                      },
                      "clientId": {
                        "description": "Client identifier of the Relying party at the OpenID identity provider. This identifier is typically obtained when the Relying party is registered with the OpenID identity provider. You can specify a regular expression so the AWS AppSync can validate against multiple client identifiers at a time.",
                        "type": "string"
                      },
                      "iatTtl": {
                        "description": "Number of milliseconds a token is valid after being issued to a user.",
                        "type": "number"
                      },
                      "issuer": {
                        "description": "Issuer for the OpenID Connect configuration. The issuer returned by discovery MUST exactly match the value of iss in the ID Token.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "userPoolConfig": {
                    "description": "Amazon Cognito User Pool configuration. See user_pool_config Block for details.",
                    "type": "object",
                    "properties": {
                      "appIdClientRegex": {
                        "description": "Regular expression for validating the incoming Amazon Cognito User Pool app client ID.",
                        "type": "string"
                      },
                      "awsRegion": {
                        "description": "AWS region in which the user pool was created.",
                        "type": "string"
                      },
                      "userPoolId": {
                        "description": "User pool ID.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              }
            },
            "apiType": {
              "description": "API type. Valid values are GRAPHQL or MERGED. A MERGED type requires merged_api_execution_role_arn to be set.",
              "type": "string"
            },
            "authenticationType": {
              "description": "Authentication type. Valid values: API_KEY, AWS_IAM, AMAZON_COGNITO_USER_POOLS, OPENID_CONNECT, AWS_LAMBDA",
              "type": "string"
            },
            "enhancedMetricsConfig": {
              "description": "Enables and controls the enhanced metrics feature. See enhanced_metrics_config Block for details.",
              "type": "object",
              "properties": {
                "dataSourceLevelMetricsBehavior": {
                  "description": "How data source metrics will be emitted to CloudWatch. Valid values: FULL_REQUEST_DATA_SOURCE_METRICS, PER_DATA_SOURCE_METRICS",
                  "type": "string"
                },
                "operationLevelMetricsConfig": {
                  "description": "How operation metrics will be emitted to CloudWatch. Valid values: ENABLED, DISABLED",
                  "type": "string"
                },
                "resolverLevelMetricsBehavior": {
                  "description": "How resolver metrics will be emitted to CloudWatch. Valid values: FULL_REQUEST_RESOLVER_METRICS, PER_RESOLVER_METRICS",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "introspectionConfig": {
              "description": "Sets the value of the GraphQL API to enable (ENABLED) or disable (DISABLED) introspection. If no value is provided, the introspection configuration will be set to ENABLED by default. This field will produce an error if the operation attempts to use the introspection feature while this field is disabled. For more information about introspection, see GraphQL introspection.",
              "type": "string"
            },
            "lambdaAuthorizerConfig": {
              "description": "Nested argument containing Lambda authorizer configuration. See lambda_authorizer_config Block for details.",
              "type": "object",
              "properties": {
                "authorizerResultTtlInSeconds": {
                  "description": "Number of seconds a response should be cached for. The default is 5 minutes (300 seconds). The Lambda function can override this by returning a ttlOverride key in its response. A value of 0 disables caching of responses. Minimum value of 0. Maximum value of 3600.",
                  "type": "number"
                },
                "authorizerUri": {
                  "description": "ARN of the Lambda function to be called for authorization. Note: This Lambda function must have a resource-based policy assigned to it, to allow lambda:InvokeFunction from service principal appsync.amazonaws.com.",
                  "type": "string"
                },
                "identityValidationExpression": {
                  "description": "Regular expression for validation of tokens before the Lambda function is called.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "logConfig": {
              "description": "Nested argument containing logging configuration. See log_config Block for details.",
              "type": "object",
              "properties": {
                "cloudwatchLogsRoleArn": {
                  "description": "Amazon Resource Name of the service role that AWS AppSync will assume to publish to Amazon CloudWatch logs in your account.",
                  "type": "string"
                },
                "cloudwatchLogsRoleArnRef": {
                  "description": "Reference to a Role in iam to populate cloudwatchLogsRoleArn.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name of the referenced object.",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for referencing.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "cloudwatchLogsRoleArnSelector": {
                  "description": "Selector for a Role in iam to populate cloudwatchLogsRoleArn.",
                  "type": "object",
                  "properties": {
                    "matchControllerRef": {
                      "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                      "type": "boolean"
                    },
                    "matchLabels": {
                      "description": "MatchLabels ensures an object with matching labels is selected.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "policy": {
                      "description": "Policies for selection.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "excludeVerboseContent": {
                  "description": "Set to TRUE to exclude sections that contain information such as headers, context, and evaluated mapping templates, regardless of logging  level. Valid values: true, false. Default value: false",
                  "type": "boolean"
                },
                "fieldLogLevel": {
                  "description": "Field logging level. Valid values: ALL, ERROR, NONE.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "mergedApiExecutionRoleArn": {
              "description": "ARN of the execution role when api_type is set to MERGED.",
              "type": "string"
            },
            "mergedApiExecutionRoleArnRef": {
              "description": "Reference to a Role in iam to populate mergedApiExecutionRoleArn.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "mergedApiExecutionRoleArnSelector": {
              "description": "Selector for a Role in iam to populate mergedApiExecutionRoleArn.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "name": {
              "description": "User-supplied name for the GraphQL API.",
              "type": "string"
            },
            "openidConnectConfig": {
              "description": "Nested argument containing OpenID Connect configuration. See openid_connect_config Block for details.",
              "type": "object",
              "properties": {
                "authTtl": {
                  "description": "Number of milliseconds a token is valid after being authenticated.",
                  "type": "number"
                },
                "clientId": {
                  "description": "Client identifier of the Relying party at the OpenID identity provider. This identifier is typically obtained when the Relying party is registered with the OpenID identity provider. You can specify a regular expression so the AWS AppSync can validate against multiple client identifiers at a time.",
                  "type": "string"
                },
                "iatTtl": {
                  "description": "Number of milliseconds a token is valid after being issued to a user.",
                  "type": "number"
                },
                "issuer": {
                  "description": "Issuer for the OpenID Connect configuration. The issuer returned by discovery MUST exactly match the value of iss in the ID Token.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "queryDepthLimit": {
              "description": "The maximum depth a query can have in a single request. Depth refers to the amount of nested levels allowed in the body of query. The default value is 0 (or unspecified), which indicates there's no depth limit. If you set a limit, it can be between 1 and 75 nested levels. This field will produce a limit error if the operation falls out of bounds.",
              "type": "number"
            },
            "resolverCountLimit": {
              "description": "The maximum number of resolvers that can be invoked in a single request. The default value is 0 (or unspecified), which will set the limit to 10000. When specified, the limit value can be between 1 and 10000. This field will produce a limit error if the operation falls out of bounds.",
              "type": "number"
            },
            "schema": {
              "description": "Schema definition, in GraphQL schema language format.",
              "type": "string"
            },
            "tags": {
              "description": "Key-value map of resource tags.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "userPoolConfig": {
              "description": "Amazon Cognito User Pool configuration. See user_pool_config Block for details.",
              "type": "object",
              "properties": {
                "appIdClientRegex": {
                  "description": "Regular expression for validating the incoming Amazon Cognito User Pool app client ID.",
                  "type": "string"
                },
                "awsRegion": {
                  "description": "AWS region in which the user pool was created.",
                  "type": "string"
                },
                "defaultAction": {
                  "description": "Action that you want your GraphQL API to take when a request that uses Amazon Cognito User Pool authentication doesn't match the Amazon Cognito User Pool configuration. Valid: ALLOW and DENY",
                  "type": "string"
                },
                "userPoolId": {
                  "description": "User pool ID.",
                  "type": "string"
                },
                "userPoolIdRef": {
                  "description": "Reference to a UserPool in cognitoidp to populate userPoolId.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name of the referenced object.",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for referencing.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "userPoolIdSelector": {
                  "description": "Selector for a UserPool in cognitoidp to populate userPoolId.",
                  "type": "object",
                  "properties": {
                    "matchControllerRef": {
                      "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                      "type": "boolean"
                    },
                    "matchLabels": {
                      "description": "MatchLabels ensures an object with matching labels is selected.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "policy": {
                      "description": "Policies for selection.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "visibility": {
              "description": "Sets the value of the GraphQL API to public (GLOBAL) or private (PRIVATE). If no value is provided, the visibility will be set to GLOBAL by default. This value cannot be changed once the API has been created.",
              "type": "string"
            },
            "xrayEnabled": {
              "description": "Whether tracing with X-ray is enabled. Defaults to false.",
              "type": "boolean"
            }
          },
          "additionalProperties": false
        },
        "managementPolicies": {
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out\nthrough a Crossplane feature flag.\nManagementPolicies specify the array of actions Crossplane is allowed to\ntake on the managed and external resources.\nThis field is planned to replace the DeletionPolicy field in a future\nrelease. Currently, both could be set independently and non-default\nvalues would be honored if the feature flag is enabled. If both are\ncustom, the DeletionPolicy field will be ignored.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223\nand this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers\ncan take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to\ncreate, observe, update, and delete this managed resource should be\nconfigured.",
          "type": "object",
          "default": {
            "name": "default"
          },
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "type": "object",
              "properties": {
                "resolution": {
                  "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                  "type": "string",
                  "default": "Required",
                  "enum": [
                    "Required",
                    "Optional"
                  ]
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                  "type": "string",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a\nSecret to which any connection details for this managed resource should\nbe written. Connection details frequently include the endpoint, username,\nand password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name",
            "namespace"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false,
      "x-kubernetes-validations": [
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.authenticationType) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.authenticationType))",
          "message": "spec.forProvider.authenticationType is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.name))",
          "message": "spec.forProvider.name is a required parameter"
        }
      ]
    },
    "status": {
      "description": "GraphQLAPIStatus defines the observed state of GraphQLAPI.",
      "type": "object",
      "properties": {
        "atProvider": {
          "type": "object",
          "properties": {
            "additionalAuthenticationProvider": {
              "description": "One or more additional authentication providers for the GraphQL API. See additional_authentication_provider Block for details.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "authenticationType": {
                    "description": "Authentication type. Valid values: API_KEY, AWS_IAM, AMAZON_COGNITO_USER_POOLS, OPENID_CONNECT, AWS_LAMBDA",
                    "type": "string"
                  },
                  "lambdaAuthorizerConfig": {
                    "description": "Nested argument containing Lambda authorizer configuration. See lambda_authorizer_config Block for details.",
                    "type": "object",
                    "properties": {
                      "authorizerResultTtlInSeconds": {
                        "description": "Number of seconds a response should be cached for. The default is 5 minutes (300 seconds). The Lambda function can override this by returning a ttlOverride key in its response. A value of 0 disables caching of responses. Minimum value of 0. Maximum value of 3600.",
                        "type": "number"
                      },
                      "authorizerUri": {
                        "description": "ARN of the Lambda function to be called for authorization. Note: This Lambda function must have a resource-based policy assigned to it, to allow lambda:InvokeFunction from service principal appsync.amazonaws.com.",
                        "type": "string"
                      },
                      "identityValidationExpression": {
                        "description": "Regular expression for validation of tokens before the Lambda function is called.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "openidConnectConfig": {
                    "description": "Nested argument containing OpenID Connect configuration. See openid_connect_config Block for details.",
                    "type": "object",
                    "properties": {
                      "authTtl": {
                        "description": "Number of milliseconds a token is valid after being authenticated.",
                        "type": "number"
                      },
                      "clientId": {
                        "description": "Client identifier of the Relying party at the OpenID identity provider. This identifier is typically obtained when the Relying party is registered with the OpenID identity provider. You can specify a regular expression so the AWS AppSync can validate against multiple client identifiers at a time.",
                        "type": "string"
                      },
                      "iatTtl": {
                        "description": "Number of milliseconds a token is valid after being issued to a user.",
                        "type": "number"
                      },
                      "issuer": {
                        "description": "Issuer for the OpenID Connect configuration. The issuer returned by discovery MUST exactly match the value of iss in the ID Token.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "userPoolConfig": {
                    "description": "Amazon Cognito User Pool configuration. See user_pool_config Block for details.",
                    "type": "object",
                    "properties": {
                      "appIdClientRegex": {
                        "description": "Regular expression for validating the incoming Amazon Cognito User Pool app client ID.",
                        "type": "string"
                      },
                      "awsRegion": {
                        "description": "AWS region in which the user pool was created.",
                        "type": "string"
                      },
                      "userPoolId": {
                        "description": "User pool ID.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              }
            },
            "apiType": {
              "description": "API type. Valid values are GRAPHQL or MERGED. A MERGED type requires merged_api_execution_role_arn to be set.",
              "type": "string"
            },
            "arn": {
              "description": "ARN",
              "type": "string"
            },
            "authenticationType": {
              "description": "Authentication type. Valid values: API_KEY, AWS_IAM, AMAZON_COGNITO_USER_POOLS, OPENID_CONNECT, AWS_LAMBDA",
              "type": "string"
            },
            "enhancedMetricsConfig": {
              "description": "Enables and controls the enhanced metrics feature. See enhanced_metrics_config Block for details.",
              "type": "object",
              "properties": {
                "dataSourceLevelMetricsBehavior": {
                  "description": "How data source metrics will be emitted to CloudWatch. Valid values: FULL_REQUEST_DATA_SOURCE_METRICS, PER_DATA_SOURCE_METRICS",
                  "type": "string"
                },
                "operationLevelMetricsConfig": {
                  "description": "How operation metrics will be emitted to CloudWatch. Valid values: ENABLED, DISABLED",
                  "type": "string"
                },
                "resolverLevelMetricsBehavior": {
                  "description": "How resolver metrics will be emitted to CloudWatch. Valid values: FULL_REQUEST_RESOLVER_METRICS, PER_RESOLVER_METRICS",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "id": {
              "description": "API ID",
              "type": "string"
            },
            "introspectionConfig": {
              "description": "Sets the value of the GraphQL API to enable (ENABLED) or disable (DISABLED) introspection. If no value is provided, the introspection configuration will be set to ENABLED by default. This field will produce an error if the operation attempts to use the introspection feature while this field is disabled. For more information about introspection, see GraphQL introspection.",
              "type": "string"
            },
            "lambdaAuthorizerConfig": {
              "description": "Nested argument containing Lambda authorizer configuration. See lambda_authorizer_config Block for details.",
              "type": "object",
              "properties": {
                "authorizerResultTtlInSeconds": {
                  "description": "Number of seconds a response should be cached for. The default is 5 minutes (300 seconds). The Lambda function can override this by returning a ttlOverride key in its response. A value of 0 disables caching of responses. Minimum value of 0. Maximum value of 3600.",
                  "type": "number"
                },
                "authorizerUri": {
                  "description": "ARN of the Lambda function to be called for authorization. Note: This Lambda function must have a resource-based policy assigned to it, to allow lambda:InvokeFunction from service principal appsync.amazonaws.com.",
                  "type": "string"
                },
                "identityValidationExpression": {
                  "description": "Regular expression for validation of tokens before the Lambda function is called.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "logConfig": {
              "description": "Nested argument containing logging configuration. See log_config Block for details.",
              "type": "object",
              "properties": {
                "cloudwatchLogsRoleArn": {
                  "description": "Amazon Resource Name of the service role that AWS AppSync will assume to publish to Amazon CloudWatch logs in your account.",
                  "type": "string"
                },
                "excludeVerboseContent": {
                  "description": "Set to TRUE to exclude sections that contain information such as headers, context, and evaluated mapping templates, regardless of logging  level. Valid values: true, false. Default value: false",
                  "type": "boolean"
                },
                "fieldLogLevel": {
                  "description": "Field logging level. Valid values: ALL, ERROR, NONE.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "mergedApiExecutionRoleArn": {
              "description": "ARN of the execution role when api_type is set to MERGED.",
              "type": "string"
            },
            "name": {
              "description": "User-supplied name for the GraphQL API.",
              "type": "string"
            },
            "openidConnectConfig": {
              "description": "Nested argument containing OpenID Connect configuration. See openid_connect_config Block for details.",
              "type": "object",
              "properties": {
                "authTtl": {
                  "description": "Number of milliseconds a token is valid after being authenticated.",
                  "type": "number"
                },
                "clientId": {
                  "description": "Client identifier of the Relying party at the OpenID identity provider. This identifier is typically obtained when the Relying party is registered with the OpenID identity provider. You can specify a regular expression so the AWS AppSync can validate against multiple client identifiers at a time.",
                  "type": "string"
                },
                "iatTtl": {
                  "description": "Number of milliseconds a token is valid after being issued to a user.",
                  "type": "number"
                },
                "issuer": {
                  "description": "Issuer for the OpenID Connect configuration. The issuer returned by discovery MUST exactly match the value of iss in the ID Token.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "queryDepthLimit": {
              "description": "The maximum depth a query can have in a single request. Depth refers to the amount of nested levels allowed in the body of query. The default value is 0 (or unspecified), which indicates there's no depth limit. If you set a limit, it can be between 1 and 75 nested levels. This field will produce a limit error if the operation falls out of bounds.",
              "type": "number"
            },
            "region": {
              "description": "Region where this resource will be managed. Defaults to the Region set in the provider configuration.\nRegion is the region you'd like your resource to be created in.",
              "type": "string"
            },
            "resolverCountLimit": {
              "description": "The maximum number of resolvers that can be invoked in a single request. The default value is 0 (or unspecified), which will set the limit to 10000. When specified, the limit value can be between 1 and 10000. This field will produce a limit error if the operation falls out of bounds.",
              "type": "number"
            },
            "schema": {
              "description": "Schema definition, in GraphQL schema language format.",
              "type": "string"
            },
            "tags": {
              "description": "Key-value map of resource tags.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "tagsAll": {
              "description": "Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "uris": {
              "description": "Map of URIs associated with the API E.g., uris[\"GRAPHQL\"] = https://ID.appsync-api.REGION.amazonaws.com/graphql",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "userPoolConfig": {
              "description": "Amazon Cognito User Pool configuration. See user_pool_config Block for details.",
              "type": "object",
              "properties": {
                "appIdClientRegex": {
                  "description": "Regular expression for validating the incoming Amazon Cognito User Pool app client ID.",
                  "type": "string"
                },
                "awsRegion": {
                  "description": "AWS region in which the user pool was created.",
                  "type": "string"
                },
                "defaultAction": {
                  "description": "Action that you want your GraphQL API to take when a request that uses Amazon Cognito User Pool authentication doesn't match the Amazon Cognito User Pool configuration. Valid: ALLOW and DENY",
                  "type": "string"
                },
                "userPoolId": {
                  "description": "User pool ID.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "visibility": {
              "description": "Sets the value of the GraphQL API to public (GLOBAL) or private (PRIVATE). If no value is provided, the visibility will be set to GLOBAL by default. This value cannot be changed once the API has been created.",
              "type": "string"
            },
            "xrayEnabled": {
              "description": "Whether tracing with X-ray is enabled. Defaults to false.",
              "type": "boolean"
            }
          },
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "type": "array",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one\nstatus to another.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from\none status to another, if any.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to\na resource at any point in time.",
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest metadata.generation\nwhich resulted in either a ready state, or stalled due to error\nit can not recover from without human intervention.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    }
  }
}
