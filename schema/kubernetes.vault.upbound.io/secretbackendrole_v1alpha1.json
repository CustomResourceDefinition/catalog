{
  "description": "SecretBackendRole is the Schema for the SecretBackendRoles API. Creates a role for the Kubernetes Secrets Engine in Vault.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "SecretBackendRoleSpec defines the desired state of SecretBackendRole",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "deletionPolicy": {
          "description": "DeletionPolicy specifies what will happen to the underlying external\nwhen this managed resource is deleted - either \"Delete\" or \"Orphan\" the\nexternal resource.\nThis field is planned to be deprecated in favor of the ManagementPolicies\nfield in a future release. Currently, both could be set independently and\nnon-default values would be honored if the feature flag is enabled.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "type": "string",
          "default": "Delete",
          "enum": [
            "Orphan",
            "Delete"
          ]
        },
        "forProvider": {
          "type": "object",
          "properties": {
            "allowedKubernetesNamespaceSelector": {
              "description": "A label selector for Kubernetes namespaces\nin which credentials can be generated. Accepts either a JSON or YAML object. The value should be\nof type LabelSelector.\nIf set with allowed_kubernetes_namespace, the conditions are ORed.\nA label selector for Kubernetes namespaces in which credentials can begenerated. Accepts either a JSON or YAML object. The value should be of typeLabelSelector. If set with `allowed_kubernetes_namespace`, the conditions are `OR`ed.",
              "type": "string"
            },
            "allowedKubernetesNamespaces": {
              "description": "The list of Kubernetes namespaces this role\ncan generate credentials for. If set to * all namespaces are allowed. If set with\nallowed_kubernetes_namespace_selector, the conditions are ORed.\nThe list of Kubernetes namespaces this role can generate credentials for. If set to '*' all namespaces are allowed. If set with`allowed_kubernetes_namespace_selector`, the conditions are `OR`ed.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "backend": {
              "description": "The path of the Kubernetes Secrets Engine backend mount to create\nthe role in.\nThe mount path for the Kubernetes secrets engine.",
              "type": "string"
            },
            "backendRef": {
              "description": "Reference to a SecretBackend in kubernetes to populate backend.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "backendSelector": {
              "description": "Selector for a SecretBackend in kubernetes to populate backend.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "extraAnnotations": {
              "description": "Additional annotations to apply to all generated\nKubernetes objects.\nAdditional annotations to apply to all generated Kubernetes objects.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "extraLabels": {
              "description": "Additional labels to apply to all generated Kubernetes\nobjects.\nAdditional labels to apply to all generated Kubernetes objects.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "generatedRoleRules": {
              "description": "The Role or ClusterRole rules to use when generating\na role. Accepts either JSON or YAML formatted rules. Mutually exclusive with service_account_name\nand kubernetes_role_name. If set, the entire chain of Kubernetes objects will be generated\nwhen credentials are requested.\nThe Role or ClusterRole rules to use when generating a role. Accepts either JSON or YAML formatted rules. Mutually exclusive with 'service_account_name' and 'kubernetes_role_name'. If set, the entire chain of Kubernetes objects will be generated when credentials are requested.",
              "type": "string"
            },
            "kubernetesRoleName": {
              "description": "The pre-existing Role or ClusterRole to bind a\ngenerated service account to. Mutually exclusive with service_account_name and\ngenerated_role_rules. If set, Kubernetes token, service account, and role\nbinding objects will be created when credentials are requested.\nThe pre-existing Role or ClusterRole to bind a generated service account to. Mutually exclusive with 'service_account_name' and 'generated_role_rules'. If set, Kubernetes token, service account, and role binding objects will be created when credentials are requested.",
              "type": "string"
            },
            "kubernetesRoleType": {
              "description": "Specifies whether the Kubernetes role is a Role or\nClusterRole.\nSpecifies whether the Kubernetes role is a Role or ClusterRole.",
              "type": "string"
            },
            "name": {
              "description": "The name of the role.\nThe name of the role.",
              "type": "string"
            },
            "nameTemplate": {
              "description": "The name template to use when generating service accounts,\nroles and role bindings. If unset, a default template is used.\nThe name template to use when generating service accounts, roles and role bindings. If unset, a default template is used.",
              "type": "string"
            },
            "namespace": {
              "description": "The namespace to provision the resource in.\nThe value should not contain leading or trailing forward slashes.\nThe namespace is always relative to the provider's configured namespace.\nAvailable only for Vault Enterprise.\nTarget namespace. (requires Enterprise)",
              "type": "string"
            },
            "serviceAccountName": {
              "description": "The pre-existing service account to generate tokens for.\nMutually exclusive with kubernetes_role_name and generated_role_rules. If set, only a\nKubernetes token will be created when credentials are requested.\nThe pre-existing service account to generate tokens for. Mutually exclusive with 'kubernetes_role_name' and 'generated_role_rules'. If set, only a Kubernetes token will be created when credentials are requested.",
              "type": "string"
            },
            "tokenDefaultTtl": {
              "description": "The default TTL for generated Kubernetes tokens in seconds.\nThe default TTL for generated Kubernetes tokens in seconds.",
              "type": "number"
            },
            "tokenMaxTtl": {
              "description": "The maximum TTL for generated Kubernetes tokens in seconds.\nThe maximum TTL for generated Kubernetes tokens in seconds.",
              "type": "number"
            }
          },
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored\nunless the Management Policies feature flag is disabled.\nInitProvider holds the same fields as ForProvider, with the exception\nof Identifier and other resource reference fields. The fields that are\nin InitProvider are merged into ForProvider when the resource is created.\nThe same fields are also added to the terraform ignore_changes hook, to\navoid updating them after creation. This is useful for fields that are\nrequired on creation, but we do not desire to update them after creation,\nfor example because of an external controller is managing them, like an\nautoscaler.",
          "type": "object",
          "properties": {
            "allowedKubernetesNamespaceSelector": {
              "description": "A label selector for Kubernetes namespaces\nin which credentials can be generated. Accepts either a JSON or YAML object. The value should be\nof type LabelSelector.\nIf set with allowed_kubernetes_namespace, the conditions are ORed.\nA label selector for Kubernetes namespaces in which credentials can begenerated. Accepts either a JSON or YAML object. The value should be of typeLabelSelector. If set with `allowed_kubernetes_namespace`, the conditions are `OR`ed.",
              "type": "string"
            },
            "allowedKubernetesNamespaces": {
              "description": "The list of Kubernetes namespaces this role\ncan generate credentials for. If set to * all namespaces are allowed. If set with\nallowed_kubernetes_namespace_selector, the conditions are ORed.\nThe list of Kubernetes namespaces this role can generate credentials for. If set to '*' all namespaces are allowed. If set with`allowed_kubernetes_namespace_selector`, the conditions are `OR`ed.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "backend": {
              "description": "The path of the Kubernetes Secrets Engine backend mount to create\nthe role in.\nThe mount path for the Kubernetes secrets engine.",
              "type": "string"
            },
            "backendRef": {
              "description": "Reference to a SecretBackend in kubernetes to populate backend.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "backendSelector": {
              "description": "Selector for a SecretBackend in kubernetes to populate backend.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "extraAnnotations": {
              "description": "Additional annotations to apply to all generated\nKubernetes objects.\nAdditional annotations to apply to all generated Kubernetes objects.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "extraLabels": {
              "description": "Additional labels to apply to all generated Kubernetes\nobjects.\nAdditional labels to apply to all generated Kubernetes objects.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "generatedRoleRules": {
              "description": "The Role or ClusterRole rules to use when generating\na role. Accepts either JSON or YAML formatted rules. Mutually exclusive with service_account_name\nand kubernetes_role_name. If set, the entire chain of Kubernetes objects will be generated\nwhen credentials are requested.\nThe Role or ClusterRole rules to use when generating a role. Accepts either JSON or YAML formatted rules. Mutually exclusive with 'service_account_name' and 'kubernetes_role_name'. If set, the entire chain of Kubernetes objects will be generated when credentials are requested.",
              "type": "string"
            },
            "kubernetesRoleName": {
              "description": "The pre-existing Role or ClusterRole to bind a\ngenerated service account to. Mutually exclusive with service_account_name and\ngenerated_role_rules. If set, Kubernetes token, service account, and role\nbinding objects will be created when credentials are requested.\nThe pre-existing Role or ClusterRole to bind a generated service account to. Mutually exclusive with 'service_account_name' and 'generated_role_rules'. If set, Kubernetes token, service account, and role binding objects will be created when credentials are requested.",
              "type": "string"
            },
            "kubernetesRoleType": {
              "description": "Specifies whether the Kubernetes role is a Role or\nClusterRole.\nSpecifies whether the Kubernetes role is a Role or ClusterRole.",
              "type": "string"
            },
            "name": {
              "description": "The name of the role.\nThe name of the role.",
              "type": "string"
            },
            "nameTemplate": {
              "description": "The name template to use when generating service accounts,\nroles and role bindings. If unset, a default template is used.\nThe name template to use when generating service accounts, roles and role bindings. If unset, a default template is used.",
              "type": "string"
            },
            "namespace": {
              "description": "The namespace to provision the resource in.\nThe value should not contain leading or trailing forward slashes.\nThe namespace is always relative to the provider's configured namespace.\nAvailable only for Vault Enterprise.\nTarget namespace. (requires Enterprise)",
              "type": "string"
            },
            "serviceAccountName": {
              "description": "The pre-existing service account to generate tokens for.\nMutually exclusive with kubernetes_role_name and generated_role_rules. If set, only a\nKubernetes token will be created when credentials are requested.\nThe pre-existing service account to generate tokens for. Mutually exclusive with 'kubernetes_role_name' and 'generated_role_rules'. If set, only a Kubernetes token will be created when credentials are requested.",
              "type": "string"
            },
            "tokenDefaultTtl": {
              "description": "The default TTL for generated Kubernetes tokens in seconds.\nThe default TTL for generated Kubernetes tokens in seconds.",
              "type": "number"
            },
            "tokenMaxTtl": {
              "description": "The maximum TTL for generated Kubernetes tokens in seconds.\nThe maximum TTL for generated Kubernetes tokens in seconds.",
              "type": "number"
            }
          },
          "additionalProperties": false
        },
        "managementPolicies": {
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out\nthrough a Crossplane feature flag.\nManagementPolicies specify the array of actions Crossplane is allowed to\ntake on the managed and external resources.\nThis field is planned to replace the DeletionPolicy field in a future\nrelease. Currently, both could be set independently and non-default\nvalues would be honored if the feature flag is enabled. If both are\ncustom, the DeletionPolicy field will be ignored.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223\nand this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers\ncan take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to\ncreate, observe, update, and delete this managed resource should be\nconfigured.",
          "type": "object",
          "default": {
            "name": "default"
          },
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "type": "object",
              "properties": {
                "resolution": {
                  "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                  "type": "string",
                  "default": "Required",
                  "enum": [
                    "Required",
                    "Optional"
                  ]
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                  "type": "string",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a\nSecret to which any connection details for this managed resource should\nbe written. Connection details frequently include the endpoint, username,\nand password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name",
            "namespace"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false,
      "x-kubernetes-validations": [
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.name))",
          "message": "spec.forProvider.name is a required parameter"
        }
      ]
    },
    "status": {
      "description": "SecretBackendRoleStatus defines the observed state of SecretBackendRole.",
      "type": "object",
      "properties": {
        "atProvider": {
          "type": "object",
          "properties": {
            "allowedKubernetesNamespaceSelector": {
              "description": "A label selector for Kubernetes namespaces\nin which credentials can be generated. Accepts either a JSON or YAML object. The value should be\nof type LabelSelector.\nIf set with allowed_kubernetes_namespace, the conditions are ORed.\nA label selector for Kubernetes namespaces in which credentials can begenerated. Accepts either a JSON or YAML object. The value should be of typeLabelSelector. If set with `allowed_kubernetes_namespace`, the conditions are `OR`ed.",
              "type": "string"
            },
            "allowedKubernetesNamespaces": {
              "description": "The list of Kubernetes namespaces this role\ncan generate credentials for. If set to * all namespaces are allowed. If set with\nallowed_kubernetes_namespace_selector, the conditions are ORed.\nThe list of Kubernetes namespaces this role can generate credentials for. If set to '*' all namespaces are allowed. If set with`allowed_kubernetes_namespace_selector`, the conditions are `OR`ed.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "backend": {
              "description": "The path of the Kubernetes Secrets Engine backend mount to create\nthe role in.\nThe mount path for the Kubernetes secrets engine.",
              "type": "string"
            },
            "extraAnnotations": {
              "description": "Additional annotations to apply to all generated\nKubernetes objects.\nAdditional annotations to apply to all generated Kubernetes objects.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "extraLabels": {
              "description": "Additional labels to apply to all generated Kubernetes\nobjects.\nAdditional labels to apply to all generated Kubernetes objects.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "generatedRoleRules": {
              "description": "The Role or ClusterRole rules to use when generating\na role. Accepts either JSON or YAML formatted rules. Mutually exclusive with service_account_name\nand kubernetes_role_name. If set, the entire chain of Kubernetes objects will be generated\nwhen credentials are requested.\nThe Role or ClusterRole rules to use when generating a role. Accepts either JSON or YAML formatted rules. Mutually exclusive with 'service_account_name' and 'kubernetes_role_name'. If set, the entire chain of Kubernetes objects will be generated when credentials are requested.",
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "kubernetesRoleName": {
              "description": "The pre-existing Role or ClusterRole to bind a\ngenerated service account to. Mutually exclusive with service_account_name and\ngenerated_role_rules. If set, Kubernetes token, service account, and role\nbinding objects will be created when credentials are requested.\nThe pre-existing Role or ClusterRole to bind a generated service account to. Mutually exclusive with 'service_account_name' and 'generated_role_rules'. If set, Kubernetes token, service account, and role binding objects will be created when credentials are requested.",
              "type": "string"
            },
            "kubernetesRoleType": {
              "description": "Specifies whether the Kubernetes role is a Role or\nClusterRole.\nSpecifies whether the Kubernetes role is a Role or ClusterRole.",
              "type": "string"
            },
            "name": {
              "description": "The name of the role.\nThe name of the role.",
              "type": "string"
            },
            "nameTemplate": {
              "description": "The name template to use when generating service accounts,\nroles and role bindings. If unset, a default template is used.\nThe name template to use when generating service accounts, roles and role bindings. If unset, a default template is used.",
              "type": "string"
            },
            "namespace": {
              "description": "The namespace to provision the resource in.\nThe value should not contain leading or trailing forward slashes.\nThe namespace is always relative to the provider's configured namespace.\nAvailable only for Vault Enterprise.\nTarget namespace. (requires Enterprise)",
              "type": "string"
            },
            "serviceAccountName": {
              "description": "The pre-existing service account to generate tokens for.\nMutually exclusive with kubernetes_role_name and generated_role_rules. If set, only a\nKubernetes token will be created when credentials are requested.\nThe pre-existing service account to generate tokens for. Mutually exclusive with 'kubernetes_role_name' and 'generated_role_rules'. If set, only a Kubernetes token will be created when credentials are requested.",
              "type": "string"
            },
            "tokenDefaultTtl": {
              "description": "The default TTL for generated Kubernetes tokens in seconds.\nThe default TTL for generated Kubernetes tokens in seconds.",
              "type": "number"
            },
            "tokenMaxTtl": {
              "description": "The maximum TTL for generated Kubernetes tokens in seconds.\nThe maximum TTL for generated Kubernetes tokens in seconds.",
              "type": "number"
            }
          },
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "type": "array",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one\nstatus to another.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from\none status to another, if any.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to\na resource at any point in time.",
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest metadata.generation\nwhich resulted in either a ready state, or stalled due to error\nit can not recover from without human intervention.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    }
  }
}
