{
  "description": "Account is the Schema for the Accounts API. Manages a NetApp Account.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "AccountSpec defines the desired state of Account",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "forProvider": {
          "type": "object",
          "properties": {
            "activeDirectory": {
              "description": "A active_directory block as defined below.",
              "type": "object",
              "properties": {
                "aesEncryptionEnabled": {
                  "description": "If enabled, AES encryption will be enabled for SMB communication. Defaults to false.\nIf enabled, AES encryption will be enabled for SMB communication.",
                  "type": "boolean"
                },
                "dnsServers": {
                  "description": "A list of DNS server IP addresses for the Active Directory domain. Only allows IPv4 address.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "domain": {
                  "description": "The name of the Active Directory domain.",
                  "type": "string"
                },
                "kerberosAdName": {
                  "description": "Name of the active directory machine.\nName of the active directory machine. This optional parameter is used only while creating kerberos volume.",
                  "type": "string"
                },
                "kerberosKdcIp": {
                  "description": "kdc server IP addresses for the active directory machine.\nIP address of the KDC server (usually same the DC). This optional parameter is used only while creating kerberos volume.",
                  "type": "string"
                },
                "ldapOverTlsEnabled": {
                  "description": "Specifies whether or not the LDAP traffic needs to be secured via TLS. Defaults to false.\nSpecifies whether or not the LDAP traffic needs to be secured via TLS.",
                  "type": "boolean"
                },
                "ldapSigningEnabled": {
                  "description": "Specifies whether or not the LDAP traffic needs to be signed. Defaults to false.\nSpecifies whether or not the LDAP traffic needs to be signed.",
                  "type": "boolean"
                },
                "localNfsUsersWithLdapAllowed": {
                  "description": "If enabled, NFS client local users can also (in addition to LDAP users) access the NFS volumes. Defaults to false.\nIf enabled, NFS client local users can also (in addition to LDAP users) access the NFS volumes.",
                  "type": "boolean"
                },
                "organizationalUnit": {
                  "description": "The Organizational Unit (OU) within Active Directory where machines will be created. If blank, defaults to CN=Computers.\nThe Organizational Unit (OU) within the Windows Active Directory where machines will be created. If blank, defaults to 'CN=Computers'",
                  "type": "string"
                },
                "passwordSecretRef": {
                  "description": "The password associated with the username.",
                  "type": "object",
                  "required": [
                    "key",
                    "name"
                  ],
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the secret.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "serverRootCaCertificateSecretRef": {
                  "description": "When LDAP over SSL/TLS is enabled, the LDAP client is required to have a base64 encoded Active Directory Certificate Service's self-signed root CA certificate, this optional parameter is used only for dual protocol with LDAP user-mapping volumes. Required if ldap_over_tls_enabled is set to true.\nWhen LDAP over SSL/TLS is enabled, the LDAP client is required to have base64 encoded Active Directory Certificate Service's self-signed root CA certificate, this optional parameter is used only for dual protocol with LDAP user-mapping volumes.",
                  "type": "object",
                  "required": [
                    "key",
                    "name"
                  ],
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the secret.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "siteName": {
                  "description": "The Active Directory site the service will limit Domain Controller discovery to. If blank, defaults to Default-First-Site-Name.\nThe Active Directory site the service will limit Domain Controller discovery to. If blank, defaults to 'Default-First-Site-Name'",
                  "type": "string"
                },
                "smbServerName": {
                  "description": "The NetBIOS name which should be used for the NetApp SMB Server, which will be registered as a computer account in the AD and used to mount volumes.",
                  "type": "string"
                },
                "username": {
                  "description": "The Username of Active Directory Domain Administrator.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "identity": {
              "description": "The identity block where it is used when customer managed keys based encryption will be enabled as defined below.",
              "type": "object",
              "properties": {
                "identityIds": {
                  "description": "The identity id of the user assigned identity to use when type is UserAssigned",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "x-kubernetes-list-type": "set"
                },
                "identityIdsRefs": {
                  "description": "References to UserAssignedIdentity in managedidentity to populate identityIds.",
                  "type": "array",
                  "items": {
                    "description": "A NamespacedReference to a named object.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace of the referenced object",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "identityIdsSelector": {
                  "description": "Selector for a list of UserAssignedIdentity in managedidentity to populate identityIds.",
                  "type": "object",
                  "properties": {
                    "matchControllerRef": {
                      "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                      "type": "boolean"
                    },
                    "matchLabels": {
                      "description": "MatchLabels ensures an object with matching labels is selected.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "namespace": {
                      "description": "Namespace for the selector",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for selection.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "type": {
                  "description": "The identity type, which can be SystemAssigned or UserAssigned. Only one type at a time is supported by Azure NetApp Files.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "location": {
              "description": "Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "resourceGroupName": {
              "description": "The name of the resource group where the NetApp Account should be created. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "resourceGroupNameRef": {
              "description": "Reference to a ResourceGroup in azure to populate resourceGroupName.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referenced object",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "resourceGroupNameSelector": {
              "description": "Selector for a ResourceGroup in azure to populate resourceGroupName.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "namespace": {
                  "description": "Namespace for the selector",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "tags": {
              "description": "A mapping of tags to assign to the resource.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            }
          },
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored\nunless the Management Policies feature flag is disabled.\nInitProvider holds the same fields as ForProvider, with the exception\nof Identifier and other resource reference fields. The fields that are\nin InitProvider are merged into ForProvider when the resource is created.\nThe same fields are also added to the terraform ignore_changes hook, to\navoid updating them after creation. This is useful for fields that are\nrequired on creation, but we do not desire to update them after creation,\nfor example because of an external controller is managing them, like an\nautoscaler.",
          "type": "object",
          "properties": {
            "activeDirectory": {
              "description": "A active_directory block as defined below.",
              "type": "object",
              "required": [
                "passwordSecretRef"
              ],
              "properties": {
                "aesEncryptionEnabled": {
                  "description": "If enabled, AES encryption will be enabled for SMB communication. Defaults to false.\nIf enabled, AES encryption will be enabled for SMB communication.",
                  "type": "boolean"
                },
                "dnsServers": {
                  "description": "A list of DNS server IP addresses for the Active Directory domain. Only allows IPv4 address.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "domain": {
                  "description": "The name of the Active Directory domain.",
                  "type": "string"
                },
                "kerberosAdName": {
                  "description": "Name of the active directory machine.\nName of the active directory machine. This optional parameter is used only while creating kerberos volume.",
                  "type": "string"
                },
                "kerberosKdcIp": {
                  "description": "kdc server IP addresses for the active directory machine.\nIP address of the KDC server (usually same the DC). This optional parameter is used only while creating kerberos volume.",
                  "type": "string"
                },
                "ldapOverTlsEnabled": {
                  "description": "Specifies whether or not the LDAP traffic needs to be secured via TLS. Defaults to false.\nSpecifies whether or not the LDAP traffic needs to be secured via TLS.",
                  "type": "boolean"
                },
                "ldapSigningEnabled": {
                  "description": "Specifies whether or not the LDAP traffic needs to be signed. Defaults to false.\nSpecifies whether or not the LDAP traffic needs to be signed.",
                  "type": "boolean"
                },
                "localNfsUsersWithLdapAllowed": {
                  "description": "If enabled, NFS client local users can also (in addition to LDAP users) access the NFS volumes. Defaults to false.\nIf enabled, NFS client local users can also (in addition to LDAP users) access the NFS volumes.",
                  "type": "boolean"
                },
                "organizationalUnit": {
                  "description": "The Organizational Unit (OU) within Active Directory where machines will be created. If blank, defaults to CN=Computers.\nThe Organizational Unit (OU) within the Windows Active Directory where machines will be created. If blank, defaults to 'CN=Computers'",
                  "type": "string"
                },
                "passwordSecretRef": {
                  "description": "The password associated with the username.",
                  "type": "object",
                  "required": [
                    "key",
                    "name"
                  ],
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the secret.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "serverRootCaCertificateSecretRef": {
                  "description": "When LDAP over SSL/TLS is enabled, the LDAP client is required to have a base64 encoded Active Directory Certificate Service's self-signed root CA certificate, this optional parameter is used only for dual protocol with LDAP user-mapping volumes. Required if ldap_over_tls_enabled is set to true.\nWhen LDAP over SSL/TLS is enabled, the LDAP client is required to have base64 encoded Active Directory Certificate Service's self-signed root CA certificate, this optional parameter is used only for dual protocol with LDAP user-mapping volumes.",
                  "type": "object",
                  "required": [
                    "key",
                    "name"
                  ],
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the secret.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "siteName": {
                  "description": "The Active Directory site the service will limit Domain Controller discovery to. If blank, defaults to Default-First-Site-Name.\nThe Active Directory site the service will limit Domain Controller discovery to. If blank, defaults to 'Default-First-Site-Name'",
                  "type": "string"
                },
                "smbServerName": {
                  "description": "The NetBIOS name which should be used for the NetApp SMB Server, which will be registered as a computer account in the AD and used to mount volumes.",
                  "type": "string"
                },
                "username": {
                  "description": "The Username of Active Directory Domain Administrator.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "identity": {
              "description": "The identity block where it is used when customer managed keys based encryption will be enabled as defined below.",
              "type": "object",
              "properties": {
                "identityIds": {
                  "description": "The identity id of the user assigned identity to use when type is UserAssigned",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "x-kubernetes-list-type": "set"
                },
                "identityIdsRefs": {
                  "description": "References to UserAssignedIdentity in managedidentity to populate identityIds.",
                  "type": "array",
                  "items": {
                    "description": "A NamespacedReference to a named object.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace of the referenced object",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "identityIdsSelector": {
                  "description": "Selector for a list of UserAssignedIdentity in managedidentity to populate identityIds.",
                  "type": "object",
                  "properties": {
                    "matchControllerRef": {
                      "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                      "type": "boolean"
                    },
                    "matchLabels": {
                      "description": "MatchLabels ensures an object with matching labels is selected.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "namespace": {
                      "description": "Namespace for the selector",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for selection.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "type": {
                  "description": "The identity type, which can be SystemAssigned or UserAssigned. Only one type at a time is supported by Azure NetApp Files.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "location": {
              "description": "Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "tags": {
              "description": "A mapping of tags to assign to the resource.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            }
          },
          "additionalProperties": false
        },
        "managementPolicies": {
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out\nthrough a Crossplane feature flag.\nManagementPolicies specify the array of actions Crossplane is allowed to\ntake on the managed and external resources.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223\nand this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers\ncan take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to\ncreate, observe, update, and delete this managed resource should be\nconfigured.",
          "type": "object",
          "default": {
            "kind": "ClusterProviderConfig",
            "name": "default"
          },
          "required": [
            "kind",
            "name"
          ],
          "properties": {
            "kind": {
              "description": "Kind of the referenced object.",
              "type": "string"
            },
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a\nSecret to which any connection details for this managed resource should\nbe written. Connection details frequently include the endpoint, username,\nand password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false,
      "x-kubernetes-validations": [
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.location))",
          "message": "spec.forProvider.location is a required parameter"
        }
      ]
    },
    "status": {
      "description": "AccountStatus defines the observed state of Account.",
      "type": "object",
      "properties": {
        "atProvider": {
          "type": "object",
          "properties": {
            "activeDirectory": {
              "description": "A active_directory block as defined below.",
              "type": "object",
              "properties": {
                "aesEncryptionEnabled": {
                  "description": "If enabled, AES encryption will be enabled for SMB communication. Defaults to false.\nIf enabled, AES encryption will be enabled for SMB communication.",
                  "type": "boolean"
                },
                "dnsServers": {
                  "description": "A list of DNS server IP addresses for the Active Directory domain. Only allows IPv4 address.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "domain": {
                  "description": "The name of the Active Directory domain.",
                  "type": "string"
                },
                "kerberosAdName": {
                  "description": "Name of the active directory machine.\nName of the active directory machine. This optional parameter is used only while creating kerberos volume.",
                  "type": "string"
                },
                "kerberosKdcIp": {
                  "description": "kdc server IP addresses for the active directory machine.\nIP address of the KDC server (usually same the DC). This optional parameter is used only while creating kerberos volume.",
                  "type": "string"
                },
                "ldapOverTlsEnabled": {
                  "description": "Specifies whether or not the LDAP traffic needs to be secured via TLS. Defaults to false.\nSpecifies whether or not the LDAP traffic needs to be secured via TLS.",
                  "type": "boolean"
                },
                "ldapSigningEnabled": {
                  "description": "Specifies whether or not the LDAP traffic needs to be signed. Defaults to false.\nSpecifies whether or not the LDAP traffic needs to be signed.",
                  "type": "boolean"
                },
                "localNfsUsersWithLdapAllowed": {
                  "description": "If enabled, NFS client local users can also (in addition to LDAP users) access the NFS volumes. Defaults to false.\nIf enabled, NFS client local users can also (in addition to LDAP users) access the NFS volumes.",
                  "type": "boolean"
                },
                "organizationalUnit": {
                  "description": "The Organizational Unit (OU) within Active Directory where machines will be created. If blank, defaults to CN=Computers.\nThe Organizational Unit (OU) within the Windows Active Directory where machines will be created. If blank, defaults to 'CN=Computers'",
                  "type": "string"
                },
                "siteName": {
                  "description": "The Active Directory site the service will limit Domain Controller discovery to. If blank, defaults to Default-First-Site-Name.\nThe Active Directory site the service will limit Domain Controller discovery to. If blank, defaults to 'Default-First-Site-Name'",
                  "type": "string"
                },
                "smbServerName": {
                  "description": "The NetBIOS name which should be used for the NetApp SMB Server, which will be registered as a computer account in the AD and used to mount volumes.",
                  "type": "string"
                },
                "username": {
                  "description": "The Username of Active Directory Domain Administrator.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "id": {
              "description": "The ID of the NetApp Account.",
              "type": "string"
            },
            "identity": {
              "description": "The identity block where it is used when customer managed keys based encryption will be enabled as defined below.",
              "type": "object",
              "properties": {
                "identityIds": {
                  "description": "The identity id of the user assigned identity to use when type is UserAssigned",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "x-kubernetes-list-type": "set"
                },
                "principalId": {
                  "description": "The ID of the NetApp Account.",
                  "type": "string"
                },
                "tenantId": {
                  "description": "The ID of the NetApp Account.",
                  "type": "string"
                },
                "type": {
                  "description": "The identity type, which can be SystemAssigned or UserAssigned. Only one type at a time is supported by Azure NetApp Files.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "location": {
              "description": "Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "resourceGroupName": {
              "description": "The name of the resource group where the NetApp Account should be created. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "tags": {
              "description": "A mapping of tags to assign to the resource.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            }
          },
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "type": "array",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one\nstatus to another.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from\none status to another, if any.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to\na resource at any point in time.",
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest metadata.generation\nwhich resulted in either a ready state, or stalled due to error\nit can not recover from without human intervention.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    }
  }
}
