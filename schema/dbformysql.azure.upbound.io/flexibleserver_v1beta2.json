{
  "description": "FlexibleServer is the Schema for the FlexibleServers API. Manages a MySQL Flexible Server.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "FlexibleServerSpec defines the desired state of FlexibleServer",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "deletionPolicy": {
          "description": "DeletionPolicy specifies what will happen to the underlying external\nwhen this managed resource is deleted - either \"Delete\" or \"Orphan\" the\nexternal resource.\nThis field is planned to be deprecated in favor of the ManagementPolicies\nfield in a future release. Currently, both could be set independently and\nnon-default values would be honored if the feature flag is enabled.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "type": "string",
          "default": "Delete",
          "enum": [
            "Orphan",
            "Delete"
          ]
        },
        "forProvider": {
          "type": "object",
          "properties": {
            "administratorLogin": {
              "description": "The Administrator login for the MySQL Flexible Server. Required when create_mode is Default. Changing this forces a new MySQL Flexible Server to be created.",
              "type": "string"
            },
            "administratorPasswordSecretRef": {
              "description": "The Password associated with the administrator_login for the MySQL Flexible Server.",
              "type": "object",
              "required": [
                "key",
                "name",
                "namespace"
              ],
              "properties": {
                "key": {
                  "description": "The key to select.",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the secret.",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the secret.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "administratorPasswordWo": {
              "description": "The Password associated with the administrator_login for the MySQL Flexible Server.",
              "type": "string"
            },
            "administratorPasswordWoVersion": {
              "description": "An integer value used to trigger an update for administrator_password_wo. This property should be incremented when updating administrator_password_wo.",
              "type": "number"
            },
            "backupRetentionDays": {
              "description": "The backup retention days for the MySQL Flexible Server. Possible values are between 1 and 35 days. Defaults to 7.",
              "type": "number"
            },
            "createMode": {
              "description": "The creation mode which can be used to restore or replicate existing servers. Possible values are Default, PointInTimeRestore, GeoRestore, and Replica. Changing this forces a new MySQL Flexible Server to be created.",
              "type": "string"
            },
            "customerManagedKey": {
              "description": "A customer_managed_key block as defined below.",
              "type": "object",
              "properties": {
                "geoBackupKeyVaultKeyId": {
                  "description": "The ID of the geo backup Key Vault Key. It can't cross region and need Customer Managed Key in same region as geo backup.",
                  "type": "string"
                },
                "geoBackupUserAssignedIdentityId": {
                  "description": "The geo backup user managed identity id for a Customer Managed Key. Should be added with identity_ids. It can't cross region and need identity in same region as geo backup.",
                  "type": "string"
                },
                "keyVaultKeyId": {
                  "description": "The ID of the Key Vault Key.",
                  "type": "string"
                },
                "primaryUserAssignedIdentityId": {
                  "description": "Specifies the primary user managed identity id for a Customer Managed Key. Should be added with identity_ids.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "delegatedSubnetId": {
              "description": "The ID of the virtual network subnet to create the MySQL Flexible Server. Changing this forces a new MySQL Flexible Server to be created.",
              "type": "string"
            },
            "delegatedSubnetIdRef": {
              "description": "Reference to a Subnet in network to populate delegatedSubnetId.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "delegatedSubnetIdSelector": {
              "description": "Selector for a Subnet in network to populate delegatedSubnetId.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "geoRedundantBackupEnabled": {
              "description": "Should geo redundant backup enabled? Defaults to false. Changing this forces a new MySQL Flexible Server to be created.",
              "type": "boolean"
            },
            "highAvailability": {
              "description": "A high_availability block as defined below.",
              "type": "object",
              "properties": {
                "mode": {
                  "description": "The high availability mode for the MySQL Flexible Server. Possibles values are SameZone and ZoneRedundant.",
                  "type": "string"
                },
                "standbyAvailabilityZone": {
                  "description": "Specifies the Availability Zone in which the standby Flexible Server should be located. Possible values are 1, 2 and 3.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "identity": {
              "description": "An identity block as defined below.",
              "type": "object",
              "properties": {
                "identityIds": {
                  "description": "A list of User Assigned Managed Identity IDs to be assigned to this MySQL Flexible Server.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "x-kubernetes-list-type": "set"
                },
                "type": {
                  "description": "Specifies the type of Managed Service Identity that should be configured on this MySQL Flexible Server. The only possible value is UserAssigned.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "location": {
              "description": "The Azure Region where the MySQL Flexible Server should exist. Changing this forces a new MySQL Flexible Server to be created.",
              "type": "string"
            },
            "maintenanceWindow": {
              "description": "A maintenance_window block as defined below.",
              "type": "object",
              "properties": {
                "dayOfWeek": {
                  "description": "The day of week for maintenance window. Defaults to 0.",
                  "type": "number"
                },
                "startHour": {
                  "description": "The start hour for maintenance window. Defaults to 0.",
                  "type": "number"
                },
                "startMinute": {
                  "description": "The start minute for maintenance window. Defaults to 0.",
                  "type": "number"
                }
              },
              "additionalProperties": false
            },
            "pointInTimeRestoreTimeInUtc": {
              "description": "The point in time to restore from creation_source_server_id when create_mode is PointInTimeRestore. Changing this forces a new MySQL Flexible Server to be created.",
              "type": "string"
            },
            "privateDnsZoneId": {
              "description": "The ID of the private DNS zone to create the MySQL Flexible Server. Changing this forces a new MySQL Flexible Server to be created.",
              "type": "string"
            },
            "privateDnsZoneIdRef": {
              "description": "Reference to a PrivateDNSZone in network to populate privateDnsZoneId.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "privateDnsZoneIdSelector": {
              "description": "Selector for a PrivateDNSZone in network to populate privateDnsZoneId.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "publicNetworkAccess": {
              "description": "Whether approved public traffic is allowed through the firewall to this server. Possible values are Enabled and Disabled.",
              "type": "string"
            },
            "replicationRole": {
              "description": "The replication role. Possible value is None.",
              "type": "string"
            },
            "resourceGroupName": {
              "description": "The name of the Resource Group where the MySQL Flexible Server should exist. Changing this forces a new MySQL Flexible Server to be created.",
              "type": "string"
            },
            "resourceGroupNameRef": {
              "description": "Reference to a ResourceGroup in azure to populate resourceGroupName.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "resourceGroupNameSelector": {
              "description": "Selector for a ResourceGroup in azure to populate resourceGroupName.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "skuName": {
              "description": "The SKU Name for the MySQL Flexible Server.",
              "type": "string"
            },
            "sourceServerId": {
              "description": "The resource ID of the source MySQL Flexible Server to be restored. Required when create_mode is PointInTimeRestore, GeoRestore, and Replica. Changing this forces a new MySQL Flexible Server to be created.",
              "type": "string"
            },
            "storage": {
              "description": "A storage block as defined below.",
              "type": "object",
              "properties": {
                "autoGrowEnabled": {
                  "description": "Should Storage Auto Grow be enabled? Defaults to true.",
                  "type": "boolean"
                },
                "ioScalingEnabled": {
                  "description": "Should IOPS be scaled automatically? If true, iops can not be set. Defaults to false.",
                  "type": "boolean"
                },
                "iops": {
                  "description": "The storage IOPS for the MySQL Flexible Server. Possible values are between 360 and 20000.",
                  "type": "number"
                },
                "logOnDiskEnabled": {
                  "description": "Should Storage Log On Disk be enabled? Defaults to false.",
                  "type": "boolean"
                },
                "sizeGb": {
                  "description": "The max storage allowed for the MySQL Flexible Server. Possible values are between 20 and 16384.",
                  "type": "number"
                }
              },
              "additionalProperties": false
            },
            "tags": {
              "description": "A mapping of tags which should be assigned to the MySQL Flexible Server.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "version": {
              "description": "The version of the MySQL Flexible Server to use. Possible values are 5.7, and 8.0.21.",
              "type": "string"
            },
            "zone": {
              "description": "Specifies the Availability Zone in which this MySQL Flexible Server should be located. Possible values are 1, 2 and 3.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored\nunless the Management Policies feature flag is disabled.\nInitProvider holds the same fields as ForProvider, with the exception\nof Identifier and other resource reference fields. The fields that are\nin InitProvider are merged into ForProvider when the resource is created.\nThe same fields are also added to the terraform ignore_changes hook, to\navoid updating them after creation. This is useful for fields that are\nrequired on creation, but we do not desire to update them after creation,\nfor example because of an external controller is managing them, like an\nautoscaler.",
          "type": "object",
          "properties": {
            "administratorLogin": {
              "description": "The Administrator login for the MySQL Flexible Server. Required when create_mode is Default. Changing this forces a new MySQL Flexible Server to be created.",
              "type": "string"
            },
            "administratorPasswordSecretRef": {
              "description": "The Password associated with the administrator_login for the MySQL Flexible Server.",
              "type": "object",
              "required": [
                "key",
                "name",
                "namespace"
              ],
              "properties": {
                "key": {
                  "description": "The key to select.",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the secret.",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the secret.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "administratorPasswordWo": {
              "description": "The Password associated with the administrator_login for the MySQL Flexible Server.",
              "type": "string"
            },
            "administratorPasswordWoVersion": {
              "description": "An integer value used to trigger an update for administrator_password_wo. This property should be incremented when updating administrator_password_wo.",
              "type": "number"
            },
            "backupRetentionDays": {
              "description": "The backup retention days for the MySQL Flexible Server. Possible values are between 1 and 35 days. Defaults to 7.",
              "type": "number"
            },
            "createMode": {
              "description": "The creation mode which can be used to restore or replicate existing servers. Possible values are Default, PointInTimeRestore, GeoRestore, and Replica. Changing this forces a new MySQL Flexible Server to be created.",
              "type": "string"
            },
            "customerManagedKey": {
              "description": "A customer_managed_key block as defined below.",
              "type": "object",
              "properties": {
                "geoBackupKeyVaultKeyId": {
                  "description": "The ID of the geo backup Key Vault Key. It can't cross region and need Customer Managed Key in same region as geo backup.",
                  "type": "string"
                },
                "geoBackupUserAssignedIdentityId": {
                  "description": "The geo backup user managed identity id for a Customer Managed Key. Should be added with identity_ids. It can't cross region and need identity in same region as geo backup.",
                  "type": "string"
                },
                "keyVaultKeyId": {
                  "description": "The ID of the Key Vault Key.",
                  "type": "string"
                },
                "primaryUserAssignedIdentityId": {
                  "description": "Specifies the primary user managed identity id for a Customer Managed Key. Should be added with identity_ids.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "delegatedSubnetId": {
              "description": "The ID of the virtual network subnet to create the MySQL Flexible Server. Changing this forces a new MySQL Flexible Server to be created.",
              "type": "string"
            },
            "delegatedSubnetIdRef": {
              "description": "Reference to a Subnet in network to populate delegatedSubnetId.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "delegatedSubnetIdSelector": {
              "description": "Selector for a Subnet in network to populate delegatedSubnetId.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "geoRedundantBackupEnabled": {
              "description": "Should geo redundant backup enabled? Defaults to false. Changing this forces a new MySQL Flexible Server to be created.",
              "type": "boolean"
            },
            "highAvailability": {
              "description": "A high_availability block as defined below.",
              "type": "object",
              "properties": {
                "mode": {
                  "description": "The high availability mode for the MySQL Flexible Server. Possibles values are SameZone and ZoneRedundant.",
                  "type": "string"
                },
                "standbyAvailabilityZone": {
                  "description": "Specifies the Availability Zone in which the standby Flexible Server should be located. Possible values are 1, 2 and 3.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "identity": {
              "description": "An identity block as defined below.",
              "type": "object",
              "properties": {
                "identityIds": {
                  "description": "A list of User Assigned Managed Identity IDs to be assigned to this MySQL Flexible Server.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "x-kubernetes-list-type": "set"
                },
                "type": {
                  "description": "Specifies the type of Managed Service Identity that should be configured on this MySQL Flexible Server. The only possible value is UserAssigned.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "location": {
              "description": "The Azure Region where the MySQL Flexible Server should exist. Changing this forces a new MySQL Flexible Server to be created.",
              "type": "string"
            },
            "maintenanceWindow": {
              "description": "A maintenance_window block as defined below.",
              "type": "object",
              "properties": {
                "dayOfWeek": {
                  "description": "The day of week for maintenance window. Defaults to 0.",
                  "type": "number"
                },
                "startHour": {
                  "description": "The start hour for maintenance window. Defaults to 0.",
                  "type": "number"
                },
                "startMinute": {
                  "description": "The start minute for maintenance window. Defaults to 0.",
                  "type": "number"
                }
              },
              "additionalProperties": false
            },
            "pointInTimeRestoreTimeInUtc": {
              "description": "The point in time to restore from creation_source_server_id when create_mode is PointInTimeRestore. Changing this forces a new MySQL Flexible Server to be created.",
              "type": "string"
            },
            "privateDnsZoneId": {
              "description": "The ID of the private DNS zone to create the MySQL Flexible Server. Changing this forces a new MySQL Flexible Server to be created.",
              "type": "string"
            },
            "privateDnsZoneIdRef": {
              "description": "Reference to a PrivateDNSZone in network to populate privateDnsZoneId.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "privateDnsZoneIdSelector": {
              "description": "Selector for a PrivateDNSZone in network to populate privateDnsZoneId.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "publicNetworkAccess": {
              "description": "Whether approved public traffic is allowed through the firewall to this server. Possible values are Enabled and Disabled.",
              "type": "string"
            },
            "replicationRole": {
              "description": "The replication role. Possible value is None.",
              "type": "string"
            },
            "skuName": {
              "description": "The SKU Name for the MySQL Flexible Server.",
              "type": "string"
            },
            "sourceServerId": {
              "description": "The resource ID of the source MySQL Flexible Server to be restored. Required when create_mode is PointInTimeRestore, GeoRestore, and Replica. Changing this forces a new MySQL Flexible Server to be created.",
              "type": "string"
            },
            "storage": {
              "description": "A storage block as defined below.",
              "type": "object",
              "properties": {
                "autoGrowEnabled": {
                  "description": "Should Storage Auto Grow be enabled? Defaults to true.",
                  "type": "boolean"
                },
                "ioScalingEnabled": {
                  "description": "Should IOPS be scaled automatically? If true, iops can not be set. Defaults to false.",
                  "type": "boolean"
                },
                "iops": {
                  "description": "The storage IOPS for the MySQL Flexible Server. Possible values are between 360 and 20000.",
                  "type": "number"
                },
                "logOnDiskEnabled": {
                  "description": "Should Storage Log On Disk be enabled? Defaults to false.",
                  "type": "boolean"
                },
                "sizeGb": {
                  "description": "The max storage allowed for the MySQL Flexible Server. Possible values are between 20 and 16384.",
                  "type": "number"
                }
              },
              "additionalProperties": false
            },
            "tags": {
              "description": "A mapping of tags which should be assigned to the MySQL Flexible Server.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "version": {
              "description": "The version of the MySQL Flexible Server to use. Possible values are 5.7, and 8.0.21.",
              "type": "string"
            },
            "zone": {
              "description": "Specifies the Availability Zone in which this MySQL Flexible Server should be located. Possible values are 1, 2 and 3.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "managementPolicies": {
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out\nthrough a Crossplane feature flag.\nManagementPolicies specify the array of actions Crossplane is allowed to\ntake on the managed and external resources.\nThis field is planned to replace the DeletionPolicy field in a future\nrelease. Currently, both could be set independently and non-default\nvalues would be honored if the feature flag is enabled. If both are\ncustom, the DeletionPolicy field will be ignored.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223\nand this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers\ncan take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to\ncreate, observe, update, and delete this managed resource should be\nconfigured.",
          "type": "object",
          "default": {
            "name": "default"
          },
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "type": "object",
              "properties": {
                "resolution": {
                  "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                  "type": "string",
                  "default": "Required",
                  "enum": [
                    "Required",
                    "Optional"
                  ]
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                  "type": "string",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a\nSecret to which any connection details for this managed resource should\nbe written. Connection details frequently include the endpoint, username,\nand password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name",
            "namespace"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false,
      "x-kubernetes-validations": [
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.location))",
          "message": "spec.forProvider.location is a required parameter"
        }
      ]
    },
    "status": {
      "description": "FlexibleServerStatus defines the observed state of FlexibleServer.",
      "type": "object",
      "properties": {
        "atProvider": {
          "type": "object",
          "properties": {
            "administratorLogin": {
              "description": "The Administrator login for the MySQL Flexible Server. Required when create_mode is Default. Changing this forces a new MySQL Flexible Server to be created.",
              "type": "string"
            },
            "administratorPasswordWo": {
              "description": "The Password associated with the administrator_login for the MySQL Flexible Server.",
              "type": "string"
            },
            "administratorPasswordWoVersion": {
              "description": "An integer value used to trigger an update for administrator_password_wo. This property should be incremented when updating administrator_password_wo.",
              "type": "number"
            },
            "backupRetentionDays": {
              "description": "The backup retention days for the MySQL Flexible Server. Possible values are between 1 and 35 days. Defaults to 7.",
              "type": "number"
            },
            "createMode": {
              "description": "The creation mode which can be used to restore or replicate existing servers. Possible values are Default, PointInTimeRestore, GeoRestore, and Replica. Changing this forces a new MySQL Flexible Server to be created.",
              "type": "string"
            },
            "customerManagedKey": {
              "description": "A customer_managed_key block as defined below.",
              "type": "object",
              "properties": {
                "geoBackupKeyVaultKeyId": {
                  "description": "The ID of the geo backup Key Vault Key. It can't cross region and need Customer Managed Key in same region as geo backup.",
                  "type": "string"
                },
                "geoBackupUserAssignedIdentityId": {
                  "description": "The geo backup user managed identity id for a Customer Managed Key. Should be added with identity_ids. It can't cross region and need identity in same region as geo backup.",
                  "type": "string"
                },
                "keyVaultKeyId": {
                  "description": "The ID of the Key Vault Key.",
                  "type": "string"
                },
                "primaryUserAssignedIdentityId": {
                  "description": "Specifies the primary user managed identity id for a Customer Managed Key. Should be added with identity_ids.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "delegatedSubnetId": {
              "description": "The ID of the virtual network subnet to create the MySQL Flexible Server. Changing this forces a new MySQL Flexible Server to be created.",
              "type": "string"
            },
            "fqdn": {
              "description": "The fully qualified domain name of the MySQL Flexible Server.",
              "type": "string"
            },
            "geoRedundantBackupEnabled": {
              "description": "Should geo redundant backup enabled? Defaults to false. Changing this forces a new MySQL Flexible Server to be created.",
              "type": "boolean"
            },
            "highAvailability": {
              "description": "A high_availability block as defined below.",
              "type": "object",
              "properties": {
                "mode": {
                  "description": "The high availability mode for the MySQL Flexible Server. Possibles values are SameZone and ZoneRedundant.",
                  "type": "string"
                },
                "standbyAvailabilityZone": {
                  "description": "Specifies the Availability Zone in which the standby Flexible Server should be located. Possible values are 1, 2 and 3.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "id": {
              "description": "The ID of the MySQL Flexible Server.",
              "type": "string"
            },
            "identity": {
              "description": "An identity block as defined below.",
              "type": "object",
              "properties": {
                "identityIds": {
                  "description": "A list of User Assigned Managed Identity IDs to be assigned to this MySQL Flexible Server.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "x-kubernetes-list-type": "set"
                },
                "type": {
                  "description": "Specifies the type of Managed Service Identity that should be configured on this MySQL Flexible Server. The only possible value is UserAssigned.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "location": {
              "description": "The Azure Region where the MySQL Flexible Server should exist. Changing this forces a new MySQL Flexible Server to be created.",
              "type": "string"
            },
            "maintenanceWindow": {
              "description": "A maintenance_window block as defined below.",
              "type": "object",
              "properties": {
                "dayOfWeek": {
                  "description": "The day of week for maintenance window. Defaults to 0.",
                  "type": "number"
                },
                "startHour": {
                  "description": "The start hour for maintenance window. Defaults to 0.",
                  "type": "number"
                },
                "startMinute": {
                  "description": "The start minute for maintenance window. Defaults to 0.",
                  "type": "number"
                }
              },
              "additionalProperties": false
            },
            "pointInTimeRestoreTimeInUtc": {
              "description": "The point in time to restore from creation_source_server_id when create_mode is PointInTimeRestore. Changing this forces a new MySQL Flexible Server to be created.",
              "type": "string"
            },
            "privateDnsZoneId": {
              "description": "The ID of the private DNS zone to create the MySQL Flexible Server. Changing this forces a new MySQL Flexible Server to be created.",
              "type": "string"
            },
            "publicNetworkAccess": {
              "description": "Whether approved public traffic is allowed through the firewall to this server. Possible values are Enabled and Disabled.",
              "type": "string"
            },
            "publicNetworkAccessEnabled": {
              "type": "boolean"
            },
            "replicaCapacity": {
              "description": "The maximum number of replicas that a primary MySQL Flexible Server can have.",
              "type": "number"
            },
            "replicationRole": {
              "description": "The replication role. Possible value is None.",
              "type": "string"
            },
            "resourceGroupName": {
              "description": "The name of the Resource Group where the MySQL Flexible Server should exist. Changing this forces a new MySQL Flexible Server to be created.",
              "type": "string"
            },
            "skuName": {
              "description": "The SKU Name for the MySQL Flexible Server.",
              "type": "string"
            },
            "sourceServerId": {
              "description": "The resource ID of the source MySQL Flexible Server to be restored. Required when create_mode is PointInTimeRestore, GeoRestore, and Replica. Changing this forces a new MySQL Flexible Server to be created.",
              "type": "string"
            },
            "storage": {
              "description": "A storage block as defined below.",
              "type": "object",
              "properties": {
                "autoGrowEnabled": {
                  "description": "Should Storage Auto Grow be enabled? Defaults to true.",
                  "type": "boolean"
                },
                "ioScalingEnabled": {
                  "description": "Should IOPS be scaled automatically? If true, iops can not be set. Defaults to false.",
                  "type": "boolean"
                },
                "iops": {
                  "description": "The storage IOPS for the MySQL Flexible Server. Possible values are between 360 and 20000.",
                  "type": "number"
                },
                "logOnDiskEnabled": {
                  "description": "Should Storage Log On Disk be enabled? Defaults to false.",
                  "type": "boolean"
                },
                "sizeGb": {
                  "description": "The max storage allowed for the MySQL Flexible Server. Possible values are between 20 and 16384.",
                  "type": "number"
                }
              },
              "additionalProperties": false
            },
            "tags": {
              "description": "A mapping of tags which should be assigned to the MySQL Flexible Server.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "version": {
              "description": "The version of the MySQL Flexible Server to use. Possible values are 5.7, and 8.0.21.",
              "type": "string"
            },
            "zone": {
              "description": "Specifies the Availability Zone in which this MySQL Flexible Server should be located. Possible values are 1, 2 and 3.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "type": "array",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one\nstatus to another.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from\none status to another, if any.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to\na resource at any point in time.",
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest metadata.generation\nwhich resulted in either a ready state, or stalled due to error\nit can not recover from without human intervention.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    }
  }
}
