{
  "description": "DataprocJob is the Schema for the DataprocJob API",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "DataprocJobSpec defines the desired state of DataprocJob",
      "type": "object",
      "properties": {
        "driverSchedulingConfig": {
          "description": "Optional. Driver scheduling configuration.",
          "type": "object",
          "properties": {
            "memoryMb": {
              "description": "Required. The amount of memory in MB the driver is requesting.",
              "type": "integer",
              "format": "int32"
            },
            "vcores": {
              "description": "Required. The number of vCPUs the driver is requesting.",
              "type": "integer",
              "format": "int32"
            }
          },
          "additionalProperties": false
        },
        "flinkJob": {
          "description": "Optional. Job is a Flink job.",
          "type": "object",
          "properties": {
            "args": {
              "description": "Optional. The arguments to pass to the driver. Do not include arguments, such as `--conf`, that can be set as job properties, since a collision might occur that causes an incorrect job submission.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "jarFileURIs": {
              "description": "Optional. HCFS URIs of jar files to add to the CLASSPATHs of the Flink driver and tasks.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "loggingConfig": {
              "description": "Optional. The runtime log config for job execution.",
              "type": "object"
            },
            "mainClass": {
              "description": "The name of the driver's main class. The jar file that contains the class must be in the default CLASSPATH or specified in [jarFileUris][google.cloud.dataproc.v1.FlinkJob.jar_file_uris].",
              "type": "string"
            },
            "mainJarFileURI": {
              "description": "The HCFS URI of the jar file that contains the main class.",
              "type": "string"
            },
            "properties": {
              "description": "Optional. A mapping of property names to values, used to configure Flink. Properties that conflict with values set by the Dataproc API might be overwritten. Can include properties set in `/etc/flink/conf/flink-defaults.conf` and classes in user code.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "savepointURI": {
              "description": "Optional. HCFS URI of the savepoint, which contains the last saved progress for starting the current job.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "hadoopJob": {
          "description": "Optional. Job is a Hadoop job.",
          "type": "object",
          "properties": {
            "archiveURIs": {
              "description": "Optional. HCFS URIs of archives to be extracted in the working directory of Hadoop drivers and tasks. Supported file types: .jar, .tar, .tar.gz, .tgz, or .zip.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "args": {
              "description": "Optional. The arguments to pass to the driver. Do not include arguments, such as `-libjars` or `-Dfoo=bar`, that can be set as job properties, since a collision might occur that causes an incorrect job submission.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "fileURIs": {
              "description": "Optional. HCFS (Hadoop Compatible Filesystem) URIs of files to be copied to the working directory of Hadoop drivers and distributed tasks. Useful for naively parallel tasks.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "jarFileURIs": {
              "description": "Optional. Jar file URIs to add to the CLASSPATHs of the Hadoop driver and tasks.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "loggingConfig": {
              "description": "Optional. The runtime log config for job execution.",
              "type": "object"
            },
            "mainClass": {
              "description": "The name of the driver's main class. The jar file containing the class must be in the default CLASSPATH or specified in `jar_file_uris`.",
              "type": "string"
            },
            "mainJarFileURI": {
              "description": "The HCFS URI of the jar file containing the main class. Examples: 'gs://foo-bucket/analytics-binaries/extract-useful-metrics-mr.jar' 'hdfs:/tmp/test-samples/custom-wordcount.jar' 'file:///home/usr/lib/hadoop-mapreduce/hadoop-mapreduce-examples.jar'",
              "type": "string"
            },
            "properties": {
              "description": "Optional. A mapping of property names to values, used to configure Hadoop. Properties that conflict with values set by the Dataproc API might be overwritten. Can include properties set in `/etc/hadoop/conf/*-site` and classes in user code.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false
        },
        "hiveJob": {
          "description": "Optional. Job is a Hive job.",
          "type": "object",
          "properties": {
            "continueOnFailure": {
              "description": "Optional. Whether to continue executing queries if a query fails. The default value is `false`. Setting to `true` can be useful when executing independent parallel queries.",
              "type": "boolean"
            },
            "jarFileURIs": {
              "description": "Optional. HCFS URIs of jar files to add to the CLASSPATH of the Hive server and Hadoop MapReduce (MR) tasks. Can contain Hive SerDes and UDFs.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "properties": {
              "description": "Optional. A mapping of property names and values, used to configure Hive. Properties that conflict with values set by the Dataproc API might be overwritten. Can include properties set in `/etc/hadoop/conf/*-site.xml`, /etc/hive/conf/hive-site.xml, and classes in user code.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "queryFileURI": {
              "description": "The HCFS URI of the script that contains Hive queries.",
              "type": "string"
            },
            "queryList": {
              "description": "A list of queries.",
              "type": "object",
              "properties": {
                "queries": {
                  "description": "Required. The queries to execute. You do not need to end a query expression\n with a semicolon. Multiple queries can be specified in one\n string by separating each with a semicolon. Here is an example of a\n Dataproc API snippet that uses a QueryList to specify a HiveJob:\n\n     \"hiveJob\": {\n       \"queryList\": {\n         \"queries\": [\n           \"query1\",\n           \"query2\",\n           \"query3;query4\",\n         ]\n       }\n     }",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "additionalProperties": false
            },
            "scriptVariables": {
              "description": "Optional. Mapping of query variable names to values (equivalent to the Hive command: `SET name=\"value\";`).",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false
        },
        "labels": {
          "description": "Optional. The labels to associate with this job. Label **keys** must contain 1 to 63 characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). Label **values** can be empty, but, if present, must contain 1 to 63 characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a job.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "parent": {
          "description": "Required.",
          "type": "object",
          "properties": {
            "location": {
              "description": "Required.",
              "type": "string"
            },
            "projectRef": {
              "description": "Required.",
              "type": "object",
              "oneOf": [
                {
                  "required": [
                    "name"
                  ],
                  "not": {
                    "required": [
                      "external"
                    ]
                  }
                },
                {
                  "required": [
                    "external"
                  ],
                  "not": {
                    "anyOf": [
                      {
                        "required": [
                          "name"
                        ]
                      },
                      {
                        "required": [
                          "namespace"
                        ]
                      }
                    ]
                  }
                }
              ],
              "properties": {
                "external": {
                  "description": "The `projectID` field of a project, when not managed by Config Connector.",
                  "type": "string"
                },
                "kind": {
                  "description": "The kind of the Project resource; optional but must be `Project` if provided.",
                  "type": "string"
                },
                "name": {
                  "description": "The `name` field of a `Project` resource.",
                  "type": "string"
                },
                "namespace": {
                  "description": "The `namespace` field of a `Project` resource.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "pigJob": {
          "description": "Optional. Job is a Pig job.",
          "type": "object",
          "properties": {
            "continueOnFailure": {
              "description": "Optional. Whether to continue executing queries if a query fails. The default value is `false`. Setting to `true` can be useful when executing independent parallel queries.",
              "type": "boolean"
            },
            "jarFileURIs": {
              "description": "Optional. HCFS URIs of jar files to add to the CLASSPATH of the Pig Client and Hadoop MapReduce (MR) tasks. Can contain Pig UDFs.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "loggingConfig": {
              "description": "Optional. The runtime log config for job execution.",
              "type": "object"
            },
            "properties": {
              "description": "Optional. A mapping of property names to values, used to configure Pig. Properties that conflict with values set by the Dataproc API might be overwritten. Can include properties set in `/etc/hadoop/conf/*-site.xml`, /etc/pig/conf/pig.properties, and classes in user code.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "queryFileURI": {
              "description": "The HCFS URI of the script that contains the Pig queries.",
              "type": "string"
            },
            "queryList": {
              "description": "A list of queries.",
              "type": "object",
              "properties": {
                "queries": {
                  "description": "Required. The queries to execute. You do not need to end a query expression\n with a semicolon. Multiple queries can be specified in one\n string by separating each with a semicolon. Here is an example of a\n Dataproc API snippet that uses a QueryList to specify a HiveJob:\n\n     \"hiveJob\": {\n       \"queryList\": {\n         \"queries\": [\n           \"query1\",\n           \"query2\",\n           \"query3;query4\",\n         ]\n       }\n     }",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "additionalProperties": false
            },
            "scriptVariables": {
              "description": "Optional. Mapping of query variable names to values (equivalent to the Pig command: `name=[value]`).",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false
        },
        "placement": {
          "description": "Required. Job information, including how, when, and where to run the job.",
          "type": "object",
          "properties": {
            "clusterLabels": {
              "description": "Optional. Cluster labels to identify a cluster where the job will be submitted.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "clusterName": {
              "description": "Required. The name of the cluster where the job will be submitted.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "prestoJob": {
          "description": "Optional. Job is a Presto job.",
          "type": "object",
          "properties": {
            "clientTags": {
              "description": "Optional. Presto client tags to attach to this query",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "continueOnFailure": {
              "description": "Optional. Whether to continue executing queries if a query fails. The default value is `false`. Setting to `true` can be useful when executing independent parallel queries.",
              "type": "boolean"
            },
            "loggingConfig": {
              "description": "Optional. The runtime log config for job execution.",
              "type": "object"
            },
            "outputFormat": {
              "description": "Optional. The format in which query output will be displayed. See the Presto documentation for supported output formats",
              "type": "string"
            },
            "properties": {
              "description": "Optional. A mapping of property names to values. Used to set Presto [session properties](https://prestodb.io/docs/current/sql/set-session.html) Equivalent to using the --session flag in the Presto CLI",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "queryFileURI": {
              "description": "The HCFS URI of the script that contains SQL queries.",
              "type": "string"
            },
            "queryList": {
              "description": "A list of queries.",
              "type": "object",
              "properties": {
                "queries": {
                  "description": "Required. The queries to execute. You do not need to end a query expression\n with a semicolon. Multiple queries can be specified in one\n string by separating each with a semicolon. Here is an example of a\n Dataproc API snippet that uses a QueryList to specify a HiveJob:\n\n     \"hiveJob\": {\n       \"queryList\": {\n         \"queries\": [\n           \"query1\",\n           \"query2\",\n           \"query3;query4\",\n         ]\n       }\n     }",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "pysparkJob": {
          "description": "Optional. Job is a PySpark job.",
          "type": "object",
          "properties": {
            "archiveURIs": {
              "description": "Optional. HCFS URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "args": {
              "description": "Optional. The arguments to pass to the driver.  Do not include arguments, such as `--conf`, that can be set as job properties, since a collision may occur that causes an incorrect job submission.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "fileURIs": {
              "description": "Optional. HCFS URIs of files to be placed in the working directory of each executor. Useful for naively parallel tasks.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "jarFileURIs": {
              "description": "Optional. HCFS URIs of jar files to add to the CLASSPATHs of the Python driver and tasks.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "loggingConfig": {
              "description": "Optional. The runtime log config for job execution.",
              "type": "object"
            },
            "mainPythonFileURI": {
              "description": "Required. The HCFS URI of the main Python file to use as the driver. Must be a .py file.",
              "type": "string"
            },
            "properties": {
              "description": "Optional. A mapping of property names to values, used to configure PySpark. Properties that conflict with values set by the Dataproc API might be overwritten. Can include properties set in /etc/spark/conf/spark-defaults.conf and classes in user code.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "pythonFileURIs": {
              "description": "Optional. HCFS file URIs of Python files to pass to the PySpark framework. Supported file types: .py, .egg, and .zip.",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false
        },
        "reference": {
          "description": "Optional. The fully qualified reference to the job, which can be used to obtain the equivalent REST path of the job resource. If this property is not specified when a job is created, the server generates a \u003ccode\u003ejob_id\u003c/code\u003e.",
          "type": "object",
          "properties": {
            "jobID": {
              "description": "Optional. The job ID, which must be unique within the project.\n\n The ID must contain only letters (a-z, A-Z), numbers (0-9),\n underscores (_), or hyphens (-). The maximum length is 100 characters.\n\n If not specified by the caller, the job ID will be provided by the server.",
              "type": "string"
            },
            "projectID": {
              "description": "Optional. The ID of the Google Cloud Platform project that the job belongs to. If specified, must match the request project ID.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "resourceID": {
          "description": "The DataprocJob name. If not given, the metadata.name will be used.",
          "type": "string"
        },
        "scheduling": {
          "description": "Optional. Job scheduling configuration.",
          "type": "object",
          "properties": {
            "maxFailuresPerHour": {
              "description": "Optional. Maximum number of times per hour a driver can be restarted as\n a result of driver exiting with non-zero code before job is\n reported failed.\n\n A job might be reported as thrashing if the driver exits with a non-zero\n code four times within a 10-minute window.\n\n Maximum value is 10.\n\n **Note:** This restartable job option is not supported in Dataproc\n [workflow templates]\n (https://cloud.google.com/dataproc/docs/concepts/workflows/using-workflows#adding_jobs_to_a_template).",
              "type": "integer",
              "format": "int32"
            },
            "maxFailuresTotal": {
              "description": "Optional. Maximum total number of times a driver can be restarted as a\n result of the driver exiting with a non-zero code. After the maximum number\n is reached, the job will be reported as failed.\n\n Maximum value is 240.\n\n **Note:** Currently, this restartable job option is\n not supported in Dataproc\n [workflow\n templates](https://cloud.google.com/dataproc/docs/concepts/workflows/using-workflows#adding_jobs_to_a_template).",
              "type": "integer",
              "format": "int32"
            }
          },
          "additionalProperties": false
        },
        "sparkJob": {
          "description": "Optional. Job is a Spark job.",
          "type": "object",
          "properties": {
            "archiveURIs": {
              "description": "Optional. HCFS URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "args": {
              "description": "Optional. The arguments to pass to the driver. Do not include arguments, such as `--conf`, that can be set as job properties, since a collision may occur that causes an incorrect job submission.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "fileURIs": {
              "description": "Optional. HCFS URIs of files to be placed in the working directory of each executor. Useful for naively parallel tasks.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "jarFileURIs": {
              "description": "Optional. HCFS URIs of jar files to add to the CLASSPATHs of the Spark driver and tasks.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "loggingConfig": {
              "description": "Optional. The runtime log config for job execution.",
              "type": "object"
            },
            "mainClass": {
              "description": "The name of the driver's main class. The jar file that contains the class must be in the default CLASSPATH or specified in SparkJob.jar_file_uris.",
              "type": "string"
            },
            "mainJarFileURI": {
              "description": "The HCFS URI of the jar file that contains the main class.",
              "type": "string"
            },
            "properties": {
              "description": "Optional. A mapping of property names to values, used to configure Spark. Properties that conflict with values set by the Dataproc API might be overwritten. Can include properties set in /etc/spark/conf/spark-defaults.conf and classes in user code.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false
        },
        "sparkRJob": {
          "description": "Optional. Job is a SparkR job.",
          "type": "object",
          "properties": {
            "archiveURIs": {
              "description": "Optional. HCFS URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "args": {
              "description": "Optional. The arguments to pass to the driver.  Do not include arguments, such as `--conf`, that can be set as job properties, since a collision may occur that causes an incorrect job submission.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "fileURIs": {
              "description": "Optional. HCFS URIs of files to be placed in the working directory of each executor. Useful for naively parallel tasks.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "loggingConfig": {
              "description": "Optional. The runtime log config for job execution.",
              "type": "object"
            },
            "mainRFileURI": {
              "description": "Required. The HCFS URI of the main R file to use as the driver. Must be a .R file.",
              "type": "string"
            },
            "properties": {
              "description": "Optional. A mapping of property names to values, used to configure SparkR. Properties that conflict with values set by the Dataproc API might be overwritten. Can include properties set in /etc/spark/conf/spark-defaults.conf and classes in user code.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false
        },
        "sparkSQLJob": {
          "description": "Optional. Job is a SparkSql job.",
          "type": "object",
          "properties": {
            "jarFileURIs": {
              "description": "Optional. HCFS URIs of jar files to be added to the Spark CLASSPATH.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "loggingConfig": {
              "description": "Optional. The runtime log config for job execution.",
              "type": "object"
            },
            "properties": {
              "description": "Optional. A mapping of property names to values, used to configure Spark SQL's SparkConf. Properties that conflict with values set by the Dataproc API might be overwritten.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "queryFileURI": {
              "description": "The HCFS URI of the script that contains SQL queries.",
              "type": "string"
            },
            "queryList": {
              "description": "A list of queries.",
              "type": "object",
              "properties": {
                "queries": {
                  "description": "Required. The queries to execute. You do not need to end a query expression\n with a semicolon. Multiple queries can be specified in one\n string by separating each with a semicolon. Here is an example of a\n Dataproc API snippet that uses a QueryList to specify a HiveJob:\n\n     \"hiveJob\": {\n       \"queryList\": {\n         \"queries\": [\n           \"query1\",\n           \"query2\",\n           \"query3;query4\",\n         ]\n       }\n     }",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "additionalProperties": false
            },
            "scriptVariables": {
              "description": "Optional. Mapping of query variable names to values (equivalent to the Spark SQL command: SET `name=\"value\";`).",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false
        },
        "trinoJob": {
          "description": "Optional. Job is a Trino job.",
          "type": "object",
          "properties": {
            "clientTags": {
              "description": "Optional. Trino client tags to attach to this query",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "continueOnFailure": {
              "description": "Optional. Whether to continue executing queries if a query fails. The default value is `false`. Setting to `true` can be useful when executing independent parallel queries.",
              "type": "boolean"
            },
            "loggingConfig": {
              "description": "Optional. The runtime log config for job execution.",
              "type": "object"
            },
            "outputFormat": {
              "description": "Optional. The format in which query output will be displayed. See the Trino documentation for supported output formats",
              "type": "string"
            },
            "properties": {
              "description": "Optional. A mapping of property names to values. Used to set Trino [session properties](https://trino.io/docs/current/sql/set-session.html) Equivalent to using the --session flag in the Trino CLI",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "queryFileURI": {
              "description": "The HCFS URI of the script that contains SQL queries.",
              "type": "string"
            },
            "queryList": {
              "description": "A list of queries.",
              "type": "object",
              "properties": {
                "queries": {
                  "description": "Required. The queries to execute. You do not need to end a query expression\n with a semicolon. Multiple queries can be specified in one\n string by separating each with a semicolon. Here is an example of a\n Dataproc API snippet that uses a QueryList to specify a HiveJob:\n\n     \"hiveJob\": {\n       \"queryList\": {\n         \"queries\": [\n           \"query1\",\n           \"query2\",\n           \"query3;query4\",\n         ]\n       }\n     }",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "DataprocJobStatus defines the config connector machine state of DataprocJob",
      "type": "object",
      "properties": {
        "conditions": {
          "description": "Conditions represent the latest available observations of the object's current state.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "lastTransitionTime": {
                "description": "Last time the condition transitioned from one status to another.",
                "type": "string"
              },
              "message": {
                "description": "Human-readable message indicating details about last transition.",
                "type": "string"
              },
              "reason": {
                "description": "Unique, one-word, CamelCase reason for the condition's last transition.",
                "type": "string"
              },
              "status": {
                "description": "Status is the status of the condition. Can be True, False, Unknown.",
                "type": "string"
              },
              "type": {
                "description": "Type is the type of the condition.",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "externalRef": {
          "description": "A unique specifier for the DataprocJob resource in GCP.",
          "type": "string"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.",
          "type": "integer",
          "format": "int64"
        },
        "observedState": {
          "description": "ObservedState is the state of the resource as most recently observed in GCP.",
          "type": "object",
          "properties": {
            "done": {
              "description": "Output only. Indicates whether the job is completed. If the value is `false`, the job is still in progress. If `true`, the job is completed, and `status.state` field will indicate if it was successful, failed, or cancelled.",
              "type": "boolean"
            },
            "driverControlFilesURI": {
              "description": "Output only. If present, the location of miscellaneous control files which can be used as part of job setup and handling. If not present, control files might be placed in the same location as `driver_output_uri`.",
              "type": "string"
            },
            "driverOutputResourceURI": {
              "description": "Output only. A URI pointing to the location of the stdout of the job's driver program.",
              "type": "string"
            },
            "jobUUid": {
              "description": "Output only. A UUID that uniquely identifies a job within the project over time. This is in contrast to a user-settable reference.job_id that might be reused over time.",
              "type": "string"
            },
            "placement": {
              "description": "Required. Job information, including how, when, and where to run the job.",
              "type": "object",
              "properties": {
                "clusterUuid": {
                  "description": "Output only. A cluster UUID generated by the Dataproc service when the job is submitted.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "status": {
              "description": "Output only. The job status. Additional application-specific status information might be contained in the \u003ccode\u003etype_job\u003c/code\u003e and \u003ccode\u003eyarn_applications\u003c/code\u003e fields.",
              "type": "object",
              "properties": {
                "details": {
                  "description": "Optional. Output only. Job state details, such as an error description if the state is `ERROR`.",
                  "type": "string"
                },
                "state": {
                  "description": "Output only. A state message specifying the overall job state.",
                  "type": "string"
                },
                "stateStartTime": {
                  "description": "Output only. The time when this state was entered.",
                  "type": "string"
                },
                "substate": {
                  "description": "Output only. Additional state information, which includes status reported by the agent.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "statusHistory": {
              "description": "Output only. The previous job status.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "details": {
                    "description": "Optional. Output only. Job state details, such as an error description if the state is `ERROR`.",
                    "type": "string"
                  },
                  "state": {
                    "description": "Output only. A state message specifying the overall job state.",
                    "type": "string"
                  },
                  "stateStartTime": {
                    "description": "Output only. The time when this state was entered.",
                    "type": "string"
                  },
                  "substate": {
                    "description": "Output only. Additional state information, which includes status reported by the agent.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "yarnApplications": {
              "description": "Output only. The collection of YARN applications spun up by this job.\n\n **Beta** Feature: This report is available for testing purposes only. It\n might be changed before final release.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Required. The application name.",
                    "type": "string"
                  },
                  "progress": {
                    "description": "Required. The numerical progress of the application, from 1 to 100.",
                    "type": "number"
                  },
                  "state": {
                    "description": "Required. The application state.",
                    "type": "string"
                  },
                  "trackingURL": {
                    "description": "Optional. The HTTP URL of the ApplicationMaster, HistoryServer, or TimelineServer that provides application-specific information. The URL uses the internal hostname, and requires a proxy server for resolution and, possibly, access.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  }
}
