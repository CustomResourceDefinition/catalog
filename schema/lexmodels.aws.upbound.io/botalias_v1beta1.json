{
  "description": "BotAlias is the Schema for the BotAliass API. Provides an Amazon Lex Bot Alias resource.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "BotAliasSpec defines the desired state of BotAlias",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "deletionPolicy": {
          "description": "DeletionPolicy specifies what will happen to the underlying external\nwhen this managed resource is deleted - either \"Delete\" or \"Orphan\" the\nexternal resource.\nThis field is planned to be deprecated in favor of the ManagementPolicies\nfield in a future release. Currently, both could be set independently and\nnon-default values would be honored if the feature flag is enabled.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "type": "string",
          "default": "Delete",
          "enum": [
            "Orphan",
            "Delete"
          ]
        },
        "forProvider": {
          "type": "object",
          "required": [
            "region"
          ],
          "properties": {
            "botName": {
              "description": "The name of the bot.",
              "type": "string"
            },
            "botVersion": {
              "description": "The version of the bot.",
              "type": "string"
            },
            "conversationLogs": {
              "description": "The settings that determine how Amazon Lex uses conversation logs for the alias. Attributes are documented under conversation_logs.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "iamRoleArn": {
                    "description": "The Amazon Resource Name (ARN) of the IAM role used to write your logs to CloudWatch Logs or an S3 bucket. Must be between 20 and 2048 characters in length.",
                    "type": "string"
                  },
                  "logSettings": {
                    "description": "The settings for your conversation logs. You can log text, audio, or both. Attributes are documented under log_settings.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "destination": {
                          "description": "The destination where logs are delivered. Options are CLOUDWATCH_LOGS or S3.",
                          "type": "string"
                        },
                        "kmsKeyArn": {
                          "description": "The Amazon Resource Name (ARN) of the key used to encrypt audio logs in an S3 bucket. This can only be specified when destination is set to S3. Must be between 20 and 2048 characters in length.",
                          "type": "string"
                        },
                        "logType": {
                          "description": "The type of logging that is enabled. Options are AUDIO or TEXT.",
                          "type": "string"
                        },
                        "resourceArn": {
                          "description": "The Amazon Resource Name (ARN) of the CloudWatch Logs log group or S3 bucket where the logs are delivered. Must be less than or equal to 2048 characters in length.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "description": {
              "description": "A description of the alias. Must be less than or equal to 200 characters in length.",
              "type": "string"
            },
            "region": {
              "description": "Region where this resource will be managed. Defaults to the Region set in the provider configuration.\nRegion is the region you'd like your resource to be created in.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored\nunless the Management Policies feature flag is disabled.\nInitProvider holds the same fields as ForProvider, with the exception\nof Identifier and other resource reference fields. The fields that are\nin InitProvider are merged into ForProvider when the resource is created.\nThe same fields are also added to the terraform ignore_changes hook, to\navoid updating them after creation. This is useful for fields that are\nrequired on creation, but we do not desire to update them after creation,\nfor example because of an external controller is managing them, like an\nautoscaler.",
          "type": "object",
          "properties": {
            "botName": {
              "description": "The name of the bot.",
              "type": "string"
            },
            "botVersion": {
              "description": "The version of the bot.",
              "type": "string"
            },
            "conversationLogs": {
              "description": "The settings that determine how Amazon Lex uses conversation logs for the alias. Attributes are documented under conversation_logs.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "iamRoleArn": {
                    "description": "The Amazon Resource Name (ARN) of the IAM role used to write your logs to CloudWatch Logs or an S3 bucket. Must be between 20 and 2048 characters in length.",
                    "type": "string"
                  },
                  "logSettings": {
                    "description": "The settings for your conversation logs. You can log text, audio, or both. Attributes are documented under log_settings.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "destination": {
                          "description": "The destination where logs are delivered. Options are CLOUDWATCH_LOGS or S3.",
                          "type": "string"
                        },
                        "kmsKeyArn": {
                          "description": "The Amazon Resource Name (ARN) of the key used to encrypt audio logs in an S3 bucket. This can only be specified when destination is set to S3. Must be between 20 and 2048 characters in length.",
                          "type": "string"
                        },
                        "logType": {
                          "description": "The type of logging that is enabled. Options are AUDIO or TEXT.",
                          "type": "string"
                        },
                        "resourceArn": {
                          "description": "The Amazon Resource Name (ARN) of the CloudWatch Logs log group or S3 bucket where the logs are delivered. Must be less than or equal to 2048 characters in length.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "description": {
              "description": "A description of the alias. Must be less than or equal to 200 characters in length.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "managementPolicies": {
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out\nthrough a Crossplane feature flag.\nManagementPolicies specify the array of actions Crossplane is allowed to\ntake on the managed and external resources.\nThis field is planned to replace the DeletionPolicy field in a future\nrelease. Currently, both could be set independently and non-default\nvalues would be honored if the feature flag is enabled. If both are\ncustom, the DeletionPolicy field will be ignored.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223\nand this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers\ncan take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to\ncreate, observe, update, and delete this managed resource should be\nconfigured.",
          "type": "object",
          "default": {
            "name": "default"
          },
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "type": "object",
              "properties": {
                "resolution": {
                  "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                  "type": "string",
                  "default": "Required",
                  "enum": [
                    "Required",
                    "Optional"
                  ]
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                  "type": "string",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a\nSecret to which any connection details for this managed resource should\nbe written. Connection details frequently include the endpoint, username,\nand password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name",
            "namespace"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false,
      "x-kubernetes-validations": [
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.botName) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.botName))",
          "message": "spec.forProvider.botName is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.botVersion) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.botVersion))",
          "message": "spec.forProvider.botVersion is a required parameter"
        }
      ]
    },
    "status": {
      "description": "BotAliasStatus defines the observed state of BotAlias.",
      "type": "object",
      "properties": {
        "atProvider": {
          "type": "object",
          "properties": {
            "arn": {
              "description": "The ARN of the bot alias.",
              "type": "string"
            },
            "botName": {
              "description": "The name of the bot.",
              "type": "string"
            },
            "botVersion": {
              "description": "The version of the bot.",
              "type": "string"
            },
            "checksum": {
              "description": "Checksum of the bot alias.",
              "type": "string"
            },
            "conversationLogs": {
              "description": "The settings that determine how Amazon Lex uses conversation logs for the alias. Attributes are documented under conversation_logs.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "iamRoleArn": {
                    "description": "The Amazon Resource Name (ARN) of the IAM role used to write your logs to CloudWatch Logs or an S3 bucket. Must be between 20 and 2048 characters in length.",
                    "type": "string"
                  },
                  "logSettings": {
                    "description": "The settings for your conversation logs. You can log text, audio, or both. Attributes are documented under log_settings.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "destination": {
                          "description": "The destination where logs are delivered. Options are CLOUDWATCH_LOGS or S3.",
                          "type": "string"
                        },
                        "kmsKeyArn": {
                          "description": "The Amazon Resource Name (ARN) of the key used to encrypt audio logs in an S3 bucket. This can only be specified when destination is set to S3. Must be between 20 and 2048 characters in length.",
                          "type": "string"
                        },
                        "logType": {
                          "description": "The type of logging that is enabled. Options are AUDIO or TEXT.",
                          "type": "string"
                        },
                        "resourceArn": {
                          "description": "The Amazon Resource Name (ARN) of the CloudWatch Logs log group or S3 bucket where the logs are delivered. Must be less than or equal to 2048 characters in length.",
                          "type": "string"
                        },
                        "resourcePrefix": {
                          "description": "(Computed) The prefix of the S3 object key for AUDIO logs or the log stream name for TEXT logs.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "createdDate": {
              "description": "The date that the bot alias was created.",
              "type": "string"
            },
            "description": {
              "description": "A description of the alias. Must be less than or equal to 200 characters in length.",
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "lastUpdatedDate": {
              "description": "The date that the bot alias was updated. When you create a resource, the creation date and the last updated date are the same.",
              "type": "string"
            },
            "region": {
              "description": "Region where this resource will be managed. Defaults to the Region set in the provider configuration.\nRegion is the region you'd like your resource to be created in.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "type": "array",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one\nstatus to another.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from\none status to another, if any.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to\na resource at any point in time.",
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest metadata.generation\nwhich resulted in either a ready state, or stalled due to error\nit can not recover from without human intervention.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    }
  }
}
