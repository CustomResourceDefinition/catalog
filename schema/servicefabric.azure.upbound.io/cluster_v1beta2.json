{
  "description": "Cluster is the Schema for the Clusters API. Manages a Service Fabric Cluster.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "ClusterSpec defines the desired state of Cluster",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "deletionPolicy": {
          "description": "DeletionPolicy specifies what will happen to the underlying external\nwhen this managed resource is deleted - either \"Delete\" or \"Orphan\" the\nexternal resource.\nThis field is planned to be deprecated in favor of the ManagementPolicies\nfield in a future release. Currently, both could be set independently and\nnon-default values would be honored if the feature flag is enabled.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "type": "string",
          "default": "Delete",
          "enum": [
            "Orphan",
            "Delete"
          ]
        },
        "forProvider": {
          "type": "object",
          "properties": {
            "addOnFeatures": {
              "description": "A List of one or more features which should be enabled, such as DnsService.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-kubernetes-list-type": "set"
            },
            "azureActiveDirectory": {
              "description": "An azure_active_directory block as defined below.",
              "type": "object",
              "properties": {
                "clientApplicationId": {
                  "description": "The Azure Active Directory Client ID which should be used for the Client Application.",
                  "type": "string"
                },
                "clusterApplicationId": {
                  "description": "The Azure Active Directory Cluster Application ID.",
                  "type": "string"
                },
                "tenantId": {
                  "description": "The Azure Active Directory Tenant ID.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "certificate": {
              "description": "A certificate block as defined below. Conflicts with certificate_common_names.",
              "type": "object",
              "properties": {
                "thumbprint": {
                  "description": "The Thumbprint of the Certificate.",
                  "type": "string"
                },
                "thumbprintSecondary": {
                  "description": "The Secondary Thumbprint of the Certificate.",
                  "type": "string"
                },
                "x509StoreName": {
                  "description": "The X509 Store where the Certificate Exists, such as My.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "certificateCommonNames": {
              "description": "A certificate_common_names block as defined below. Conflicts with certificate.",
              "type": "object",
              "properties": {
                "commonNames": {
                  "description": "A common_names block as defined below.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "certificateCommonName": {
                        "description": "The common or subject name of the certificate.",
                        "type": "string"
                      },
                      "certificateIssuerThumbprint": {
                        "description": "The Issuer Thumbprint of the Certificate.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "x509StoreName": {
                  "description": "The X509 Store where the Certificate Exists, such as My.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "clientCertificateCommonName": {
              "description": "A client_certificate_common_name block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "commonName": {
                    "description": "The common or subject name of the certificate.",
                    "type": "string"
                  },
                  "isAdmin": {
                    "description": "Does the Client Certificate have Admin Access to the cluster? Non-admin clients can only perform read only operations on the cluster.",
                    "type": "boolean"
                  },
                  "issuerThumbprint": {
                    "description": "The Issuer Thumbprint of the Certificate.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "clientCertificateThumbprint": {
              "description": "One or more client_certificate_thumbprint blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "isAdmin": {
                    "description": "Does the Client Certificate have Admin Access to the cluster? Non-admin clients can only perform read only operations on the cluster.",
                    "type": "boolean"
                  },
                  "thumbprint": {
                    "description": "The Thumbprint associated with the Client Certificate.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "clusterCodeVersion": {
              "description": "Required if Upgrade Mode set to Manual, Specifies the Version of the Cluster Code of the cluster.",
              "type": "string"
            },
            "diagnosticsConfig": {
              "description": "A diagnostics_config block as defined below.",
              "type": "object",
              "properties": {
                "blobEndpoint": {
                  "description": "The Blob Endpoint of the Storage Account.",
                  "type": "string"
                },
                "protectedAccountKeyName": {
                  "description": "The protected diagnostics storage key name, such as StorageAccountKey1.",
                  "type": "string"
                },
                "queueEndpoint": {
                  "description": "The Queue Endpoint of the Storage Account.",
                  "type": "string"
                },
                "storageAccountName": {
                  "description": "The name of the Storage Account where the Diagnostics should be sent to.",
                  "type": "string"
                },
                "tableEndpoint": {
                  "description": "The Table Endpoint of the Storage Account.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "fabricSettings": {
              "description": "One or more fabric_settings blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "The name of the Fabric Setting, such as Security or Federation.",
                    "type": "string"
                  },
                  "parameters": {
                    "description": "A map containing settings for the specified Fabric Setting.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "x-kubernetes-map-type": "granular"
                  }
                },
                "additionalProperties": false
              }
            },
            "location": {
              "description": "Specifies the Azure Region where the Service Fabric Cluster should exist. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "managementEndpoint": {
              "description": "Specifies the Management Endpoint of the cluster such as http://example.com. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "nodeType": {
              "description": "One or more node_type blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "applicationPorts": {
                    "description": "A application_ports block as defined below.",
                    "type": "object",
                    "properties": {
                      "endPort": {
                        "description": "The end of the Ephemeral Port Range on this Node Type.",
                        "type": "number"
                      },
                      "startPort": {
                        "description": "The start of the Ephemeral Port Range on this Node Type.",
                        "type": "number"
                      }
                    },
                    "additionalProperties": false
                  },
                  "capacities": {
                    "description": "The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much resource a node has.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "x-kubernetes-map-type": "granular"
                  },
                  "clientEndpointPort": {
                    "description": "The Port used for the Client Endpoint for this Node Type.",
                    "type": "number"
                  },
                  "durabilityLevel": {
                    "description": "The Durability Level for this Node Type. Possible values include Bronze, Gold and Silver. Defaults to Bronze.",
                    "type": "string"
                  },
                  "ephemeralPorts": {
                    "description": "A ephemeral_ports block as defined below.",
                    "type": "object",
                    "properties": {
                      "endPort": {
                        "description": "The end of the Ephemeral Port Range on this Node Type.",
                        "type": "number"
                      },
                      "startPort": {
                        "description": "The start of the Ephemeral Port Range on this Node Type.",
                        "type": "number"
                      }
                    },
                    "additionalProperties": false
                  },
                  "httpEndpointPort": {
                    "description": "The Port used for the HTTP Endpoint for this Node Type.",
                    "type": "number"
                  },
                  "instanceCount": {
                    "description": "The number of nodes for this Node Type.",
                    "type": "number"
                  },
                  "isPrimary": {
                    "description": "Is this the Primary Node Type?",
                    "type": "boolean"
                  },
                  "isStateless": {
                    "description": "Should this node type run only stateless services?",
                    "type": "boolean"
                  },
                  "multipleAvailabilityZones": {
                    "description": "Does this node type span availability zones?",
                    "type": "boolean"
                  },
                  "name": {
                    "description": "The name of the Node Type.",
                    "type": "string"
                  },
                  "placementProperties": {
                    "description": "The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "x-kubernetes-map-type": "granular"
                  },
                  "reverseProxyEndpointPort": {
                    "description": "The Port used for the Reverse Proxy Endpoint for this Node Type. Changing this will upgrade the cluster.",
                    "type": "number"
                  }
                },
                "additionalProperties": false
              }
            },
            "reliabilityLevel": {
              "description": "Specifies the Reliability Level of the Cluster. Possible values include None, Bronze, Silver, Gold and Platinum.",
              "type": "string"
            },
            "resourceGroupName": {
              "description": "The name of the Resource Group in which the Service Fabric Cluster exists. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "resourceGroupNameRef": {
              "description": "Reference to a ResourceGroup in azure to populate resourceGroupName.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "resourceGroupNameSelector": {
              "description": "Selector for a ResourceGroup in azure to populate resourceGroupName.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "reverseProxyCertificate": {
              "description": "A reverse_proxy_certificate block as defined below. Conflicts with reverse_proxy_certificate_common_names.",
              "type": "object",
              "properties": {
                "thumbprint": {
                  "description": "The Thumbprint of the Certificate.",
                  "type": "string"
                },
                "thumbprintSecondary": {
                  "description": "The Secondary Thumbprint of the Certificate.",
                  "type": "string"
                },
                "x509StoreName": {
                  "description": "The X509 Store where the Certificate Exists, such as My.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "reverseProxyCertificateCommonNames": {
              "description": "A reverse_proxy_certificate_common_names block as defined below. Conflicts with reverse_proxy_certificate.",
              "type": "object",
              "properties": {
                "commonNames": {
                  "description": "A common_names block as defined below.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "certificateCommonName": {
                        "description": "The common or subject name of the certificate.",
                        "type": "string"
                      },
                      "certificateIssuerThumbprint": {
                        "description": "The Issuer Thumbprint of the Certificate.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "x509StoreName": {
                  "description": "The X509 Store where the Certificate Exists, such as My.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "serviceFabricZonalUpgradeMode": {
              "description": "Specifies the logical grouping of VMs in upgrade domains. Possible values are Hierarchical or Parallel.",
              "type": "string"
            },
            "tags": {
              "description": "A mapping of tags to assign to the resource.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "upgradeMode": {
              "description": "Specifies the Upgrade Mode of the cluster. Possible values are Automatic or Manual.",
              "type": "string"
            },
            "upgradePolicy": {
              "description": "A upgrade_policy block as defined below.",
              "type": "object",
              "properties": {
                "deltaHealthPolicy": {
                  "description": "A delta_health_policy block as defined below",
                  "type": "object",
                  "properties": {
                    "maxDeltaUnhealthyApplicationsPercent": {
                      "description": "Specifies the maximum tolerated percentage of delta unhealthy applications that can have aggregated health states of error. If the current unhealthy applications do not respect the percentage relative to the state at the beginning of the upgrade, the cluster is unhealthy. Defaults to 0.",
                      "type": "number"
                    },
                    "maxDeltaUnhealthyNodesPercent": {
                      "description": "Specifies the maximum tolerated percentage of delta unhealthy nodes that can have aggregated health states of error. If the current unhealthy nodes do not respect the percentage relative to the state at the beginning of the upgrade, the cluster is unhealthy. Defaults to 0.",
                      "type": "number"
                    },
                    "maxUpgradeDomainDeltaUnhealthyNodesPercent": {
                      "description": "Specifies the maximum tolerated percentage of upgrade domain delta unhealthy nodes that can have aggregated health state of error. If there is any upgrade domain where the current unhealthy nodes do not respect the percentage relative to the state at the beginning of the upgrade, the cluster is unhealthy. Defaults to 0.",
                      "type": "number"
                    }
                  },
                  "additionalProperties": false
                },
                "forceRestartEnabled": {
                  "description": "Indicates whether to restart the Service Fabric node even if only dynamic configurations have changed.",
                  "type": "boolean"
                },
                "healthCheckRetryTimeout": {
                  "description": "Specifies the duration, in \"hh:mm:ss\" string format, after which Service Fabric retries the health check if the previous health check fails. Defaults to 00:45:00.",
                  "type": "string"
                },
                "healthCheckStableDuration": {
                  "description": "Specifies the duration, in \"hh:mm:ss\" string format, that Service Fabric waits in order to verify that the cluster is stable before it continues to the next upgrade domain or completes the upgrade. This wait duration prevents undetected changes of health right after the health check is performed. Defaults to 00:01:00.",
                  "type": "string"
                },
                "healthCheckWaitDuration": {
                  "description": "Specifies the duration, in \"hh:mm:ss\" string format, that Service Fabric waits before it performs the initial health check after it finishes the upgrade on the upgrade domain. Defaults to 00:00:30.",
                  "type": "string"
                },
                "healthPolicy": {
                  "description": "A health_policy block as defined below",
                  "type": "object",
                  "properties": {
                    "maxUnhealthyApplicationsPercent": {
                      "description": "Specifies the maximum tolerated percentage of applications that can have aggregated health state of error. If the upgrade exceeds this percentage, the cluster is unhealthy. Defaults to 0.",
                      "type": "number"
                    },
                    "maxUnhealthyNodesPercent": {
                      "description": "Specifies the maximum tolerated percentage of nodes that can have aggregated health states of error. If an upgrade exceeds this percentage, the cluster is unhealthy. Defaults to 0.",
                      "type": "number"
                    }
                  },
                  "additionalProperties": false
                },
                "upgradeDomainTimeout": {
                  "description": "Specifies the duration, in \"hh:mm:ss\" string format, that Service Fabric takes to upgrade a single upgrade domain. After this period, the upgrade fails. Defaults to 02:00:00.",
                  "type": "string"
                },
                "upgradeReplicaSetCheckTimeout": {
                  "description": "Specifies the duration, in \"hh:mm:ss\" string format, that Service Fabric waits for a replica set to reconfigure into a safe state, if it is not already in a safe state, before Service Fabric proceeds with the upgrade. Defaults to 10675199.02:48:05.4775807.",
                  "type": "string"
                },
                "upgradeTimeout": {
                  "description": "Specifies the duration, in \"hh:mm:ss\" string format, that Service Fabric takes for the entire upgrade. After this period, the upgrade fails. Defaults to 12:00:00.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "vmImage": {
              "description": "Specifies the Image expected for the Service Fabric Cluster, such as Windows. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "vmssZonalUpgradeMode": {
              "description": "Specifies the upgrade mode for the virtual machine scale set updates that happen in all availability zones at once. Possible values are Hierarchical or Parallel.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored\nunless the Management Policies feature flag is disabled.\nInitProvider holds the same fields as ForProvider, with the exception\nof Identifier and other resource reference fields. The fields that are\nin InitProvider are merged into ForProvider when the resource is created.\nThe same fields are also added to the terraform ignore_changes hook, to\navoid updating them after creation. This is useful for fields that are\nrequired on creation, but we do not desire to update them after creation,\nfor example because of an external controller is managing them, like an\nautoscaler.",
          "type": "object",
          "properties": {
            "addOnFeatures": {
              "description": "A List of one or more features which should be enabled, such as DnsService.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-kubernetes-list-type": "set"
            },
            "azureActiveDirectory": {
              "description": "An azure_active_directory block as defined below.",
              "type": "object",
              "properties": {
                "clientApplicationId": {
                  "description": "The Azure Active Directory Client ID which should be used for the Client Application.",
                  "type": "string"
                },
                "clusterApplicationId": {
                  "description": "The Azure Active Directory Cluster Application ID.",
                  "type": "string"
                },
                "tenantId": {
                  "description": "The Azure Active Directory Tenant ID.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "certificate": {
              "description": "A certificate block as defined below. Conflicts with certificate_common_names.",
              "type": "object",
              "properties": {
                "thumbprint": {
                  "description": "The Thumbprint of the Certificate.",
                  "type": "string"
                },
                "thumbprintSecondary": {
                  "description": "The Secondary Thumbprint of the Certificate.",
                  "type": "string"
                },
                "x509StoreName": {
                  "description": "The X509 Store where the Certificate Exists, such as My.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "certificateCommonNames": {
              "description": "A certificate_common_names block as defined below. Conflicts with certificate.",
              "type": "object",
              "properties": {
                "commonNames": {
                  "description": "A common_names block as defined below.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "certificateCommonName": {
                        "description": "The common or subject name of the certificate.",
                        "type": "string"
                      },
                      "certificateIssuerThumbprint": {
                        "description": "The Issuer Thumbprint of the Certificate.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "x509StoreName": {
                  "description": "The X509 Store where the Certificate Exists, such as My.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "clientCertificateCommonName": {
              "description": "A client_certificate_common_name block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "commonName": {
                    "description": "The common or subject name of the certificate.",
                    "type": "string"
                  },
                  "isAdmin": {
                    "description": "Does the Client Certificate have Admin Access to the cluster? Non-admin clients can only perform read only operations on the cluster.",
                    "type": "boolean"
                  },
                  "issuerThumbprint": {
                    "description": "The Issuer Thumbprint of the Certificate.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "clientCertificateThumbprint": {
              "description": "One or more client_certificate_thumbprint blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "isAdmin": {
                    "description": "Does the Client Certificate have Admin Access to the cluster? Non-admin clients can only perform read only operations on the cluster.",
                    "type": "boolean"
                  },
                  "thumbprint": {
                    "description": "The Thumbprint associated with the Client Certificate.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "clusterCodeVersion": {
              "description": "Required if Upgrade Mode set to Manual, Specifies the Version of the Cluster Code of the cluster.",
              "type": "string"
            },
            "diagnosticsConfig": {
              "description": "A diagnostics_config block as defined below.",
              "type": "object",
              "properties": {
                "blobEndpoint": {
                  "description": "The Blob Endpoint of the Storage Account.",
                  "type": "string"
                },
                "protectedAccountKeyName": {
                  "description": "The protected diagnostics storage key name, such as StorageAccountKey1.",
                  "type": "string"
                },
                "queueEndpoint": {
                  "description": "The Queue Endpoint of the Storage Account.",
                  "type": "string"
                },
                "storageAccountName": {
                  "description": "The name of the Storage Account where the Diagnostics should be sent to.",
                  "type": "string"
                },
                "tableEndpoint": {
                  "description": "The Table Endpoint of the Storage Account.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "fabricSettings": {
              "description": "One or more fabric_settings blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "The name of the Fabric Setting, such as Security or Federation.",
                    "type": "string"
                  },
                  "parameters": {
                    "description": "A map containing settings for the specified Fabric Setting.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "x-kubernetes-map-type": "granular"
                  }
                },
                "additionalProperties": false
              }
            },
            "location": {
              "description": "Specifies the Azure Region where the Service Fabric Cluster should exist. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "managementEndpoint": {
              "description": "Specifies the Management Endpoint of the cluster such as http://example.com. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "nodeType": {
              "description": "One or more node_type blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "applicationPorts": {
                    "description": "A application_ports block as defined below.",
                    "type": "object",
                    "properties": {
                      "endPort": {
                        "description": "The end of the Ephemeral Port Range on this Node Type.",
                        "type": "number"
                      },
                      "startPort": {
                        "description": "The start of the Ephemeral Port Range on this Node Type.",
                        "type": "number"
                      }
                    },
                    "additionalProperties": false
                  },
                  "capacities": {
                    "description": "The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much resource a node has.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "x-kubernetes-map-type": "granular"
                  },
                  "clientEndpointPort": {
                    "description": "The Port used for the Client Endpoint for this Node Type.",
                    "type": "number"
                  },
                  "durabilityLevel": {
                    "description": "The Durability Level for this Node Type. Possible values include Bronze, Gold and Silver. Defaults to Bronze.",
                    "type": "string"
                  },
                  "ephemeralPorts": {
                    "description": "A ephemeral_ports block as defined below.",
                    "type": "object",
                    "properties": {
                      "endPort": {
                        "description": "The end of the Ephemeral Port Range on this Node Type.",
                        "type": "number"
                      },
                      "startPort": {
                        "description": "The start of the Ephemeral Port Range on this Node Type.",
                        "type": "number"
                      }
                    },
                    "additionalProperties": false
                  },
                  "httpEndpointPort": {
                    "description": "The Port used for the HTTP Endpoint for this Node Type.",
                    "type": "number"
                  },
                  "instanceCount": {
                    "description": "The number of nodes for this Node Type.",
                    "type": "number"
                  },
                  "isPrimary": {
                    "description": "Is this the Primary Node Type?",
                    "type": "boolean"
                  },
                  "isStateless": {
                    "description": "Should this node type run only stateless services?",
                    "type": "boolean"
                  },
                  "multipleAvailabilityZones": {
                    "description": "Does this node type span availability zones?",
                    "type": "boolean"
                  },
                  "name": {
                    "description": "The name of the Node Type.",
                    "type": "string"
                  },
                  "placementProperties": {
                    "description": "The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "x-kubernetes-map-type": "granular"
                  },
                  "reverseProxyEndpointPort": {
                    "description": "The Port used for the Reverse Proxy Endpoint for this Node Type. Changing this will upgrade the cluster.",
                    "type": "number"
                  }
                },
                "additionalProperties": false
              }
            },
            "reliabilityLevel": {
              "description": "Specifies the Reliability Level of the Cluster. Possible values include None, Bronze, Silver, Gold and Platinum.",
              "type": "string"
            },
            "reverseProxyCertificate": {
              "description": "A reverse_proxy_certificate block as defined below. Conflicts with reverse_proxy_certificate_common_names.",
              "type": "object",
              "properties": {
                "thumbprint": {
                  "description": "The Thumbprint of the Certificate.",
                  "type": "string"
                },
                "thumbprintSecondary": {
                  "description": "The Secondary Thumbprint of the Certificate.",
                  "type": "string"
                },
                "x509StoreName": {
                  "description": "The X509 Store where the Certificate Exists, such as My.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "reverseProxyCertificateCommonNames": {
              "description": "A reverse_proxy_certificate_common_names block as defined below. Conflicts with reverse_proxy_certificate.",
              "type": "object",
              "properties": {
                "commonNames": {
                  "description": "A common_names block as defined below.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "certificateCommonName": {
                        "description": "The common or subject name of the certificate.",
                        "type": "string"
                      },
                      "certificateIssuerThumbprint": {
                        "description": "The Issuer Thumbprint of the Certificate.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "x509StoreName": {
                  "description": "The X509 Store where the Certificate Exists, such as My.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "serviceFabricZonalUpgradeMode": {
              "description": "Specifies the logical grouping of VMs in upgrade domains. Possible values are Hierarchical or Parallel.",
              "type": "string"
            },
            "tags": {
              "description": "A mapping of tags to assign to the resource.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "upgradeMode": {
              "description": "Specifies the Upgrade Mode of the cluster. Possible values are Automatic or Manual.",
              "type": "string"
            },
            "upgradePolicy": {
              "description": "A upgrade_policy block as defined below.",
              "type": "object",
              "properties": {
                "deltaHealthPolicy": {
                  "description": "A delta_health_policy block as defined below",
                  "type": "object",
                  "properties": {
                    "maxDeltaUnhealthyApplicationsPercent": {
                      "description": "Specifies the maximum tolerated percentage of delta unhealthy applications that can have aggregated health states of error. If the current unhealthy applications do not respect the percentage relative to the state at the beginning of the upgrade, the cluster is unhealthy. Defaults to 0.",
                      "type": "number"
                    },
                    "maxDeltaUnhealthyNodesPercent": {
                      "description": "Specifies the maximum tolerated percentage of delta unhealthy nodes that can have aggregated health states of error. If the current unhealthy nodes do not respect the percentage relative to the state at the beginning of the upgrade, the cluster is unhealthy. Defaults to 0.",
                      "type": "number"
                    },
                    "maxUpgradeDomainDeltaUnhealthyNodesPercent": {
                      "description": "Specifies the maximum tolerated percentage of upgrade domain delta unhealthy nodes that can have aggregated health state of error. If there is any upgrade domain where the current unhealthy nodes do not respect the percentage relative to the state at the beginning of the upgrade, the cluster is unhealthy. Defaults to 0.",
                      "type": "number"
                    }
                  },
                  "additionalProperties": false
                },
                "forceRestartEnabled": {
                  "description": "Indicates whether to restart the Service Fabric node even if only dynamic configurations have changed.",
                  "type": "boolean"
                },
                "healthCheckRetryTimeout": {
                  "description": "Specifies the duration, in \"hh:mm:ss\" string format, after which Service Fabric retries the health check if the previous health check fails. Defaults to 00:45:00.",
                  "type": "string"
                },
                "healthCheckStableDuration": {
                  "description": "Specifies the duration, in \"hh:mm:ss\" string format, that Service Fabric waits in order to verify that the cluster is stable before it continues to the next upgrade domain or completes the upgrade. This wait duration prevents undetected changes of health right after the health check is performed. Defaults to 00:01:00.",
                  "type": "string"
                },
                "healthCheckWaitDuration": {
                  "description": "Specifies the duration, in \"hh:mm:ss\" string format, that Service Fabric waits before it performs the initial health check after it finishes the upgrade on the upgrade domain. Defaults to 00:00:30.",
                  "type": "string"
                },
                "healthPolicy": {
                  "description": "A health_policy block as defined below",
                  "type": "object",
                  "properties": {
                    "maxUnhealthyApplicationsPercent": {
                      "description": "Specifies the maximum tolerated percentage of applications that can have aggregated health state of error. If the upgrade exceeds this percentage, the cluster is unhealthy. Defaults to 0.",
                      "type": "number"
                    },
                    "maxUnhealthyNodesPercent": {
                      "description": "Specifies the maximum tolerated percentage of nodes that can have aggregated health states of error. If an upgrade exceeds this percentage, the cluster is unhealthy. Defaults to 0.",
                      "type": "number"
                    }
                  },
                  "additionalProperties": false
                },
                "upgradeDomainTimeout": {
                  "description": "Specifies the duration, in \"hh:mm:ss\" string format, that Service Fabric takes to upgrade a single upgrade domain. After this period, the upgrade fails. Defaults to 02:00:00.",
                  "type": "string"
                },
                "upgradeReplicaSetCheckTimeout": {
                  "description": "Specifies the duration, in \"hh:mm:ss\" string format, that Service Fabric waits for a replica set to reconfigure into a safe state, if it is not already in a safe state, before Service Fabric proceeds with the upgrade. Defaults to 10675199.02:48:05.4775807.",
                  "type": "string"
                },
                "upgradeTimeout": {
                  "description": "Specifies the duration, in \"hh:mm:ss\" string format, that Service Fabric takes for the entire upgrade. After this period, the upgrade fails. Defaults to 12:00:00.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "vmImage": {
              "description": "Specifies the Image expected for the Service Fabric Cluster, such as Windows. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "vmssZonalUpgradeMode": {
              "description": "Specifies the upgrade mode for the virtual machine scale set updates that happen in all availability zones at once. Possible values are Hierarchical or Parallel.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "managementPolicies": {
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out\nthrough a Crossplane feature flag.\nManagementPolicies specify the array of actions Crossplane is allowed to\ntake on the managed and external resources.\nThis field is planned to replace the DeletionPolicy field in a future\nrelease. Currently, both could be set independently and non-default\nvalues would be honored if the feature flag is enabled. If both are\ncustom, the DeletionPolicy field will be ignored.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223\nand this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers\ncan take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to\ncreate, observe, update, and delete this managed resource should be\nconfigured.",
          "type": "object",
          "default": {
            "name": "default"
          },
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "type": "object",
              "properties": {
                "resolution": {
                  "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                  "type": "string",
                  "default": "Required",
                  "enum": [
                    "Required",
                    "Optional"
                  ]
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                  "type": "string",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a\nSecret to which any connection details for this managed resource should\nbe written. Connection details frequently include the endpoint, username,\nand password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name",
            "namespace"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false,
      "x-kubernetes-validations": [
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.location))",
          "message": "spec.forProvider.location is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.managementEndpoint) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.managementEndpoint))",
          "message": "spec.forProvider.managementEndpoint is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.nodeType) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.nodeType))",
          "message": "spec.forProvider.nodeType is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.reliabilityLevel) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.reliabilityLevel))",
          "message": "spec.forProvider.reliabilityLevel is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.upgradeMode) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.upgradeMode))",
          "message": "spec.forProvider.upgradeMode is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.vmImage) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.vmImage))",
          "message": "spec.forProvider.vmImage is a required parameter"
        }
      ]
    },
    "status": {
      "description": "ClusterStatus defines the observed state of Cluster.",
      "type": "object",
      "properties": {
        "atProvider": {
          "type": "object",
          "properties": {
            "addOnFeatures": {
              "description": "A List of one or more features which should be enabled, such as DnsService.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-kubernetes-list-type": "set"
            },
            "azureActiveDirectory": {
              "description": "An azure_active_directory block as defined below.",
              "type": "object",
              "properties": {
                "clientApplicationId": {
                  "description": "The Azure Active Directory Client ID which should be used for the Client Application.",
                  "type": "string"
                },
                "clusterApplicationId": {
                  "description": "The Azure Active Directory Cluster Application ID.",
                  "type": "string"
                },
                "tenantId": {
                  "description": "The Azure Active Directory Tenant ID.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "certificate": {
              "description": "A certificate block as defined below. Conflicts with certificate_common_names.",
              "type": "object",
              "properties": {
                "thumbprint": {
                  "description": "The Thumbprint of the Certificate.",
                  "type": "string"
                },
                "thumbprintSecondary": {
                  "description": "The Secondary Thumbprint of the Certificate.",
                  "type": "string"
                },
                "x509StoreName": {
                  "description": "The X509 Store where the Certificate Exists, such as My.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "certificateCommonNames": {
              "description": "A certificate_common_names block as defined below. Conflicts with certificate.",
              "type": "object",
              "properties": {
                "commonNames": {
                  "description": "A common_names block as defined below.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "certificateCommonName": {
                        "description": "The common or subject name of the certificate.",
                        "type": "string"
                      },
                      "certificateIssuerThumbprint": {
                        "description": "The Issuer Thumbprint of the Certificate.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "x509StoreName": {
                  "description": "The X509 Store where the Certificate Exists, such as My.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "clientCertificateCommonName": {
              "description": "A client_certificate_common_name block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "commonName": {
                    "description": "The common or subject name of the certificate.",
                    "type": "string"
                  },
                  "isAdmin": {
                    "description": "Does the Client Certificate have Admin Access to the cluster? Non-admin clients can only perform read only operations on the cluster.",
                    "type": "boolean"
                  },
                  "issuerThumbprint": {
                    "description": "The Issuer Thumbprint of the Certificate.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "clientCertificateThumbprint": {
              "description": "One or more client_certificate_thumbprint blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "isAdmin": {
                    "description": "Does the Client Certificate have Admin Access to the cluster? Non-admin clients can only perform read only operations on the cluster.",
                    "type": "boolean"
                  },
                  "thumbprint": {
                    "description": "The Thumbprint associated with the Client Certificate.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "clusterCodeVersion": {
              "description": "Required if Upgrade Mode set to Manual, Specifies the Version of the Cluster Code of the cluster.",
              "type": "string"
            },
            "clusterEndpoint": {
              "description": "The Cluster Endpoint for this Service Fabric Cluster.",
              "type": "string"
            },
            "diagnosticsConfig": {
              "description": "A diagnostics_config block as defined below.",
              "type": "object",
              "properties": {
                "blobEndpoint": {
                  "description": "The Blob Endpoint of the Storage Account.",
                  "type": "string"
                },
                "protectedAccountKeyName": {
                  "description": "The protected diagnostics storage key name, such as StorageAccountKey1.",
                  "type": "string"
                },
                "queueEndpoint": {
                  "description": "The Queue Endpoint of the Storage Account.",
                  "type": "string"
                },
                "storageAccountName": {
                  "description": "The name of the Storage Account where the Diagnostics should be sent to.",
                  "type": "string"
                },
                "tableEndpoint": {
                  "description": "The Table Endpoint of the Storage Account.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "fabricSettings": {
              "description": "One or more fabric_settings blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "The name of the Fabric Setting, such as Security or Federation.",
                    "type": "string"
                  },
                  "parameters": {
                    "description": "A map containing settings for the specified Fabric Setting.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "x-kubernetes-map-type": "granular"
                  }
                },
                "additionalProperties": false
              }
            },
            "id": {
              "description": "The ID of the Service Fabric Cluster.",
              "type": "string"
            },
            "location": {
              "description": "Specifies the Azure Region where the Service Fabric Cluster should exist. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "managementEndpoint": {
              "description": "Specifies the Management Endpoint of the cluster such as http://example.com. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "nodeType": {
              "description": "One or more node_type blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "applicationPorts": {
                    "description": "A application_ports block as defined below.",
                    "type": "object",
                    "properties": {
                      "endPort": {
                        "description": "The end of the Ephemeral Port Range on this Node Type.",
                        "type": "number"
                      },
                      "startPort": {
                        "description": "The start of the Ephemeral Port Range on this Node Type.",
                        "type": "number"
                      }
                    },
                    "additionalProperties": false
                  },
                  "capacities": {
                    "description": "The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much resource a node has.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "x-kubernetes-map-type": "granular"
                  },
                  "clientEndpointPort": {
                    "description": "The Port used for the Client Endpoint for this Node Type.",
                    "type": "number"
                  },
                  "durabilityLevel": {
                    "description": "The Durability Level for this Node Type. Possible values include Bronze, Gold and Silver. Defaults to Bronze.",
                    "type": "string"
                  },
                  "ephemeralPorts": {
                    "description": "A ephemeral_ports block as defined below.",
                    "type": "object",
                    "properties": {
                      "endPort": {
                        "description": "The end of the Ephemeral Port Range on this Node Type.",
                        "type": "number"
                      },
                      "startPort": {
                        "description": "The start of the Ephemeral Port Range on this Node Type.",
                        "type": "number"
                      }
                    },
                    "additionalProperties": false
                  },
                  "httpEndpointPort": {
                    "description": "The Port used for the HTTP Endpoint for this Node Type.",
                    "type": "number"
                  },
                  "instanceCount": {
                    "description": "The number of nodes for this Node Type.",
                    "type": "number"
                  },
                  "isPrimary": {
                    "description": "Is this the Primary Node Type?",
                    "type": "boolean"
                  },
                  "isStateless": {
                    "description": "Should this node type run only stateless services?",
                    "type": "boolean"
                  },
                  "multipleAvailabilityZones": {
                    "description": "Does this node type span availability zones?",
                    "type": "boolean"
                  },
                  "name": {
                    "description": "The name of the Node Type.",
                    "type": "string"
                  },
                  "placementProperties": {
                    "description": "The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "x-kubernetes-map-type": "granular"
                  },
                  "reverseProxyEndpointPort": {
                    "description": "The Port used for the Reverse Proxy Endpoint for this Node Type. Changing this will upgrade the cluster.",
                    "type": "number"
                  }
                },
                "additionalProperties": false
              }
            },
            "reliabilityLevel": {
              "description": "Specifies the Reliability Level of the Cluster. Possible values include None, Bronze, Silver, Gold and Platinum.",
              "type": "string"
            },
            "resourceGroupName": {
              "description": "The name of the Resource Group in which the Service Fabric Cluster exists. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "reverseProxyCertificate": {
              "description": "A reverse_proxy_certificate block as defined below. Conflicts with reverse_proxy_certificate_common_names.",
              "type": "object",
              "properties": {
                "thumbprint": {
                  "description": "The Thumbprint of the Certificate.",
                  "type": "string"
                },
                "thumbprintSecondary": {
                  "description": "The Secondary Thumbprint of the Certificate.",
                  "type": "string"
                },
                "x509StoreName": {
                  "description": "The X509 Store where the Certificate Exists, such as My.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "reverseProxyCertificateCommonNames": {
              "description": "A reverse_proxy_certificate_common_names block as defined below. Conflicts with reverse_proxy_certificate.",
              "type": "object",
              "properties": {
                "commonNames": {
                  "description": "A common_names block as defined below.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "certificateCommonName": {
                        "description": "The common or subject name of the certificate.",
                        "type": "string"
                      },
                      "certificateIssuerThumbprint": {
                        "description": "The Issuer Thumbprint of the Certificate.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "x509StoreName": {
                  "description": "The X509 Store where the Certificate Exists, such as My.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "serviceFabricZonalUpgradeMode": {
              "description": "Specifies the logical grouping of VMs in upgrade domains. Possible values are Hierarchical or Parallel.",
              "type": "string"
            },
            "tags": {
              "description": "A mapping of tags to assign to the resource.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "upgradeMode": {
              "description": "Specifies the Upgrade Mode of the cluster. Possible values are Automatic or Manual.",
              "type": "string"
            },
            "upgradePolicy": {
              "description": "A upgrade_policy block as defined below.",
              "type": "object",
              "properties": {
                "deltaHealthPolicy": {
                  "description": "A delta_health_policy block as defined below",
                  "type": "object",
                  "properties": {
                    "maxDeltaUnhealthyApplicationsPercent": {
                      "description": "Specifies the maximum tolerated percentage of delta unhealthy applications that can have aggregated health states of error. If the current unhealthy applications do not respect the percentage relative to the state at the beginning of the upgrade, the cluster is unhealthy. Defaults to 0.",
                      "type": "number"
                    },
                    "maxDeltaUnhealthyNodesPercent": {
                      "description": "Specifies the maximum tolerated percentage of delta unhealthy nodes that can have aggregated health states of error. If the current unhealthy nodes do not respect the percentage relative to the state at the beginning of the upgrade, the cluster is unhealthy. Defaults to 0.",
                      "type": "number"
                    },
                    "maxUpgradeDomainDeltaUnhealthyNodesPercent": {
                      "description": "Specifies the maximum tolerated percentage of upgrade domain delta unhealthy nodes that can have aggregated health state of error. If there is any upgrade domain where the current unhealthy nodes do not respect the percentage relative to the state at the beginning of the upgrade, the cluster is unhealthy. Defaults to 0.",
                      "type": "number"
                    }
                  },
                  "additionalProperties": false
                },
                "forceRestartEnabled": {
                  "description": "Indicates whether to restart the Service Fabric node even if only dynamic configurations have changed.",
                  "type": "boolean"
                },
                "healthCheckRetryTimeout": {
                  "description": "Specifies the duration, in \"hh:mm:ss\" string format, after which Service Fabric retries the health check if the previous health check fails. Defaults to 00:45:00.",
                  "type": "string"
                },
                "healthCheckStableDuration": {
                  "description": "Specifies the duration, in \"hh:mm:ss\" string format, that Service Fabric waits in order to verify that the cluster is stable before it continues to the next upgrade domain or completes the upgrade. This wait duration prevents undetected changes of health right after the health check is performed. Defaults to 00:01:00.",
                  "type": "string"
                },
                "healthCheckWaitDuration": {
                  "description": "Specifies the duration, in \"hh:mm:ss\" string format, that Service Fabric waits before it performs the initial health check after it finishes the upgrade on the upgrade domain. Defaults to 00:00:30.",
                  "type": "string"
                },
                "healthPolicy": {
                  "description": "A health_policy block as defined below",
                  "type": "object",
                  "properties": {
                    "maxUnhealthyApplicationsPercent": {
                      "description": "Specifies the maximum tolerated percentage of applications that can have aggregated health state of error. If the upgrade exceeds this percentage, the cluster is unhealthy. Defaults to 0.",
                      "type": "number"
                    },
                    "maxUnhealthyNodesPercent": {
                      "description": "Specifies the maximum tolerated percentage of nodes that can have aggregated health states of error. If an upgrade exceeds this percentage, the cluster is unhealthy. Defaults to 0.",
                      "type": "number"
                    }
                  },
                  "additionalProperties": false
                },
                "upgradeDomainTimeout": {
                  "description": "Specifies the duration, in \"hh:mm:ss\" string format, that Service Fabric takes to upgrade a single upgrade domain. After this period, the upgrade fails. Defaults to 02:00:00.",
                  "type": "string"
                },
                "upgradeReplicaSetCheckTimeout": {
                  "description": "Specifies the duration, in \"hh:mm:ss\" string format, that Service Fabric waits for a replica set to reconfigure into a safe state, if it is not already in a safe state, before Service Fabric proceeds with the upgrade. Defaults to 10675199.02:48:05.4775807.",
                  "type": "string"
                },
                "upgradeTimeout": {
                  "description": "Specifies the duration, in \"hh:mm:ss\" string format, that Service Fabric takes for the entire upgrade. After this period, the upgrade fails. Defaults to 12:00:00.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "vmImage": {
              "description": "Specifies the Image expected for the Service Fabric Cluster, such as Windows. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "vmssZonalUpgradeMode": {
              "description": "Specifies the upgrade mode for the virtual machine scale set updates that happen in all availability zones at once. Possible values are Hierarchical or Parallel.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "type": "array",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one\nstatus to another.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from\none status to another, if any.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to\na resource at any point in time.",
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest metadata.generation\nwhich resulted in either a ready state, or stalled due to error\nit can not recover from without human intervention.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    }
  }
}
