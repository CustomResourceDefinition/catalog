{
  "description": "AuthorizationServer is the Schema for the AuthorizationServers API. Manages an Authorization Server within an API Management Service.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "AuthorizationServerSpec defines the desired state of AuthorizationServer",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "forProvider": {
          "type": "object",
          "properties": {
            "apiManagementName": {
              "description": "The name of the API Management Service in which this Authorization Server should be created. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "apiManagementNameRef": {
              "description": "Reference to a Management in apimanagement to populate apiManagementName.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referenced object",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "apiManagementNameSelector": {
              "description": "Selector for a Management in apimanagement to populate apiManagementName.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "namespace": {
                  "description": "Namespace for the selector",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "authorizationEndpoint": {
              "description": "The OAUTH Authorization Endpoint.",
              "type": "string"
            },
            "authorizationMethods": {
              "description": "The HTTP Verbs supported by the Authorization Endpoint. Possible values are DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT and TRACE.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-kubernetes-list-type": "set"
            },
            "bearerTokenSendingMethods": {
              "description": "The mechanism by which Access Tokens are passed to the API. Possible values are authorizationHeader and query.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-kubernetes-list-type": "set"
            },
            "clientAuthenticationMethod": {
              "description": "The Authentication Methods supported by the Token endpoint of this Authorization Server.. Possible values are Basic and Body.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-kubernetes-list-type": "set"
            },
            "clientId": {
              "description": "The Client/App ID registered with this Authorization Server.",
              "type": "string"
            },
            "clientRegistrationEndpoint": {
              "description": "The URI of page where Client/App Registration is performed for this Authorization Server.",
              "type": "string"
            },
            "clientSecretSecretRef": {
              "description": "The Client/App Secret registered with this Authorization Server.",
              "type": "object",
              "required": [
                "key",
                "name"
              ],
              "properties": {
                "key": {
                  "type": "string"
                },
                "name": {
                  "description": "Name of the secret.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "defaultScope": {
              "description": "The Default Scope used when requesting an Access Token, specified as a string containing space-delimited values.",
              "type": "string"
            },
            "description": {
              "description": "A description of the Authorization Server, which may contain HTML formatting tags.",
              "type": "string"
            },
            "displayName": {
              "description": "The user-friendly name of this Authorization Server.",
              "type": "string"
            },
            "grantTypes": {
              "description": "Form of Authorization Grants required when requesting an Access Token. Possible values are authorizationCode, clientCredentials, implicit and resourceOwnerPassword.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-kubernetes-list-type": "set"
            },
            "resourceGroupName": {
              "description": "The name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "resourceGroupNameRef": {
              "description": "Reference to a ResourceGroup in azure to populate resourceGroupName.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referenced object",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "resourceGroupNameSelector": {
              "description": "Selector for a ResourceGroup in azure to populate resourceGroupName.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "namespace": {
                  "description": "Namespace for the selector",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "resourceOwnerPasswordSecretRef": {
              "description": "The password associated with the Resource Owner.",
              "type": "object",
              "required": [
                "key",
                "name"
              ],
              "properties": {
                "key": {
                  "type": "string"
                },
                "name": {
                  "description": "Name of the secret.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "resourceOwnerUsername": {
              "description": "The username associated with the Resource Owner.",
              "type": "string"
            },
            "supportState": {
              "description": "Does this Authorization Server support State? If this is set to true the client may use the state parameter to raise protocol security.",
              "type": "boolean"
            },
            "tokenBodyParameter": {
              "description": "A token_body_parameter block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "The Name of the Parameter.",
                    "type": "string"
                  },
                  "value": {
                    "description": "The Value of the Parameter.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "tokenEndpoint": {
              "description": "The OAUTH Token Endpoint.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored\nunless the Management Policies feature flag is disabled.\nInitProvider holds the same fields as ForProvider, with the exception\nof Identifier and other resource reference fields. The fields that are\nin InitProvider are merged into ForProvider when the resource is created.\nThe same fields are also added to the terraform ignore_changes hook, to\navoid updating them after creation. This is useful for fields that are\nrequired on creation, but we do not desire to update them after creation,\nfor example because of an external controller is managing them, like an\nautoscaler.",
          "type": "object",
          "properties": {
            "authorizationEndpoint": {
              "description": "The OAUTH Authorization Endpoint.",
              "type": "string"
            },
            "authorizationMethods": {
              "description": "The HTTP Verbs supported by the Authorization Endpoint. Possible values are DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT and TRACE.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-kubernetes-list-type": "set"
            },
            "bearerTokenSendingMethods": {
              "description": "The mechanism by which Access Tokens are passed to the API. Possible values are authorizationHeader and query.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-kubernetes-list-type": "set"
            },
            "clientAuthenticationMethod": {
              "description": "The Authentication Methods supported by the Token endpoint of this Authorization Server.. Possible values are Basic and Body.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-kubernetes-list-type": "set"
            },
            "clientId": {
              "description": "The Client/App ID registered with this Authorization Server.",
              "type": "string"
            },
            "clientRegistrationEndpoint": {
              "description": "The URI of page where Client/App Registration is performed for this Authorization Server.",
              "type": "string"
            },
            "clientSecretSecretRef": {
              "description": "The Client/App Secret registered with this Authorization Server.",
              "type": "object",
              "required": [
                "key",
                "name"
              ],
              "properties": {
                "key": {
                  "type": "string"
                },
                "name": {
                  "description": "Name of the secret.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "defaultScope": {
              "description": "The Default Scope used when requesting an Access Token, specified as a string containing space-delimited values.",
              "type": "string"
            },
            "description": {
              "description": "A description of the Authorization Server, which may contain HTML formatting tags.",
              "type": "string"
            },
            "displayName": {
              "description": "The user-friendly name of this Authorization Server.",
              "type": "string"
            },
            "grantTypes": {
              "description": "Form of Authorization Grants required when requesting an Access Token. Possible values are authorizationCode, clientCredentials, implicit and resourceOwnerPassword.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-kubernetes-list-type": "set"
            },
            "resourceOwnerPasswordSecretRef": {
              "description": "The password associated with the Resource Owner.",
              "type": "object",
              "required": [
                "key",
                "name"
              ],
              "properties": {
                "key": {
                  "type": "string"
                },
                "name": {
                  "description": "Name of the secret.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "resourceOwnerUsername": {
              "description": "The username associated with the Resource Owner.",
              "type": "string"
            },
            "supportState": {
              "description": "Does this Authorization Server support State? If this is set to true the client may use the state parameter to raise protocol security.",
              "type": "boolean"
            },
            "tokenBodyParameter": {
              "description": "A token_body_parameter block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "The Name of the Parameter.",
                    "type": "string"
                  },
                  "value": {
                    "description": "The Value of the Parameter.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "tokenEndpoint": {
              "description": "The OAUTH Token Endpoint.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "managementPolicies": {
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out\nthrough a Crossplane feature flag.\nManagementPolicies specify the array of actions Crossplane is allowed to\ntake on the managed and external resources.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223\nand this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers\ncan take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to\ncreate, observe, update, and delete this managed resource should be\nconfigured.",
          "type": "object",
          "default": {
            "kind": "ClusterProviderConfig",
            "name": "default"
          },
          "required": [
            "kind",
            "name"
          ],
          "properties": {
            "kind": {
              "description": "Kind of the referenced object.",
              "type": "string"
            },
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a\nSecret to which any connection details for this managed resource should\nbe written. Connection details frequently include the endpoint, username,\nand password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false,
      "x-kubernetes-validations": [
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.authorizationEndpoint) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.authorizationEndpoint))",
          "message": "spec.forProvider.authorizationEndpoint is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.authorizationMethods) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.authorizationMethods))",
          "message": "spec.forProvider.authorizationMethods is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.clientId) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.clientId))",
          "message": "spec.forProvider.clientId is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.clientRegistrationEndpoint) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.clientRegistrationEndpoint))",
          "message": "spec.forProvider.clientRegistrationEndpoint is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.displayName) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.displayName))",
          "message": "spec.forProvider.displayName is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.grantTypes) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.grantTypes))",
          "message": "spec.forProvider.grantTypes is a required parameter"
        }
      ]
    },
    "status": {
      "description": "AuthorizationServerStatus defines the observed state of AuthorizationServer.",
      "type": "object",
      "properties": {
        "atProvider": {
          "type": "object",
          "properties": {
            "apiManagementName": {
              "description": "The name of the API Management Service in which this Authorization Server should be created. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "authorizationEndpoint": {
              "description": "The OAUTH Authorization Endpoint.",
              "type": "string"
            },
            "authorizationMethods": {
              "description": "The HTTP Verbs supported by the Authorization Endpoint. Possible values are DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT and TRACE.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-kubernetes-list-type": "set"
            },
            "bearerTokenSendingMethods": {
              "description": "The mechanism by which Access Tokens are passed to the API. Possible values are authorizationHeader and query.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-kubernetes-list-type": "set"
            },
            "clientAuthenticationMethod": {
              "description": "The Authentication Methods supported by the Token endpoint of this Authorization Server.. Possible values are Basic and Body.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-kubernetes-list-type": "set"
            },
            "clientId": {
              "description": "The Client/App ID registered with this Authorization Server.",
              "type": "string"
            },
            "clientRegistrationEndpoint": {
              "description": "The URI of page where Client/App Registration is performed for this Authorization Server.",
              "type": "string"
            },
            "defaultScope": {
              "description": "The Default Scope used when requesting an Access Token, specified as a string containing space-delimited values.",
              "type": "string"
            },
            "description": {
              "description": "A description of the Authorization Server, which may contain HTML formatting tags.",
              "type": "string"
            },
            "displayName": {
              "description": "The user-friendly name of this Authorization Server.",
              "type": "string"
            },
            "grantTypes": {
              "description": "Form of Authorization Grants required when requesting an Access Token. Possible values are authorizationCode, clientCredentials, implicit and resourceOwnerPassword.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-kubernetes-list-type": "set"
            },
            "id": {
              "description": "The ID of the API Management Authorization Server.",
              "type": "string"
            },
            "resourceGroupName": {
              "description": "The name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "resourceOwnerUsername": {
              "description": "The username associated with the Resource Owner.",
              "type": "string"
            },
            "supportState": {
              "description": "Does this Authorization Server support State? If this is set to true the client may use the state parameter to raise protocol security.",
              "type": "boolean"
            },
            "tokenBodyParameter": {
              "description": "A token_body_parameter block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "The Name of the Parameter.",
                    "type": "string"
                  },
                  "value": {
                    "description": "The Value of the Parameter.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "tokenEndpoint": {
              "description": "The OAUTH Token Endpoint.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "type": "array",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one\nstatus to another.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from\none status to another, if any.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to\na resource at any point in time.",
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest metadata.generation\nwhich resulted in either a ready state, or stalled due to error\nit can not recover from without human intervention.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    }
  }
}
