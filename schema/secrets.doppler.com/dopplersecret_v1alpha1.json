{
  "description": "DopplerSecret is the Schema for the dopplersecrets API",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "DopplerSecretSpec defines the desired state of DopplerSecret",
      "type": "object",
      "properties": {
        "config": {
          "description": "The Doppler config",
          "type": "string"
        },
        "format": {
          "description": "Format enables the downloading of secrets as a file",
          "type": "string",
          "enum": [
            "json",
            "dotnet-json",
            "env",
            "yaml",
            "docker"
          ]
        },
        "host": {
          "description": "The Doppler API host",
          "type": "string",
          "default": "https://api.doppler.com"
        },
        "managedSecret": {
          "description": "The Kubernetes secret where the operator will store and sync the fetched secrets",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "annotations": {
              "description": "Annotations to add or update on the managed secret",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "labels": {
              "description": "Labels to add or update on the managed secret",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "name": {
              "description": "The name of the Secret resource",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the resource being referred to. Ignored if not cluster scoped",
              "type": "string"
            },
            "type": {
              "description": "The secret type of the managed secret",
              "type": "string",
              "default": "Opaque",
              "enum": [
                "Opaque",
                "kubernetes.io/tls",
                "kubernetes.io/service-account-token",
                "kubernetes.io/dockercfg",
                "kubernetes.io/dockerconfigjson",
                "kubernetes.io/basic-auth",
                "kubernetes.io/ssh-auth",
                "bootstrap.kubernetes.io/token"
              ]
            }
          },
          "additionalProperties": false
        },
        "nameTransformer": {
          "description": "The environment variable compatible secrets name transformer to apply",
          "type": "string",
          "enum": [
            "upper-camel",
            "camel",
            "lower-snake",
            "tf-var",
            "dotnet-env",
            "lower-kebab"
          ]
        },
        "processors": {
          "description": "A list of processors to transform the data during ingestion",
          "type": "object",
          "default": {},
          "additionalProperties": {
            "type": "object",
            "properties": {
              "asName": {
                "description": "The mapped name of the field in the managed secret, defaults to the original Doppler secret name for Opaque Kubernetes secrets. If omitted for other types, the value is not copied to the managed secret.",
                "type": "string"
              },
              "type": {
                "description": "The type of process to be performed, either \"plain\" or \"base64\"",
                "type": "string",
                "default": "plain",
                "enum": [
                  "plain",
                  "base64"
                ]
              }
            }
          }
        },
        "project": {
          "description": "The Doppler project",
          "type": "string"
        },
        "resyncSeconds": {
          "description": "The number of seconds to wait between resyncs",
          "type": "integer",
          "format": "int64",
          "default": 60
        },
        "secrets": {
          "description": "A list of secrets to sync from the config",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tokenSecret": {
          "description": "The Kubernetes secret containing either a Doppler service token or OIDC configuration",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "The name of the Secret resource",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the resource being referred to. Ignored if not cluster scoped",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "verifyTLS": {
          "description": "Whether or not to verify TLS",
          "type": "boolean",
          "default": true
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "DopplerSecretStatus defines the observed state of DopplerSecret",
      "type": "object",
      "required": [
        "conditions"
      ],
      "properties": {
        "conditions": {
          "type": "array",
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                "type": "string",
                "maxLength": 32768
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64",
                "minimum": 0
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                "type": "string",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "type": "string",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ]
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                "type": "string",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
              }
            },
            "additionalProperties": false
          }
        }
      },
      "additionalProperties": false
    }
  }
}
