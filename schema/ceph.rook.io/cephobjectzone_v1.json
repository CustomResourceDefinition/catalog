{
  "description": "CephObjectZone represents a Ceph Object Store Gateway Zone",
  "type": "object",
  "required": [
    "metadata",
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "ObjectZoneSpec represent the spec of an ObjectZone",
      "type": "object",
      "required": [
        "zoneGroup"
      ],
      "properties": {
        "customEndpoints": {
          "description": "If this zone cannot be accessed from other peer Ceph clusters via the ClusterIP Service\nendpoint created by Rook, you must set this to the externally reachable endpoint(s). You may\ninclude the port in the definition. For example: \"https://my-object-store.my-domain.net:443\".\nIn many cases, you should set this to the endpoint of the ingress resource that makes the\nCephObjectStore associated with this CephObjectStoreZone reachable to peer clusters.\nThe list can have one or more endpoints pointing to different RGW servers in the zone.\n\nIf a CephObjectStore endpoint is omitted from this list, that object store's gateways will\nnot receive multisite replication data\n(see CephObjectStore.spec.gateway.disableMultisiteSyncTraffic).",
          "type": "array",
          "items": {
            "type": "string"
          },
          "nullable": true
        },
        "dataPool": {
          "description": "The data pool settings",
          "type": "object",
          "properties": {
            "application": {
              "description": "The application name to set on the pool. Only expected to be set for rgw pools.",
              "type": "string"
            },
            "compressionMode": {
              "description": "DEPRECATED: use Parameters instead, e.g., Parameters[\"compression_mode\"] = \"force\"\nThe inline compression mode in Bluestore OSD to set to (options are: none, passive, aggressive, force)\nDo NOT set a default value for kubebuilder as this will override the Parameters",
              "type": "string",
              "enum": [
                "none",
                "passive",
                "aggressive",
                "force",
                ""
              ],
              "nullable": true
            },
            "crushRoot": {
              "description": "The root of the crush hierarchy utilized by the pool",
              "type": "string",
              "nullable": true
            },
            "deviceClass": {
              "description": "The device class the OSD should set to for use in the pool",
              "type": "string",
              "nullable": true
            },
            "enableCrushUpdates": {
              "description": "Allow rook operator to change the pool CRUSH tunables once the pool is created",
              "type": "boolean"
            },
            "enableRBDStats": {
              "description": "EnableRBDStats is used to enable gathering of statistics for all RBD images in the pool",
              "type": "boolean"
            },
            "erasureCoded": {
              "description": "The erasure code settings",
              "type": "object",
              "required": [
                "codingChunks",
                "dataChunks"
              ],
              "properties": {
                "algorithm": {
                  "description": "The algorithm for erasure coding.\nIf absent, defaults to the plugin specified in osd_pool_default_erasure_code_profile.",
                  "type": "string",
                  "enum": [
                    "isa",
                    "jerasure"
                  ]
                },
                "codingChunks": {
                  "description": "Number of coding chunks per object in an erasure coded storage pool (required for erasure-coded pool type).\nThis is the number of OSDs that can be lost simultaneously before data cannot be recovered.",
                  "type": "integer",
                  "minimum": 0
                },
                "dataChunks": {
                  "description": "Number of data chunks per object in an erasure coded storage pool (required for erasure-coded pool type).\nThe number of chunks required to recover an object when any single OSD is lost is the same\nas dataChunks so be aware that the larger the number of data chunks, the higher the cost of recovery.",
                  "type": "integer",
                  "minimum": 0
                }
              },
              "additionalProperties": false
            },
            "failureDomain": {
              "description": "The failure domain: osd/host/(region or zone if available) - technically also any type in the crush map",
              "type": "string"
            },
            "mirroring": {
              "description": "The mirroring settings",
              "type": "object",
              "properties": {
                "enabled": {
                  "description": "Enabled whether this pool is mirrored or not",
                  "type": "boolean"
                },
                "mode": {
                  "description": "Mode is the mirroring mode: pool, image or init-only.",
                  "type": "string",
                  "enum": [
                    "pool",
                    "image",
                    "init-only"
                  ]
                },
                "peers": {
                  "description": "Peers represents the peers spec",
                  "type": "object",
                  "properties": {
                    "secretNames": {
                      "description": "SecretNames represents the Kubernetes Secret names to add rbd-mirror or cephfs-mirror peers",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "additionalProperties": false,
                  "nullable": true
                },
                "snapshotSchedules": {
                  "description": "SnapshotSchedules is the scheduling of snapshot for mirrored images/pools",
                  "type": "array",
                  "items": {
                    "description": "SnapshotScheduleSpec represents the snapshot scheduling settings of a mirrored pool",
                    "type": "object",
                    "properties": {
                      "interval": {
                        "description": "Interval represent the periodicity of the snapshot.",
                        "type": "string"
                      },
                      "path": {
                        "description": "Path is the path to snapshot, only valid for CephFS",
                        "type": "string"
                      },
                      "startTime": {
                        "description": "StartTime indicates when to start the snapshot",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                }
              },
              "additionalProperties": false
            },
            "parameters": {
              "description": "Parameters is a list of properties to enable on a given pool",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "nullable": true,
              "x-kubernetes-preserve-unknown-fields": true
            },
            "quotas": {
              "description": "The quota settings",
              "type": "object",
              "properties": {
                "maxBytes": {
                  "description": "MaxBytes represents the quota in bytes\nDeprecated in favor of MaxSize",
                  "type": "integer",
                  "format": "int64"
                },
                "maxObjects": {
                  "description": "MaxObjects represents the quota in objects",
                  "type": "integer",
                  "format": "int64"
                },
                "maxSize": {
                  "description": "MaxSize represents the quota in bytes as a string",
                  "type": "string",
                  "pattern": "^[0-9]+[\\.]?[0-9]*([KMGTPE]i|[kMGTPE])?$"
                }
              },
              "additionalProperties": false,
              "nullable": true
            },
            "replicated": {
              "description": "The replication settings",
              "type": "object",
              "required": [
                "size"
              ],
              "properties": {
                "hybridStorage": {
                  "description": "HybridStorage represents hybrid storage tier settings",
                  "type": "object",
                  "required": [
                    "primaryDeviceClass",
                    "secondaryDeviceClass"
                  ],
                  "properties": {
                    "primaryDeviceClass": {
                      "description": "PrimaryDeviceClass represents high performance tier (for example SSD or NVME) for Primary OSD",
                      "type": "string",
                      "minLength": 1
                    },
                    "secondaryDeviceClass": {
                      "description": "SecondaryDeviceClass represents low performance tier (for example HDDs) for remaining OSDs",
                      "type": "string",
                      "minLength": 1
                    }
                  },
                  "additionalProperties": false,
                  "nullable": true
                },
                "replicasPerFailureDomain": {
                  "description": "ReplicasPerFailureDomain the number of replica in the specified failure domain",
                  "type": "integer",
                  "minimum": 1
                },
                "requireSafeReplicaSize": {
                  "description": "RequireSafeReplicaSize if false allows you to set replica 1",
                  "type": "boolean"
                },
                "size": {
                  "description": "Size - Number of copies per object in a replicated storage pool, including the object itself (required for replicated pool type)",
                  "type": "integer",
                  "minimum": 0
                },
                "subFailureDomain": {
                  "description": "SubFailureDomain the name of the sub-failure domain",
                  "type": "string"
                },
                "targetSizeRatio": {
                  "description": "TargetSizeRatio gives a hint (%) to Ceph in terms of expected consumption of the total cluster capacity",
                  "type": "number",
                  "minimum": 0
                }
              },
              "additionalProperties": false
            },
            "statusCheck": {
              "description": "The mirroring statusCheck",
              "type": "object",
              "properties": {
                "mirror": {
                  "description": "HealthCheckSpec represents the health check of an object store bucket",
                  "type": "object",
                  "properties": {
                    "disabled": {
                      "type": "boolean"
                    },
                    "interval": {
                      "description": "Interval is the internal in second or minute for the health check to run like 60s for 60 seconds",
                      "type": "string"
                    },
                    "timeout": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false,
                  "nullable": true
                }
              },
              "additionalProperties": false,
              "x-kubernetes-preserve-unknown-fields": true
            }
          },
          "additionalProperties": false,
          "nullable": true
        },
        "metadataPool": {
          "description": "The metadata pool settings",
          "type": "object",
          "properties": {
            "application": {
              "description": "The application name to set on the pool. Only expected to be set for rgw pools.",
              "type": "string"
            },
            "compressionMode": {
              "description": "DEPRECATED: use Parameters instead, e.g., Parameters[\"compression_mode\"] = \"force\"\nThe inline compression mode in Bluestore OSD to set to (options are: none, passive, aggressive, force)\nDo NOT set a default value for kubebuilder as this will override the Parameters",
              "type": "string",
              "enum": [
                "none",
                "passive",
                "aggressive",
                "force",
                ""
              ],
              "nullable": true
            },
            "crushRoot": {
              "description": "The root of the crush hierarchy utilized by the pool",
              "type": "string",
              "nullable": true
            },
            "deviceClass": {
              "description": "The device class the OSD should set to for use in the pool",
              "type": "string",
              "nullable": true
            },
            "enableCrushUpdates": {
              "description": "Allow rook operator to change the pool CRUSH tunables once the pool is created",
              "type": "boolean"
            },
            "enableRBDStats": {
              "description": "EnableRBDStats is used to enable gathering of statistics for all RBD images in the pool",
              "type": "boolean"
            },
            "erasureCoded": {
              "description": "The erasure code settings",
              "type": "object",
              "required": [
                "codingChunks",
                "dataChunks"
              ],
              "properties": {
                "algorithm": {
                  "description": "The algorithm for erasure coding.\nIf absent, defaults to the plugin specified in osd_pool_default_erasure_code_profile.",
                  "type": "string",
                  "enum": [
                    "isa",
                    "jerasure"
                  ]
                },
                "codingChunks": {
                  "description": "Number of coding chunks per object in an erasure coded storage pool (required for erasure-coded pool type).\nThis is the number of OSDs that can be lost simultaneously before data cannot be recovered.",
                  "type": "integer",
                  "minimum": 0
                },
                "dataChunks": {
                  "description": "Number of data chunks per object in an erasure coded storage pool (required for erasure-coded pool type).\nThe number of chunks required to recover an object when any single OSD is lost is the same\nas dataChunks so be aware that the larger the number of data chunks, the higher the cost of recovery.",
                  "type": "integer",
                  "minimum": 0
                }
              },
              "additionalProperties": false
            },
            "failureDomain": {
              "description": "The failure domain: osd/host/(region or zone if available) - technically also any type in the crush map",
              "type": "string"
            },
            "mirroring": {
              "description": "The mirroring settings",
              "type": "object",
              "properties": {
                "enabled": {
                  "description": "Enabled whether this pool is mirrored or not",
                  "type": "boolean"
                },
                "mode": {
                  "description": "Mode is the mirroring mode: pool, image or init-only.",
                  "type": "string",
                  "enum": [
                    "pool",
                    "image",
                    "init-only"
                  ]
                },
                "peers": {
                  "description": "Peers represents the peers spec",
                  "type": "object",
                  "properties": {
                    "secretNames": {
                      "description": "SecretNames represents the Kubernetes Secret names to add rbd-mirror or cephfs-mirror peers",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "additionalProperties": false,
                  "nullable": true
                },
                "snapshotSchedules": {
                  "description": "SnapshotSchedules is the scheduling of snapshot for mirrored images/pools",
                  "type": "array",
                  "items": {
                    "description": "SnapshotScheduleSpec represents the snapshot scheduling settings of a mirrored pool",
                    "type": "object",
                    "properties": {
                      "interval": {
                        "description": "Interval represent the periodicity of the snapshot.",
                        "type": "string"
                      },
                      "path": {
                        "description": "Path is the path to snapshot, only valid for CephFS",
                        "type": "string"
                      },
                      "startTime": {
                        "description": "StartTime indicates when to start the snapshot",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                }
              },
              "additionalProperties": false
            },
            "parameters": {
              "description": "Parameters is a list of properties to enable on a given pool",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "nullable": true,
              "x-kubernetes-preserve-unknown-fields": true
            },
            "quotas": {
              "description": "The quota settings",
              "type": "object",
              "properties": {
                "maxBytes": {
                  "description": "MaxBytes represents the quota in bytes\nDeprecated in favor of MaxSize",
                  "type": "integer",
                  "format": "int64"
                },
                "maxObjects": {
                  "description": "MaxObjects represents the quota in objects",
                  "type": "integer",
                  "format": "int64"
                },
                "maxSize": {
                  "description": "MaxSize represents the quota in bytes as a string",
                  "type": "string",
                  "pattern": "^[0-9]+[\\.]?[0-9]*([KMGTPE]i|[kMGTPE])?$"
                }
              },
              "additionalProperties": false,
              "nullable": true
            },
            "replicated": {
              "description": "The replication settings",
              "type": "object",
              "required": [
                "size"
              ],
              "properties": {
                "hybridStorage": {
                  "description": "HybridStorage represents hybrid storage tier settings",
                  "type": "object",
                  "required": [
                    "primaryDeviceClass",
                    "secondaryDeviceClass"
                  ],
                  "properties": {
                    "primaryDeviceClass": {
                      "description": "PrimaryDeviceClass represents high performance tier (for example SSD or NVME) for Primary OSD",
                      "type": "string",
                      "minLength": 1
                    },
                    "secondaryDeviceClass": {
                      "description": "SecondaryDeviceClass represents low performance tier (for example HDDs) for remaining OSDs",
                      "type": "string",
                      "minLength": 1
                    }
                  },
                  "additionalProperties": false,
                  "nullable": true
                },
                "replicasPerFailureDomain": {
                  "description": "ReplicasPerFailureDomain the number of replica in the specified failure domain",
                  "type": "integer",
                  "minimum": 1
                },
                "requireSafeReplicaSize": {
                  "description": "RequireSafeReplicaSize if false allows you to set replica 1",
                  "type": "boolean"
                },
                "size": {
                  "description": "Size - Number of copies per object in a replicated storage pool, including the object itself (required for replicated pool type)",
                  "type": "integer",
                  "minimum": 0
                },
                "subFailureDomain": {
                  "description": "SubFailureDomain the name of the sub-failure domain",
                  "type": "string"
                },
                "targetSizeRatio": {
                  "description": "TargetSizeRatio gives a hint (%) to Ceph in terms of expected consumption of the total cluster capacity",
                  "type": "number",
                  "minimum": 0
                }
              },
              "additionalProperties": false
            },
            "statusCheck": {
              "description": "The mirroring statusCheck",
              "type": "object",
              "properties": {
                "mirror": {
                  "description": "HealthCheckSpec represents the health check of an object store bucket",
                  "type": "object",
                  "properties": {
                    "disabled": {
                      "type": "boolean"
                    },
                    "interval": {
                      "description": "Interval is the internal in second or minute for the health check to run like 60s for 60 seconds",
                      "type": "string"
                    },
                    "timeout": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false,
                  "nullable": true
                }
              },
              "additionalProperties": false,
              "x-kubernetes-preserve-unknown-fields": true
            }
          },
          "additionalProperties": false,
          "nullable": true
        },
        "preservePoolsOnDelete": {
          "description": "Preserve pools on object zone deletion",
          "type": "boolean",
          "default": true
        },
        "sharedPools": {
          "description": "The pool information when configuring RADOS namespaces in existing pools.",
          "type": "object",
          "properties": {
            "dataPoolName": {
              "description": "The data pool used for creating RADOS namespaces in the object store",
              "type": "string",
              "x-kubernetes-validations": [
                {
                  "rule": "self == oldSelf",
                  "message": "object store shared data pool is immutable"
                }
              ]
            },
            "metadataPoolName": {
              "description": "The metadata pool used for creating RADOS namespaces in the object store",
              "type": "string",
              "x-kubernetes-validations": [
                {
                  "rule": "self == oldSelf",
                  "message": "object store shared metadata pool is immutable"
                }
              ]
            },
            "poolPlacements": {
              "description": "PoolPlacements control which Pools are associated with a particular RGW bucket.\nOnce PoolPlacements are defined, RGW client will be able to associate pool\nwith ObjectStore bucket by providing \"\u003cLocationConstraint\u003e\" during s3 bucket creation\nor \"X-Storage-Policy\" header during swift container creation.\nSee: https://docs.ceph.com/en/latest/radosgw/placement/#placement-targets\nPoolPlacement with name: \"default\" will be used as a default pool if no option\nis provided during bucket creation.\nIf default placement is not provided, spec.sharedPools.dataPoolName and spec.sharedPools.MetadataPoolName will be used as default pools.\nIf spec.sharedPools are also empty, then RGW pools (spec.dataPool and spec.metadataPool) will be used as defaults.",
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "dataPoolName",
                  "metadataPoolName",
                  "name"
                ],
                "properties": {
                  "dataNonECPoolName": {
                    "description": "The data pool used to store ObjectStore data that cannot use erasure coding (ex: multi-part uploads).\nIf dataPoolName is not erasure coded, then there is no need for dataNonECPoolName.",
                    "type": "string"
                  },
                  "dataPoolName": {
                    "description": "The data pool used to store ObjectStore objects data.",
                    "type": "string",
                    "minLength": 1
                  },
                  "default": {
                    "description": "Sets given placement as default. Only one placement in the list can be marked as default.\nDefault is false.",
                    "type": "boolean"
                  },
                  "metadataPoolName": {
                    "description": "The metadata pool used to store ObjectStore bucket index.",
                    "type": "string",
                    "minLength": 1
                  },
                  "name": {
                    "description": "Pool placement name. Name can be arbitrary. Placement with name \"default\" will be used as default.",
                    "type": "string",
                    "minLength": 1,
                    "pattern": "^[a-zA-Z0-9._/-]+$"
                  },
                  "storageClasses": {
                    "description": "StorageClasses can be selected by user to override dataPoolName during object creation.\nEach placement has default STANDARD StorageClass pointing to dataPoolName.\nThis list allows defining additional StorageClasses on top of default STANDARD storage class.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "dataPoolName",
                        "name"
                      ],
                      "properties": {
                        "dataPoolName": {
                          "description": "DataPoolName is the data pool used to store ObjectStore objects data.",
                          "type": "string",
                          "minLength": 1
                        },
                        "name": {
                          "description": "Name is the StorageClass name. Ceph allows arbitrary name for StorageClasses,\nhowever most clients/libs insist on AWS names so it is recommended to use\none of the valid x-amz-storage-class values for better compatibility:\nREDUCED_REDUNDANCY | STANDARD_IA | ONEZONE_IA | INTELLIGENT_TIERING | GLACIER | DEEP_ARCHIVE | OUTPOSTS | GLACIER_IR | SNOW | EXPRESS_ONEZONE\nSee AWS docs: https://aws.amazon.com/de/s3/storage-classes/",
                          "type": "string",
                          "minLength": 1,
                          "pattern": "^[a-zA-Z0-9._/-]+$"
                        }
                      },
                      "additionalProperties": false
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "preserveRadosNamespaceDataOnDelete": {
              "description": "Whether the RADOS namespaces should be preserved on deletion of the object store",
              "type": "boolean"
            }
          },
          "additionalProperties": false,
          "nullable": true
        },
        "zoneGroup": {
          "description": "The display name for the ceph users",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "Status represents the status of an object",
      "type": "object",
      "properties": {
        "conditions": {
          "type": "array",
          "items": {
            "description": "Condition represents a status condition on any Rook-Ceph Custom Resource.",
            "type": "object",
            "properties": {
              "lastHeartbeatTime": {
                "type": "string",
                "format": "date-time"
              },
              "lastTransitionTime": {
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "type": "string"
              },
              "reason": {
                "description": "ConditionReason is a reason for a condition",
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "type": {
                "description": "ConditionType represent a resource's status",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest generation observed by the controller.",
          "type": "integer",
          "format": "int64"
        },
        "phase": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "x-kubernetes-preserve-unknown-fields": true
    }
  }
}
