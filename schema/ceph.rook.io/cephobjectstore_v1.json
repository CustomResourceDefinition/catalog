{
  "description": "CephObjectStore represents a Ceph Object Store Gateway",
  "type": "object",
  "required": [
    "metadata",
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "ObjectStoreSpec represent the spec of a pool",
      "type": "object",
      "properties": {
        "allowUsersInNamespaces": {
          "description": "The list of allowed namespaces in addition to the object store namespace\nwhere ceph object store users may be created. Specify \"*\" to allow all\nnamespaces, otherwise list individual namespaces that are to be allowed.\nThis is useful for applications that need object store credentials\nto be created in their own namespace, where neither OBCs nor COSI\nis being used to create buckets. The default is empty.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "auth": {
          "description": "The authentication configuration",
          "type": "object",
          "properties": {
            "keystone": {
              "description": "The spec for Keystone",
              "type": "object",
              "required": [
                "acceptedRoles",
                "serviceUserSecretName",
                "url"
              ],
              "properties": {
                "acceptedRoles": {
                  "description": "The roles requires to serve requests.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "implicitTenants": {
                  "description": "Create new users in their own tenants of the same name. Possible values are true, false, swift and s3. The latter have the effect of splitting the identity space such that only the indicated protocol will use implicit tenants.",
                  "type": "string"
                },
                "revocationInterval": {
                  "description": "The number of seconds between token revocation checks.",
                  "type": "integer",
                  "nullable": true
                },
                "serviceUserSecretName": {
                  "description": "The name of the secret containing the credentials for the service user account used by RGW. It has to be in the same namespace as the object store resource.",
                  "type": "string"
                },
                "tokenCacheSize": {
                  "description": "The maximum number of entries in each Keystone token cache.",
                  "type": "integer",
                  "nullable": true
                },
                "url": {
                  "description": "The URL for the Keystone server.",
                  "type": "string"
                }
              },
              "additionalProperties": false,
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "dataPool": {
          "description": "The data pool settings",
          "type": "object",
          "properties": {
            "application": {
              "description": "The application name to set on the pool. Only expected to be set for rgw pools.",
              "type": "string"
            },
            "compressionMode": {
              "description": "DEPRECATED: use Parameters instead, e.g., Parameters[\"compression_mode\"] = \"force\"\nThe inline compression mode in Bluestore OSD to set to (options are: none, passive, aggressive, force)\nDo NOT set a default value for kubebuilder as this will override the Parameters",
              "type": "string",
              "enum": [
                "none",
                "passive",
                "aggressive",
                "force",
                ""
              ],
              "nullable": true
            },
            "crushRoot": {
              "description": "The root of the crush hierarchy utilized by the pool",
              "type": "string",
              "nullable": true
            },
            "deviceClass": {
              "description": "The device class the OSD should set to for use in the pool",
              "type": "string",
              "nullable": true
            },
            "enableCrushUpdates": {
              "description": "Allow rook operator to change the pool CRUSH tunables once the pool is created",
              "type": "boolean"
            },
            "enableRBDStats": {
              "description": "EnableRBDStats is used to enable gathering of statistics for all RBD images in the pool",
              "type": "boolean"
            },
            "erasureCoded": {
              "description": "The erasure code settings",
              "type": "object",
              "required": [
                "codingChunks",
                "dataChunks"
              ],
              "properties": {
                "algorithm": {
                  "description": "The algorithm for erasure coding.\nIf absent, defaults to the plugin specified in osd_pool_default_erasure_code_profile.",
                  "type": "string",
                  "enum": [
                    "isa",
                    "jerasure"
                  ]
                },
                "codingChunks": {
                  "description": "Number of coding chunks per object in an erasure coded storage pool (required for erasure-coded pool type).\nThis is the number of OSDs that can be lost simultaneously before data cannot be recovered.",
                  "type": "integer",
                  "minimum": 0
                },
                "dataChunks": {
                  "description": "Number of data chunks per object in an erasure coded storage pool (required for erasure-coded pool type).\nThe number of chunks required to recover an object when any single OSD is lost is the same\nas dataChunks so be aware that the larger the number of data chunks, the higher the cost of recovery.",
                  "type": "integer",
                  "minimum": 0
                }
              },
              "additionalProperties": false
            },
            "failureDomain": {
              "description": "The failure domain: osd/host/(region or zone if available) - technically also any type in the crush map",
              "type": "string"
            },
            "mirroring": {
              "description": "The mirroring settings",
              "type": "object",
              "properties": {
                "enabled": {
                  "description": "Enabled whether this pool is mirrored or not",
                  "type": "boolean"
                },
                "mode": {
                  "description": "Mode is the mirroring mode: pool, image or init-only.",
                  "type": "string",
                  "enum": [
                    "pool",
                    "image",
                    "init-only"
                  ]
                },
                "peers": {
                  "description": "Peers represents the peers spec",
                  "type": "object",
                  "properties": {
                    "secretNames": {
                      "description": "SecretNames represents the Kubernetes Secret names to add rbd-mirror or cephfs-mirror peers",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "additionalProperties": false,
                  "nullable": true
                },
                "snapshotSchedules": {
                  "description": "SnapshotSchedules is the scheduling of snapshot for mirrored images/pools",
                  "type": "array",
                  "items": {
                    "description": "SnapshotScheduleSpec represents the snapshot scheduling settings of a mirrored pool",
                    "type": "object",
                    "properties": {
                      "interval": {
                        "description": "Interval represent the periodicity of the snapshot.",
                        "type": "string"
                      },
                      "path": {
                        "description": "Path is the path to snapshot, only valid for CephFS",
                        "type": "string"
                      },
                      "startTime": {
                        "description": "StartTime indicates when to start the snapshot",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                }
              },
              "additionalProperties": false
            },
            "parameters": {
              "description": "Parameters is a list of properties to enable on a given pool",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "nullable": true,
              "x-kubernetes-preserve-unknown-fields": true
            },
            "quotas": {
              "description": "The quota settings",
              "type": "object",
              "properties": {
                "maxBytes": {
                  "description": "MaxBytes represents the quota in bytes\nDeprecated in favor of MaxSize",
                  "type": "integer",
                  "format": "int64"
                },
                "maxObjects": {
                  "description": "MaxObjects represents the quota in objects",
                  "type": "integer",
                  "format": "int64"
                },
                "maxSize": {
                  "description": "MaxSize represents the quota in bytes as a string",
                  "type": "string",
                  "pattern": "^[0-9]+[\\.]?[0-9]*([KMGTPE]i|[kMGTPE])?$"
                }
              },
              "additionalProperties": false,
              "nullable": true
            },
            "replicated": {
              "description": "The replication settings",
              "type": "object",
              "required": [
                "size"
              ],
              "properties": {
                "hybridStorage": {
                  "description": "HybridStorage represents hybrid storage tier settings",
                  "type": "object",
                  "required": [
                    "primaryDeviceClass",
                    "secondaryDeviceClass"
                  ],
                  "properties": {
                    "primaryDeviceClass": {
                      "description": "PrimaryDeviceClass represents high performance tier (for example SSD or NVME) for Primary OSD",
                      "type": "string",
                      "minLength": 1
                    },
                    "secondaryDeviceClass": {
                      "description": "SecondaryDeviceClass represents low performance tier (for example HDDs) for remaining OSDs",
                      "type": "string",
                      "minLength": 1
                    }
                  },
                  "additionalProperties": false,
                  "nullable": true
                },
                "replicasPerFailureDomain": {
                  "description": "ReplicasPerFailureDomain the number of replica in the specified failure domain",
                  "type": "integer",
                  "minimum": 1
                },
                "requireSafeReplicaSize": {
                  "description": "RequireSafeReplicaSize if false allows you to set replica 1",
                  "type": "boolean"
                },
                "size": {
                  "description": "Size - Number of copies per object in a replicated storage pool, including the object itself (required for replicated pool type)",
                  "type": "integer",
                  "minimum": 0
                },
                "subFailureDomain": {
                  "description": "SubFailureDomain the name of the sub-failure domain",
                  "type": "string"
                },
                "targetSizeRatio": {
                  "description": "TargetSizeRatio gives a hint (%) to Ceph in terms of expected consumption of the total cluster capacity",
                  "type": "number",
                  "minimum": 0
                }
              },
              "additionalProperties": false
            },
            "statusCheck": {
              "description": "The mirroring statusCheck",
              "type": "object",
              "properties": {
                "mirror": {
                  "description": "HealthCheckSpec represents the health check of an object store bucket",
                  "type": "object",
                  "properties": {
                    "disabled": {
                      "type": "boolean"
                    },
                    "interval": {
                      "description": "Interval is the internal in second or minute for the health check to run like 60s for 60 seconds",
                      "type": "string"
                    },
                    "timeout": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false,
                  "nullable": true
                }
              },
              "additionalProperties": false,
              "x-kubernetes-preserve-unknown-fields": true
            }
          },
          "additionalProperties": false,
          "nullable": true
        },
        "defaultRealm": {
          "description": "Set this realm as the default in Ceph. Only one realm should be default.\nDo not set this true on more than one CephObjectStore.\nThis may not be set when zone is also specified; in this case, the realm\nreferenced by the zone's zonegroup should configure defaulting behavior.",
          "type": "boolean"
        },
        "gateway": {
          "description": "The rgw pod info",
          "type": "object",
          "properties": {
            "additionalVolumeMounts": {
              "description": "AdditionalVolumeMounts allows additional volumes to be mounted to the RGW pod.\nThe root directory for each additional volume mount is `/var/rgw`.\nExample: for an additional mount at subPath `ldap`, mounted from a secret that has key\n`bindpass.secret`, the file would reside at `/var/rgw/ldap/bindpass.secret`.",
              "type": "array",
              "items": {
                "description": "AdditionalVolumeMount represents the source from where additional files in pod containers\nshould come from and what subdirectory they are made available in.",
                "type": "object",
                "required": [
                  "subPath",
                  "volumeSource"
                ],
                "properties": {
                  "subPath": {
                    "description": "SubPath defines the sub-path (subdirectory) of the directory root where the volumeSource will\nbe mounted. All files/keys in the volume source's volume will be mounted to the subdirectory.\nThis is not the same as the Kubernetes `subPath` volume mount option.\nEach subPath definition must be unique and must not contain ':'.",
                    "type": "string",
                    "minLength": 1,
                    "pattern": "^[^:]+$"
                  },
                  "volumeSource": {
                    "type": "object",
                    "properties": {
                      "configMap": {
                        "type": "object",
                        "properties": {
                          "defaultMode": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "items": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "key",
                                "path"
                              ],
                              "properties": {
                                "key": {
                                  "type": "string"
                                },
                                "mode": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "path": {
                                  "type": "string"
                                }
                              },
                              "additionalProperties": false
                            },
                            "x-kubernetes-list-type": "atomic"
                          },
                          "name": {
                            "type": "string",
                            "default": ""
                          },
                          "optional": {
                            "type": "boolean"
                          }
                        },
                        "additionalProperties": false,
                        "x-kubernetes-map-type": "atomic"
                      },
                      "emptyDir": {
                        "type": "object",
                        "properties": {
                          "medium": {
                            "type": "string"
                          },
                          "sizeLimit": {
                            "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                            "anyOf": [
                              {
                                "type": "integer"
                              },
                              {
                                "type": "string"
                              }
                            ],
                            "x-kubernetes-int-or-string": true
                          }
                        },
                        "additionalProperties": false
                      },
                      "hostPath": {
                        "type": "object",
                        "required": [
                          "path"
                        ],
                        "properties": {
                          "path": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": false
                      },
                      "persistentVolumeClaim": {
                        "type": "object",
                        "required": [
                          "claimName"
                        ],
                        "properties": {
                          "claimName": {
                            "type": "string"
                          },
                          "readOnly": {
                            "type": "boolean"
                          }
                        },
                        "additionalProperties": false
                      },
                      "projected": {
                        "type": "object",
                        "properties": {
                          "defaultMode": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "sources": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "clusterTrustBundle": {
                                  "type": "object",
                                  "required": [
                                    "path"
                                  ],
                                  "properties": {
                                    "labelSelector": {
                                      "type": "object",
                                      "properties": {
                                        "matchExpressions": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "required": [
                                              "key",
                                              "operator"
                                            ],
                                            "properties": {
                                              "key": {
                                                "type": "string"
                                              },
                                              "operator": {
                                                "type": "string"
                                              },
                                              "values": {
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                },
                                                "x-kubernetes-list-type": "atomic"
                                              }
                                            },
                                            "additionalProperties": false
                                          },
                                          "x-kubernetes-list-type": "atomic"
                                        },
                                        "matchLabels": {
                                          "type": "object",
                                          "additionalProperties": {
                                            "type": "string"
                                          }
                                        }
                                      },
                                      "additionalProperties": false,
                                      "x-kubernetes-map-type": "atomic"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "optional": {
                                      "type": "boolean"
                                    },
                                    "path": {
                                      "type": "string"
                                    },
                                    "signerName": {
                                      "type": "string"
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "configMap": {
                                  "type": "object",
                                  "properties": {
                                    "items": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "required": [
                                          "key",
                                          "path"
                                        ],
                                        "properties": {
                                          "key": {
                                            "type": "string"
                                          },
                                          "mode": {
                                            "type": "integer",
                                            "format": "int32"
                                          },
                                          "path": {
                                            "type": "string"
                                          }
                                        },
                                        "additionalProperties": false
                                      },
                                      "x-kubernetes-list-type": "atomic"
                                    },
                                    "name": {
                                      "type": "string",
                                      "default": ""
                                    },
                                    "optional": {
                                      "type": "boolean"
                                    }
                                  },
                                  "additionalProperties": false,
                                  "x-kubernetes-map-type": "atomic"
                                },
                                "downwardAPI": {
                                  "type": "object",
                                  "properties": {
                                    "items": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "required": [
                                          "path"
                                        ],
                                        "properties": {
                                          "fieldRef": {
                                            "type": "object",
                                            "required": [
                                              "fieldPath"
                                            ],
                                            "properties": {
                                              "apiVersion": {
                                                "type": "string"
                                              },
                                              "fieldPath": {
                                                "type": "string"
                                              }
                                            },
                                            "additionalProperties": false,
                                            "x-kubernetes-map-type": "atomic"
                                          },
                                          "mode": {
                                            "type": "integer",
                                            "format": "int32"
                                          },
                                          "path": {
                                            "type": "string"
                                          },
                                          "resourceFieldRef": {
                                            "type": "object",
                                            "required": [
                                              "resource"
                                            ],
                                            "properties": {
                                              "containerName": {
                                                "type": "string"
                                              },
                                              "divisor": {
                                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                                "anyOf": [
                                                  {
                                                    "type": "integer"
                                                  },
                                                  {
                                                    "type": "string"
                                                  }
                                                ],
                                                "x-kubernetes-int-or-string": true
                                              },
                                              "resource": {
                                                "type": "string"
                                              }
                                            },
                                            "additionalProperties": false,
                                            "x-kubernetes-map-type": "atomic"
                                          }
                                        },
                                        "additionalProperties": false
                                      },
                                      "x-kubernetes-list-type": "atomic"
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "secret": {
                                  "type": "object",
                                  "properties": {
                                    "items": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "required": [
                                          "key",
                                          "path"
                                        ],
                                        "properties": {
                                          "key": {
                                            "type": "string"
                                          },
                                          "mode": {
                                            "type": "integer",
                                            "format": "int32"
                                          },
                                          "path": {
                                            "type": "string"
                                          }
                                        },
                                        "additionalProperties": false
                                      },
                                      "x-kubernetes-list-type": "atomic"
                                    },
                                    "name": {
                                      "type": "string",
                                      "default": ""
                                    },
                                    "optional": {
                                      "type": "boolean"
                                    }
                                  },
                                  "additionalProperties": false,
                                  "x-kubernetes-map-type": "atomic"
                                },
                                "serviceAccountToken": {
                                  "type": "object",
                                  "required": [
                                    "path"
                                  ],
                                  "properties": {
                                    "audience": {
                                      "type": "string"
                                    },
                                    "expirationSeconds": {
                                      "type": "integer",
                                      "format": "int64"
                                    },
                                    "path": {
                                      "type": "string"
                                    }
                                  },
                                  "additionalProperties": false
                                }
                              },
                              "additionalProperties": false
                            },
                            "x-kubernetes-list-type": "atomic"
                          }
                        },
                        "additionalProperties": false
                      },
                      "secret": {
                        "type": "object",
                        "properties": {
                          "defaultMode": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "items": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "key",
                                "path"
                              ],
                              "properties": {
                                "key": {
                                  "type": "string"
                                },
                                "mode": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "path": {
                                  "type": "string"
                                }
                              },
                              "additionalProperties": false
                            },
                            "x-kubernetes-list-type": "atomic"
                          },
                          "optional": {
                            "type": "boolean"
                          },
                          "secretName": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              }
            },
            "annotations": {
              "description": "The annotations-related configuration to add/set on each Pod related object.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "nullable": true,
              "x-kubernetes-preserve-unknown-fields": true
            },
            "caBundleRef": {
              "description": "The name of the secret that stores custom ca-bundle with root and intermediate certificates.",
              "type": "string",
              "nullable": true
            },
            "dashboardEnabled": {
              "description": "Whether rgw dashboard is enabled for the rgw daemon. If not set, the rgw dashboard will be enabled.",
              "type": "boolean",
              "nullable": true,
              "x-kubernetes-preserve-unknown-fields": true
            },
            "disableMultisiteSyncTraffic": {
              "description": "DisableMultisiteSyncTraffic, when true, prevents this object store's gateways from\ntransmitting multisite replication data. Note that this value does not affect whether\ngateways receive multisite replication traffic: see ObjectZone.spec.customEndpoints for that.\nIf false or unset, this object store's gateways will be able to transmit multisite\nreplication data.",
              "type": "boolean"
            },
            "externalRgwEndpoints": {
              "description": "ExternalRgwEndpoints points to external RGW endpoint(s). Multiple endpoints can be given, but\nfor stability of ObjectBucketClaims, we highly recommend that users give only a single\nexternal RGW endpoint that is a load balancer that sends requests to the multiple RGWs.",
              "type": "array",
              "items": {
                "description": "EndpointAddress is a tuple that describes a single IP address or host name. This is a subset of\nKubernetes's v1.EndpointAddress.",
                "type": "object",
                "properties": {
                  "hostname": {
                    "description": "The DNS-addressable Hostname of this endpoint. This field will be preferred over IP if both are given.",
                    "type": "string"
                  },
                  "ip": {
                    "description": "The IP of this endpoint. As a legacy behavior, this supports being given a DNS-addressable hostname as well.",
                    "type": "string"
                  }
                },
                "additionalProperties": false,
                "x-kubernetes-map-type": "atomic"
              },
              "nullable": true
            },
            "hostNetwork": {
              "description": "Whether host networking is enabled for the rgw daemon. If not set, the network settings from the cluster CR will be applied.",
              "type": "boolean",
              "nullable": true,
              "x-kubernetes-preserve-unknown-fields": true
            },
            "instances": {
              "description": "The number of pods in the rgw replicaset.",
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "labels": {
              "description": "The labels-related configuration to add/set on each Pod related object.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "nullable": true,
              "x-kubernetes-preserve-unknown-fields": true
            },
            "opsLogSidecar": {
              "description": "Enable enhanced operation Logs for S3 in a sidecar named ops-log",
              "type": "object",
              "properties": {
                "resources": {
                  "description": "Resources represents the way to specify resource requirements for the ops-log sidecar",
                  "type": "object",
                  "properties": {
                    "claims": {
                      "description": "Claims lists the names of resources, defined in spec.resourceClaims,\nthat are used by this container.\n\nThis is an alpha field and requires enabling the\nDynamicResourceAllocation feature gate.\n\nThis field is immutable. It can only be set for containers.",
                      "type": "array",
                      "items": {
                        "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name must match the name of one entry in pod.spec.resourceClaims of\nthe Pod where this field is used. It makes that resource available\ninside a container.",
                            "type": "string"
                          },
                          "request": {
                            "description": "Request is the name chosen for a request in the referenced claim.\nIf empty, everything from the claim is made available, otherwise\nonly the result of this request.",
                            "type": "string"
                          }
                        },
                        "additionalProperties": false
                      },
                      "x-kubernetes-list-map-keys": [
                        "name"
                      ],
                      "x-kubernetes-list-type": "map"
                    },
                    "limits": {
                      "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                      "type": "object",
                      "additionalProperties": {
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "string"
                          }
                        ],
                        "x-kubernetes-int-or-string": true
                      }
                    },
                    "requests": {
                      "description": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                      "type": "object",
                      "additionalProperties": {
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "string"
                          }
                        ],
                        "x-kubernetes-int-or-string": true
                      }
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false,
              "nullable": true
            },
            "placement": {
              "type": "object",
              "properties": {
                "nodeAffinity": {
                  "type": "object",
                  "properties": {
                    "preferredDuringSchedulingIgnoredDuringExecution": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "preference",
                          "weight"
                        ],
                        "properties": {
                          "preference": {
                            "type": "object",
                            "properties": {
                              "matchExpressions": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "required": [
                                    "key",
                                    "operator"
                                  ],
                                  "properties": {
                                    "key": {
                                      "type": "string"
                                    },
                                    "operator": {
                                      "type": "string"
                                    },
                                    "values": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "x-kubernetes-list-type": "atomic"
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "x-kubernetes-list-type": "atomic"
                              },
                              "matchFields": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "required": [
                                    "key",
                                    "operator"
                                  ],
                                  "properties": {
                                    "key": {
                                      "type": "string"
                                    },
                                    "operator": {
                                      "type": "string"
                                    },
                                    "values": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "x-kubernetes-list-type": "atomic"
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "x-kubernetes-list-type": "atomic"
                              }
                            },
                            "additionalProperties": false,
                            "x-kubernetes-map-type": "atomic"
                          },
                          "weight": {
                            "type": "integer",
                            "format": "int32"
                          }
                        },
                        "additionalProperties": false
                      },
                      "x-kubernetes-list-type": "atomic"
                    },
                    "requiredDuringSchedulingIgnoredDuringExecution": {
                      "type": "object",
                      "required": [
                        "nodeSelectorTerms"
                      ],
                      "properties": {
                        "nodeSelectorTerms": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "matchExpressions": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "required": [
                                    "key",
                                    "operator"
                                  ],
                                  "properties": {
                                    "key": {
                                      "type": "string"
                                    },
                                    "operator": {
                                      "type": "string"
                                    },
                                    "values": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "x-kubernetes-list-type": "atomic"
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "x-kubernetes-list-type": "atomic"
                              },
                              "matchFields": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "required": [
                                    "key",
                                    "operator"
                                  ],
                                  "properties": {
                                    "key": {
                                      "type": "string"
                                    },
                                    "operator": {
                                      "type": "string"
                                    },
                                    "values": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "x-kubernetes-list-type": "atomic"
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "x-kubernetes-list-type": "atomic"
                              }
                            },
                            "additionalProperties": false,
                            "x-kubernetes-map-type": "atomic"
                          },
                          "x-kubernetes-list-type": "atomic"
                        }
                      },
                      "additionalProperties": false,
                      "x-kubernetes-map-type": "atomic"
                    }
                  },
                  "additionalProperties": false
                },
                "podAffinity": {
                  "type": "object",
                  "properties": {
                    "preferredDuringSchedulingIgnoredDuringExecution": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "podAffinityTerm",
                          "weight"
                        ],
                        "properties": {
                          "podAffinityTerm": {
                            "type": "object",
                            "required": [
                              "topologyKey"
                            ],
                            "properties": {
                              "labelSelector": {
                                "type": "object",
                                "properties": {
                                  "matchExpressions": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "required": [
                                        "key",
                                        "operator"
                                      ],
                                      "properties": {
                                        "key": {
                                          "type": "string"
                                        },
                                        "operator": {
                                          "type": "string"
                                        },
                                        "values": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "x-kubernetes-list-type": "atomic"
                                        }
                                      },
                                      "additionalProperties": false
                                    },
                                    "x-kubernetes-list-type": "atomic"
                                  },
                                  "matchLabels": {
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "additionalProperties": false,
                                "x-kubernetes-map-type": "atomic"
                              },
                              "matchLabelKeys": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "x-kubernetes-list-type": "atomic"
                              },
                              "mismatchLabelKeys": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "x-kubernetes-list-type": "atomic"
                              },
                              "namespaceSelector": {
                                "type": "object",
                                "properties": {
                                  "matchExpressions": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "required": [
                                        "key",
                                        "operator"
                                      ],
                                      "properties": {
                                        "key": {
                                          "type": "string"
                                        },
                                        "operator": {
                                          "type": "string"
                                        },
                                        "values": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "x-kubernetes-list-type": "atomic"
                                        }
                                      },
                                      "additionalProperties": false
                                    },
                                    "x-kubernetes-list-type": "atomic"
                                  },
                                  "matchLabels": {
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "additionalProperties": false,
                                "x-kubernetes-map-type": "atomic"
                              },
                              "namespaces": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "x-kubernetes-list-type": "atomic"
                              },
                              "topologyKey": {
                                "type": "string"
                              }
                            },
                            "additionalProperties": false
                          },
                          "weight": {
                            "type": "integer",
                            "format": "int32"
                          }
                        },
                        "additionalProperties": false
                      },
                      "x-kubernetes-list-type": "atomic"
                    },
                    "requiredDuringSchedulingIgnoredDuringExecution": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "topologyKey"
                        ],
                        "properties": {
                          "labelSelector": {
                            "type": "object",
                            "properties": {
                              "matchExpressions": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "required": [
                                    "key",
                                    "operator"
                                  ],
                                  "properties": {
                                    "key": {
                                      "type": "string"
                                    },
                                    "operator": {
                                      "type": "string"
                                    },
                                    "values": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "x-kubernetes-list-type": "atomic"
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "x-kubernetes-list-type": "atomic"
                              },
                              "matchLabels": {
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              }
                            },
                            "additionalProperties": false,
                            "x-kubernetes-map-type": "atomic"
                          },
                          "matchLabelKeys": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "x-kubernetes-list-type": "atomic"
                          },
                          "mismatchLabelKeys": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "x-kubernetes-list-type": "atomic"
                          },
                          "namespaceSelector": {
                            "type": "object",
                            "properties": {
                              "matchExpressions": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "required": [
                                    "key",
                                    "operator"
                                  ],
                                  "properties": {
                                    "key": {
                                      "type": "string"
                                    },
                                    "operator": {
                                      "type": "string"
                                    },
                                    "values": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "x-kubernetes-list-type": "atomic"
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "x-kubernetes-list-type": "atomic"
                              },
                              "matchLabels": {
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              }
                            },
                            "additionalProperties": false,
                            "x-kubernetes-map-type": "atomic"
                          },
                          "namespaces": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "x-kubernetes-list-type": "atomic"
                          },
                          "topologyKey": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": false
                      },
                      "x-kubernetes-list-type": "atomic"
                    }
                  },
                  "additionalProperties": false
                },
                "podAntiAffinity": {
                  "type": "object",
                  "properties": {
                    "preferredDuringSchedulingIgnoredDuringExecution": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "podAffinityTerm",
                          "weight"
                        ],
                        "properties": {
                          "podAffinityTerm": {
                            "type": "object",
                            "required": [
                              "topologyKey"
                            ],
                            "properties": {
                              "labelSelector": {
                                "type": "object",
                                "properties": {
                                  "matchExpressions": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "required": [
                                        "key",
                                        "operator"
                                      ],
                                      "properties": {
                                        "key": {
                                          "type": "string"
                                        },
                                        "operator": {
                                          "type": "string"
                                        },
                                        "values": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "x-kubernetes-list-type": "atomic"
                                        }
                                      },
                                      "additionalProperties": false
                                    },
                                    "x-kubernetes-list-type": "atomic"
                                  },
                                  "matchLabels": {
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "additionalProperties": false,
                                "x-kubernetes-map-type": "atomic"
                              },
                              "matchLabelKeys": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "x-kubernetes-list-type": "atomic"
                              },
                              "mismatchLabelKeys": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "x-kubernetes-list-type": "atomic"
                              },
                              "namespaceSelector": {
                                "type": "object",
                                "properties": {
                                  "matchExpressions": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "required": [
                                        "key",
                                        "operator"
                                      ],
                                      "properties": {
                                        "key": {
                                          "type": "string"
                                        },
                                        "operator": {
                                          "type": "string"
                                        },
                                        "values": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "x-kubernetes-list-type": "atomic"
                                        }
                                      },
                                      "additionalProperties": false
                                    },
                                    "x-kubernetes-list-type": "atomic"
                                  },
                                  "matchLabels": {
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "additionalProperties": false,
                                "x-kubernetes-map-type": "atomic"
                              },
                              "namespaces": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "x-kubernetes-list-type": "atomic"
                              },
                              "topologyKey": {
                                "type": "string"
                              }
                            },
                            "additionalProperties": false
                          },
                          "weight": {
                            "type": "integer",
                            "format": "int32"
                          }
                        },
                        "additionalProperties": false
                      },
                      "x-kubernetes-list-type": "atomic"
                    },
                    "requiredDuringSchedulingIgnoredDuringExecution": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "topologyKey"
                        ],
                        "properties": {
                          "labelSelector": {
                            "type": "object",
                            "properties": {
                              "matchExpressions": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "required": [
                                    "key",
                                    "operator"
                                  ],
                                  "properties": {
                                    "key": {
                                      "type": "string"
                                    },
                                    "operator": {
                                      "type": "string"
                                    },
                                    "values": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "x-kubernetes-list-type": "atomic"
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "x-kubernetes-list-type": "atomic"
                              },
                              "matchLabels": {
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              }
                            },
                            "additionalProperties": false,
                            "x-kubernetes-map-type": "atomic"
                          },
                          "matchLabelKeys": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "x-kubernetes-list-type": "atomic"
                          },
                          "mismatchLabelKeys": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "x-kubernetes-list-type": "atomic"
                          },
                          "namespaceSelector": {
                            "type": "object",
                            "properties": {
                              "matchExpressions": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "required": [
                                    "key",
                                    "operator"
                                  ],
                                  "properties": {
                                    "key": {
                                      "type": "string"
                                    },
                                    "operator": {
                                      "type": "string"
                                    },
                                    "values": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "x-kubernetes-list-type": "atomic"
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "x-kubernetes-list-type": "atomic"
                              },
                              "matchLabels": {
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              }
                            },
                            "additionalProperties": false,
                            "x-kubernetes-map-type": "atomic"
                          },
                          "namespaces": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "x-kubernetes-list-type": "atomic"
                          },
                          "topologyKey": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": false
                      },
                      "x-kubernetes-list-type": "atomic"
                    }
                  },
                  "additionalProperties": false
                },
                "tolerations": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "effect": {
                        "type": "string"
                      },
                      "key": {
                        "type": "string"
                      },
                      "operator": {
                        "type": "string"
                      },
                      "tolerationSeconds": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "value": {
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "topologySpreadConstraints": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "maxSkew",
                      "topologyKey",
                      "whenUnsatisfiable"
                    ],
                    "properties": {
                      "labelSelector": {
                        "type": "object",
                        "properties": {
                          "matchExpressions": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "key",
                                "operator"
                              ],
                              "properties": {
                                "key": {
                                  "type": "string"
                                },
                                "operator": {
                                  "type": "string"
                                },
                                "values": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "x-kubernetes-list-type": "atomic"
                                }
                              },
                              "additionalProperties": false
                            },
                            "x-kubernetes-list-type": "atomic"
                          },
                          "matchLabels": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          }
                        },
                        "additionalProperties": false,
                        "x-kubernetes-map-type": "atomic"
                      },
                      "matchLabelKeys": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "x-kubernetes-list-type": "atomic"
                      },
                      "maxSkew": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "minDomains": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "nodeAffinityPolicy": {
                        "type": "string"
                      },
                      "nodeTaintsPolicy": {
                        "type": "string"
                      },
                      "topologyKey": {
                        "type": "string"
                      },
                      "whenUnsatisfiable": {
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                }
              },
              "additionalProperties": false,
              "nullable": true,
              "x-kubernetes-preserve-unknown-fields": true
            },
            "port": {
              "description": "The port the rgw service will be listening on (http)",
              "type": "integer",
              "format": "int32"
            },
            "priorityClassName": {
              "description": "PriorityClassName sets priority classes on the rgw pods",
              "type": "string"
            },
            "readAffinity": {
              "description": "ReadAffinity defines the RGW read affinity policy to optimize the read requests for the RGW clients\nNote: Only supported from Ceph Tentacle (v20)",
              "type": "object",
              "required": [
                "type"
              ],
              "properties": {
                "type": {
                  "description": "Type defines the RGW ReadAffinity type\nlocalize: read from the nearest OSD based on crush location of the RGW client\nbalance: picks a random OSD from the PG's active set\ndefault: read from the primary OSD",
                  "type": "string",
                  "enum": [
                    "localize",
                    "balance",
                    "default"
                  ]
                }
              },
              "additionalProperties": false
            },
            "resources": {
              "description": "The resource requirements for the rgw pods",
              "type": "object",
              "properties": {
                "claims": {
                  "description": "Claims lists the names of resources, defined in spec.resourceClaims,\nthat are used by this container.\n\nThis is an alpha field and requires enabling the\nDynamicResourceAllocation feature gate.\n\nThis field is immutable. It can only be set for containers.",
                  "type": "array",
                  "items": {
                    "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name must match the name of one entry in pod.spec.resourceClaims of\nthe Pod where this field is used. It makes that resource available\ninside a container.",
                        "type": "string"
                      },
                      "request": {
                        "description": "Request is the name chosen for a request in the referenced claim.\nIf empty, everything from the claim is made available, otherwise\nonly the result of this request.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "x-kubernetes-list-map-keys": [
                    "name"
                  ],
                  "x-kubernetes-list-type": "map"
                },
                "limits": {
                  "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "type": "object",
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "anyOf": [
                      {
                        "type": "integer"
                      },
                      {
                        "type": "string"
                      }
                    ],
                    "x-kubernetes-int-or-string": true
                  }
                },
                "requests": {
                  "description": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "type": "object",
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "anyOf": [
                      {
                        "type": "integer"
                      },
                      {
                        "type": "string"
                      }
                    ],
                    "x-kubernetes-int-or-string": true
                  }
                }
              },
              "additionalProperties": false,
              "nullable": true,
              "x-kubernetes-preserve-unknown-fields": true
            },
            "rgwCommandFlags": {
              "description": "RgwCommandFlags sets Ceph RGW config values for the gateway clients that serve this object\nstore. Values are modified at RGW startup, resulting in RGW pod restarts.\nThis feature is intended for advanced users. It allows breaking configurations to be easily\napplied. Use with caution.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "nullable": true
            },
            "rgwConfig": {
              "description": "RgwConfig sets Ceph RGW config values for the gateway clients that serve this object store.\nValues are modified at runtime without RGW restart.\nThis feature is intended for advanced users. It allows breaking configurations to be easily\napplied. Use with caution.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "nullable": true
            },
            "rgwConfigFromSecret": {
              "description": "RgwConfigFromSecret works exactly like RgwConfig but takes config value from Secret Key reference.\nValues are modified at runtime without RGW restart.\nThis feature is intended for advanced users. It allows breaking configurations to be easily\napplied. Use with caution.",
              "type": "object",
              "additionalProperties": {
                "description": "SecretKeySelector selects a key of a Secret.",
                "type": "object",
                "required": [
                  "key"
                ],
                "properties": {
                  "key": {
                    "description": "The key of the secret to select from.  Must be a valid secret key.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                    "type": "string",
                    "default": ""
                  },
                  "optional": {
                    "description": "Specify whether the Secret or its key must be defined",
                    "type": "boolean"
                  }
                },
                "x-kubernetes-map-type": "atomic"
              },
              "nullable": true
            },
            "securePort": {
              "description": "The port the rgw service will be listening on (https)",
              "type": "integer",
              "format": "int32",
              "maximum": 65535,
              "minimum": 0,
              "nullable": true
            },
            "service": {
              "description": "The configuration related to add/set on each rgw service.",
              "type": "object",
              "properties": {
                "annotations": {
                  "description": "The annotations-related configuration to add/set on each rgw service.\nnullable\noptional",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              },
              "additionalProperties": false,
              "nullable": true
            },
            "sslCertificateRef": {
              "description": "The name of the secret that stores the ssl certificate for secure rgw connections",
              "type": "string",
              "nullable": true
            }
          },
          "additionalProperties": false,
          "nullable": true
        },
        "healthCheck": {
          "description": "The RGW health probes",
          "type": "object",
          "properties": {
            "readinessProbe": {
              "description": "ProbeSpec is a wrapper around Probe so it can be enabled or disabled for a Ceph daemon",
              "type": "object",
              "properties": {
                "disabled": {
                  "description": "Disabled determines whether probe is disable or not",
                  "type": "boolean"
                },
                "probe": {
                  "description": "Probe describes a health check to be performed against a container to determine whether it is\nalive or ready to receive traffic.",
                  "type": "object",
                  "properties": {
                    "exec": {
                      "description": "Exec specifies a command to execute in the container.",
                      "type": "object",
                      "properties": {
                        "command": {
                          "description": "Command is the command line to execute inside the container, the working directory for the\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\na shell, you need to explicitly call out to that shell.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "x-kubernetes-list-type": "atomic"
                        }
                      },
                      "additionalProperties": false
                    },
                    "failureThreshold": {
                      "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded.\nDefaults to 3. Minimum value is 1.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "grpc": {
                      "description": "GRPC specifies a GRPC HealthCheckRequest.",
                      "type": "object",
                      "required": [
                        "port"
                      ],
                      "properties": {
                        "port": {
                          "description": "Port number of the gRPC service. Number must be in the range 1 to 65535.",
                          "type": "integer",
                          "format": "int32"
                        },
                        "service": {
                          "description": "Service is the name of the service to place in the gRPC HealthCheckRequest\n(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\nIf this is not specified, the default behavior is defined by gRPC.",
                          "type": "string",
                          "default": ""
                        }
                      },
                      "additionalProperties": false
                    },
                    "httpGet": {
                      "description": "HTTPGet specifies an HTTP GET request to perform.",
                      "type": "object",
                      "required": [
                        "port"
                      ],
                      "properties": {
                        "host": {
                          "description": "Host name to connect to, defaults to the pod IP. You probably want to set\n\"Host\" in httpHeaders instead.",
                          "type": "string"
                        },
                        "httpHeaders": {
                          "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                          "type": "array",
                          "items": {
                            "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                            "type": "object",
                            "required": [
                              "name",
                              "value"
                            ],
                            "properties": {
                              "name": {
                                "description": "The header field name.\nThis will be canonicalized upon output, so case-variant names will be understood as the same header.",
                                "type": "string"
                              },
                              "value": {
                                "description": "The header field value",
                                "type": "string"
                              }
                            },
                            "additionalProperties": false
                          },
                          "x-kubernetes-list-type": "atomic"
                        },
                        "path": {
                          "description": "Path to access on the HTTP server.",
                          "type": "string"
                        },
                        "port": {
                          "description": "Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.",
                          "anyOf": [
                            {
                              "type": "integer"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "x-kubernetes-int-or-string": true
                        },
                        "scheme": {
                          "description": "Scheme to use for connecting to the host.\nDefaults to HTTP.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    },
                    "initialDelaySeconds": {
                      "description": "Number of seconds after the container has started before liveness probes are initiated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                      "type": "integer",
                      "format": "int32"
                    },
                    "periodSeconds": {
                      "description": "How often (in seconds) to perform the probe.\nDefault to 10 seconds. Minimum value is 1.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "successThreshold": {
                      "description": "Minimum consecutive successes for the probe to be considered successful after having failed.\nDefaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "tcpSocket": {
                      "description": "TCPSocket specifies a connection to a TCP port.",
                      "type": "object",
                      "required": [
                        "port"
                      ],
                      "properties": {
                        "host": {
                          "description": "Optional: Host name to connect to, defaults to the pod IP.",
                          "type": "string"
                        },
                        "port": {
                          "description": "Number or name of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.",
                          "anyOf": [
                            {
                              "type": "integer"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "x-kubernetes-int-or-string": true
                        }
                      },
                      "additionalProperties": false
                    },
                    "terminationGracePeriodSeconds": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "timeoutSeconds": {
                      "description": "Number of seconds after which the probe times out.\nDefaults to 1 second. Minimum value is 1.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                      "type": "integer",
                      "format": "int32"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false,
              "x-kubernetes-preserve-unknown-fields": true
            },
            "startupProbe": {
              "description": "ProbeSpec is a wrapper around Probe so it can be enabled or disabled for a Ceph daemon",
              "type": "object",
              "properties": {
                "disabled": {
                  "description": "Disabled determines whether probe is disable or not",
                  "type": "boolean"
                },
                "probe": {
                  "description": "Probe describes a health check to be performed against a container to determine whether it is\nalive or ready to receive traffic.",
                  "type": "object",
                  "properties": {
                    "exec": {
                      "description": "Exec specifies a command to execute in the container.",
                      "type": "object",
                      "properties": {
                        "command": {
                          "description": "Command is the command line to execute inside the container, the working directory for the\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\na shell, you need to explicitly call out to that shell.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "x-kubernetes-list-type": "atomic"
                        }
                      },
                      "additionalProperties": false
                    },
                    "failureThreshold": {
                      "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded.\nDefaults to 3. Minimum value is 1.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "grpc": {
                      "description": "GRPC specifies a GRPC HealthCheckRequest.",
                      "type": "object",
                      "required": [
                        "port"
                      ],
                      "properties": {
                        "port": {
                          "description": "Port number of the gRPC service. Number must be in the range 1 to 65535.",
                          "type": "integer",
                          "format": "int32"
                        },
                        "service": {
                          "description": "Service is the name of the service to place in the gRPC HealthCheckRequest\n(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\nIf this is not specified, the default behavior is defined by gRPC.",
                          "type": "string",
                          "default": ""
                        }
                      },
                      "additionalProperties": false
                    },
                    "httpGet": {
                      "description": "HTTPGet specifies an HTTP GET request to perform.",
                      "type": "object",
                      "required": [
                        "port"
                      ],
                      "properties": {
                        "host": {
                          "description": "Host name to connect to, defaults to the pod IP. You probably want to set\n\"Host\" in httpHeaders instead.",
                          "type": "string"
                        },
                        "httpHeaders": {
                          "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                          "type": "array",
                          "items": {
                            "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                            "type": "object",
                            "required": [
                              "name",
                              "value"
                            ],
                            "properties": {
                              "name": {
                                "description": "The header field name.\nThis will be canonicalized upon output, so case-variant names will be understood as the same header.",
                                "type": "string"
                              },
                              "value": {
                                "description": "The header field value",
                                "type": "string"
                              }
                            },
                            "additionalProperties": false
                          },
                          "x-kubernetes-list-type": "atomic"
                        },
                        "path": {
                          "description": "Path to access on the HTTP server.",
                          "type": "string"
                        },
                        "port": {
                          "description": "Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.",
                          "anyOf": [
                            {
                              "type": "integer"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "x-kubernetes-int-or-string": true
                        },
                        "scheme": {
                          "description": "Scheme to use for connecting to the host.\nDefaults to HTTP.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    },
                    "initialDelaySeconds": {
                      "description": "Number of seconds after the container has started before liveness probes are initiated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                      "type": "integer",
                      "format": "int32"
                    },
                    "periodSeconds": {
                      "description": "How often (in seconds) to perform the probe.\nDefault to 10 seconds. Minimum value is 1.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "successThreshold": {
                      "description": "Minimum consecutive successes for the probe to be considered successful after having failed.\nDefaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "tcpSocket": {
                      "description": "TCPSocket specifies a connection to a TCP port.",
                      "type": "object",
                      "required": [
                        "port"
                      ],
                      "properties": {
                        "host": {
                          "description": "Optional: Host name to connect to, defaults to the pod IP.",
                          "type": "string"
                        },
                        "port": {
                          "description": "Number or name of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.",
                          "anyOf": [
                            {
                              "type": "integer"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "x-kubernetes-int-or-string": true
                        }
                      },
                      "additionalProperties": false
                    },
                    "terminationGracePeriodSeconds": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "timeoutSeconds": {
                      "description": "Number of seconds after which the probe times out.\nDefaults to 1 second. Minimum value is 1.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                      "type": "integer",
                      "format": "int32"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false,
          "nullable": true
        },
        "hosting": {
          "description": "Hosting settings for the object store.\nA common use case for hosting configuration is to inform Rook of endpoints that support DNS\nwildcards, which in turn allows virtual host-style bucket addressing.",
          "type": "object",
          "properties": {
            "advertiseEndpoint": {
              "description": "AdvertiseEndpoint is the default endpoint Rook will return for resources dependent on this\nobject store. This endpoint will be returned to CephObjectStoreUsers, Object Bucket Claims,\nand COSI Buckets/Accesses.\nBy default, Rook returns the endpoint for the object store's Kubernetes service using HTTPS\nwith `gateway.securePort` if it is defined (otherwise, HTTP with `gateway.port`).",
              "type": "object",
              "required": [
                "dnsName",
                "port",
                "useTls"
              ],
              "properties": {
                "dnsName": {
                  "description": "DnsName is the DNS name (in RFC-1123 format) of the endpoint.\nIf the DNS name corresponds to an endpoint with DNS wildcard support, do not include the\nwildcard itself in the list of hostnames.\nE.g., use \"mystore.example.com\" instead of \"*.mystore.example.com\".",
                  "type": "string",
                  "minLength": 1
                },
                "port": {
                  "description": "Port is the port on which S3 connections can be made for this endpoint.",
                  "type": "integer",
                  "format": "int32",
                  "maximum": 65535,
                  "minimum": 1
                },
                "useTls": {
                  "description": "UseTls defines whether the endpoint uses TLS (HTTPS) or not (HTTP).",
                  "type": "boolean"
                }
              },
              "additionalProperties": false,
              "nullable": true
            },
            "dnsNames": {
              "description": "A list of DNS host names on which object store gateways will accept client S3 connections.\nWhen specified, object store gateways will reject client S3 connections to hostnames that are\nnot present in this list, so include all endpoints.\nThe object store's advertiseEndpoint and Kubernetes service endpoint, plus CephObjectZone\n`customEndpoints` are automatically added to the list but may be set here again if desired.\nEach DNS name must be valid according RFC-1123.\nIf the DNS name corresponds to an endpoint with DNS wildcard support, do not include the\nwildcard itself in the list of hostnames.\nE.g., use \"mystore.example.com\" instead of \"*.mystore.example.com\".",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false,
          "nullable": true
        },
        "metadataPool": {
          "description": "The metadata pool settings",
          "type": "object",
          "properties": {
            "application": {
              "description": "The application name to set on the pool. Only expected to be set for rgw pools.",
              "type": "string"
            },
            "compressionMode": {
              "description": "DEPRECATED: use Parameters instead, e.g., Parameters[\"compression_mode\"] = \"force\"\nThe inline compression mode in Bluestore OSD to set to (options are: none, passive, aggressive, force)\nDo NOT set a default value for kubebuilder as this will override the Parameters",
              "type": "string",
              "enum": [
                "none",
                "passive",
                "aggressive",
                "force",
                ""
              ],
              "nullable": true
            },
            "crushRoot": {
              "description": "The root of the crush hierarchy utilized by the pool",
              "type": "string",
              "nullable": true
            },
            "deviceClass": {
              "description": "The device class the OSD should set to for use in the pool",
              "type": "string",
              "nullable": true
            },
            "enableCrushUpdates": {
              "description": "Allow rook operator to change the pool CRUSH tunables once the pool is created",
              "type": "boolean"
            },
            "enableRBDStats": {
              "description": "EnableRBDStats is used to enable gathering of statistics for all RBD images in the pool",
              "type": "boolean"
            },
            "erasureCoded": {
              "description": "The erasure code settings",
              "type": "object",
              "required": [
                "codingChunks",
                "dataChunks"
              ],
              "properties": {
                "algorithm": {
                  "description": "The algorithm for erasure coding.\nIf absent, defaults to the plugin specified in osd_pool_default_erasure_code_profile.",
                  "type": "string",
                  "enum": [
                    "isa",
                    "jerasure"
                  ]
                },
                "codingChunks": {
                  "description": "Number of coding chunks per object in an erasure coded storage pool (required for erasure-coded pool type).\nThis is the number of OSDs that can be lost simultaneously before data cannot be recovered.",
                  "type": "integer",
                  "minimum": 0
                },
                "dataChunks": {
                  "description": "Number of data chunks per object in an erasure coded storage pool (required for erasure-coded pool type).\nThe number of chunks required to recover an object when any single OSD is lost is the same\nas dataChunks so be aware that the larger the number of data chunks, the higher the cost of recovery.",
                  "type": "integer",
                  "minimum": 0
                }
              },
              "additionalProperties": false
            },
            "failureDomain": {
              "description": "The failure domain: osd/host/(region or zone if available) - technically also any type in the crush map",
              "type": "string"
            },
            "mirroring": {
              "description": "The mirroring settings",
              "type": "object",
              "properties": {
                "enabled": {
                  "description": "Enabled whether this pool is mirrored or not",
                  "type": "boolean"
                },
                "mode": {
                  "description": "Mode is the mirroring mode: pool, image or init-only.",
                  "type": "string",
                  "enum": [
                    "pool",
                    "image",
                    "init-only"
                  ]
                },
                "peers": {
                  "description": "Peers represents the peers spec",
                  "type": "object",
                  "properties": {
                    "secretNames": {
                      "description": "SecretNames represents the Kubernetes Secret names to add rbd-mirror or cephfs-mirror peers",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "additionalProperties": false,
                  "nullable": true
                },
                "snapshotSchedules": {
                  "description": "SnapshotSchedules is the scheduling of snapshot for mirrored images/pools",
                  "type": "array",
                  "items": {
                    "description": "SnapshotScheduleSpec represents the snapshot scheduling settings of a mirrored pool",
                    "type": "object",
                    "properties": {
                      "interval": {
                        "description": "Interval represent the periodicity of the snapshot.",
                        "type": "string"
                      },
                      "path": {
                        "description": "Path is the path to snapshot, only valid for CephFS",
                        "type": "string"
                      },
                      "startTime": {
                        "description": "StartTime indicates when to start the snapshot",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                }
              },
              "additionalProperties": false
            },
            "parameters": {
              "description": "Parameters is a list of properties to enable on a given pool",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "nullable": true,
              "x-kubernetes-preserve-unknown-fields": true
            },
            "quotas": {
              "description": "The quota settings",
              "type": "object",
              "properties": {
                "maxBytes": {
                  "description": "MaxBytes represents the quota in bytes\nDeprecated in favor of MaxSize",
                  "type": "integer",
                  "format": "int64"
                },
                "maxObjects": {
                  "description": "MaxObjects represents the quota in objects",
                  "type": "integer",
                  "format": "int64"
                },
                "maxSize": {
                  "description": "MaxSize represents the quota in bytes as a string",
                  "type": "string",
                  "pattern": "^[0-9]+[\\.]?[0-9]*([KMGTPE]i|[kMGTPE])?$"
                }
              },
              "additionalProperties": false,
              "nullable": true
            },
            "replicated": {
              "description": "The replication settings",
              "type": "object",
              "required": [
                "size"
              ],
              "properties": {
                "hybridStorage": {
                  "description": "HybridStorage represents hybrid storage tier settings",
                  "type": "object",
                  "required": [
                    "primaryDeviceClass",
                    "secondaryDeviceClass"
                  ],
                  "properties": {
                    "primaryDeviceClass": {
                      "description": "PrimaryDeviceClass represents high performance tier (for example SSD or NVME) for Primary OSD",
                      "type": "string",
                      "minLength": 1
                    },
                    "secondaryDeviceClass": {
                      "description": "SecondaryDeviceClass represents low performance tier (for example HDDs) for remaining OSDs",
                      "type": "string",
                      "minLength": 1
                    }
                  },
                  "additionalProperties": false,
                  "nullable": true
                },
                "replicasPerFailureDomain": {
                  "description": "ReplicasPerFailureDomain the number of replica in the specified failure domain",
                  "type": "integer",
                  "minimum": 1
                },
                "requireSafeReplicaSize": {
                  "description": "RequireSafeReplicaSize if false allows you to set replica 1",
                  "type": "boolean"
                },
                "size": {
                  "description": "Size - Number of copies per object in a replicated storage pool, including the object itself (required for replicated pool type)",
                  "type": "integer",
                  "minimum": 0
                },
                "subFailureDomain": {
                  "description": "SubFailureDomain the name of the sub-failure domain",
                  "type": "string"
                },
                "targetSizeRatio": {
                  "description": "TargetSizeRatio gives a hint (%) to Ceph in terms of expected consumption of the total cluster capacity",
                  "type": "number",
                  "minimum": 0
                }
              },
              "additionalProperties": false
            },
            "statusCheck": {
              "description": "The mirroring statusCheck",
              "type": "object",
              "properties": {
                "mirror": {
                  "description": "HealthCheckSpec represents the health check of an object store bucket",
                  "type": "object",
                  "properties": {
                    "disabled": {
                      "type": "boolean"
                    },
                    "interval": {
                      "description": "Interval is the internal in second or minute for the health check to run like 60s for 60 seconds",
                      "type": "string"
                    },
                    "timeout": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false,
                  "nullable": true
                }
              },
              "additionalProperties": false,
              "x-kubernetes-preserve-unknown-fields": true
            }
          },
          "additionalProperties": false,
          "nullable": true
        },
        "preservePoolsOnDelete": {
          "description": "Preserve pools on object store deletion",
          "type": "boolean"
        },
        "protocols": {
          "description": "The protocol specification",
          "type": "object",
          "properties": {
            "enableAPIs": {
              "description": "Represents RGW 'rgw_enable_apis' config option. See: https://docs.ceph.com/en/reef/radosgw/config-ref/#confval-rgw_enable_apis\nIf no value provided then all APIs will be enabled: s3, s3website, swift, swift_auth, admin, sts, iam, notifications\nIf enabled APIs are set, all remaining APIs will be disabled.\nThis option overrides S3.Enabled value.",
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "s3",
                  "s3website",
                  "swift",
                  "swift_auth",
                  "admin",
                  "sts",
                  "iam",
                  "notifications"
                ]
              },
              "nullable": true
            },
            "s3": {
              "description": "The spec for S3",
              "type": "object",
              "properties": {
                "authUseKeystone": {
                  "description": "Whether to use Keystone for authentication. This option maps directly to the rgw_s3_auth_use_keystone option. Enabling it allows generating S3 credentials via an OpenStack API call, see the docs. If not given, the defaults of the corresponding RGW option apply.",
                  "type": "boolean",
                  "nullable": true
                },
                "enabled": {
                  "description": "Deprecated: use protocol.enableAPIs instead.\nWhether to enable S3. This defaults to true (even if protocols.s3 is not present in the CRD). This maintains backwards compatibility – by default S3 is enabled.",
                  "type": "boolean",
                  "nullable": true
                }
              },
              "additionalProperties": false,
              "nullable": true
            },
            "swift": {
              "description": "The spec for Swift",
              "type": "object",
              "properties": {
                "accountInUrl": {
                  "description": "Whether or not the Swift account name should be included in the Swift API URL. If set to false (the default), then the Swift API will listen on a URL formed like http://host:port/\u003crgw_swift_url_prefix\u003e/v1. If set to true, the Swift API URL will be http://host:port/\u003crgw_swift_url_prefix\u003e/v1/AUTH_\u003caccount_name\u003e. You must set this option to true (and update the Keystone service catalog) if you want radosgw to support publicly-readable containers and temporary URLs.",
                  "type": "boolean",
                  "nullable": true
                },
                "urlPrefix": {
                  "description": "The URL prefix for the Swift API, to distinguish it from the S3 API endpoint. The default is swift, which makes the Swift API available at the URL http://host:port/swift/v1 (or http://host:port/swift/v1/AUTH_%(tenant_id)s if rgw swift account in url is enabled).",
                  "type": "string",
                  "nullable": true
                },
                "versioningEnabled": {
                  "description": "Enables the Object Versioning of OpenStack Object Storage API. This allows clients to put the X-Versions-Location attribute on containers that should be versioned.",
                  "type": "boolean",
                  "nullable": true
                }
              },
              "additionalProperties": false,
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "security": {
          "description": "Security represents security settings",
          "type": "object",
          "properties": {
            "keyRotation": {
              "description": "KeyRotation defines options for Key Rotation.",
              "type": "object",
              "properties": {
                "enabled": {
                  "description": "Enabled represents whether the key rotation is enabled.",
                  "type": "boolean",
                  "default": false
                },
                "schedule": {
                  "description": "Schedule represents the cron schedule for key rotation.",
                  "type": "string"
                }
              },
              "additionalProperties": false,
              "nullable": true
            },
            "kms": {
              "description": "KeyManagementService is the main Key Management option",
              "type": "object",
              "properties": {
                "connectionDetails": {
                  "description": "ConnectionDetails contains the KMS connection details (address, port etc)",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "nullable": true,
                  "x-kubernetes-preserve-unknown-fields": true
                },
                "tokenSecretName": {
                  "description": "TokenSecretName is the kubernetes secret containing the KMS token",
                  "type": "string"
                }
              },
              "additionalProperties": false,
              "nullable": true
            },
            "s3": {
              "description": "The settings for supporting AWS-SSE:S3 with RGW",
              "type": "object",
              "properties": {
                "connectionDetails": {
                  "description": "ConnectionDetails contains the KMS connection details (address, port etc)",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "nullable": true,
                  "x-kubernetes-preserve-unknown-fields": true
                },
                "tokenSecretName": {
                  "description": "TokenSecretName is the kubernetes secret containing the KMS token",
                  "type": "string"
                }
              },
              "additionalProperties": false,
              "nullable": true
            }
          },
          "additionalProperties": false,
          "nullable": true
        },
        "sharedPools": {
          "description": "The pool information when configuring RADOS namespaces in existing pools.",
          "type": "object",
          "properties": {
            "dataPoolName": {
              "description": "The data pool used for creating RADOS namespaces in the object store",
              "type": "string",
              "x-kubernetes-validations": [
                {
                  "rule": "self == oldSelf",
                  "message": "object store shared data pool is immutable"
                }
              ]
            },
            "metadataPoolName": {
              "description": "The metadata pool used for creating RADOS namespaces in the object store",
              "type": "string",
              "x-kubernetes-validations": [
                {
                  "rule": "self == oldSelf",
                  "message": "object store shared metadata pool is immutable"
                }
              ]
            },
            "poolPlacements": {
              "description": "PoolPlacements control which Pools are associated with a particular RGW bucket.\nOnce PoolPlacements are defined, RGW client will be able to associate pool\nwith ObjectStore bucket by providing \"\u003cLocationConstraint\u003e\" during s3 bucket creation\nor \"X-Storage-Policy\" header during swift container creation.\nSee: https://docs.ceph.com/en/latest/radosgw/placement/#placement-targets\nPoolPlacement with name: \"default\" will be used as a default pool if no option\nis provided during bucket creation.\nIf default placement is not provided, spec.sharedPools.dataPoolName and spec.sharedPools.MetadataPoolName will be used as default pools.\nIf spec.sharedPools are also empty, then RGW pools (spec.dataPool and spec.metadataPool) will be used as defaults.",
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "dataPoolName",
                  "metadataPoolName",
                  "name"
                ],
                "properties": {
                  "dataNonECPoolName": {
                    "description": "The data pool used to store ObjectStore data that cannot use erasure coding (ex: multi-part uploads).\nIf dataPoolName is not erasure coded, then there is no need for dataNonECPoolName.",
                    "type": "string"
                  },
                  "dataPoolName": {
                    "description": "The data pool used to store ObjectStore objects data.",
                    "type": "string",
                    "minLength": 1
                  },
                  "default": {
                    "description": "Sets given placement as default. Only one placement in the list can be marked as default.\nDefault is false.",
                    "type": "boolean"
                  },
                  "metadataPoolName": {
                    "description": "The metadata pool used to store ObjectStore bucket index.",
                    "type": "string",
                    "minLength": 1
                  },
                  "name": {
                    "description": "Pool placement name. Name can be arbitrary. Placement with name \"default\" will be used as default.",
                    "type": "string",
                    "minLength": 1,
                    "pattern": "^[a-zA-Z0-9._/-]+$"
                  },
                  "storageClasses": {
                    "description": "StorageClasses can be selected by user to override dataPoolName during object creation.\nEach placement has default STANDARD StorageClass pointing to dataPoolName.\nThis list allows defining additional StorageClasses on top of default STANDARD storage class.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "dataPoolName",
                        "name"
                      ],
                      "properties": {
                        "dataPoolName": {
                          "description": "DataPoolName is the data pool used to store ObjectStore objects data.",
                          "type": "string",
                          "minLength": 1
                        },
                        "name": {
                          "description": "Name is the StorageClass name. Ceph allows arbitrary name for StorageClasses,\nhowever most clients/libs insist on AWS names so it is recommended to use\none of the valid x-amz-storage-class values for better compatibility:\nREDUCED_REDUNDANCY | STANDARD_IA | ONEZONE_IA | INTELLIGENT_TIERING | GLACIER | DEEP_ARCHIVE | OUTPOSTS | GLACIER_IR | SNOW | EXPRESS_ONEZONE\nSee AWS docs: https://aws.amazon.com/de/s3/storage-classes/",
                          "type": "string",
                          "minLength": 1,
                          "pattern": "^[a-zA-Z0-9._/-]+$"
                        }
                      },
                      "additionalProperties": false
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "preserveRadosNamespaceDataOnDelete": {
              "description": "Whether the RADOS namespaces should be preserved on deletion of the object store",
              "type": "boolean"
            }
          },
          "additionalProperties": false,
          "nullable": true
        },
        "zone": {
          "description": "The multisite info",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "CephObjectStoreZone name this CephObjectStore is part of",
              "type": "string"
            }
          },
          "additionalProperties": false,
          "nullable": true
        }
      },
      "additionalProperties": false,
      "x-kubernetes-validations": [
        {
          "rule": "!(has(self.defaultRealm) \u0026\u0026 self.defaultRealm == true \u0026\u0026 has(self.zone) \u0026\u0026 size(self.zone.name) \u003e 0)",
          "message": "defaultRealm must not be true when zone.name is set (multisite configuration)"
        }
      ]
    },
    "status": {
      "description": "ObjectStoreStatus represents the status of a Ceph Object Store resource",
      "type": "object",
      "properties": {
        "cephx": {
          "type": "object",
          "properties": {
            "daemon": {
              "description": "Daemon shows the CephX key status for local Ceph daemons associated with this resources.",
              "type": "object",
              "properties": {
                "keyCephVersion": {
                  "description": "KeyCephVersion reports the Ceph version that created the current generation's keys. This is\nsame string format as reported by `CephCluster.status.version.version` to allow them to be\ncompared. E.g., `20.2.0-0`.\nFor all newly-created resources, this field set to the version of Ceph that created the key.\nThe special value \"Uninitialized\" indicates that keys are being created for the first time.\nAn empty string indicates that the version is unknown, as expected in brownfield deployments.",
                  "type": "string"
                },
                "keyGeneration": {
                  "description": "KeyGeneration represents the CephX key generation for the last successful reconcile.\nFor all newly-created resources, this field is set to `1`.\nWhen keys are rotated due to any rotation policy, the generation is incremented or updated to\nthe configured policy generation.\nGeneration `0` indicates that keys existed prior to the implementation of key tracking.",
                  "type": "integer",
                  "format": "int32"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "conditions": {
          "type": "array",
          "items": {
            "description": "Condition represents a status condition on any Rook-Ceph Custom Resource.",
            "type": "object",
            "properties": {
              "lastHeartbeatTime": {
                "type": "string",
                "format": "date-time"
              },
              "lastTransitionTime": {
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "type": "string"
              },
              "reason": {
                "description": "ConditionReason is a reason for a condition",
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "type": {
                "description": "ConditionType represent a resource's status",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "endpoints": {
          "type": "object",
          "properties": {
            "insecure": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "secure": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "info": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "nullable": true
        },
        "message": {
          "type": "string"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest generation observed by the controller.",
          "type": "integer",
          "format": "int64"
        },
        "phase": {
          "description": "ConditionType represent a resource's status",
          "type": "string"
        }
      },
      "additionalProperties": false,
      "x-kubernetes-preserve-unknown-fields": true
    }
  }
}
