{
  "description": "EventSubscription is the Schema for the EventSubscriptions API. Manages an EventGrid Event Subscription",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "EventSubscriptionSpec defines the desired state of EventSubscription",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "forProvider": {
          "type": "object",
          "properties": {
            "advancedFilter": {
              "description": "A advanced_filter block as defined below.",
              "type": "object",
              "properties": {
                "boolEquals": {
                  "description": "Compares a value of an event using a single boolean value.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                        "type": "string"
                      },
                      "value": {
                        "description": "Specifies a single value to compare to when using a single value operator.",
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "isNotNull": {
                  "description": "Evaluates if a value of an event isn't NULL or undefined.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "isNullOrUndefined": {
                  "description": "Evaluates if a value of an event is NULL or undefined.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "numberGreaterThan": {
                  "description": "Compares a value of an event using a single floating point number.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                        "type": "string"
                      },
                      "value": {
                        "description": "Specifies a single value to compare to when using a single value operator.",
                        "type": "number"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "numberGreaterThanOrEquals": {
                  "description": "Compares a value of an event using a single floating point number.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                        "type": "string"
                      },
                      "value": {
                        "description": "Specifies a single value to compare to when using a single value operator.",
                        "type": "number"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "numberIn": {
                  "description": "Compares a value of an event using multiple floating point numbers.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                        "type": "string"
                      },
                      "values": {
                        "description": "Specifies an array of values to compare to when using a multiple values operator.",
                        "type": "array",
                        "items": {
                          "type": "number"
                        }
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "numberInRange": {
                  "description": "Compares a value of an event using multiple floating point number ranges.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                        "type": "string"
                      },
                      "values": {
                        "description": "Specifies an array of values to compare to when using a multiple values operator.",
                        "type": "array",
                        "items": {
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        }
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "numberLessThan": {
                  "description": "Compares a value of an event using a single floating point number.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                        "type": "string"
                      },
                      "value": {
                        "description": "Specifies a single value to compare to when using a single value operator.",
                        "type": "number"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "numberLessThanOrEquals": {
                  "description": "Compares a value of an event using a single floating point number.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                        "type": "string"
                      },
                      "value": {
                        "description": "Specifies a single value to compare to when using a single value operator.",
                        "type": "number"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "numberNotIn": {
                  "description": "Compares a value of an event using multiple floating point numbers.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                        "type": "string"
                      },
                      "values": {
                        "description": "Specifies an array of values to compare to when using a multiple values operator.",
                        "type": "array",
                        "items": {
                          "type": "number"
                        }
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "numberNotInRange": {
                  "description": "Compares a value of an event using multiple floating point number ranges.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                        "type": "string"
                      },
                      "values": {
                        "description": "Specifies an array of values to compare to when using a multiple values operator.",
                        "type": "array",
                        "items": {
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        }
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "stringBeginsWith": {
                  "description": "Compares a value of an event using multiple string values.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                        "type": "string"
                      },
                      "values": {
                        "description": "Specifies an array of values to compare to when using a multiple values operator.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "stringContains": {
                  "description": "Compares a value of an event using multiple string values.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                        "type": "string"
                      },
                      "values": {
                        "description": "Specifies an array of values to compare to when using a multiple values operator.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "stringEndsWith": {
                  "description": "Compares a value of an event using multiple string values.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                        "type": "string"
                      },
                      "values": {
                        "description": "Specifies an array of values to compare to when using a multiple values operator.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "stringIn": {
                  "description": "Compares a value of an event using multiple string values.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                        "type": "string"
                      },
                      "values": {
                        "description": "Specifies an array of values to compare to when using a multiple values operator.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "stringNotBeginsWith": {
                  "description": "Compares a value of an event using multiple string values.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                        "type": "string"
                      },
                      "values": {
                        "description": "Specifies an array of values to compare to when using a multiple values operator.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "stringNotContains": {
                  "description": "Compares a value of an event using multiple string values.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                        "type": "string"
                      },
                      "values": {
                        "description": "Specifies an array of values to compare to when using a multiple values operator.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "stringNotEndsWith": {
                  "description": "Compares a value of an event using multiple string values.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                        "type": "string"
                      },
                      "values": {
                        "description": "Specifies an array of values to compare to when using a multiple values operator.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "stringNotIn": {
                  "description": "Compares a value of an event using multiple string values.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                        "type": "string"
                      },
                      "values": {
                        "description": "Specifies an array of values to compare to when using a multiple values operator.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "additionalProperties": false
                  }
                }
              },
              "additionalProperties": false
            },
            "advancedFilteringOnArraysEnabled": {
              "description": "Specifies whether advanced filters should be evaluated against an array of values instead of expecting a singular value. Defaults to false.",
              "type": "boolean"
            },
            "azureFunctionEndpoint": {
              "description": "An azure_function_endpoint block as defined below.",
              "type": "object",
              "properties": {
                "functionId": {
                  "description": "Specifies the ID of the Function where the Event Subscription will receive events. This must be the functions ID in format {function_app.id}/functions/{name}.",
                  "type": "string"
                },
                "maxEventsPerBatch": {
                  "description": "Maximum number of events per batch.",
                  "type": "number"
                },
                "preferredBatchSizeInKilobytes": {
                  "description": "Preferred batch size in Kilobytes.",
                  "type": "number"
                }
              },
              "additionalProperties": false
            },
            "deadLetterIdentity": {
              "description": "A dead_letter_identity block as defined below.",
              "type": "object",
              "properties": {
                "type": {
                  "description": "Specifies the type of Managed Service Identity that is used for dead lettering. Allowed value is SystemAssigned, UserAssigned.",
                  "type": "string"
                },
                "userAssignedIdentity": {
                  "description": "The user identity associated with the resource.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "deliveryIdentity": {
              "description": "A delivery_identity block as defined below.",
              "type": "object",
              "properties": {
                "type": {
                  "description": "Specifies the type of Managed Service Identity that is used for event delivery. Allowed value is SystemAssigned, UserAssigned.",
                  "type": "string"
                },
                "userAssignedIdentity": {
                  "description": "The user identity associated with the resource.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "deliveryProperty": {
              "description": "One or more delivery_property blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "headerName": {
                    "description": "The name of the header to send on to the destination",
                    "type": "string"
                  },
                  "secret": {
                    "description": "True if the value is a secret and should be protected, otherwise false. If True, then this value won't be returned from Azure API calls",
                    "type": "boolean"
                  },
                  "sourceField": {
                    "description": "If the type is Dynamic, then provide the payload field to be used as the value. Valid source fields differ by subscription type.",
                    "type": "string"
                  },
                  "type": {
                    "description": "Either Static or Dynamic",
                    "type": "string"
                  },
                  "valueSecretRef": {
                    "description": "If the type is Static, then provide the value to use",
                    "type": "object",
                    "required": [
                      "key",
                      "name"
                    ],
                    "properties": {
                      "key": {
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the secret.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              }
            },
            "eventDeliverySchema": {
              "description": "Specifies the event delivery schema for the event subscription. Possible values include: EventGridSchema, CloudEventSchemaV1_0, CustomInputSchema. Defaults to EventGridSchema. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "eventhubEndpointId": {
              "description": "Specifies the id where the Event Hub is located.",
              "type": "string"
            },
            "expirationTimeUtc": {
              "description": "Specifies the expiration time of the event subscription (Datetime Format RFC 3339).",
              "type": "string"
            },
            "hybridConnectionEndpointId": {
              "description": "Specifies the id where the Hybrid Connection is located.",
              "type": "string"
            },
            "includedEventTypes": {
              "description": "A list of applicable event types that need to be part of the event subscription.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "labels": {
              "description": "A list of labels to assign to the event subscription.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "name": {
              "description": "Specifies the name of the EventGrid Event Subscription resource. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "retryPolicy": {
              "description": "A retry_policy block as defined below.",
              "type": "object",
              "properties": {
                "eventTimeToLive": {
                  "description": "Specifies the time to live (in minutes) for events. Supported range is 1 to 1440. See official documentation for more details.",
                  "type": "number"
                },
                "maxDeliveryAttempts": {
                  "description": "Specifies the maximum number of delivery retry attempts for events.",
                  "type": "number"
                }
              },
              "additionalProperties": false
            },
            "scope": {
              "description": "Specifies the scope at which the EventGrid Event Subscription should be created. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "scopeRef": {
              "description": "Reference to a ResourceGroup in azure to populate scope.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referenced object",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "scopeSelector": {
              "description": "Selector for a ResourceGroup in azure to populate scope.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "namespace": {
                  "description": "Namespace for the selector",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "serviceBusQueueEndpointId": {
              "description": "Specifies the id where the Service Bus Queue is located.",
              "type": "string"
            },
            "serviceBusTopicEndpointId": {
              "description": "Specifies the id where the Service Bus Topic is located.",
              "type": "string"
            },
            "storageBlobDeadLetterDestination": {
              "description": "A storage_blob_dead_letter_destination block as defined below.",
              "type": "object",
              "properties": {
                "storageAccountId": {
                  "description": "Specifies the id of the storage account id where the storage blob is located.",
                  "type": "string"
                },
                "storageBlobContainerName": {
                  "description": "Specifies the name of the Storage blob container that is the destination of the deadletter events.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "storageQueueEndpoint": {
              "description": "A storage_queue_endpoint block as defined below.",
              "type": "object",
              "properties": {
                "queueMessageTimeToLiveInSeconds": {
                  "description": "Storage queue message time to live in seconds.",
                  "type": "number"
                },
                "queueName": {
                  "description": "Specifies the name of the storage queue where the Event Subscription will receive events.",
                  "type": "string"
                },
                "queueNameRef": {
                  "description": "Reference to a Queue in storage to populate queueName.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name of the referenced object.",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace of the referenced object",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for referencing.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "queueNameSelector": {
                  "description": "Selector for a Queue in storage to populate queueName.",
                  "type": "object",
                  "properties": {
                    "matchControllerRef": {
                      "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                      "type": "boolean"
                    },
                    "matchLabels": {
                      "description": "MatchLabels ensures an object with matching labels is selected.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "namespace": {
                      "description": "Namespace for the selector",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for selection.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "storageAccountId": {
                  "description": "Specifies the id of the storage account id where the storage queue is located.",
                  "type": "string"
                },
                "storageAccountIdRef": {
                  "description": "Reference to a Account in storage to populate storageAccountId.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name of the referenced object.",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace of the referenced object",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for referencing.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "storageAccountIdSelector": {
                  "description": "Selector for a Account in storage to populate storageAccountId.",
                  "type": "object",
                  "properties": {
                    "matchControllerRef": {
                      "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                      "type": "boolean"
                    },
                    "matchLabels": {
                      "description": "MatchLabels ensures an object with matching labels is selected.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "namespace": {
                      "description": "Namespace for the selector",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for selection.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "subjectFilter": {
              "description": "A subject_filter block as defined below.",
              "type": "object",
              "properties": {
                "caseSensitive": {
                  "description": "Specifies if subject_begins_with and subject_ends_with case sensitive. This value",
                  "type": "boolean"
                },
                "subjectBeginsWith": {
                  "description": "A string to filter events for an event subscription based on a resource path prefix.",
                  "type": "string"
                },
                "subjectEndsWith": {
                  "description": "A string to filter events for an event subscription based on a resource path suffix.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "webhookEndpoint": {
              "description": "A webhook_endpoint block as defined below.",
              "type": "object",
              "properties": {
                "activeDirectoryAppIdOrUri": {
                  "description": "The Azure Active Directory Application ID or URI to get the access token that will be included as the bearer token in delivery requests.",
                  "type": "string"
                },
                "activeDirectoryTenantId": {
                  "description": "The Azure Active Directory Tenant ID to get the access token that will be included as the bearer token in delivery requests.",
                  "type": "string"
                },
                "maxEventsPerBatch": {
                  "description": "Maximum number of events per batch.",
                  "type": "number"
                },
                "preferredBatchSizeInKilobytes": {
                  "description": "Preferred batch size in Kilobytes.",
                  "type": "number"
                },
                "url": {
                  "description": "Specifies the url of the webhook where the Event Subscription will receive events.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored\nunless the Management Policies feature flag is disabled.\nInitProvider holds the same fields as ForProvider, with the exception\nof Identifier and other resource reference fields. The fields that are\nin InitProvider are merged into ForProvider when the resource is created.\nThe same fields are also added to the terraform ignore_changes hook, to\navoid updating them after creation. This is useful for fields that are\nrequired on creation, but we do not desire to update them after creation,\nfor example because of an external controller is managing them, like an\nautoscaler.",
          "type": "object",
          "properties": {
            "advancedFilter": {
              "description": "A advanced_filter block as defined below.",
              "type": "object",
              "properties": {
                "boolEquals": {
                  "description": "Compares a value of an event using a single boolean value.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                        "type": "string"
                      },
                      "value": {
                        "description": "Specifies a single value to compare to when using a single value operator.",
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "isNotNull": {
                  "description": "Evaluates if a value of an event isn't NULL or undefined.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "isNullOrUndefined": {
                  "description": "Evaluates if a value of an event is NULL or undefined.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "numberGreaterThan": {
                  "description": "Compares a value of an event using a single floating point number.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                        "type": "string"
                      },
                      "value": {
                        "description": "Specifies a single value to compare to when using a single value operator.",
                        "type": "number"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "numberGreaterThanOrEquals": {
                  "description": "Compares a value of an event using a single floating point number.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                        "type": "string"
                      },
                      "value": {
                        "description": "Specifies a single value to compare to when using a single value operator.",
                        "type": "number"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "numberIn": {
                  "description": "Compares a value of an event using multiple floating point numbers.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                        "type": "string"
                      },
                      "values": {
                        "description": "Specifies an array of values to compare to when using a multiple values operator.",
                        "type": "array",
                        "items": {
                          "type": "number"
                        }
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "numberInRange": {
                  "description": "Compares a value of an event using multiple floating point number ranges.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                        "type": "string"
                      },
                      "values": {
                        "description": "Specifies an array of values to compare to when using a multiple values operator.",
                        "type": "array",
                        "items": {
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        }
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "numberLessThan": {
                  "description": "Compares a value of an event using a single floating point number.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                        "type": "string"
                      },
                      "value": {
                        "description": "Specifies a single value to compare to when using a single value operator.",
                        "type": "number"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "numberLessThanOrEquals": {
                  "description": "Compares a value of an event using a single floating point number.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                        "type": "string"
                      },
                      "value": {
                        "description": "Specifies a single value to compare to when using a single value operator.",
                        "type": "number"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "numberNotIn": {
                  "description": "Compares a value of an event using multiple floating point numbers.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                        "type": "string"
                      },
                      "values": {
                        "description": "Specifies an array of values to compare to when using a multiple values operator.",
                        "type": "array",
                        "items": {
                          "type": "number"
                        }
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "numberNotInRange": {
                  "description": "Compares a value of an event using multiple floating point number ranges.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                        "type": "string"
                      },
                      "values": {
                        "description": "Specifies an array of values to compare to when using a multiple values operator.",
                        "type": "array",
                        "items": {
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        }
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "stringBeginsWith": {
                  "description": "Compares a value of an event using multiple string values.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                        "type": "string"
                      },
                      "values": {
                        "description": "Specifies an array of values to compare to when using a multiple values operator.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "stringContains": {
                  "description": "Compares a value of an event using multiple string values.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                        "type": "string"
                      },
                      "values": {
                        "description": "Specifies an array of values to compare to when using a multiple values operator.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "stringEndsWith": {
                  "description": "Compares a value of an event using multiple string values.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                        "type": "string"
                      },
                      "values": {
                        "description": "Specifies an array of values to compare to when using a multiple values operator.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "stringIn": {
                  "description": "Compares a value of an event using multiple string values.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                        "type": "string"
                      },
                      "values": {
                        "description": "Specifies an array of values to compare to when using a multiple values operator.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "stringNotBeginsWith": {
                  "description": "Compares a value of an event using multiple string values.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                        "type": "string"
                      },
                      "values": {
                        "description": "Specifies an array of values to compare to when using a multiple values operator.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "stringNotContains": {
                  "description": "Compares a value of an event using multiple string values.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                        "type": "string"
                      },
                      "values": {
                        "description": "Specifies an array of values to compare to when using a multiple values operator.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "stringNotEndsWith": {
                  "description": "Compares a value of an event using multiple string values.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                        "type": "string"
                      },
                      "values": {
                        "description": "Specifies an array of values to compare to when using a multiple values operator.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "stringNotIn": {
                  "description": "Compares a value of an event using multiple string values.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                        "type": "string"
                      },
                      "values": {
                        "description": "Specifies an array of values to compare to when using a multiple values operator.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "additionalProperties": false
                  }
                }
              },
              "additionalProperties": false
            },
            "advancedFilteringOnArraysEnabled": {
              "description": "Specifies whether advanced filters should be evaluated against an array of values instead of expecting a singular value. Defaults to false.",
              "type": "boolean"
            },
            "azureFunctionEndpoint": {
              "description": "An azure_function_endpoint block as defined below.",
              "type": "object",
              "properties": {
                "functionId": {
                  "description": "Specifies the ID of the Function where the Event Subscription will receive events. This must be the functions ID in format {function_app.id}/functions/{name}.",
                  "type": "string"
                },
                "maxEventsPerBatch": {
                  "description": "Maximum number of events per batch.",
                  "type": "number"
                },
                "preferredBatchSizeInKilobytes": {
                  "description": "Preferred batch size in Kilobytes.",
                  "type": "number"
                }
              },
              "additionalProperties": false
            },
            "deadLetterIdentity": {
              "description": "A dead_letter_identity block as defined below.",
              "type": "object",
              "properties": {
                "type": {
                  "description": "Specifies the type of Managed Service Identity that is used for dead lettering. Allowed value is SystemAssigned, UserAssigned.",
                  "type": "string"
                },
                "userAssignedIdentity": {
                  "description": "The user identity associated with the resource.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "deliveryIdentity": {
              "description": "A delivery_identity block as defined below.",
              "type": "object",
              "properties": {
                "type": {
                  "description": "Specifies the type of Managed Service Identity that is used for event delivery. Allowed value is SystemAssigned, UserAssigned.",
                  "type": "string"
                },
                "userAssignedIdentity": {
                  "description": "The user identity associated with the resource.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "deliveryProperty": {
              "description": "One or more delivery_property blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "headerName": {
                    "description": "The name of the header to send on to the destination",
                    "type": "string"
                  },
                  "secret": {
                    "description": "True if the value is a secret and should be protected, otherwise false. If True, then this value won't be returned from Azure API calls",
                    "type": "boolean"
                  },
                  "sourceField": {
                    "description": "If the type is Dynamic, then provide the payload field to be used as the value. Valid source fields differ by subscription type.",
                    "type": "string"
                  },
                  "type": {
                    "description": "Either Static or Dynamic",
                    "type": "string"
                  },
                  "valueSecretRef": {
                    "description": "If the type is Static, then provide the value to use",
                    "type": "object",
                    "required": [
                      "key",
                      "name"
                    ],
                    "properties": {
                      "key": {
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the secret.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              }
            },
            "eventDeliverySchema": {
              "description": "Specifies the event delivery schema for the event subscription. Possible values include: EventGridSchema, CloudEventSchemaV1_0, CustomInputSchema. Defaults to EventGridSchema. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "eventhubEndpointId": {
              "description": "Specifies the id where the Event Hub is located.",
              "type": "string"
            },
            "expirationTimeUtc": {
              "description": "Specifies the expiration time of the event subscription (Datetime Format RFC 3339).",
              "type": "string"
            },
            "hybridConnectionEndpointId": {
              "description": "Specifies the id where the Hybrid Connection is located.",
              "type": "string"
            },
            "includedEventTypes": {
              "description": "A list of applicable event types that need to be part of the event subscription.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "labels": {
              "description": "A list of labels to assign to the event subscription.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "name": {
              "description": "Specifies the name of the EventGrid Event Subscription resource. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "retryPolicy": {
              "description": "A retry_policy block as defined below.",
              "type": "object",
              "properties": {
                "eventTimeToLive": {
                  "description": "Specifies the time to live (in minutes) for events. Supported range is 1 to 1440. See official documentation for more details.",
                  "type": "number"
                },
                "maxDeliveryAttempts": {
                  "description": "Specifies the maximum number of delivery retry attempts for events.",
                  "type": "number"
                }
              },
              "additionalProperties": false
            },
            "scope": {
              "description": "Specifies the scope at which the EventGrid Event Subscription should be created. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "scopeRef": {
              "description": "Reference to a ResourceGroup in azure to populate scope.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referenced object",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "scopeSelector": {
              "description": "Selector for a ResourceGroup in azure to populate scope.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "namespace": {
                  "description": "Namespace for the selector",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "serviceBusQueueEndpointId": {
              "description": "Specifies the id where the Service Bus Queue is located.",
              "type": "string"
            },
            "serviceBusTopicEndpointId": {
              "description": "Specifies the id where the Service Bus Topic is located.",
              "type": "string"
            },
            "storageBlobDeadLetterDestination": {
              "description": "A storage_blob_dead_letter_destination block as defined below.",
              "type": "object",
              "properties": {
                "storageAccountId": {
                  "description": "Specifies the id of the storage account id where the storage blob is located.",
                  "type": "string"
                },
                "storageBlobContainerName": {
                  "description": "Specifies the name of the Storage blob container that is the destination of the deadletter events.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "storageQueueEndpoint": {
              "description": "A storage_queue_endpoint block as defined below.",
              "type": "object",
              "properties": {
                "queueMessageTimeToLiveInSeconds": {
                  "description": "Storage queue message time to live in seconds.",
                  "type": "number"
                },
                "queueName": {
                  "description": "Specifies the name of the storage queue where the Event Subscription will receive events.",
                  "type": "string"
                },
                "queueNameRef": {
                  "description": "Reference to a Queue in storage to populate queueName.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name of the referenced object.",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace of the referenced object",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for referencing.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "queueNameSelector": {
                  "description": "Selector for a Queue in storage to populate queueName.",
                  "type": "object",
                  "properties": {
                    "matchControllerRef": {
                      "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                      "type": "boolean"
                    },
                    "matchLabels": {
                      "description": "MatchLabels ensures an object with matching labels is selected.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "namespace": {
                      "description": "Namespace for the selector",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for selection.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "storageAccountId": {
                  "description": "Specifies the id of the storage account id where the storage queue is located.",
                  "type": "string"
                },
                "storageAccountIdRef": {
                  "description": "Reference to a Account in storage to populate storageAccountId.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name of the referenced object.",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace of the referenced object",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for referencing.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "storageAccountIdSelector": {
                  "description": "Selector for a Account in storage to populate storageAccountId.",
                  "type": "object",
                  "properties": {
                    "matchControllerRef": {
                      "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                      "type": "boolean"
                    },
                    "matchLabels": {
                      "description": "MatchLabels ensures an object with matching labels is selected.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "namespace": {
                      "description": "Namespace for the selector",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for selection.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "subjectFilter": {
              "description": "A subject_filter block as defined below.",
              "type": "object",
              "properties": {
                "caseSensitive": {
                  "description": "Specifies if subject_begins_with and subject_ends_with case sensitive. This value",
                  "type": "boolean"
                },
                "subjectBeginsWith": {
                  "description": "A string to filter events for an event subscription based on a resource path prefix.",
                  "type": "string"
                },
                "subjectEndsWith": {
                  "description": "A string to filter events for an event subscription based on a resource path suffix.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "webhookEndpoint": {
              "description": "A webhook_endpoint block as defined below.",
              "type": "object",
              "properties": {
                "activeDirectoryAppIdOrUri": {
                  "description": "The Azure Active Directory Application ID or URI to get the access token that will be included as the bearer token in delivery requests.",
                  "type": "string"
                },
                "activeDirectoryTenantId": {
                  "description": "The Azure Active Directory Tenant ID to get the access token that will be included as the bearer token in delivery requests.",
                  "type": "string"
                },
                "maxEventsPerBatch": {
                  "description": "Maximum number of events per batch.",
                  "type": "number"
                },
                "preferredBatchSizeInKilobytes": {
                  "description": "Preferred batch size in Kilobytes.",
                  "type": "number"
                },
                "url": {
                  "description": "Specifies the url of the webhook where the Event Subscription will receive events.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "managementPolicies": {
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out\nthrough a Crossplane feature flag.\nManagementPolicies specify the array of actions Crossplane is allowed to\ntake on the managed and external resources.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223\nand this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers\ncan take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to\ncreate, observe, update, and delete this managed resource should be\nconfigured.",
          "type": "object",
          "default": {
            "kind": "ClusterProviderConfig",
            "name": "default"
          },
          "required": [
            "kind",
            "name"
          ],
          "properties": {
            "kind": {
              "description": "Kind of the referenced object.",
              "type": "string"
            },
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a\nSecret to which any connection details for this managed resource should\nbe written. Connection details frequently include the endpoint, username,\nand password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false,
      "x-kubernetes-validations": [
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.name))",
          "message": "spec.forProvider.name is a required parameter"
        }
      ]
    },
    "status": {
      "description": "EventSubscriptionStatus defines the observed state of EventSubscription.",
      "type": "object",
      "properties": {
        "atProvider": {
          "type": "object",
          "properties": {
            "advancedFilter": {
              "description": "A advanced_filter block as defined below.",
              "type": "object",
              "properties": {
                "boolEquals": {
                  "description": "Compares a value of an event using a single boolean value.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                        "type": "string"
                      },
                      "value": {
                        "description": "Specifies a single value to compare to when using a single value operator.",
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "isNotNull": {
                  "description": "Evaluates if a value of an event isn't NULL or undefined.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "isNullOrUndefined": {
                  "description": "Evaluates if a value of an event is NULL or undefined.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "numberGreaterThan": {
                  "description": "Compares a value of an event using a single floating point number.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                        "type": "string"
                      },
                      "value": {
                        "description": "Specifies a single value to compare to when using a single value operator.",
                        "type": "number"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "numberGreaterThanOrEquals": {
                  "description": "Compares a value of an event using a single floating point number.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                        "type": "string"
                      },
                      "value": {
                        "description": "Specifies a single value to compare to when using a single value operator.",
                        "type": "number"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "numberIn": {
                  "description": "Compares a value of an event using multiple floating point numbers.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                        "type": "string"
                      },
                      "values": {
                        "description": "Specifies an array of values to compare to when using a multiple values operator.",
                        "type": "array",
                        "items": {
                          "type": "number"
                        }
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "numberInRange": {
                  "description": "Compares a value of an event using multiple floating point number ranges.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                        "type": "string"
                      },
                      "values": {
                        "description": "Specifies an array of values to compare to when using a multiple values operator.",
                        "type": "array",
                        "items": {
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        }
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "numberLessThan": {
                  "description": "Compares a value of an event using a single floating point number.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                        "type": "string"
                      },
                      "value": {
                        "description": "Specifies a single value to compare to when using a single value operator.",
                        "type": "number"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "numberLessThanOrEquals": {
                  "description": "Compares a value of an event using a single floating point number.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                        "type": "string"
                      },
                      "value": {
                        "description": "Specifies a single value to compare to when using a single value operator.",
                        "type": "number"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "numberNotIn": {
                  "description": "Compares a value of an event using multiple floating point numbers.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                        "type": "string"
                      },
                      "values": {
                        "description": "Specifies an array of values to compare to when using a multiple values operator.",
                        "type": "array",
                        "items": {
                          "type": "number"
                        }
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "numberNotInRange": {
                  "description": "Compares a value of an event using multiple floating point number ranges.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                        "type": "string"
                      },
                      "values": {
                        "description": "Specifies an array of values to compare to when using a multiple values operator.",
                        "type": "array",
                        "items": {
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        }
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "stringBeginsWith": {
                  "description": "Compares a value of an event using multiple string values.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                        "type": "string"
                      },
                      "values": {
                        "description": "Specifies an array of values to compare to when using a multiple values operator.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "stringContains": {
                  "description": "Compares a value of an event using multiple string values.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                        "type": "string"
                      },
                      "values": {
                        "description": "Specifies an array of values to compare to when using a multiple values operator.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "stringEndsWith": {
                  "description": "Compares a value of an event using multiple string values.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                        "type": "string"
                      },
                      "values": {
                        "description": "Specifies an array of values to compare to when using a multiple values operator.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "stringIn": {
                  "description": "Compares a value of an event using multiple string values.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                        "type": "string"
                      },
                      "values": {
                        "description": "Specifies an array of values to compare to when using a multiple values operator.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "stringNotBeginsWith": {
                  "description": "Compares a value of an event using multiple string values.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                        "type": "string"
                      },
                      "values": {
                        "description": "Specifies an array of values to compare to when using a multiple values operator.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "stringNotContains": {
                  "description": "Compares a value of an event using multiple string values.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                        "type": "string"
                      },
                      "values": {
                        "description": "Specifies an array of values to compare to when using a multiple values operator.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "stringNotEndsWith": {
                  "description": "Compares a value of an event using multiple string values.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                        "type": "string"
                      },
                      "values": {
                        "description": "Specifies an array of values to compare to when using a multiple values operator.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "stringNotIn": {
                  "description": "Compares a value of an event using multiple string values.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "description": "Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.",
                        "type": "string"
                      },
                      "values": {
                        "description": "Specifies an array of values to compare to when using a multiple values operator.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "additionalProperties": false
                  }
                }
              },
              "additionalProperties": false
            },
            "advancedFilteringOnArraysEnabled": {
              "description": "Specifies whether advanced filters should be evaluated against an array of values instead of expecting a singular value. Defaults to false.",
              "type": "boolean"
            },
            "azureFunctionEndpoint": {
              "description": "An azure_function_endpoint block as defined below.",
              "type": "object",
              "properties": {
                "functionId": {
                  "description": "Specifies the ID of the Function where the Event Subscription will receive events. This must be the functions ID in format {function_app.id}/functions/{name}.",
                  "type": "string"
                },
                "maxEventsPerBatch": {
                  "description": "Maximum number of events per batch.",
                  "type": "number"
                },
                "preferredBatchSizeInKilobytes": {
                  "description": "Preferred batch size in Kilobytes.",
                  "type": "number"
                }
              },
              "additionalProperties": false
            },
            "deadLetterIdentity": {
              "description": "A dead_letter_identity block as defined below.",
              "type": "object",
              "properties": {
                "type": {
                  "description": "Specifies the type of Managed Service Identity that is used for dead lettering. Allowed value is SystemAssigned, UserAssigned.",
                  "type": "string"
                },
                "userAssignedIdentity": {
                  "description": "The user identity associated with the resource.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "deliveryIdentity": {
              "description": "A delivery_identity block as defined below.",
              "type": "object",
              "properties": {
                "type": {
                  "description": "Specifies the type of Managed Service Identity that is used for event delivery. Allowed value is SystemAssigned, UserAssigned.",
                  "type": "string"
                },
                "userAssignedIdentity": {
                  "description": "The user identity associated with the resource.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "deliveryProperty": {
              "description": "One or more delivery_property blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "headerName": {
                    "description": "The name of the header to send on to the destination",
                    "type": "string"
                  },
                  "secret": {
                    "description": "True if the value is a secret and should be protected, otherwise false. If True, then this value won't be returned from Azure API calls",
                    "type": "boolean"
                  },
                  "sourceField": {
                    "description": "If the type is Dynamic, then provide the payload field to be used as the value. Valid source fields differ by subscription type.",
                    "type": "string"
                  },
                  "type": {
                    "description": "Either Static or Dynamic",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "eventDeliverySchema": {
              "description": "Specifies the event delivery schema for the event subscription. Possible values include: EventGridSchema, CloudEventSchemaV1_0, CustomInputSchema. Defaults to EventGridSchema. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "eventhubEndpointId": {
              "description": "Specifies the id where the Event Hub is located.",
              "type": "string"
            },
            "expirationTimeUtc": {
              "description": "Specifies the expiration time of the event subscription (Datetime Format RFC 3339).",
              "type": "string"
            },
            "hybridConnectionEndpointId": {
              "description": "Specifies the id where the Hybrid Connection is located.",
              "type": "string"
            },
            "id": {
              "description": "The ID of the EventGrid Event Subscription.",
              "type": "string"
            },
            "includedEventTypes": {
              "description": "A list of applicable event types that need to be part of the event subscription.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "labels": {
              "description": "A list of labels to assign to the event subscription.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "name": {
              "description": "Specifies the name of the EventGrid Event Subscription resource. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "retryPolicy": {
              "description": "A retry_policy block as defined below.",
              "type": "object",
              "properties": {
                "eventTimeToLive": {
                  "description": "Specifies the time to live (in minutes) for events. Supported range is 1 to 1440. See official documentation for more details.",
                  "type": "number"
                },
                "maxDeliveryAttempts": {
                  "description": "Specifies the maximum number of delivery retry attempts for events.",
                  "type": "number"
                }
              },
              "additionalProperties": false
            },
            "scope": {
              "description": "Specifies the scope at which the EventGrid Event Subscription should be created. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "serviceBusQueueEndpointId": {
              "description": "Specifies the id where the Service Bus Queue is located.",
              "type": "string"
            },
            "serviceBusTopicEndpointId": {
              "description": "Specifies the id where the Service Bus Topic is located.",
              "type": "string"
            },
            "storageBlobDeadLetterDestination": {
              "description": "A storage_blob_dead_letter_destination block as defined below.",
              "type": "object",
              "properties": {
                "storageAccountId": {
                  "description": "Specifies the id of the storage account id where the storage blob is located.",
                  "type": "string"
                },
                "storageBlobContainerName": {
                  "description": "Specifies the name of the Storage blob container that is the destination of the deadletter events.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "storageQueueEndpoint": {
              "description": "A storage_queue_endpoint block as defined below.",
              "type": "object",
              "properties": {
                "queueMessageTimeToLiveInSeconds": {
                  "description": "Storage queue message time to live in seconds.",
                  "type": "number"
                },
                "queueName": {
                  "description": "Specifies the name of the storage queue where the Event Subscription will receive events.",
                  "type": "string"
                },
                "storageAccountId": {
                  "description": "Specifies the id of the storage account id where the storage queue is located.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "subjectFilter": {
              "description": "A subject_filter block as defined below.",
              "type": "object",
              "properties": {
                "caseSensitive": {
                  "description": "Specifies if subject_begins_with and subject_ends_with case sensitive. This value",
                  "type": "boolean"
                },
                "subjectBeginsWith": {
                  "description": "A string to filter events for an event subscription based on a resource path prefix.",
                  "type": "string"
                },
                "subjectEndsWith": {
                  "description": "A string to filter events for an event subscription based on a resource path suffix.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "webhookEndpoint": {
              "description": "A webhook_endpoint block as defined below.",
              "type": "object",
              "properties": {
                "activeDirectoryAppIdOrUri": {
                  "description": "The Azure Active Directory Application ID or URI to get the access token that will be included as the bearer token in delivery requests.",
                  "type": "string"
                },
                "activeDirectoryTenantId": {
                  "description": "The Azure Active Directory Tenant ID to get the access token that will be included as the bearer token in delivery requests.",
                  "type": "string"
                },
                "baseUrl": {
                  "description": "(Computed) The base url of the webhook where the Event Subscription will receive events.",
                  "type": "string"
                },
                "maxEventsPerBatch": {
                  "description": "Maximum number of events per batch.",
                  "type": "number"
                },
                "preferredBatchSizeInKilobytes": {
                  "description": "Preferred batch size in Kilobytes.",
                  "type": "number"
                },
                "url": {
                  "description": "Specifies the url of the webhook where the Event Subscription will receive events.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "type": "array",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one\nstatus to another.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from\none status to another, if any.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to\na resource at any point in time.",
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest metadata.generation\nwhich resulted in either a ready state, or stalled due to error\nit can not recover from without human intervention.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    }
  }
}
