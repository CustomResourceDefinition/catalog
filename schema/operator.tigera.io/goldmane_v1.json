{
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "type": "object",
      "properties": {
        "goldmaneDeployment": {
          "description": "GoldmaneDeployment is the configuration for the goldmane Deployment.",
          "type": "object",
          "properties": {
            "metadata": {
              "description": "Metadata is a subset of a Kubernetes object's metadata that is added to the Deployment.",
              "type": "object",
              "properties": {
                "annotations": {
                  "description": "Annotations is a map of arbitrary non-identifying metadata. Each of these\nkey/value pairs are added to the object's annotations provided the key does not\nalready exist in the object's annotations.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "labels": {
                  "description": "Labels is a map of string keys and values that may match replicaset and\nservice selectors. Each of these key/value pairs are added to the\nobject's labels provided the key does not already exist in the object's labels.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              },
              "additionalProperties": false
            },
            "spec": {
              "description": "Spec is the specification of the goldmane Deployment.",
              "type": "object",
              "properties": {
                "minReadySeconds": {
                  "description": "MinReadySeconds is the minimum number of seconds for which a newly created Deployment pod should\nbe ready without any of its container crashing, for it to be considered available.\nIf specified, this overrides any minReadySeconds value that may be set on the goldmane Deployment.\nIf omitted, the goldmane Deployment will use its default value for minReadySeconds.",
                  "type": "integer",
                  "format": "int32",
                  "maximum": 2147483647,
                  "minimum": 0
                },
                "strategy": {
                  "description": "The deployment strategy to use to replace existing pods with new ones.",
                  "type": "object",
                  "properties": {
                    "rollingUpdate": {
                      "description": "Rolling update config params. Present only if DeploymentStrategyType =\nRollingUpdate.\nto be.",
                      "type": "object",
                      "properties": {
                        "maxSurge": {
                          "description": "The maximum number of pods that can be scheduled above the desired number of\npods.\nValue can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%).\nThis can not be 0 if MaxUnavailable is 0.\nAbsolute number is calculated from percentage by rounding up.\nDefaults to 25%.\nExample: when this is set to 30%, the new ReplicaSet can be scaled up immediately when\nthe rolling update starts, such that the total number of old and new pods do not exceed\n130% of desired pods. Once old pods have been killed,\nnew ReplicaSet can be scaled up further, ensuring that total number of pods running\nat any time during the update is at most 130% of desired pods.",
                          "anyOf": [
                            {
                              "type": "integer"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "x-kubernetes-int-or-string": true
                        },
                        "maxUnavailable": {
                          "description": "The maximum number of pods that can be unavailable during the update.\nValue can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%).\nAbsolute number is calculated from percentage by rounding down.\nThis can not be 0 if MaxSurge is 0.\nDefaults to 25%.\nExample: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods\nimmediately when the rolling update starts. Once new pods are ready, old ReplicaSet\ncan be scaled down further, followed by scaling up the new ReplicaSet, ensuring\nthat the total number of pods available at all times during the update is at\nleast 70% of desired pods.",
                          "anyOf": [
                            {
                              "type": "integer"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "x-kubernetes-int-or-string": true
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "template": {
                  "description": "Template describes the goldmane Deployment pod that will be created.",
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "description": "Metadata is a subset of a Kubernetes object's metadata that is added to the pod's metadata.",
                      "type": "object",
                      "properties": {
                        "annotations": {
                          "description": "Annotations is a map of arbitrary non-identifying metadata. Each of these\nkey/value pairs are added to the object's annotations provided the key does not\nalready exist in the object's annotations.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "labels": {
                          "description": "Labels is a map of string keys and values that may match replicaset and\nservice selectors. Each of these key/value pairs are added to the\nobject's labels provided the key does not already exist in the object's labels.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        }
                      },
                      "additionalProperties": false
                    },
                    "spec": {
                      "description": "Spec is the goldmane Deployment's PodSpec.",
                      "type": "object",
                      "properties": {
                        "affinity": {
                          "description": "Affinity is a group of affinity scheduling rules for the goldmane pods.",
                          "type": "object",
                          "properties": {
                            "nodeAffinity": {
                              "description": "Describes node affinity scheduling rules for the pod.",
                              "type": "object",
                              "properties": {
                                "preferredDuringSchedulingIgnoredDuringExecution": {
                                  "description": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node matches the corresponding matchExpressions; the\nnode(s) with the highest sum are the most preferred.",
                                  "type": "array",
                                  "items": {
                                    "description": "An empty preferred scheduling term matches all objects with implicit weight 0\n(i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
                                    "type": "object",
                                    "required": [
                                      "preference",
                                      "weight"
                                    ],
                                    "properties": {
                                      "preference": {
                                        "description": "A node selector term, associated with the corresponding weight.",
                                        "type": "object",
                                        "properties": {
                                          "matchExpressions": {
                                            "description": "A list of node selector requirements by node's labels.",
                                            "type": "array",
                                            "items": {
                                              "description": "A node selector requirement is a selector that contains values, a key, and an operator\nthat relates the key and values.",
                                              "type": "object",
                                              "required": [
                                                "key",
                                                "operator"
                                              ],
                                              "properties": {
                                                "key": {
                                                  "description": "The label key that the selector applies to.",
                                                  "type": "string"
                                                },
                                                "operator": {
                                                  "description": "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                  "type": "string"
                                                },
                                                "values": {
                                                  "description": "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.",
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  },
                                                  "x-kubernetes-list-type": "atomic"
                                                }
                                              },
                                              "additionalProperties": false
                                            },
                                            "x-kubernetes-list-type": "atomic"
                                          },
                                          "matchFields": {
                                            "description": "A list of node selector requirements by node's fields.",
                                            "type": "array",
                                            "items": {
                                              "description": "A node selector requirement is a selector that contains values, a key, and an operator\nthat relates the key and values.",
                                              "type": "object",
                                              "required": [
                                                "key",
                                                "operator"
                                              ],
                                              "properties": {
                                                "key": {
                                                  "description": "The label key that the selector applies to.",
                                                  "type": "string"
                                                },
                                                "operator": {
                                                  "description": "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                  "type": "string"
                                                },
                                                "values": {
                                                  "description": "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.",
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  },
                                                  "x-kubernetes-list-type": "atomic"
                                                }
                                              },
                                              "additionalProperties": false
                                            },
                                            "x-kubernetes-list-type": "atomic"
                                          }
                                        },
                                        "additionalProperties": false,
                                        "x-kubernetes-map-type": "atomic"
                                      },
                                      "weight": {
                                        "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
                                        "type": "integer",
                                        "format": "int32"
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  "x-kubernetes-list-type": "atomic"
                                },
                                "requiredDuringSchedulingIgnoredDuringExecution": {
                                  "description": "If the affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to an update), the system\nmay or may not try to eventually evict the pod from its node.",
                                  "type": "object",
                                  "required": [
                                    "nodeSelectorTerms"
                                  ],
                                  "properties": {
                                    "nodeSelectorTerms": {
                                      "description": "Required. A list of node selector terms. The terms are ORed.",
                                      "type": "array",
                                      "items": {
                                        "description": "A null or empty node selector term matches no objects. The requirements of\nthem are ANDed.\nThe TopologySelectorTerm type implements a subset of the NodeSelectorTerm.",
                                        "type": "object",
                                        "properties": {
                                          "matchExpressions": {
                                            "description": "A list of node selector requirements by node's labels.",
                                            "type": "array",
                                            "items": {
                                              "description": "A node selector requirement is a selector that contains values, a key, and an operator\nthat relates the key and values.",
                                              "type": "object",
                                              "required": [
                                                "key",
                                                "operator"
                                              ],
                                              "properties": {
                                                "key": {
                                                  "description": "The label key that the selector applies to.",
                                                  "type": "string"
                                                },
                                                "operator": {
                                                  "description": "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                  "type": "string"
                                                },
                                                "values": {
                                                  "description": "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.",
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  },
                                                  "x-kubernetes-list-type": "atomic"
                                                }
                                              },
                                              "additionalProperties": false
                                            },
                                            "x-kubernetes-list-type": "atomic"
                                          },
                                          "matchFields": {
                                            "description": "A list of node selector requirements by node's fields.",
                                            "type": "array",
                                            "items": {
                                              "description": "A node selector requirement is a selector that contains values, a key, and an operator\nthat relates the key and values.",
                                              "type": "object",
                                              "required": [
                                                "key",
                                                "operator"
                                              ],
                                              "properties": {
                                                "key": {
                                                  "description": "The label key that the selector applies to.",
                                                  "type": "string"
                                                },
                                                "operator": {
                                                  "description": "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                  "type": "string"
                                                },
                                                "values": {
                                                  "description": "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.",
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  },
                                                  "x-kubernetes-list-type": "atomic"
                                                }
                                              },
                                              "additionalProperties": false
                                            },
                                            "x-kubernetes-list-type": "atomic"
                                          }
                                        },
                                        "additionalProperties": false,
                                        "x-kubernetes-map-type": "atomic"
                                      },
                                      "x-kubernetes-list-type": "atomic"
                                    }
                                  },
                                  "additionalProperties": false,
                                  "x-kubernetes-map-type": "atomic"
                                }
                              },
                              "additionalProperties": false
                            },
                            "podAffinity": {
                              "description": "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).",
                              "type": "object",
                              "properties": {
                                "preferredDuringSchedulingIgnoredDuringExecution": {
                                  "description": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\nnode(s) with the highest sum are the most preferred.",
                                  "type": "array",
                                  "items": {
                                    "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
                                    "type": "object",
                                    "required": [
                                      "podAffinityTerm",
                                      "weight"
                                    ],
                                    "properties": {
                                      "podAffinityTerm": {
                                        "description": "Required. A pod affinity term, associated with the corresponding weight.",
                                        "type": "object",
                                        "required": [
                                          "topologyKey"
                                        ],
                                        "properties": {
                                          "labelSelector": {
                                            "description": "A label query over a set of resources, in this case pods.\nIf it's null, this PodAffinityTerm matches with no Pods.",
                                            "type": "object",
                                            "properties": {
                                              "matchExpressions": {
                                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                "type": "array",
                                                "items": {
                                                  "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                                  "type": "object",
                                                  "required": [
                                                    "key",
                                                    "operator"
                                                  ],
                                                  "properties": {
                                                    "key": {
                                                      "description": "key is the label key that the selector applies to.",
                                                      "type": "string"
                                                    },
                                                    "operator": {
                                                      "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                                      "type": "string"
                                                    },
                                                    "values": {
                                                      "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string"
                                                      },
                                                      "x-kubernetes-list-type": "atomic"
                                                    }
                                                  },
                                                  "additionalProperties": false
                                                },
                                                "x-kubernetes-list-type": "atomic"
                                              },
                                              "matchLabels": {
                                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                "type": "object",
                                                "additionalProperties": {
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "additionalProperties": false,
                                            "x-kubernetes-map-type": "atomic"
                                          },
                                          "matchLabelKeys": {
                                            "description": "MatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).",
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            },
                                            "x-kubernetes-list-type": "atomic"
                                          },
                                          "mismatchLabelKeys": {
                                            "description": "MismatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).",
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            },
                                            "x-kubernetes-list-type": "atomic"
                                          },
                                          "namespaceSelector": {
                                            "description": "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.",
                                            "type": "object",
                                            "properties": {
                                              "matchExpressions": {
                                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                "type": "array",
                                                "items": {
                                                  "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                                  "type": "object",
                                                  "required": [
                                                    "key",
                                                    "operator"
                                                  ],
                                                  "properties": {
                                                    "key": {
                                                      "description": "key is the label key that the selector applies to.",
                                                      "type": "string"
                                                    },
                                                    "operator": {
                                                      "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                                      "type": "string"
                                                    },
                                                    "values": {
                                                      "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string"
                                                      },
                                                      "x-kubernetes-list-type": "atomic"
                                                    }
                                                  },
                                                  "additionalProperties": false
                                                },
                                                "x-kubernetes-list-type": "atomic"
                                              },
                                              "matchLabels": {
                                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                "type": "object",
                                                "additionalProperties": {
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "additionalProperties": false,
                                            "x-kubernetes-map-type": "atomic"
                                          },
                                          "namespaces": {
                                            "description": "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            },
                                            "x-kubernetes-list-type": "atomic"
                                          },
                                          "topologyKey": {
                                            "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.",
                                            "type": "string"
                                          }
                                        },
                                        "additionalProperties": false
                                      },
                                      "weight": {
                                        "description": "weight associated with matching the corresponding podAffinityTerm,\nin the range 1-100.",
                                        "type": "integer",
                                        "format": "int32"
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  "x-kubernetes-list-type": "atomic"
                                },
                                "requiredDuringSchedulingIgnoredDuringExecution": {
                                  "description": "If the affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to a pod label update), the\nsystem may or may not try to eventually evict the pod from its node.\nWhen there are multiple elements, the lists of nodes corresponding to each\npodAffinityTerm are intersected, i.e. all terms must be satisfied.",
                                  "type": "array",
                                  "items": {
                                    "description": "Defines a set of pods (namely those matching the labelSelector\nrelative to the given namespace(s)) that this pod should be\nco-located (affinity) or not co-located (anti-affinity) with,\nwhere co-located is defined as running on a node whose value of\nthe label with key \u003ctopologyKey\u003e matches that of any node on which\na pod of the set of pods is running",
                                    "type": "object",
                                    "required": [
                                      "topologyKey"
                                    ],
                                    "properties": {
                                      "labelSelector": {
                                        "description": "A label query over a set of resources, in this case pods.\nIf it's null, this PodAffinityTerm matches with no Pods.",
                                        "type": "object",
                                        "properties": {
                                          "matchExpressions": {
                                            "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                            "type": "array",
                                            "items": {
                                              "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                              "type": "object",
                                              "required": [
                                                "key",
                                                "operator"
                                              ],
                                              "properties": {
                                                "key": {
                                                  "description": "key is the label key that the selector applies to.",
                                                  "type": "string"
                                                },
                                                "operator": {
                                                  "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                                  "type": "string"
                                                },
                                                "values": {
                                                  "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  },
                                                  "x-kubernetes-list-type": "atomic"
                                                }
                                              },
                                              "additionalProperties": false
                                            },
                                            "x-kubernetes-list-type": "atomic"
                                          },
                                          "matchLabels": {
                                            "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                            "type": "object",
                                            "additionalProperties": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        "additionalProperties": false,
                                        "x-kubernetes-map-type": "atomic"
                                      },
                                      "matchLabelKeys": {
                                        "description": "MatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).",
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        },
                                        "x-kubernetes-list-type": "atomic"
                                      },
                                      "mismatchLabelKeys": {
                                        "description": "MismatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).",
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        },
                                        "x-kubernetes-list-type": "atomic"
                                      },
                                      "namespaceSelector": {
                                        "description": "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.",
                                        "type": "object",
                                        "properties": {
                                          "matchExpressions": {
                                            "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                            "type": "array",
                                            "items": {
                                              "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                              "type": "object",
                                              "required": [
                                                "key",
                                                "operator"
                                              ],
                                              "properties": {
                                                "key": {
                                                  "description": "key is the label key that the selector applies to.",
                                                  "type": "string"
                                                },
                                                "operator": {
                                                  "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                                  "type": "string"
                                                },
                                                "values": {
                                                  "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  },
                                                  "x-kubernetes-list-type": "atomic"
                                                }
                                              },
                                              "additionalProperties": false
                                            },
                                            "x-kubernetes-list-type": "atomic"
                                          },
                                          "matchLabels": {
                                            "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                            "type": "object",
                                            "additionalProperties": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        "additionalProperties": false,
                                        "x-kubernetes-map-type": "atomic"
                                      },
                                      "namespaces": {
                                        "description": "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        },
                                        "x-kubernetes-list-type": "atomic"
                                      },
                                      "topologyKey": {
                                        "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.",
                                        "type": "string"
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  "x-kubernetes-list-type": "atomic"
                                }
                              },
                              "additionalProperties": false
                            },
                            "podAntiAffinity": {
                              "description": "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).",
                              "type": "object",
                              "properties": {
                                "preferredDuringSchedulingIgnoredDuringExecution": {
                                  "description": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe anti-affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling anti-affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\nnode(s) with the highest sum are the most preferred.",
                                  "type": "array",
                                  "items": {
                                    "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
                                    "type": "object",
                                    "required": [
                                      "podAffinityTerm",
                                      "weight"
                                    ],
                                    "properties": {
                                      "podAffinityTerm": {
                                        "description": "Required. A pod affinity term, associated with the corresponding weight.",
                                        "type": "object",
                                        "required": [
                                          "topologyKey"
                                        ],
                                        "properties": {
                                          "labelSelector": {
                                            "description": "A label query over a set of resources, in this case pods.\nIf it's null, this PodAffinityTerm matches with no Pods.",
                                            "type": "object",
                                            "properties": {
                                              "matchExpressions": {
                                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                "type": "array",
                                                "items": {
                                                  "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                                  "type": "object",
                                                  "required": [
                                                    "key",
                                                    "operator"
                                                  ],
                                                  "properties": {
                                                    "key": {
                                                      "description": "key is the label key that the selector applies to.",
                                                      "type": "string"
                                                    },
                                                    "operator": {
                                                      "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                                      "type": "string"
                                                    },
                                                    "values": {
                                                      "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string"
                                                      },
                                                      "x-kubernetes-list-type": "atomic"
                                                    }
                                                  },
                                                  "additionalProperties": false
                                                },
                                                "x-kubernetes-list-type": "atomic"
                                              },
                                              "matchLabels": {
                                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                "type": "object",
                                                "additionalProperties": {
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "additionalProperties": false,
                                            "x-kubernetes-map-type": "atomic"
                                          },
                                          "matchLabelKeys": {
                                            "description": "MatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).",
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            },
                                            "x-kubernetes-list-type": "atomic"
                                          },
                                          "mismatchLabelKeys": {
                                            "description": "MismatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).",
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            },
                                            "x-kubernetes-list-type": "atomic"
                                          },
                                          "namespaceSelector": {
                                            "description": "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.",
                                            "type": "object",
                                            "properties": {
                                              "matchExpressions": {
                                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                "type": "array",
                                                "items": {
                                                  "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                                  "type": "object",
                                                  "required": [
                                                    "key",
                                                    "operator"
                                                  ],
                                                  "properties": {
                                                    "key": {
                                                      "description": "key is the label key that the selector applies to.",
                                                      "type": "string"
                                                    },
                                                    "operator": {
                                                      "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                                      "type": "string"
                                                    },
                                                    "values": {
                                                      "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string"
                                                      },
                                                      "x-kubernetes-list-type": "atomic"
                                                    }
                                                  },
                                                  "additionalProperties": false
                                                },
                                                "x-kubernetes-list-type": "atomic"
                                              },
                                              "matchLabels": {
                                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                "type": "object",
                                                "additionalProperties": {
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "additionalProperties": false,
                                            "x-kubernetes-map-type": "atomic"
                                          },
                                          "namespaces": {
                                            "description": "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            },
                                            "x-kubernetes-list-type": "atomic"
                                          },
                                          "topologyKey": {
                                            "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.",
                                            "type": "string"
                                          }
                                        },
                                        "additionalProperties": false
                                      },
                                      "weight": {
                                        "description": "weight associated with matching the corresponding podAffinityTerm,\nin the range 1-100.",
                                        "type": "integer",
                                        "format": "int32"
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  "x-kubernetes-list-type": "atomic"
                                },
                                "requiredDuringSchedulingIgnoredDuringExecution": {
                                  "description": "If the anti-affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the anti-affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to a pod label update), the\nsystem may or may not try to eventually evict the pod from its node.\nWhen there are multiple elements, the lists of nodes corresponding to each\npodAffinityTerm are intersected, i.e. all terms must be satisfied.",
                                  "type": "array",
                                  "items": {
                                    "description": "Defines a set of pods (namely those matching the labelSelector\nrelative to the given namespace(s)) that this pod should be\nco-located (affinity) or not co-located (anti-affinity) with,\nwhere co-located is defined as running on a node whose value of\nthe label with key \u003ctopologyKey\u003e matches that of any node on which\na pod of the set of pods is running",
                                    "type": "object",
                                    "required": [
                                      "topologyKey"
                                    ],
                                    "properties": {
                                      "labelSelector": {
                                        "description": "A label query over a set of resources, in this case pods.\nIf it's null, this PodAffinityTerm matches with no Pods.",
                                        "type": "object",
                                        "properties": {
                                          "matchExpressions": {
                                            "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                            "type": "array",
                                            "items": {
                                              "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                              "type": "object",
                                              "required": [
                                                "key",
                                                "operator"
                                              ],
                                              "properties": {
                                                "key": {
                                                  "description": "key is the label key that the selector applies to.",
                                                  "type": "string"
                                                },
                                                "operator": {
                                                  "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                                  "type": "string"
                                                },
                                                "values": {
                                                  "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  },
                                                  "x-kubernetes-list-type": "atomic"
                                                }
                                              },
                                              "additionalProperties": false
                                            },
                                            "x-kubernetes-list-type": "atomic"
                                          },
                                          "matchLabels": {
                                            "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                            "type": "object",
                                            "additionalProperties": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        "additionalProperties": false,
                                        "x-kubernetes-map-type": "atomic"
                                      },
                                      "matchLabelKeys": {
                                        "description": "MatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).",
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        },
                                        "x-kubernetes-list-type": "atomic"
                                      },
                                      "mismatchLabelKeys": {
                                        "description": "MismatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).",
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        },
                                        "x-kubernetes-list-type": "atomic"
                                      },
                                      "namespaceSelector": {
                                        "description": "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.",
                                        "type": "object",
                                        "properties": {
                                          "matchExpressions": {
                                            "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                            "type": "array",
                                            "items": {
                                              "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                              "type": "object",
                                              "required": [
                                                "key",
                                                "operator"
                                              ],
                                              "properties": {
                                                "key": {
                                                  "description": "key is the label key that the selector applies to.",
                                                  "type": "string"
                                                },
                                                "operator": {
                                                  "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                                  "type": "string"
                                                },
                                                "values": {
                                                  "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  },
                                                  "x-kubernetes-list-type": "atomic"
                                                }
                                              },
                                              "additionalProperties": false
                                            },
                                            "x-kubernetes-list-type": "atomic"
                                          },
                                          "matchLabels": {
                                            "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                            "type": "object",
                                            "additionalProperties": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        "additionalProperties": false,
                                        "x-kubernetes-map-type": "atomic"
                                      },
                                      "namespaces": {
                                        "description": "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        },
                                        "x-kubernetes-list-type": "atomic"
                                      },
                                      "topologyKey": {
                                        "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.",
                                        "type": "string"
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  "x-kubernetes-list-type": "atomic"
                                }
                              },
                              "additionalProperties": false
                            }
                          },
                          "additionalProperties": false
                        },
                        "containers": {
                          "description": "Containers is a list of goldmane containers.\nIf specified, this overrides the specified EGW Deployment containers.\nIf omitted, the goldmane Deployment will use its default values for its containers.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "type": "string",
                                "enum": [
                                  "goldmane"
                                ]
                              },
                              "resources": {
                                "description": "ResourceRequirements describes the compute resource requirements.",
                                "type": "object",
                                "properties": {
                                  "claims": {
                                    "description": "Claims lists the names of resources, defined in spec.resourceClaims,\nthat are used by this container.\nThis is an alpha field and requires enabling the\nDynamicResourceAllocation feature gate.\nThis field is immutable. It can only be set for containers.",
                                    "type": "array",
                                    "items": {
                                      "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                                      "type": "object",
                                      "required": [
                                        "name"
                                      ],
                                      "properties": {
                                        "name": {
                                          "description": "Name must match the name of one entry in pod.spec.resourceClaims of\nthe Pod where this field is used. It makes that resource available\ninside a container.",
                                          "type": "string"
                                        },
                                        "request": {
                                          "description": "Request is the name chosen for a request in the referenced claim.\nIf empty, everything from the claim is made available, otherwise\nonly the result of this request.",
                                          "type": "string"
                                        }
                                      },
                                      "additionalProperties": false
                                    },
                                    "x-kubernetes-list-map-keys": [
                                      "name"
                                    ],
                                    "x-kubernetes-list-type": "map"
                                  },
                                  "limits": {
                                    "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                    "type": "object",
                                    "additionalProperties": {
                                      "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                      "anyOf": [
                                        {
                                          "type": "integer"
                                        },
                                        {
                                          "type": "string"
                                        }
                                      ],
                                      "x-kubernetes-int-or-string": true
                                    }
                                  },
                                  "requests": {
                                    "description": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                    "type": "object",
                                    "additionalProperties": {
                                      "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                      "anyOf": [
                                        {
                                          "type": "integer"
                                        },
                                        {
                                          "type": "string"
                                        }
                                      ],
                                      "x-kubernetes-int-or-string": true
                                    }
                                  }
                                },
                                "additionalProperties": false
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "nodeSelector": {
                          "description": "NodeSelector gives more control over the nodes where the goldmane pods will run on.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "priorityClassName": {
                          "description": "PriorityClassName allows to specify a PriorityClass resource to be used.",
                          "type": "string"
                        },
                        "terminationGracePeriodSeconds": {
                          "description": "TerminationGracePeriodSeconds defines the termination grace period of the goldmane pods in seconds.",
                          "type": "integer",
                          "format": "int64",
                          "minimum": 0
                        },
                        "tolerations": {
                          "description": "Tolerations is the goldmane pod's tolerations.\nIf specified, this overrides any tolerations that may be set on the goldmane Deployment.\nIf omitted, the goldmane Deployment will use its default value for tolerations.",
                          "type": "array",
                          "items": {
                            "description": "The pod this Toleration is attached to tolerates any taint that matches\nthe triple \u003ckey,value,effect\u003e using the matching operator \u003coperator\u003e.",
                            "type": "object",
                            "properties": {
                              "effect": {
                                "description": "Effect indicates the taint effect to match. Empty means match all taint effects.\nWhen specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
                                "type": "string"
                              },
                              "key": {
                                "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys.\nIf the key is empty, operator must be Exists; this combination means to match all values and all keys.",
                                "type": "string"
                              },
                              "operator": {
                                "description": "Operator represents a key's relationship to the value.\nValid operators are Exists and Equal. Defaults to Equal.\nExists is equivalent to wildcard for value, so that a pod can\ntolerate all taints of a particular category.",
                                "type": "string"
                              },
                              "tolerationSeconds": {
                                "description": "TolerationSeconds represents the period of time the toleration (which must be\nof effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,\nit is not set, which means tolerate the taint forever (do not evict). Zero and\nnegative values will be treated as 0 (evict immediately) by the system.",
                                "type": "integer",
                                "format": "int64"
                              },
                              "value": {
                                "description": "Value is the taint value the toleration matches to.\nIf the operator is Exists, the value should be empty, otherwise just a regular string.",
                                "type": "string"
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "topologySpreadConstraints": {
                          "description": "TopologySpreadConstraints describes how a group of pods ought to spread across topology\ndomains. Scheduler will schedule pods in a way which abides by the constraints.\nAll topologySpreadConstraints are ANDed.",
                          "type": "array",
                          "items": {
                            "description": "TopologySpreadConstraint specifies how to spread matching pods among the given topology.",
                            "type": "object",
                            "required": [
                              "maxSkew",
                              "topologyKey",
                              "whenUnsatisfiable"
                            ],
                            "properties": {
                              "labelSelector": {
                                "description": "LabelSelector is used to find matching pods.\nPods that match this label selector are counted to determine the number of pods\nin their corresponding topology domain.",
                                "type": "object",
                                "properties": {
                                  "matchExpressions": {
                                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                    "type": "array",
                                    "items": {
                                      "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                      "type": "object",
                                      "required": [
                                        "key",
                                        "operator"
                                      ],
                                      "properties": {
                                        "key": {
                                          "description": "key is the label key that the selector applies to.",
                                          "type": "string"
                                        },
                                        "operator": {
                                          "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                          "type": "string"
                                        },
                                        "values": {
                                          "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "x-kubernetes-list-type": "atomic"
                                        }
                                      },
                                      "additionalProperties": false
                                    },
                                    "x-kubernetes-list-type": "atomic"
                                  },
                                  "matchLabels": {
                                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "additionalProperties": false,
                                "x-kubernetes-map-type": "atomic"
                              },
                              "matchLabelKeys": {
                                "description": "MatchLabelKeys is a set of pod label keys to select the pods over which\nspreading will be calculated. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are ANDed with labelSelector\nto select the group of existing pods over which spreading will be calculated\nfor the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.\nMatchLabelKeys cannot be set when LabelSelector isn't set.\nKeys that don't exist in the incoming pod labels will\nbe ignored. A null or empty list means only match against labelSelector.\nThis is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "x-kubernetes-list-type": "atomic"
                              },
                              "maxSkew": {
                                "description": "MaxSkew describes the degree to which pods may be unevenly distributed.\nWhen `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference\nbetween the number of matching pods in the target topology and the global minimum.\nThe global minimum is the minimum number of matching pods in an eligible domain\nor zero if the number of eligible domains is less than MinDomains.\nFor example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same\nlabelSelector spread as 2/2/1:\nIn this case, the global minimum is 1.\n| zone1 | zone2 | zone3 |\n|  P P  |  P P  |   P   |\n- if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2;\nscheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2)\nviolate MaxSkew(1).\n- if MaxSkew is 2, incoming pod can be scheduled onto any zone.\nWhen `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence\nto topologies that satisfy it.\nIt's a required field. Default value is 1 and 0 is not allowed.",
                                "type": "integer",
                                "format": "int32"
                              },
                              "minDomains": {
                                "description": "MinDomains indicates a minimum number of eligible domains.\nWhen the number of eligible domains with matching topology keys is less than minDomains,\nPod Topology Spread treats \"global minimum\" as 0, and then the calculation of Skew is performed.\nAnd when the number of eligible domains with matching topology keys equals or greater than minDomains,\nthis value has no effect on scheduling.\nAs a result, when the number of eligible domains is less than minDomains,\nscheduler won't schedule more than maxSkew Pods to those domains.\nIf value is nil, the constraint behaves as if MinDomains is equal to 1.\nValid values are integers greater than 0.\nWhen value is not nil, WhenUnsatisfiable must be DoNotSchedule.\nFor example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same\nlabelSelector spread as 2/2/2:\n| zone1 | zone2 | zone3 |\n|  P P  |  P P  |  P P  |\nThe number of domains is less than 5(MinDomains), so \"global minimum\" is treated as 0.\nIn this situation, new pod with the same labelSelector cannot be scheduled,\nbecause computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones,\nit will violate MaxSkew.",
                                "type": "integer",
                                "format": "int32"
                              },
                              "nodeAffinityPolicy": {
                                "description": "NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector\nwhen calculating pod topology spread skew. Options are:\n- Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations.\n- Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.\nIf this value is nil, the behavior is equivalent to the Honor policy.\nThis is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.",
                                "type": "string"
                              },
                              "nodeTaintsPolicy": {
                                "description": "NodeTaintsPolicy indicates how we will treat node taints when calculating\npod topology spread skew. Options are:\n- Honor: nodes without taints, along with tainted nodes for which the incoming pod\nhas a toleration, are included.\n- Ignore: node taints are ignored. All nodes are included.\nIf this value is nil, the behavior is equivalent to the Ignore policy.\nThis is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.",
                                "type": "string"
                              },
                              "topologyKey": {
                                "description": "TopologyKey is the key of node labels. Nodes that have a label with this key\nand identical values are considered to be in the same topology.\nWe consider each \u003ckey, value\u003e as a \"bucket\", and try to put balanced number\nof pods into each bucket.\nWe define a domain as a particular instance of a topology.\nAlso, we define an eligible domain as a domain whose nodes meet the requirements of\nnodeAffinityPolicy and nodeTaintsPolicy.\ne.g. If TopologyKey is \"kubernetes.io/hostname\", each Node is a domain of that topology.\nAnd, if TopologyKey is \"topology.kubernetes.io/zone\", each zone is a domain of that topology.\nIt's a required field.",
                                "type": "string"
                              },
                              "whenUnsatisfiable": {
                                "description": "WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy\nthe spread constraint.\n- DoNotSchedule (default) tells the scheduler not to schedule it.\n- ScheduleAnyway tells the scheduler to schedule the pod in any location,\n  but giving higher precedence to topologies that would help reduce the\n  skew.\nA constraint is considered \"Unsatisfiable\" for an incoming pod\nif and only if every possible node assignment for that pod would violate\n\"MaxSkew\" on some topology.\nFor example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same\nlabelSelector spread as 3/1/1:\n| zone1 | zone2 | zone3 |\n| P P P |   P   |   P   |\nIf WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled\nto zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies\nMaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler\nwon't make it *more* imbalanced.\nIt's a required field.",
                                "type": "string"
                              }
                            },
                            "additionalProperties": false
                          }
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "GoldmaneStatus defines the observed state of Goldmane",
      "type": "object",
      "properties": {
        "conditions": {
          "description": "Conditions represents the latest observed set of conditions for the component. A component may be one or more of\nReady, Progressing, Degraded or other customer types.",
          "type": "array",
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                "type": "string",
                "maxLength": 32768
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64",
                "minimum": 0
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                "type": "string",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "type": "string",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ]
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                "type": "string",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
              }
            },
            "additionalProperties": false
          }
        }
      },
      "additionalProperties": false
    }
  }
}
