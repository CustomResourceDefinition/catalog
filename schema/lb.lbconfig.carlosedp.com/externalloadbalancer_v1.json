{
  "description": "ExternalLoadBalancer is the Schema for the externalloadbalancers API",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "ExternalLoadBalancerSpec is the spec of a LoadBalancer instance.",
      "type": "object",
      "required": [
        "monitor",
        "ports",
        "provider",
        "vip"
      ],
      "properties": {
        "monitor": {
          "description": "Monitor is the path and port to monitor the LoadBalancer members",
          "type": "object",
          "required": [
            "monitortype",
            "path",
            "port"
          ],
          "properties": {
            "monitortype": {
              "description": "MonitorType is the monitor parent type. \u003cmonitorType\u003e must be one of \"http\", \"https\",\n\"icmp\".",
              "type": "string",
              "enum": [
                "http",
                "https",
                "icmp"
              ]
            },
            "name": {
              "description": "Name is the monitor name, it is set by the controller",
              "type": "string"
            },
            "path": {
              "description": "Path is the path URL to check for the pool members in the format `/healthz`",
              "type": "string",
              "minLength": 1
            },
            "port": {
              "description": "Port is the port this monitor should check the pool members",
              "type": "integer",
              "maximum": 65535,
              "minimum": 1
            }
          },
          "additionalProperties": false
        },
        "nodelabels": {
          "description": "NodeLabels are the node labels used for router sharding as an alternative to \"type\". Optional.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "ports": {
          "description": "Ports is the ports exposed by this LoadBalancer instance",
          "type": "array",
          "maxItems": 128,
          "minItems": 1,
          "items": {
            "type": "integer"
          }
        },
        "provider": {
          "description": "Provider is the LoadBalancer backend provider",
          "type": "object",
          "required": [
            "creds",
            "host",
            "port",
            "vendor"
          ],
          "properties": {
            "creds": {
              "description": "Creds is the credentials secret holding the \"username\" and \"password\" keys.\nGenerate with: `kubectl create secret generic \u003csecret-name\u003e --from-literal=username=\u003cusername\u003e --from-literal=password=\u003cpassword\u003e`",
              "type": "string"
            },
            "debug": {
              "description": "Debug is a flag to enable debug on the backend log output. Defaults to false.",
              "type": "boolean",
              "default": false,
              "enum": [
                true,
                false
              ]
            },
            "host": {
              "description": "Host is the Load Balancer API IP or Hostname in URL format. Eg. `http://10.25.10.10`.",
              "type": "string",
              "maxLength": 255,
              "minLength": 1
            },
            "lbmethod": {
              "description": "Type is the Load-Balancing method. Defaults to \"round-robin\".\nOptions are: ROUNDROBIN, LEASTCONNECTION, LEASTRESPONSETIME",
              "type": "string",
              "default": "ROUNDROBIN",
              "enum": [
                "ROUNDROBIN",
                "LEASTCONNECTION",
                "LEASTRESPONSETIME"
              ]
            },
            "partition": {
              "description": "Partition is the F5 partition to create the Load Balancer instances. Defaults to \"Common\". (F5 BigIP only)",
              "type": "string"
            },
            "port": {
              "description": "Port is the Load Balancer API Port.",
              "type": "integer",
              "maximum": 65535,
              "minimum": 1
            },
            "validatecerts": {
              "description": "ValidateCerts is a flag to validate or not the Load Balancer API certificate. Defaults to false.",
              "type": "boolean",
              "default": false,
              "enum": [
                true,
                false
              ]
            },
            "vendor": {
              "description": "Vendor is the backend provider vendor",
              "type": "string",
              "enum": [
                "Dummy",
                "F5_BigIP",
                "Citrix_ADC",
                "HAProxy"
              ]
            }
          },
          "additionalProperties": false
        },
        "type": {
          "description": "Type is the node role type (master or infra) for the LoadBalancer instance",
          "type": "string",
          "enum": [
            "master",
            "infra"
          ]
        },
        "vip": {
          "description": "Vip is the Virtual IP configured in  this LoadBalancer instance",
          "type": "string",
          "maxLength": 15,
          "minLength": 1
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "ExternalLoadBalancerStatus defines the observed state of ExternalLoadBalancer",
      "type": "object",
      "required": [
        "monitor",
        "ports",
        "vips"
      ],
      "properties": {
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "monitor": {
          "description": "Monitor defines a monitor object in the LoadBalancer.",
          "type": "object",
          "required": [
            "monitortype",
            "path",
            "port"
          ],
          "properties": {
            "monitortype": {
              "description": "MonitorType is the monitor parent type. \u003cmonitorType\u003e must be one of \"http\", \"https\",\n\"icmp\".",
              "type": "string",
              "enum": [
                "http",
                "https",
                "icmp"
              ]
            },
            "name": {
              "description": "Name is the monitor name, it is set by the controller",
              "type": "string"
            },
            "path": {
              "description": "Path is the path URL to check for the pool members in the format `/healthz`",
              "type": "string",
              "minLength": 1
            },
            "port": {
              "description": "Port is the port this monitor should check the pool members",
              "type": "integer",
              "maximum": 65535,
              "minimum": 1
            }
          },
          "additionalProperties": false
        },
        "nodes": {
          "type": "array",
          "items": {
            "description": "Node defines a host object in the LoadBalancer.",
            "type": "object",
            "required": [
              "host"
            ],
            "properties": {
              "host": {
                "description": "Host is the host IP set dynamically by the controller",
                "type": "string"
              },
              "label": {
                "description": "Label is the node labels this node has",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "name": {
                "description": "Name is the host name set dynamically by the controller",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "numnodes": {
          "type": "integer"
        },
        "pools": {
          "type": "array",
          "items": {
            "description": "Pool defines a pool object in the LoadBalancer.",
            "type": "object",
            "required": [
              "monitor"
            ],
            "properties": {
              "members": {
                "description": "Members is the host members of this pool",
                "type": "array",
                "items": {
                  "description": "PoolMember defines a host object in the LoadBalancer.",
                  "type": "object",
                  "required": [
                    "node",
                    "port"
                  ],
                  "properties": {
                    "node": {
                      "description": "Node is the node part of a pool",
                      "type": "object",
                      "required": [
                        "host"
                      ],
                      "properties": {
                        "host": {
                          "description": "Host is the host IP set dynamically by the controller",
                          "type": "string"
                        },
                        "label": {
                          "description": "Label is the node labels this node has",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "name": {
                          "description": "Name is the host name set dynamically by the controller",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    },
                    "port": {
                      "description": "Port is the port for this pool member",
                      "type": "integer"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "monitor": {
                "description": "Monitor is the monitor name used on this pool",
                "type": "string"
              },
              "name": {
                "description": "Name is the Pool name, it is set by the controller",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "ports": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "provider": {
          "description": "Provider is a backend provider for F5 Big IP Load Balancers",
          "type": "object",
          "required": [
            "creds",
            "host",
            "port",
            "vendor"
          ],
          "properties": {
            "creds": {
              "description": "Creds is the credentials secret holding the \"username\" and \"password\" keys.\nGenerate with: `kubectl create secret generic \u003csecret-name\u003e --from-literal=username=\u003cusername\u003e --from-literal=password=\u003cpassword\u003e`",
              "type": "string"
            },
            "debug": {
              "description": "Debug is a flag to enable debug on the backend log output. Defaults to false.",
              "type": "boolean",
              "default": false,
              "enum": [
                true,
                false
              ]
            },
            "host": {
              "description": "Host is the Load Balancer API IP or Hostname in URL format. Eg. `http://10.25.10.10`.",
              "type": "string",
              "maxLength": 255,
              "minLength": 1
            },
            "lbmethod": {
              "description": "Type is the Load-Balancing method. Defaults to \"round-robin\".\nOptions are: ROUNDROBIN, LEASTCONNECTION, LEASTRESPONSETIME",
              "type": "string",
              "default": "ROUNDROBIN",
              "enum": [
                "ROUNDROBIN",
                "LEASTCONNECTION",
                "LEASTRESPONSETIME"
              ]
            },
            "partition": {
              "description": "Partition is the F5 partition to create the Load Balancer instances. Defaults to \"Common\". (F5 BigIP only)",
              "type": "string"
            },
            "port": {
              "description": "Port is the Load Balancer API Port.",
              "type": "integer",
              "maximum": 65535,
              "minimum": 1
            },
            "validatecerts": {
              "description": "ValidateCerts is a flag to validate or not the Load Balancer API certificate. Defaults to false.",
              "type": "boolean",
              "default": false,
              "enum": [
                true,
                false
              ]
            },
            "vendor": {
              "description": "Vendor is the backend provider vendor",
              "type": "string",
              "enum": [
                "Dummy",
                "F5_BigIP",
                "Citrix_ADC",
                "HAProxy"
              ]
            }
          },
          "additionalProperties": false
        },
        "vips": {
          "type": "array",
          "items": {
            "description": "VIP defines VIP instance in the LoadBalancer with a pool and port",
            "type": "object",
            "required": [
              "ip",
              "name",
              "pool",
              "port"
            ],
            "properties": {
              "ip": {
                "description": "IP is the IP address this VIP instance listens to",
                "type": "string"
              },
              "name": {
                "description": "Name is the VIP instance name",
                "type": "string"
              },
              "pool": {
                "description": "Pool is the associated pool with this VIP",
                "type": "string"
              },
              "port": {
                "description": "Port is the port this VIP listens to",
                "type": "integer"
              }
            },
            "additionalProperties": false
          }
        }
      },
      "additionalProperties": false
    }
  }
}
