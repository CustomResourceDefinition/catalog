{
  "description": "ActionSet is the Schema for the actionsets API",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "ActionSetSpec defines the desired state of ActionSet",
      "type": "object",
      "required": [
        "backupType"
      ],
      "properties": {
        "backup": {
          "description": "Specifies the backup action.",
          "type": "object",
          "properties": {
            "backupData": {
              "description": "Represents the action to be performed for backing up data.",
              "type": "object",
              "required": [
                "command",
                "image"
              ],
              "properties": {
                "command": {
                  "description": "Defines the commands to back up the volume data.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "image": {
                  "description": "Specifies the image of the backup container.",
                  "type": "string"
                },
                "onError": {
                  "description": "Indicates how to behave if an error is encountered during the execution of this action.",
                  "type": "string",
                  "default": "Fail",
                  "enum": [
                    "Continue",
                    "Fail"
                  ]
                },
                "runOnTargetPodNode": {
                  "description": "Determines whether to run the job workload on the target pod node.\nIf the backup container needs to mount the target pod's volumes, this field\nshould be set to true. Otherwise, the target pod's volumes will be ignored.",
                  "type": "boolean",
                  "default": false
                },
                "syncProgress": {
                  "description": "Determines if the backup progress should be synchronized and the interval\nfor synchronization in seconds.",
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "description": "Determines if the backup progress should be synchronized. If set to true,\na sidecar container will be instantiated to synchronize the backup progress with the\nBackup Custom Resource (CR) status.",
                      "type": "boolean"
                    },
                    "intervalSeconds": {
                      "description": "Defines the interval in seconds for synchronizing the backup progress.",
                      "type": "integer",
                      "format": "int32",
                      "default": 60
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "postBackup": {
              "description": "Represents a set of actions that should be executed after the backup process has completed.",
              "type": "array",
              "items": {
                "description": "ActionSpec defines an action that should be executed. Only one of the fields may be set.",
                "type": "object",
                "properties": {
                  "exec": {
                    "description": "Specifies that the action should be executed using the pod's exec API within a container.",
                    "type": "object",
                    "required": [
                      "command"
                    ],
                    "properties": {
                      "command": {
                        "description": "Defines the command and arguments to be executed.",
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "string"
                        }
                      },
                      "container": {
                        "description": "Specifies the container within the pod where the command should be executed.\nIf not specified, the first container in the pod is used by default.",
                        "type": "string"
                      },
                      "onError": {
                        "description": "Indicates how to behave if an error is encountered during the execution of this action.",
                        "type": "string",
                        "default": "Fail",
                        "enum": [
                          "Continue",
                          "Fail"
                        ]
                      },
                      "timeout": {
                        "description": "Specifies the maximum duration to wait for the hook to complete before\nconsidering the execution a failure.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "job": {
                    "description": "Specifies that the action should be executed by a Kubernetes Job.",
                    "type": "object",
                    "required": [
                      "command",
                      "image"
                    ],
                    "properties": {
                      "command": {
                        "description": "Defines the commands to back up the volume data.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "image": {
                        "description": "Specifies the image of the backup container.",
                        "type": "string"
                      },
                      "onError": {
                        "description": "Indicates how to behave if an error is encountered during the execution of this action.",
                        "type": "string",
                        "default": "Fail",
                        "enum": [
                          "Continue",
                          "Fail"
                        ]
                      },
                      "runOnTargetPodNode": {
                        "description": "Determines whether to run the job workload on the target pod node.\nIf the backup container needs to mount the target pod's volumes, this field\nshould be set to true. Otherwise, the target pod's volumes will be ignored.",
                        "type": "boolean",
                        "default": false
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              }
            },
            "preBackup": {
              "description": "Represents a set of actions that should be executed before the backup process begins.",
              "type": "array",
              "items": {
                "description": "ActionSpec defines an action that should be executed. Only one of the fields may be set.",
                "type": "object",
                "properties": {
                  "exec": {
                    "description": "Specifies that the action should be executed using the pod's exec API within a container.",
                    "type": "object",
                    "required": [
                      "command"
                    ],
                    "properties": {
                      "command": {
                        "description": "Defines the command and arguments to be executed.",
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "string"
                        }
                      },
                      "container": {
                        "description": "Specifies the container within the pod where the command should be executed.\nIf not specified, the first container in the pod is used by default.",
                        "type": "string"
                      },
                      "onError": {
                        "description": "Indicates how to behave if an error is encountered during the execution of this action.",
                        "type": "string",
                        "default": "Fail",
                        "enum": [
                          "Continue",
                          "Fail"
                        ]
                      },
                      "timeout": {
                        "description": "Specifies the maximum duration to wait for the hook to complete before\nconsidering the execution a failure.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "job": {
                    "description": "Specifies that the action should be executed by a Kubernetes Job.",
                    "type": "object",
                    "required": [
                      "command",
                      "image"
                    ],
                    "properties": {
                      "command": {
                        "description": "Defines the commands to back up the volume data.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "image": {
                        "description": "Specifies the image of the backup container.",
                        "type": "string"
                      },
                      "onError": {
                        "description": "Indicates how to behave if an error is encountered during the execution of this action.",
                        "type": "string",
                        "default": "Fail",
                        "enum": [
                          "Continue",
                          "Fail"
                        ]
                      },
                      "runOnTargetPodNode": {
                        "description": "Determines whether to run the job workload on the target pod node.\nIf the backup container needs to mount the target pod's volumes, this field\nshould be set to true. Otherwise, the target pod's volumes will be ignored.",
                        "type": "boolean",
                        "default": false
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              }
            },
            "preDelete": {
              "description": "Represents a custom deletion action that can be executed before the built-in deletion action.\nNote: The preDelete action job will ignore the env/envFrom.",
              "type": "object",
              "required": [
                "command",
                "image"
              ],
              "properties": {
                "command": {
                  "description": "Defines the commands to back up the volume data.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "image": {
                  "description": "Specifies the image of the backup container.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "withParameters": {
              "description": "Specifies the parameters used by the backup action",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false
        },
        "backupType": {
          "description": "Specifies the backup type. Supported values include:\n\n\n- `Full` for a full backup.\n- `Incremental` back up data that have changed since the last backup (either full or incremental).\n- `Differential` back up data that has changed since the last full backup.\n- `Continuous` back up transaction logs continuously, such as MySQL binlog, PostgreSQL WAL, etc.\n- `Selective` back up data more precisely, use custom parameters, such as specific databases or tables.\n\n\nContinuous backup is essential for implementing Point-in-Time Recovery (PITR).",
          "type": "string",
          "default": "Full",
          "allOf": [
            {
              "enum": [
                "Full",
                "Incremental",
                "Differential",
                "Continuous",
                "Selective"
              ]
            },
            {
              "enum": [
                "Full",
                "Incremental",
                "Differential",
                "Continuous",
                "Selective"
              ]
            }
          ]
        },
        "env": {
          "description": "Specifies a list of environment variables to be set in the container.",
          "type": "array",
          "items": {
            "description": "EnvVar represents an environment variable present in a Container.",
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
                "type": "string"
              },
              "value": {
                "description": "Variable references $(VAR_NAME) are expanded\nusing the previously defined environment variables in the container and\nany service environment variables. If a variable cannot be resolved,\nthe reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.\n\"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\".\nEscaped references will never be expanded, regardless of whether the variable\nexists or not.\nDefaults to \"\".",
                "type": "string"
              },
              "valueFrom": {
                "description": "Source for the environment variable's value. Cannot be used if value is not empty.",
                "type": "object",
                "properties": {
                  "configMapKeyRef": {
                    "description": "Selects a key of a ConfigMap.",
                    "type": "object",
                    "required": [
                      "key"
                    ],
                    "properties": {
                      "key": {
                        "description": "The key to select.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                        "type": "string"
                      },
                      "optional": {
                        "description": "Specify whether the ConfigMap or its key must be defined",
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false,
                    "x-kubernetes-map-type": "atomic"
                  },
                  "fieldRef": {
                    "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['\u003cKEY\u003e']`, `metadata.annotations['\u003cKEY\u003e']`,\nspec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
                    "type": "object",
                    "required": [
                      "fieldPath"
                    ],
                    "properties": {
                      "apiVersion": {
                        "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                        "type": "string"
                      },
                      "fieldPath": {
                        "description": "Path of the field to select in the specified API version.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false,
                    "x-kubernetes-map-type": "atomic"
                  },
                  "resourceFieldRef": {
                    "description": "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.",
                    "type": "object",
                    "required": [
                      "resource"
                    ],
                    "properties": {
                      "containerName": {
                        "description": "Container name: required for volumes, optional for env vars",
                        "type": "string"
                      },
                      "divisor": {
                        "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "string"
                          }
                        ],
                        "x-kubernetes-int-or-string": true
                      },
                      "resource": {
                        "description": "Required: resource to select",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false,
                    "x-kubernetes-map-type": "atomic"
                  },
                  "secretKeyRef": {
                    "description": "Selects a key of a secret in the pod's namespace",
                    "type": "object",
                    "required": [
                      "key"
                    ],
                    "properties": {
                      "key": {
                        "description": "The key of the secret to select from.  Must be a valid secret key.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                        "type": "string"
                      },
                      "optional": {
                        "description": "Specify whether the Secret or its key must be defined",
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false,
                    "x-kubernetes-map-type": "atomic"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-preserve-unknown-fields": true
        },
        "envFrom": {
          "description": "Specifies a list of sources to populate environment variables in the container.\nThe keys within a source must be a C_IDENTIFIER. Any invalid keys will be\nreported as an event when the container starts. If a key exists in multiple\nsources, the value from the last source will take precedence. Any values\ndefined by an Env with a duplicate key will take precedence.\n\n\nThis field cannot be updated.",
          "type": "array",
          "items": {
            "description": "EnvFromSource represents the source of a set of ConfigMaps",
            "type": "object",
            "properties": {
              "configMapRef": {
                "description": "The ConfigMap to select from",
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                    "type": "string"
                  },
                  "optional": {
                    "description": "Specify whether the ConfigMap must be defined",
                    "type": "boolean"
                  }
                },
                "additionalProperties": false,
                "x-kubernetes-map-type": "atomic"
              },
              "prefix": {
                "description": "An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.",
                "type": "string"
              },
              "secretRef": {
                "description": "The Secret to select from",
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                    "type": "string"
                  },
                  "optional": {
                    "description": "Specify whether the Secret must be defined",
                    "type": "boolean"
                  }
                },
                "additionalProperties": false,
                "x-kubernetes-map-type": "atomic"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-preserve-unknown-fields": true
        },
        "parametersSchema": {
          "description": "Specifies the schema of parameters in backups and restores before their usage.",
          "type": "object",
          "properties": {
            "openAPIV3Schema": {
              "description": "Defines the schema for parameters using the OpenAPI v3.\nThe supported property types include:\n- string\n- number\n- integer\n- array: Note that only items of string type are supported.",
              "type": "object",
              "x-kubernetes-preserve-unknown-fields": true
            }
          },
          "additionalProperties": false
        },
        "restore": {
          "description": "Specifies the restore action.",
          "type": "object",
          "properties": {
            "baseBackupRequired": {
              "description": "Determines if a base backup is required during restoration.",
              "type": "boolean",
              "default": true
            },
            "postReady": {
              "description": "Specifies the actions that should be executed after the data has been prepared and is ready for restoration.",
              "type": "array",
              "items": {
                "description": "ActionSpec defines an action that should be executed. Only one of the fields may be set.",
                "type": "object",
                "properties": {
                  "exec": {
                    "description": "Specifies that the action should be executed using the pod's exec API within a container.",
                    "type": "object",
                    "required": [
                      "command"
                    ],
                    "properties": {
                      "command": {
                        "description": "Defines the command and arguments to be executed.",
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "string"
                        }
                      },
                      "container": {
                        "description": "Specifies the container within the pod where the command should be executed.\nIf not specified, the first container in the pod is used by default.",
                        "type": "string"
                      },
                      "onError": {
                        "description": "Indicates how to behave if an error is encountered during the execution of this action.",
                        "type": "string",
                        "default": "Fail",
                        "enum": [
                          "Continue",
                          "Fail"
                        ]
                      },
                      "timeout": {
                        "description": "Specifies the maximum duration to wait for the hook to complete before\nconsidering the execution a failure.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "job": {
                    "description": "Specifies that the action should be executed by a Kubernetes Job.",
                    "type": "object",
                    "required": [
                      "command",
                      "image"
                    ],
                    "properties": {
                      "command": {
                        "description": "Defines the commands to back up the volume data.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "image": {
                        "description": "Specifies the image of the backup container.",
                        "type": "string"
                      },
                      "onError": {
                        "description": "Indicates how to behave if an error is encountered during the execution of this action.",
                        "type": "string",
                        "default": "Fail",
                        "enum": [
                          "Continue",
                          "Fail"
                        ]
                      },
                      "runOnTargetPodNode": {
                        "description": "Determines whether to run the job workload on the target pod node.\nIf the backup container needs to mount the target pod's volumes, this field\nshould be set to true. Otherwise, the target pod's volumes will be ignored.",
                        "type": "boolean",
                        "default": false
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              }
            },
            "prepareData": {
              "description": "Specifies the action required to prepare data for restoration.",
              "type": "object",
              "required": [
                "command",
                "image"
              ],
              "properties": {
                "command": {
                  "description": "Defines the commands to back up the volume data.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "image": {
                  "description": "Specifies the image of the backup container.",
                  "type": "string"
                },
                "onError": {
                  "description": "Indicates how to behave if an error is encountered during the execution of this action.",
                  "type": "string",
                  "default": "Fail",
                  "enum": [
                    "Continue",
                    "Fail"
                  ]
                },
                "runOnTargetPodNode": {
                  "description": "Determines whether to run the job workload on the target pod node.\nIf the backup container needs to mount the target pod's volumes, this field\nshould be set to true. Otherwise, the target pod's volumes will be ignored.",
                  "type": "boolean",
                  "default": false
                }
              },
              "additionalProperties": false
            },
            "withParameters": {
              "description": "Specifies the parameters used by the restore action",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "ActionSetStatus defines the observed state of ActionSet",
      "type": "object",
      "properties": {
        "message": {
          "description": "Provides a human-readable explanation detailing the reason for the current phase of the ActionSet.",
          "type": "string"
        },
        "observedGeneration": {
          "description": "Represents the generation number that has been observed by the controller.",
          "type": "integer",
          "format": "int64"
        },
        "phase": {
          "description": "Indicates the phase of the ActionSet. This can be either 'Available' or 'Unavailable'.",
          "type": "string",
          "enum": [
            "Available",
            "Unavailable"
          ]
        }
      },
      "additionalProperties": false
    }
  }
}
