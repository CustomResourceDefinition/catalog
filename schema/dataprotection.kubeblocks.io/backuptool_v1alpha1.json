{
  "description": "BackupTool is the Schema for the backuptools API (defined by provider)",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "BackupToolSpec defines the desired state of BackupTool",
      "type": "object",
      "required": [
        "backupCommands",
        "image",
        "physical"
      ],
      "properties": {
        "backupCommands": {
          "description": "Array of command that apps can do database backup. from invoke args the order of commands follows the order of array.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "deployKind": {
          "description": "which kind for run a backup tool, supported values: job, statefulSet.",
          "type": "string",
          "default": "job",
          "enum": [
            "job",
            "statefulSet"
          ]
        },
        "env": {
          "description": "List of environment variables to set in the container.",
          "type": "array",
          "items": {
            "description": "EnvVar represents an environment variable present in a Container.",
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
                "type": "string"
              },
              "value": {
                "description": "Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".",
                "type": "string"
              },
              "valueFrom": {
                "description": "Source for the environment variable's value. Cannot be used if value is not empty.",
                "type": "object",
                "properties": {
                  "configMapKeyRef": {
                    "description": "Selects a key of a ConfigMap.",
                    "type": "object",
                    "required": [
                      "key"
                    ],
                    "properties": {
                      "key": {
                        "description": "The key to select.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                        "type": "string"
                      },
                      "optional": {
                        "description": "Specify whether the ConfigMap or its key must be defined",
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "fieldRef": {
                    "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['\u003cKEY\u003e']`, `metadata.annotations['\u003cKEY\u003e']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
                    "type": "object",
                    "required": [
                      "fieldPath"
                    ],
                    "properties": {
                      "apiVersion": {
                        "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                        "type": "string"
                      },
                      "fieldPath": {
                        "description": "Path of the field to select in the specified API version.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "resourceFieldRef": {
                    "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.",
                    "type": "object",
                    "required": [
                      "resource"
                    ],
                    "properties": {
                      "containerName": {
                        "description": "Container name: required for volumes, optional for env vars",
                        "type": "string"
                      },
                      "divisor": {
                        "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "string"
                          }
                        ],
                        "x-kubernetes-int-or-string": true
                      },
                      "resource": {
                        "description": "Required: resource to select",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "secretKeyRef": {
                    "description": "Selects a key of a secret in the pod's namespace",
                    "type": "object",
                    "required": [
                      "key"
                    ],
                    "properties": {
                      "key": {
                        "description": "The key of the secret to select from.  Must be a valid secret key.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                        "type": "string"
                      },
                      "optional": {
                        "description": "Specify whether the Secret or its key must be defined",
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-preserve-unknown-fields": true
        },
        "envFrom": {
          "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
          "type": "array",
          "items": {
            "description": "EnvFromSource represents the source of a set of ConfigMaps",
            "type": "object",
            "properties": {
              "configMapRef": {
                "description": "The ConfigMap to select from",
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                    "type": "string"
                  },
                  "optional": {
                    "description": "Specify whether the ConfigMap must be defined",
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              "prefix": {
                "description": "An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.",
                "type": "string"
              },
              "secretRef": {
                "description": "The Secret to select from",
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                    "type": "string"
                  },
                  "optional": {
                    "description": "Specify whether the Secret must be defined",
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-preserve-unknown-fields": true
        },
        "image": {
          "description": "Backup tool Container image name.",
          "type": "string"
        },
        "incrementalBackupCommands": {
          "description": "Array of command that apps can do database incremental backup. like xtrabackup, that can performs an incremental backup file.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "logical": {
          "description": "backup tool can support logical restore, in this case, restore NOT RESTART database.",
          "type": "object",
          "properties": {
            "incrementalRestoreCommands": {
              "description": "Array of incremental restore commands.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "podScope": {
              "description": "podScope defines the pod scope for restore from backup, supported values: - 'All' will exec the restore command on all pods. - 'ReadWrite' will pick a ReadWrite pod to exec the restore command.",
              "type": "string",
              "default": "All",
              "enum": [
                "All",
                "ReadWrite"
              ]
            },
            "restoreCommands": {
              "description": "Array of command that apps can perform database restore. like xtrabackup, that can performs restore mysql from files.",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false
        },
        "physical": {
          "description": "backup tool can support physical restore, in this case, restore must be RESTART database.",
          "type": "object",
          "properties": {
            "incrementalRestoreCommands": {
              "description": "Array of incremental restore commands.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "restoreCommands": {
              "description": "Array of command that apps can perform database restore. like xtrabackup, that can performs restore mysql from files.",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false
        },
        "resources": {
          "description": "Compute Resources required by this container. Cannot be updated.",
          "type": "object",
          "properties": {
            "claims": {
              "description": "Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. \n This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. \n This field is immutable.",
              "type": "array",
              "items": {
                "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              },
              "x-kubernetes-list-map-keys": [
                "name"
              ],
              "x-kubernetes-list-type": "map"
            },
            "limits": {
              "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
              "type": "object",
              "additionalProperties": {
                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "string"
                  }
                ],
                "x-kubernetes-int-or-string": true
              }
            },
            "requests": {
              "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
              "type": "object",
              "additionalProperties": {
                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "string"
                  }
                ],
                "x-kubernetes-int-or-string": true
              }
            }
          },
          "additionalProperties": false,
          "x-kubernetes-preserve-unknown-fields": true
        },
        "type": {
          "description": "the type of backup tool, file or pitr",
          "type": "string",
          "default": "file",
          "enum": [
            "file",
            "pitr"
          ]
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "BackupToolStatus defines the observed state of BackupTool",
      "type": "object"
    }
  }
}
