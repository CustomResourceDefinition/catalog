{
  "description": "Backup is the Schema for the backups API.",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "BackupSpec defines the desired state of Backup.",
      "type": "object",
      "required": [
        "backupMethod",
        "backupPolicyName"
      ],
      "properties": {
        "backupMethod": {
          "description": "Specifies the backup method name that is defined in the backup policy.",
          "type": "string",
          "x-kubernetes-validations": [
            {
              "rule": "self == oldSelf",
              "message": "forbidden to update spec.backupMethod"
            }
          ]
        },
        "backupPolicyName": {
          "description": "Specifies the backup policy to be applied for this backup.",
          "type": "string",
          "pattern": "^[a-z0-9]([a-z0-9\\.\\-]*[a-z0-9])?$",
          "x-kubernetes-validations": [
            {
              "rule": "self == oldSelf",
              "message": "forbidden to update spec.backupPolicyName"
            }
          ]
        },
        "deletionPolicy": {
          "description": "Determines whether the backup contents stored in the backup repository\nshould be deleted when the backup custom resource(CR) is deleted.\nSupported values are `Retain` and `Delete`.\n\n\n- `Retain` means that the backup content and its physical snapshot on backup repository are kept.\n- `Delete` means that the backup content and its physical snapshot on backup repository are deleted.\n\n\nTODO: for the retain policy, we should support in the future for only deleting\n  the backup CR but retaining the backup contents in backup repository.\n  The current implementation only prevent accidental deletion of backup data.",
          "type": "string",
          "default": "Delete",
          "allOf": [
            {
              "enum": [
                "Delete",
                "Retain"
              ]
            },
            {
              "enum": [
                "Delete",
                "Retain"
              ]
            }
          ]
        },
        "parameters": {
          "description": "Specifies a list of name-value pairs representing parameters and their corresponding values.\nParameters match the schema specified in the `actionset.spec.parametersSchema`",
          "type": "array",
          "maxItems": 128,
          "items": {
            "type": "object",
            "required": [
              "name",
              "value"
            ],
            "properties": {
              "name": {
                "description": "Represents the name of the parameter.",
                "type": "string"
              },
              "value": {
                "description": "Represents the parameter values.",
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "name"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-validations": [
            {
              "rule": "self == oldSelf",
              "message": "forbidden to update spec.parameters"
            }
          ]
        },
        "parentBackupName": {
          "description": "Determines the parent backup name for incremental or differential backup.",
          "type": "string",
          "x-kubernetes-validations": [
            {
              "rule": "self == oldSelf",
              "message": "forbidden to update spec.parentBackupName"
            }
          ]
        },
        "retentionPeriod": {
          "description": "Determines a duration up to which the backup should be kept.\nController will remove all backups that are older than the RetentionPeriod.\nIf not set, the backup will be kept forever.\nFor example, RetentionPeriod of `30d` will keep only the backups of last 30 days.\nSample duration format:\n\n\n- years: \t2y\n- months: \t6mo\n- days: \t\t30d\n- hours: \t12h\n- minutes: \t30m\n\n\nYou can also combine the above durations. For example: 30d12h30m.",
          "type": "string"
        }
      },
      "additionalProperties": false,
      "x-kubernetes-validations": [
        {
          "rule": "has(oldSelf.parameters) == has(self.parameters)",
          "message": "forbidden to update spec.parameters"
        }
      ]
    },
    "status": {
      "description": "BackupStatus defines the observed state of Backup.",
      "type": "object",
      "properties": {
        "actions": {
          "description": "Records the actions status for this backup.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "actionType": {
                "description": "The type of the action.",
                "type": "string"
              },
              "availableReplicas": {
                "description": "Available replicas for statefulSet action.",
                "type": "integer",
                "format": "int32"
              },
              "completionTimestamp": {
                "description": "Records the time an action was completed.",
                "type": "string",
                "format": "date-time"
              },
              "failureReason": {
                "description": "An error that caused the action to fail.",
                "type": "string"
              },
              "name": {
                "description": "The name of the action.",
                "type": "string"
              },
              "objectRef": {
                "description": "The object reference for the action.",
                "type": "object",
                "properties": {
                  "apiVersion": {
                    "description": "API version of the referent.",
                    "type": "string"
                  },
                  "fieldPath": {
                    "description": "If referring to a piece of an object instead of an entire object, this string\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\nFor example, if the object reference is to a container within a pod, this would take on a value like:\n\"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered\nthe event) or if no container name is specified \"spec.containers[2]\" (container with\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\nreferencing a part of an object.\nTODO: this design is not final and this field is subject to change in the future.",
                    "type": "string"
                  },
                  "kind": {
                    "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                    "type": "string"
                  },
                  "resourceVersion": {
                    "description": "Specific resourceVersion to which this reference is made, if any.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                    "type": "string"
                  },
                  "uid": {
                    "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                    "type": "string"
                  }
                },
                "additionalProperties": false,
                "x-kubernetes-map-type": "atomic"
              },
              "phase": {
                "description": "The current phase of the action.",
                "type": "string"
              },
              "startTimestamp": {
                "description": "Records the time an action was started.",
                "type": "string",
                "format": "date-time"
              },
              "targetPodName": {
                "description": "Records the target pod name which has been backed up.",
                "type": "string"
              },
              "timeRange": {
                "description": "Records the time range of backed up data, for PITR, this is the time\nrange of recoverable data.",
                "type": "object",
                "properties": {
                  "end": {
                    "description": "Records the end time of the backup, in Coordinated Universal Time (UTC).",
                    "type": "string",
                    "format": "date-time"
                  },
                  "start": {
                    "description": "Records the start time of the backup, in Coordinated Universal Time (UTC).",
                    "type": "string",
                    "format": "date-time"
                  },
                  "timeZone": {
                    "description": "time zone, supports only zone offset, with a value range of \"-12:59 ~ +13:00\".",
                    "type": "string",
                    "pattern": "^(\\+|\\-)(0[0-9]|1[0-3]):([0-5][0-9])$"
                  }
                },
                "additionalProperties": false
              },
              "totalSize": {
                "description": "The total size of backed up data size.\nA string with capacity units in the format of \"1Gi\", \"1Mi\", \"1Ki\".\nIf no capacity unit is specified, it is assumed to be in bytes.",
                "type": "string"
              },
              "volumeSnapshots": {
                "description": "Records the volume snapshot status for the action.",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "contentName": {
                      "description": "The name of the volume snapshot content.",
                      "type": "string"
                    },
                    "name": {
                      "description": "The name of the volume snapshot.",
                      "type": "string"
                    },
                    "size": {
                      "description": "The size of the volume snapshot.",
                      "type": "string"
                    },
                    "targetName": {
                      "description": "Associates this volumeSnapshot with its corresponding target.",
                      "type": "string"
                    },
                    "volumeName": {
                      "description": "The name of the volume.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              }
            },
            "additionalProperties": false
          }
        },
        "backupMethod": {
          "description": "Records the backup method information for this backup.\nRefer to BackupMethod for more details.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "actionSetName": {
              "description": "Refers to the ActionSet object that defines the backup actions.\nFor volume snapshot backup, the actionSet is not required, the controller\nwill use the CSI volume snapshotter to create the snapshot.",
              "type": "string"
            },
            "compatibleMethod": {
              "description": "The name of the compatible full backup method, used by incremental backups.",
              "type": "string",
              "pattern": "^[a-z0-9]([a-z0-9\\.\\-]*[a-z0-9])?$"
            },
            "env": {
              "description": "Specifies the environment variables for the backup workload.",
              "type": "array",
              "items": {
                "description": "EnvVar represents an environment variable present in a Container.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Variable references $(VAR_NAME) are expanded\nusing the previously defined environment variables in the container and\nany service environment variables. If a variable cannot be resolved,\nthe reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.\n\"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\".\nEscaped references will never be expanded, regardless of whether the variable\nexists or not.\nDefaults to \"\".",
                    "type": "string"
                  },
                  "valueFrom": {
                    "description": "Source for the environment variable's value. Cannot be used if value is not empty.",
                    "type": "object",
                    "properties": {
                      "configMapKeyRef": {
                        "description": "Selects a key of a ConfigMap.",
                        "type": "object",
                        "required": [
                          "key"
                        ],
                        "properties": {
                          "key": {
                            "description": "The key to select.",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                            "type": "string"
                          },
                          "optional": {
                            "description": "Specify whether the ConfigMap or its key must be defined",
                            "type": "boolean"
                          }
                        },
                        "additionalProperties": false,
                        "x-kubernetes-map-type": "atomic"
                      },
                      "fieldRef": {
                        "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['\u003cKEY\u003e']`, `metadata.annotations['\u003cKEY\u003e']`,\nspec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
                        "type": "object",
                        "required": [
                          "fieldPath"
                        ],
                        "properties": {
                          "apiVersion": {
                            "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                            "type": "string"
                          },
                          "fieldPath": {
                            "description": "Path of the field to select in the specified API version.",
                            "type": "string"
                          }
                        },
                        "additionalProperties": false,
                        "x-kubernetes-map-type": "atomic"
                      },
                      "resourceFieldRef": {
                        "description": "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.",
                        "type": "object",
                        "required": [
                          "resource"
                        ],
                        "properties": {
                          "containerName": {
                            "description": "Container name: required for volumes, optional for env vars",
                            "type": "string"
                          },
                          "divisor": {
                            "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                            "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                            "anyOf": [
                              {
                                "type": "integer"
                              },
                              {
                                "type": "string"
                              }
                            ],
                            "x-kubernetes-int-or-string": true
                          },
                          "resource": {
                            "description": "Required: resource to select",
                            "type": "string"
                          }
                        },
                        "additionalProperties": false,
                        "x-kubernetes-map-type": "atomic"
                      },
                      "secretKeyRef": {
                        "description": "Selects a key of a secret in the pod's namespace",
                        "type": "object",
                        "required": [
                          "key"
                        ],
                        "properties": {
                          "key": {
                            "description": "The key of the secret to select from.  Must be a valid secret key.",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                            "type": "string"
                          },
                          "optional": {
                            "description": "Specify whether the Secret or its key must be defined",
                            "type": "boolean"
                          }
                        },
                        "additionalProperties": false,
                        "x-kubernetes-map-type": "atomic"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              }
            },
            "name": {
              "description": "The name of backup method.",
              "type": "string",
              "pattern": "^[a-z0-9]([a-z0-9\\.\\-]*[a-z0-9])?$"
            },
            "runtimeSettings": {
              "description": "Specifies runtime settings for the backup workload container.",
              "type": "object",
              "properties": {
                "resources": {
                  "description": "Specifies the resource required by container.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                  "type": "object",
                  "properties": {
                    "claims": {
                      "description": "Claims lists the names of resources, defined in spec.resourceClaims,\nthat are used by this container.\n\n\nThis is an alpha field and requires enabling the\nDynamicResourceAllocation feature gate.\n\n\nThis field is immutable. It can only be set for containers.",
                      "type": "array",
                      "items": {
                        "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name must match the name of one entry in pod.spec.resourceClaims of\nthe Pod where this field is used. It makes that resource available\ninside a container.",
                            "type": "string"
                          }
                        },
                        "additionalProperties": false
                      },
                      "x-kubernetes-list-map-keys": [
                        "name"
                      ],
                      "x-kubernetes-list-type": "map"
                    },
                    "limits": {
                      "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                      "type": "object",
                      "additionalProperties": {
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "string"
                          }
                        ],
                        "x-kubernetes-int-or-string": true
                      }
                    },
                    "requests": {
                      "description": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                      "type": "object",
                      "additionalProperties": {
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "string"
                          }
                        ],
                        "x-kubernetes-int-or-string": true
                      }
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "snapshotVolumes": {
              "description": "Specifies whether to take snapshots of persistent volumes. If true,\nthe ActionSetName is not required, the controller will use the CSI volume\nsnapshotter to create the snapshot.",
              "type": "boolean",
              "default": false
            },
            "target": {
              "description": "Specifies the target information to back up, it will override the target in backup policy.",
              "type": "object",
              "properties": {
                "connectionCredential": {
                  "description": "Specifies the connection credential to connect to the target database cluster.",
                  "type": "object",
                  "required": [
                    "secretName"
                  ],
                  "properties": {
                    "hostKey": {
                      "description": "Specifies the map key of the host in the connection credential secret.",
                      "type": "string"
                    },
                    "passwordKey": {
                      "description": "Specifies the map key of the password in the connection credential secret.\nThis password will be saved in the backup annotation for full backup.\nYou can use the environment variable DP_ENCRYPTION_KEY to specify encryption key.",
                      "type": "string",
                      "default": "password"
                    },
                    "portKey": {
                      "description": "Specifies the map key of the port in the connection credential secret.",
                      "type": "string"
                    },
                    "secretName": {
                      "description": "Refers to the Secret object that contains the connection credential.",
                      "type": "string",
                      "pattern": "^[a-z0-9]([a-z0-9\\.\\-]*[a-z0-9])?$"
                    },
                    "usernameKey": {
                      "description": "Specifies the map key of the user in the connection credential secret.",
                      "type": "string",
                      "default": "username"
                    }
                  },
                  "additionalProperties": false
                },
                "containerPort": {
                  "description": "Specifies the container port in the target pod.\nIf not specified, the first container and its first port will be used.",
                  "type": "object",
                  "properties": {
                    "containerName": {
                      "description": "Specifies the name of container with the port.",
                      "type": "string"
                    },
                    "portName": {
                      "description": "Specifies the port name.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "name": {
                  "description": "Specifies a mandatory and unique identifier for each target when using the \"targets\" field.\nThe backup data for the current target is stored in a uniquely named subdirectory.",
                  "type": "string"
                },
                "podSelector": {
                  "description": "Used to find the target pod. The volumes of the target pod will be backed up.",
                  "type": "object",
                  "properties": {
                    "fallbackLabelSelector": {
                      "description": "fallbackLabelSelector is used to filter available pods when the labelSelector fails.\nThis only takes effect when the `strategy` field below is set to `Any`.",
                      "type": "object",
                      "properties": {
                        "matchExpressions": {
                          "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                          "type": "array",
                          "items": {
                            "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                            "type": "object",
                            "required": [
                              "key",
                              "operator"
                            ],
                            "properties": {
                              "key": {
                                "description": "key is the label key that the selector applies to.",
                                "type": "string"
                              },
                              "operator": {
                                "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                "type": "string"
                              },
                              "values": {
                                "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "matchLabels": {
                          "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        }
                      },
                      "additionalProperties": false,
                      "x-kubernetes-map-type": "atomic"
                    },
                    "matchExpressions": {
                      "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                      "type": "array",
                      "items": {
                        "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                        "type": "object",
                        "required": [
                          "key",
                          "operator"
                        ],
                        "properties": {
                          "key": {
                            "description": "key is the label key that the selector applies to.",
                            "type": "string"
                          },
                          "operator": {
                            "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                            "type": "string"
                          },
                          "values": {
                            "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "matchLabels": {
                      "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "strategy": {
                      "description": "Specifies the strategy to select the target pod when multiple pods are selected.\nValid values are:\n\n\n- `Any`: select any one pod that match the labelsSelector.\n- `All`: select all pods that match the labelsSelector. The backup data for the current pod\nwill be stored in a subdirectory named after the pod.",
                      "type": "string",
                      "default": "Any",
                      "enum": [
                        "Any",
                        "All"
                      ]
                    },
                    "useParentSelectedPods": {
                      "description": "UseParentSelectedPods indicates whether to use the pods selected by the parent for backup.\nIf set to true, the backup will use the same pods selected by the parent.\nAnd only takes effect when the 'strategy' is set to 'Any'.",
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false,
                  "x-kubernetes-map-type": "atomic"
                },
                "resources": {
                  "description": "Specifies the kubernetes resources to back up.",
                  "type": "object",
                  "properties": {
                    "excluded": {
                      "description": "excluded is a slice of namespaced-scoped resource type names to exclude in\nthe kubernetes resources.\nThe default value is empty.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "included": {
                      "description": "included is a slice of namespaced-scoped resource type names to include in\nthe kubernetes resources.\nThe default value is empty.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "selector": {
                      "description": "A metav1.LabelSelector to filter the target kubernetes resources that need\nto be backed up. If not set, will do not back up any kubernetes resources.",
                      "type": "object",
                      "properties": {
                        "matchExpressions": {
                          "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                          "type": "array",
                          "items": {
                            "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                            "type": "object",
                            "required": [
                              "key",
                              "operator"
                            ],
                            "properties": {
                              "key": {
                                "description": "key is the label key that the selector applies to.",
                                "type": "string"
                              },
                              "operator": {
                                "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                "type": "string"
                              },
                              "values": {
                                "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "matchLabels": {
                          "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        }
                      },
                      "additionalProperties": false,
                      "x-kubernetes-map-type": "atomic"
                    }
                  },
                  "additionalProperties": false
                },
                "serviceAccountName": {
                  "description": "Specifies the service account to run the backup workload.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "targetVolumes": {
              "description": "Specifies which volumes from the target should be mounted in the backup workload.",
              "type": "object",
              "properties": {
                "volumeMounts": {
                  "description": "Specifies the mount for the volumes specified in `volumes` section.",
                  "type": "array",
                  "items": {
                    "description": "VolumeMount describes a mounting of a Volume within a container.",
                    "type": "object",
                    "required": [
                      "mountPath",
                      "name"
                    ],
                    "properties": {
                      "mountPath": {
                        "description": "Path within the container at which the volume should be mounted.  Must\nnot contain ':'.",
                        "type": "string"
                      },
                      "mountPropagation": {
                        "description": "mountPropagation determines how mounts are propagated from the host\nto container and the other way around.\nWhen not set, MountPropagationNone is used.\nThis field is beta in 1.10.",
                        "type": "string"
                      },
                      "name": {
                        "description": "This must match the Name of a Volume.",
                        "type": "string"
                      },
                      "readOnly": {
                        "description": "Mounted read-only if true, read-write otherwise (false or unspecified).\nDefaults to false.",
                        "type": "boolean"
                      },
                      "subPath": {
                        "description": "Path within the volume from which the container's volume should be mounted.\nDefaults to \"\" (volume's root).",
                        "type": "string"
                      },
                      "subPathExpr": {
                        "description": "Expanded path within the volume from which the container's volume should be mounted.\nBehaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.\nDefaults to \"\" (volume's root).\nSubPathExpr and SubPath are mutually exclusive.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "volumes": {
                  "description": "Specifies the list of volumes of targeted application that should be mounted\non the backup workload.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "additionalProperties": false
            },
            "targets": {
              "description": "Specifies multiple target information for backup operations. This includes details\nsuch as the target pod and cluster connection credentials. All specified targets\nwill be backed up collectively.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "connectionCredential": {
                    "description": "Specifies the connection credential to connect to the target database cluster.",
                    "type": "object",
                    "required": [
                      "secretName"
                    ],
                    "properties": {
                      "hostKey": {
                        "description": "Specifies the map key of the host in the connection credential secret.",
                        "type": "string"
                      },
                      "passwordKey": {
                        "description": "Specifies the map key of the password in the connection credential secret.\nThis password will be saved in the backup annotation for full backup.\nYou can use the environment variable DP_ENCRYPTION_KEY to specify encryption key.",
                        "type": "string",
                        "default": "password"
                      },
                      "portKey": {
                        "description": "Specifies the map key of the port in the connection credential secret.",
                        "type": "string"
                      },
                      "secretName": {
                        "description": "Refers to the Secret object that contains the connection credential.",
                        "type": "string",
                        "pattern": "^[a-z0-9]([a-z0-9\\.\\-]*[a-z0-9])?$"
                      },
                      "usernameKey": {
                        "description": "Specifies the map key of the user in the connection credential secret.",
                        "type": "string",
                        "default": "username"
                      }
                    },
                    "additionalProperties": false
                  },
                  "containerPort": {
                    "description": "Specifies the container port in the target pod.\nIf not specified, the first container and its first port will be used.",
                    "type": "object",
                    "properties": {
                      "containerName": {
                        "description": "Specifies the name of container with the port.",
                        "type": "string"
                      },
                      "portName": {
                        "description": "Specifies the port name.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "name": {
                    "description": "Specifies a mandatory and unique identifier for each target when using the \"targets\" field.\nThe backup data for the current target is stored in a uniquely named subdirectory.",
                    "type": "string"
                  },
                  "podSelector": {
                    "description": "Used to find the target pod. The volumes of the target pod will be backed up.",
                    "type": "object",
                    "properties": {
                      "fallbackLabelSelector": {
                        "description": "fallbackLabelSelector is used to filter available pods when the labelSelector fails.\nThis only takes effect when the `strategy` field below is set to `Any`.",
                        "type": "object",
                        "properties": {
                          "matchExpressions": {
                            "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                            "type": "array",
                            "items": {
                              "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                              "type": "object",
                              "required": [
                                "key",
                                "operator"
                              ],
                              "properties": {
                                "key": {
                                  "description": "key is the label key that the selector applies to.",
                                  "type": "string"
                                },
                                "operator": {
                                  "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                  "type": "string"
                                },
                                "values": {
                                  "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              },
                              "additionalProperties": false
                            }
                          },
                          "matchLabels": {
                            "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          }
                        },
                        "additionalProperties": false,
                        "x-kubernetes-map-type": "atomic"
                      },
                      "matchExpressions": {
                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                        "type": "array",
                        "items": {
                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                          "type": "object",
                          "required": [
                            "key",
                            "operator"
                          ],
                          "properties": {
                            "key": {
                              "description": "key is the label key that the selector applies to.",
                              "type": "string"
                            },
                            "operator": {
                              "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                              "type": "string"
                            },
                            "values": {
                              "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "matchLabels": {
                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "strategy": {
                        "description": "Specifies the strategy to select the target pod when multiple pods are selected.\nValid values are:\n\n\n- `Any`: select any one pod that match the labelsSelector.\n- `All`: select all pods that match the labelsSelector. The backup data for the current pod\nwill be stored in a subdirectory named after the pod.",
                        "type": "string",
                        "default": "Any",
                        "enum": [
                          "Any",
                          "All"
                        ]
                      },
                      "useParentSelectedPods": {
                        "description": "UseParentSelectedPods indicates whether to use the pods selected by the parent for backup.\nIf set to true, the backup will use the same pods selected by the parent.\nAnd only takes effect when the 'strategy' is set to 'Any'.",
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false,
                    "x-kubernetes-map-type": "atomic"
                  },
                  "resources": {
                    "description": "Specifies the kubernetes resources to back up.",
                    "type": "object",
                    "properties": {
                      "excluded": {
                        "description": "excluded is a slice of namespaced-scoped resource type names to exclude in\nthe kubernetes resources.\nThe default value is empty.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "included": {
                        "description": "included is a slice of namespaced-scoped resource type names to include in\nthe kubernetes resources.\nThe default value is empty.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "selector": {
                        "description": "A metav1.LabelSelector to filter the target kubernetes resources that need\nto be backed up. If not set, will do not back up any kubernetes resources.",
                        "type": "object",
                        "properties": {
                          "matchExpressions": {
                            "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                            "type": "array",
                            "items": {
                              "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                              "type": "object",
                              "required": [
                                "key",
                                "operator"
                              ],
                              "properties": {
                                "key": {
                                  "description": "key is the label key that the selector applies to.",
                                  "type": "string"
                                },
                                "operator": {
                                  "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                  "type": "string"
                                },
                                "values": {
                                  "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              },
                              "additionalProperties": false
                            }
                          },
                          "matchLabels": {
                            "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          }
                        },
                        "additionalProperties": false,
                        "x-kubernetes-map-type": "atomic"
                      }
                    },
                    "additionalProperties": false
                  },
                  "serviceAccountName": {
                    "description": "Specifies the service account to run the backup workload.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "additionalProperties": false
        },
        "backupRepoName": {
          "description": "The name of the backup repository.",
          "type": "string"
        },
        "baseBackupName": {
          "description": "Records the base full backup name for incremental backup or differential backup.\nWhen the base backup is deleted, the backup will also be deleted.",
          "type": "string"
        },
        "completionTimestamp": {
          "description": "Records the time when the backup operation was completed.\nThis timestamp is recorded even if the backup operation fails.\nThe server's time is used for this timestamp.",
          "type": "string",
          "format": "date-time"
        },
        "duration": {
          "description": "Records the duration of the backup operation.\nWhen converted to a string, the format is \"1h2m0.5s\".",
          "type": "string"
        },
        "encryptionConfig": {
          "description": "Records the encryption config for this backup.",
          "type": "object",
          "required": [
            "algorithm",
            "passPhraseSecretKeyRef"
          ],
          "properties": {
            "algorithm": {
              "description": "Specifies the encryption algorithm. Currently supported algorithms are:\n\n\n- AES-128-CFB\n- AES-192-CFB\n- AES-256-CFB",
              "type": "string",
              "default": "AES-256-CFB",
              "enum": [
                "AES-128-CFB",
                "AES-192-CFB",
                "AES-256-CFB"
              ]
            },
            "passPhraseSecretKeyRef": {
              "description": "Selects the key of a secret in the current namespace, the value of the secret\nis used as the encryption key.",
              "type": "object",
              "required": [
                "key"
              ],
              "properties": {
                "key": {
                  "description": "The key of the secret to select from.  Must be a valid secret key.",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                  "type": "string"
                },
                "optional": {
                  "description": "Specify whether the Secret or its key must be defined",
                  "type": "boolean"
                }
              },
              "additionalProperties": false,
              "x-kubernetes-map-type": "atomic"
            }
          },
          "additionalProperties": false
        },
        "expiration": {
          "description": "Indicates when this backup becomes eligible for garbage collection.\nA 'null' value implies that the backup will not be cleaned up unless manually deleted.",
          "type": "string",
          "format": "date-time"
        },
        "extras": {
          "description": "Records any additional information for the backup.",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "failureReason": {
          "description": "Any error that caused the backup operation to fail.",
          "type": "string"
        },
        "formatVersion": {
          "description": "Specifies the backup format version, which includes major, minor, and patch versions.",
          "type": "string"
        },
        "kopiaRepoPath": {
          "description": "Records the path of the Kopia repository.",
          "type": "string"
        },
        "parentBackupName": {
          "description": "Records the parent backup name for incremental or differential backup.\nWhen the parent backup is deleted, the backup will also be deleted.",
          "type": "string"
        },
        "path": {
          "description": "The directory within the backup repository where the backup data is stored.\nThis is an absolute path within the backup repository.",
          "type": "string"
        },
        "persistentVolumeClaimName": {
          "description": "Records the name of the persistent volume claim used to store the backup data.",
          "type": "string"
        },
        "phase": {
          "description": "Indicates the current state of the backup operation.",
          "type": "string",
          "enum": [
            "New",
            "InProgress",
            "Running",
            "Completed",
            "Failed",
            "Deleting"
          ]
        },
        "startTimestamp": {
          "description": "Records the time when the backup operation was started.\nThe server's time is used for this timestamp.",
          "type": "string",
          "format": "date-time"
        },
        "target": {
          "description": "Records the target information for this backup.",
          "type": "object",
          "properties": {
            "connectionCredential": {
              "description": "Specifies the connection credential to connect to the target database cluster.",
              "type": "object",
              "required": [
                "secretName"
              ],
              "properties": {
                "hostKey": {
                  "description": "Specifies the map key of the host in the connection credential secret.",
                  "type": "string"
                },
                "passwordKey": {
                  "description": "Specifies the map key of the password in the connection credential secret.\nThis password will be saved in the backup annotation for full backup.\nYou can use the environment variable DP_ENCRYPTION_KEY to specify encryption key.",
                  "type": "string",
                  "default": "password"
                },
                "portKey": {
                  "description": "Specifies the map key of the port in the connection credential secret.",
                  "type": "string"
                },
                "secretName": {
                  "description": "Refers to the Secret object that contains the connection credential.",
                  "type": "string",
                  "pattern": "^[a-z0-9]([a-z0-9\\.\\-]*[a-z0-9])?$"
                },
                "usernameKey": {
                  "description": "Specifies the map key of the user in the connection credential secret.",
                  "type": "string",
                  "default": "username"
                }
              },
              "additionalProperties": false
            },
            "containerPort": {
              "description": "Specifies the container port in the target pod.\nIf not specified, the first container and its first port will be used.",
              "type": "object",
              "properties": {
                "containerName": {
                  "description": "Specifies the name of container with the port.",
                  "type": "string"
                },
                "portName": {
                  "description": "Specifies the port name.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "name": {
              "description": "Specifies a mandatory and unique identifier for each target when using the \"targets\" field.\nThe backup data for the current target is stored in a uniquely named subdirectory.",
              "type": "string"
            },
            "podSelector": {
              "description": "Used to find the target pod. The volumes of the target pod will be backed up.",
              "type": "object",
              "properties": {
                "fallbackLabelSelector": {
                  "description": "fallbackLabelSelector is used to filter available pods when the labelSelector fails.\nThis only takes effect when the `strategy` field below is set to `Any`.",
                  "type": "object",
                  "properties": {
                    "matchExpressions": {
                      "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                      "type": "array",
                      "items": {
                        "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                        "type": "object",
                        "required": [
                          "key",
                          "operator"
                        ],
                        "properties": {
                          "key": {
                            "description": "key is the label key that the selector applies to.",
                            "type": "string"
                          },
                          "operator": {
                            "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                            "type": "string"
                          },
                          "values": {
                            "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "matchLabels": {
                      "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    }
                  },
                  "additionalProperties": false,
                  "x-kubernetes-map-type": "atomic"
                },
                "matchExpressions": {
                  "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                  "type": "array",
                  "items": {
                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                    "type": "object",
                    "required": [
                      "key",
                      "operator"
                    ],
                    "properties": {
                      "key": {
                        "description": "key is the label key that the selector applies to.",
                        "type": "string"
                      },
                      "operator": {
                        "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                        "type": "string"
                      },
                      "values": {
                        "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "matchLabels": {
                  "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "strategy": {
                  "description": "Specifies the strategy to select the target pod when multiple pods are selected.\nValid values are:\n\n\n- `Any`: select any one pod that match the labelsSelector.\n- `All`: select all pods that match the labelsSelector. The backup data for the current pod\nwill be stored in a subdirectory named after the pod.",
                  "type": "string",
                  "default": "Any",
                  "enum": [
                    "Any",
                    "All"
                  ]
                },
                "useParentSelectedPods": {
                  "description": "UseParentSelectedPods indicates whether to use the pods selected by the parent for backup.\nIf set to true, the backup will use the same pods selected by the parent.\nAnd only takes effect when the 'strategy' is set to 'Any'.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false,
              "x-kubernetes-map-type": "atomic"
            },
            "resources": {
              "description": "Specifies the kubernetes resources to back up.",
              "type": "object",
              "properties": {
                "excluded": {
                  "description": "excluded is a slice of namespaced-scoped resource type names to exclude in\nthe kubernetes resources.\nThe default value is empty.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "included": {
                  "description": "included is a slice of namespaced-scoped resource type names to include in\nthe kubernetes resources.\nThe default value is empty.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "selector": {
                  "description": "A metav1.LabelSelector to filter the target kubernetes resources that need\nto be backed up. If not set, will do not back up any kubernetes resources.",
                  "type": "object",
                  "properties": {
                    "matchExpressions": {
                      "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                      "type": "array",
                      "items": {
                        "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                        "type": "object",
                        "required": [
                          "key",
                          "operator"
                        ],
                        "properties": {
                          "key": {
                            "description": "key is the label key that the selector applies to.",
                            "type": "string"
                          },
                          "operator": {
                            "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                            "type": "string"
                          },
                          "values": {
                            "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "matchLabels": {
                      "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    }
                  },
                  "additionalProperties": false,
                  "x-kubernetes-map-type": "atomic"
                }
              },
              "additionalProperties": false
            },
            "selectedTargetPods": {
              "description": "Records the selected pods by the target info during backup.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "serviceAccountName": {
              "description": "Specifies the service account to run the backup workload.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "targets": {
          "description": "Records the targets information for this backup.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "connectionCredential": {
                "description": "Specifies the connection credential to connect to the target database cluster.",
                "type": "object",
                "required": [
                  "secretName"
                ],
                "properties": {
                  "hostKey": {
                    "description": "Specifies the map key of the host in the connection credential secret.",
                    "type": "string"
                  },
                  "passwordKey": {
                    "description": "Specifies the map key of the password in the connection credential secret.\nThis password will be saved in the backup annotation for full backup.\nYou can use the environment variable DP_ENCRYPTION_KEY to specify encryption key.",
                    "type": "string",
                    "default": "password"
                  },
                  "portKey": {
                    "description": "Specifies the map key of the port in the connection credential secret.",
                    "type": "string"
                  },
                  "secretName": {
                    "description": "Refers to the Secret object that contains the connection credential.",
                    "type": "string",
                    "pattern": "^[a-z0-9]([a-z0-9\\.\\-]*[a-z0-9])?$"
                  },
                  "usernameKey": {
                    "description": "Specifies the map key of the user in the connection credential secret.",
                    "type": "string",
                    "default": "username"
                  }
                },
                "additionalProperties": false
              },
              "containerPort": {
                "description": "Specifies the container port in the target pod.\nIf not specified, the first container and its first port will be used.",
                "type": "object",
                "properties": {
                  "containerName": {
                    "description": "Specifies the name of container with the port.",
                    "type": "string"
                  },
                  "portName": {
                    "description": "Specifies the port name.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              },
              "name": {
                "description": "Specifies a mandatory and unique identifier for each target when using the \"targets\" field.\nThe backup data for the current target is stored in a uniquely named subdirectory.",
                "type": "string"
              },
              "podSelector": {
                "description": "Used to find the target pod. The volumes of the target pod will be backed up.",
                "type": "object",
                "properties": {
                  "fallbackLabelSelector": {
                    "description": "fallbackLabelSelector is used to filter available pods when the labelSelector fails.\nThis only takes effect when the `strategy` field below is set to `Any`.",
                    "type": "object",
                    "properties": {
                      "matchExpressions": {
                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                        "type": "array",
                        "items": {
                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                          "type": "object",
                          "required": [
                            "key",
                            "operator"
                          ],
                          "properties": {
                            "key": {
                              "description": "key is the label key that the selector applies to.",
                              "type": "string"
                            },
                            "operator": {
                              "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                              "type": "string"
                            },
                            "values": {
                              "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "matchLabels": {
                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "additionalProperties": false,
                    "x-kubernetes-map-type": "atomic"
                  },
                  "matchExpressions": {
                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                    "type": "array",
                    "items": {
                      "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                      "type": "object",
                      "required": [
                        "key",
                        "operator"
                      ],
                      "properties": {
                        "key": {
                          "description": "key is the label key that the selector applies to.",
                          "type": "string"
                        },
                        "operator": {
                          "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                          "type": "string"
                        },
                        "values": {
                          "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "matchLabels": {
                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "strategy": {
                    "description": "Specifies the strategy to select the target pod when multiple pods are selected.\nValid values are:\n\n\n- `Any`: select any one pod that match the labelsSelector.\n- `All`: select all pods that match the labelsSelector. The backup data for the current pod\nwill be stored in a subdirectory named after the pod.",
                    "type": "string",
                    "default": "Any",
                    "enum": [
                      "Any",
                      "All"
                    ]
                  },
                  "useParentSelectedPods": {
                    "description": "UseParentSelectedPods indicates whether to use the pods selected by the parent for backup.\nIf set to true, the backup will use the same pods selected by the parent.\nAnd only takes effect when the 'strategy' is set to 'Any'.",
                    "type": "boolean"
                  }
                },
                "additionalProperties": false,
                "x-kubernetes-map-type": "atomic"
              },
              "resources": {
                "description": "Specifies the kubernetes resources to back up.",
                "type": "object",
                "properties": {
                  "excluded": {
                    "description": "excluded is a slice of namespaced-scoped resource type names to exclude in\nthe kubernetes resources.\nThe default value is empty.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "included": {
                    "description": "included is a slice of namespaced-scoped resource type names to include in\nthe kubernetes resources.\nThe default value is empty.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "selector": {
                    "description": "A metav1.LabelSelector to filter the target kubernetes resources that need\nto be backed up. If not set, will do not back up any kubernetes resources.",
                    "type": "object",
                    "properties": {
                      "matchExpressions": {
                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                        "type": "array",
                        "items": {
                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                          "type": "object",
                          "required": [
                            "key",
                            "operator"
                          ],
                          "properties": {
                            "key": {
                              "description": "key is the label key that the selector applies to.",
                              "type": "string"
                            },
                            "operator": {
                              "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                              "type": "string"
                            },
                            "values": {
                              "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "matchLabels": {
                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "additionalProperties": false,
                    "x-kubernetes-map-type": "atomic"
                  }
                },
                "additionalProperties": false
              },
              "selectedTargetPods": {
                "description": "Records the selected pods by the target info during backup.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "serviceAccountName": {
                "description": "Specifies the service account to run the backup workload.",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "timeRange": {
          "description": "Records the time range of the data backed up. For Point-in-Time Recovery (PITR),\nthis is the time range of recoverable data.",
          "type": "object",
          "properties": {
            "end": {
              "description": "Records the end time of the backup, in Coordinated Universal Time (UTC).",
              "type": "string",
              "format": "date-time"
            },
            "start": {
              "description": "Records the start time of the backup, in Coordinated Universal Time (UTC).",
              "type": "string",
              "format": "date-time"
            },
            "timeZone": {
              "description": "time zone, supports only zone offset, with a value range of \"-12:59 ~ +13:00\".",
              "type": "string",
              "pattern": "^(\\+|\\-)(0[0-9]|1[0-3]):([0-5][0-9])$"
            }
          },
          "additionalProperties": false
        },
        "totalSize": {
          "description": "Records the total size of the data backed up.\nThe size is represented as a string with capacity units in the format of \"1Gi\", \"1Mi\", \"1Ki\".\nIf no capacity unit is specified, it is assumed to be in bytes.",
          "type": "string"
        },
        "volumeSnapshots": {
          "description": "Records the volume snapshot status for the action.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "contentName": {
                "description": "The name of the volume snapshot content.",
                "type": "string"
              },
              "name": {
                "description": "The name of the volume snapshot.",
                "type": "string"
              },
              "size": {
                "description": "The size of the volume snapshot.",
                "type": "string"
              },
              "targetName": {
                "description": "Associates this volumeSnapshot with its corresponding target.",
                "type": "string"
              },
              "volumeName": {
                "description": "The name of the volume.",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        }
      },
      "additionalProperties": false
    }
  }
}
