{
  "description": "BackupPolicy is the Schema for the backuppolicies API.",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "BackupPolicySpec defines the desired state of BackupPolicy",
      "type": "object",
      "required": [
        "backupMethods"
      ],
      "properties": {
        "backoffLimit": {
          "description": "Specifies the number of retries before marking the backup as failed.",
          "type": "integer",
          "format": "int32",
          "default": 2,
          "maximum": 10,
          "minimum": 0
        },
        "backupMethods": {
          "description": "Defines the backup methods.",
          "type": "array",
          "items": {
            "description": "BackupMethod defines the backup method.",
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "actionSetName": {
                "description": "Refers to the ActionSet object that defines the backup actions.\nFor volume snapshot backup, the actionSet is not required, the controller\nwill use the CSI volume snapshotter to create the snapshot.",
                "type": "string"
              },
              "compatibleMethod": {
                "description": "The name of the compatible full backup method, used by incremental backups.",
                "type": "string",
                "pattern": "^[a-z0-9]([a-z0-9\\.\\-]*[a-z0-9])?$"
              },
              "env": {
                "description": "Specifies the environment variables for the backup workload.",
                "type": "array",
                "items": {
                  "description": "EnvVar represents an environment variable present in a Container.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
                      "type": "string"
                    },
                    "value": {
                      "description": "Variable references $(VAR_NAME) are expanded\nusing the previously defined environment variables in the container and\nany service environment variables. If a variable cannot be resolved,\nthe reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.\n\"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\".\nEscaped references will never be expanded, regardless of whether the variable\nexists or not.\nDefaults to \"\".",
                      "type": "string"
                    },
                    "valueFrom": {
                      "description": "Source for the environment variable's value. Cannot be used if value is not empty.",
                      "type": "object",
                      "properties": {
                        "configMapKeyRef": {
                          "description": "Selects a key of a ConfigMap.",
                          "type": "object",
                          "required": [
                            "key"
                          ],
                          "properties": {
                            "key": {
                              "description": "The key to select.",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                              "type": "string"
                            },
                            "optional": {
                              "description": "Specify whether the ConfigMap or its key must be defined",
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false,
                          "x-kubernetes-map-type": "atomic"
                        },
                        "fieldRef": {
                          "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['\u003cKEY\u003e']`, `metadata.annotations['\u003cKEY\u003e']`,\nspec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
                          "type": "object",
                          "required": [
                            "fieldPath"
                          ],
                          "properties": {
                            "apiVersion": {
                              "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                              "type": "string"
                            },
                            "fieldPath": {
                              "description": "Path of the field to select in the specified API version.",
                              "type": "string"
                            }
                          },
                          "additionalProperties": false,
                          "x-kubernetes-map-type": "atomic"
                        },
                        "resourceFieldRef": {
                          "description": "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.",
                          "type": "object",
                          "required": [
                            "resource"
                          ],
                          "properties": {
                            "containerName": {
                              "description": "Container name: required for volumes, optional for env vars",
                              "type": "string"
                            },
                            "divisor": {
                              "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                              "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                              "anyOf": [
                                {
                                  "type": "integer"
                                },
                                {
                                  "type": "string"
                                }
                              ],
                              "x-kubernetes-int-or-string": true
                            },
                            "resource": {
                              "description": "Required: resource to select",
                              "type": "string"
                            }
                          },
                          "additionalProperties": false,
                          "x-kubernetes-map-type": "atomic"
                        },
                        "secretKeyRef": {
                          "description": "Selects a key of a secret in the pod's namespace",
                          "type": "object",
                          "required": [
                            "key"
                          ],
                          "properties": {
                            "key": {
                              "description": "The key of the secret to select from.  Must be a valid secret key.",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                              "type": "string"
                            },
                            "optional": {
                              "description": "Specify whether the Secret or its key must be defined",
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false,
                          "x-kubernetes-map-type": "atomic"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                }
              },
              "name": {
                "description": "The name of backup method.",
                "type": "string",
                "pattern": "^[a-z0-9]([a-z0-9\\.\\-]*[a-z0-9])?$"
              },
              "runtimeSettings": {
                "description": "Specifies runtime settings for the backup workload container.",
                "type": "object",
                "properties": {
                  "resources": {
                    "description": "Specifies the resource required by container.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                    "type": "object",
                    "properties": {
                      "claims": {
                        "description": "Claims lists the names of resources, defined in spec.resourceClaims,\nthat are used by this container.\n\n\nThis is an alpha field and requires enabling the\nDynamicResourceAllocation feature gate.\n\n\nThis field is immutable. It can only be set for containers.",
                        "type": "array",
                        "items": {
                          "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                          "type": "object",
                          "required": [
                            "name"
                          ],
                          "properties": {
                            "name": {
                              "description": "Name must match the name of one entry in pod.spec.resourceClaims of\nthe Pod where this field is used. It makes that resource available\ninside a container.",
                              "type": "string"
                            }
                          },
                          "additionalProperties": false
                        },
                        "x-kubernetes-list-map-keys": [
                          "name"
                        ],
                        "x-kubernetes-list-type": "map"
                      },
                      "limits": {
                        "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                        "type": "object",
                        "additionalProperties": {
                          "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                          "anyOf": [
                            {
                              "type": "integer"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "x-kubernetes-int-or-string": true
                        }
                      },
                      "requests": {
                        "description": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                        "type": "object",
                        "additionalProperties": {
                          "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                          "anyOf": [
                            {
                              "type": "integer"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "x-kubernetes-int-or-string": true
                        }
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              },
              "snapshotVolumes": {
                "description": "Specifies whether to take snapshots of persistent volumes. If true,\nthe ActionSetName is not required, the controller will use the CSI volume\nsnapshotter to create the snapshot.",
                "type": "boolean",
                "default": false
              },
              "target": {
                "description": "Specifies the target information to back up, it will override the target in backup policy.",
                "type": "object",
                "properties": {
                  "connectionCredential": {
                    "description": "Specifies the connection credential to connect to the target database cluster.",
                    "type": "object",
                    "required": [
                      "secretName"
                    ],
                    "properties": {
                      "hostKey": {
                        "description": "Specifies the map key of the host in the connection credential secret.",
                        "type": "string"
                      },
                      "passwordKey": {
                        "description": "Specifies the map key of the password in the connection credential secret.\nThis password will be saved in the backup annotation for full backup.\nYou can use the environment variable DP_ENCRYPTION_KEY to specify encryption key.",
                        "type": "string",
                        "default": "password"
                      },
                      "portKey": {
                        "description": "Specifies the map key of the port in the connection credential secret.",
                        "type": "string"
                      },
                      "secretName": {
                        "description": "Refers to the Secret object that contains the connection credential.",
                        "type": "string",
                        "pattern": "^[a-z0-9]([a-z0-9\\.\\-]*[a-z0-9])?$"
                      },
                      "usernameKey": {
                        "description": "Specifies the map key of the user in the connection credential secret.",
                        "type": "string",
                        "default": "username"
                      }
                    },
                    "additionalProperties": false
                  },
                  "containerPort": {
                    "description": "Specifies the container port in the target pod.\nIf not specified, the first container and its first port will be used.",
                    "type": "object",
                    "properties": {
                      "containerName": {
                        "description": "Specifies the name of container with the port.",
                        "type": "string"
                      },
                      "portName": {
                        "description": "Specifies the port name.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "name": {
                    "description": "Specifies a mandatory and unique identifier for each target when using the \"targets\" field.\nThe backup data for the current target is stored in a uniquely named subdirectory.",
                    "type": "string"
                  },
                  "podSelector": {
                    "description": "Used to find the target pod. The volumes of the target pod will be backed up.",
                    "type": "object",
                    "properties": {
                      "fallbackLabelSelector": {
                        "description": "fallbackLabelSelector is used to filter available pods when the labelSelector fails.\nThis only takes effect when the `strategy` field below is set to `Any`.",
                        "type": "object",
                        "properties": {
                          "matchExpressions": {
                            "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                            "type": "array",
                            "items": {
                              "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                              "type": "object",
                              "required": [
                                "key",
                                "operator"
                              ],
                              "properties": {
                                "key": {
                                  "description": "key is the label key that the selector applies to.",
                                  "type": "string"
                                },
                                "operator": {
                                  "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                  "type": "string"
                                },
                                "values": {
                                  "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              },
                              "additionalProperties": false
                            }
                          },
                          "matchLabels": {
                            "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          }
                        },
                        "additionalProperties": false,
                        "x-kubernetes-map-type": "atomic"
                      },
                      "matchExpressions": {
                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                        "type": "array",
                        "items": {
                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                          "type": "object",
                          "required": [
                            "key",
                            "operator"
                          ],
                          "properties": {
                            "key": {
                              "description": "key is the label key that the selector applies to.",
                              "type": "string"
                            },
                            "operator": {
                              "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                              "type": "string"
                            },
                            "values": {
                              "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "matchLabels": {
                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "strategy": {
                        "description": "Specifies the strategy to select the target pod when multiple pods are selected.\nValid values are:\n\n\n- `Any`: select any one pod that match the labelsSelector.\n- `All`: select all pods that match the labelsSelector. The backup data for the current pod\nwill be stored in a subdirectory named after the pod.",
                        "type": "string",
                        "default": "Any",
                        "enum": [
                          "Any",
                          "All"
                        ]
                      },
                      "useParentSelectedPods": {
                        "description": "UseParentSelectedPods indicates whether to use the pods selected by the parent for backup.\nIf set to true, the backup will use the same pods selected by the parent.\nAnd only takes effect when the 'strategy' is set to 'Any'.",
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false,
                    "x-kubernetes-map-type": "atomic"
                  },
                  "resources": {
                    "description": "Specifies the kubernetes resources to back up.",
                    "type": "object",
                    "properties": {
                      "excluded": {
                        "description": "excluded is a slice of namespaced-scoped resource type names to exclude in\nthe kubernetes resources.\nThe default value is empty.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "included": {
                        "description": "included is a slice of namespaced-scoped resource type names to include in\nthe kubernetes resources.\nThe default value is empty.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "selector": {
                        "description": "A metav1.LabelSelector to filter the target kubernetes resources that need\nto be backed up. If not set, will do not back up any kubernetes resources.",
                        "type": "object",
                        "properties": {
                          "matchExpressions": {
                            "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                            "type": "array",
                            "items": {
                              "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                              "type": "object",
                              "required": [
                                "key",
                                "operator"
                              ],
                              "properties": {
                                "key": {
                                  "description": "key is the label key that the selector applies to.",
                                  "type": "string"
                                },
                                "operator": {
                                  "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                  "type": "string"
                                },
                                "values": {
                                  "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              },
                              "additionalProperties": false
                            }
                          },
                          "matchLabels": {
                            "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          }
                        },
                        "additionalProperties": false,
                        "x-kubernetes-map-type": "atomic"
                      }
                    },
                    "additionalProperties": false
                  },
                  "serviceAccountName": {
                    "description": "Specifies the service account to run the backup workload.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              },
              "targetVolumes": {
                "description": "Specifies which volumes from the target should be mounted in the backup workload.",
                "type": "object",
                "properties": {
                  "volumeMounts": {
                    "description": "Specifies the mount for the volumes specified in `volumes` section.",
                    "type": "array",
                    "items": {
                      "description": "VolumeMount describes a mounting of a Volume within a container.",
                      "type": "object",
                      "required": [
                        "mountPath",
                        "name"
                      ],
                      "properties": {
                        "mountPath": {
                          "description": "Path within the container at which the volume should be mounted.  Must\nnot contain ':'.",
                          "type": "string"
                        },
                        "mountPropagation": {
                          "description": "mountPropagation determines how mounts are propagated from the host\nto container and the other way around.\nWhen not set, MountPropagationNone is used.\nThis field is beta in 1.10.",
                          "type": "string"
                        },
                        "name": {
                          "description": "This must match the Name of a Volume.",
                          "type": "string"
                        },
                        "readOnly": {
                          "description": "Mounted read-only if true, read-write otherwise (false or unspecified).\nDefaults to false.",
                          "type": "boolean"
                        },
                        "subPath": {
                          "description": "Path within the volume from which the container's volume should be mounted.\nDefaults to \"\" (volume's root).",
                          "type": "string"
                        },
                        "subPathExpr": {
                          "description": "Expanded path within the volume from which the container's volume should be mounted.\nBehaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.\nDefaults to \"\" (volume's root).\nSubPathExpr and SubPath are mutually exclusive.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "volumes": {
                    "description": "Specifies the list of volumes of targeted application that should be mounted\non the backup workload.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "additionalProperties": false
              },
              "targets": {
                "description": "Specifies multiple target information for backup operations. This includes details\nsuch as the target pod and cluster connection credentials. All specified targets\nwill be backed up collectively.",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "connectionCredential": {
                      "description": "Specifies the connection credential to connect to the target database cluster.",
                      "type": "object",
                      "required": [
                        "secretName"
                      ],
                      "properties": {
                        "hostKey": {
                          "description": "Specifies the map key of the host in the connection credential secret.",
                          "type": "string"
                        },
                        "passwordKey": {
                          "description": "Specifies the map key of the password in the connection credential secret.\nThis password will be saved in the backup annotation for full backup.\nYou can use the environment variable DP_ENCRYPTION_KEY to specify encryption key.",
                          "type": "string",
                          "default": "password"
                        },
                        "portKey": {
                          "description": "Specifies the map key of the port in the connection credential secret.",
                          "type": "string"
                        },
                        "secretName": {
                          "description": "Refers to the Secret object that contains the connection credential.",
                          "type": "string",
                          "pattern": "^[a-z0-9]([a-z0-9\\.\\-]*[a-z0-9])?$"
                        },
                        "usernameKey": {
                          "description": "Specifies the map key of the user in the connection credential secret.",
                          "type": "string",
                          "default": "username"
                        }
                      },
                      "additionalProperties": false
                    },
                    "containerPort": {
                      "description": "Specifies the container port in the target pod.\nIf not specified, the first container and its first port will be used.",
                      "type": "object",
                      "properties": {
                        "containerName": {
                          "description": "Specifies the name of container with the port.",
                          "type": "string"
                        },
                        "portName": {
                          "description": "Specifies the port name.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    },
                    "name": {
                      "description": "Specifies a mandatory and unique identifier for each target when using the \"targets\" field.\nThe backup data for the current target is stored in a uniquely named subdirectory.",
                      "type": "string"
                    },
                    "podSelector": {
                      "description": "Used to find the target pod. The volumes of the target pod will be backed up.",
                      "type": "object",
                      "properties": {
                        "fallbackLabelSelector": {
                          "description": "fallbackLabelSelector is used to filter available pods when the labelSelector fails.\nThis only takes effect when the `strategy` field below is set to `Any`.",
                          "type": "object",
                          "properties": {
                            "matchExpressions": {
                              "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                              "type": "array",
                              "items": {
                                "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                "type": "object",
                                "required": [
                                  "key",
                                  "operator"
                                ],
                                "properties": {
                                  "key": {
                                    "description": "key is the label key that the selector applies to.",
                                    "type": "string"
                                  },
                                  "operator": {
                                    "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                    "type": "string"
                                  },
                                  "values": {
                                    "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "additionalProperties": false
                              }
                            },
                            "matchLabels": {
                              "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              }
                            }
                          },
                          "additionalProperties": false,
                          "x-kubernetes-map-type": "atomic"
                        },
                        "matchExpressions": {
                          "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                          "type": "array",
                          "items": {
                            "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                            "type": "object",
                            "required": [
                              "key",
                              "operator"
                            ],
                            "properties": {
                              "key": {
                                "description": "key is the label key that the selector applies to.",
                                "type": "string"
                              },
                              "operator": {
                                "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                "type": "string"
                              },
                              "values": {
                                "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "matchLabels": {
                          "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "strategy": {
                          "description": "Specifies the strategy to select the target pod when multiple pods are selected.\nValid values are:\n\n\n- `Any`: select any one pod that match the labelsSelector.\n- `All`: select all pods that match the labelsSelector. The backup data for the current pod\nwill be stored in a subdirectory named after the pod.",
                          "type": "string",
                          "default": "Any",
                          "enum": [
                            "Any",
                            "All"
                          ]
                        },
                        "useParentSelectedPods": {
                          "description": "UseParentSelectedPods indicates whether to use the pods selected by the parent for backup.\nIf set to true, the backup will use the same pods selected by the parent.\nAnd only takes effect when the 'strategy' is set to 'Any'.",
                          "type": "boolean"
                        }
                      },
                      "additionalProperties": false,
                      "x-kubernetes-map-type": "atomic"
                    },
                    "resources": {
                      "description": "Specifies the kubernetes resources to back up.",
                      "type": "object",
                      "properties": {
                        "excluded": {
                          "description": "excluded is a slice of namespaced-scoped resource type names to exclude in\nthe kubernetes resources.\nThe default value is empty.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "included": {
                          "description": "included is a slice of namespaced-scoped resource type names to include in\nthe kubernetes resources.\nThe default value is empty.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "selector": {
                          "description": "A metav1.LabelSelector to filter the target kubernetes resources that need\nto be backed up. If not set, will do not back up any kubernetes resources.",
                          "type": "object",
                          "properties": {
                            "matchExpressions": {
                              "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                              "type": "array",
                              "items": {
                                "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                "type": "object",
                                "required": [
                                  "key",
                                  "operator"
                                ],
                                "properties": {
                                  "key": {
                                    "description": "key is the label key that the selector applies to.",
                                    "type": "string"
                                  },
                                  "operator": {
                                    "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                    "type": "string"
                                  },
                                  "values": {
                                    "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "additionalProperties": false
                              }
                            },
                            "matchLabels": {
                              "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              }
                            }
                          },
                          "additionalProperties": false,
                          "x-kubernetes-map-type": "atomic"
                        }
                      },
                      "additionalProperties": false
                    },
                    "serviceAccountName": {
                      "description": "Specifies the service account to run the backup workload.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              }
            },
            "additionalProperties": false
          }
        },
        "backupRepoName": {
          "description": "Specifies the name of BackupRepo where the backup data will be stored.\nIf not set, data will be stored in the default backup repository.",
          "type": "string",
          "pattern": "^[a-z0-9]([a-z0-9\\.\\-]*[a-z0-9])?$"
        },
        "encryptionConfig": {
          "description": "Specifies the parameters for encrypting backup data.\nEncryption will be disabled if the field is not set.",
          "type": "object",
          "required": [
            "algorithm",
            "passPhraseSecretKeyRef"
          ],
          "properties": {
            "algorithm": {
              "description": "Specifies the encryption algorithm. Currently supported algorithms are:\n\n\n- AES-128-CFB\n- AES-192-CFB\n- AES-256-CFB",
              "type": "string",
              "default": "AES-256-CFB",
              "enum": [
                "AES-128-CFB",
                "AES-192-CFB",
                "AES-256-CFB"
              ]
            },
            "passPhraseSecretKeyRef": {
              "description": "Selects the key of a secret in the current namespace, the value of the secret\nis used as the encryption key.",
              "type": "object",
              "required": [
                "key"
              ],
              "properties": {
                "key": {
                  "description": "The key of the secret to select from.  Must be a valid secret key.",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                  "type": "string"
                },
                "optional": {
                  "description": "Specify whether the Secret or its key must be defined",
                  "type": "boolean"
                }
              },
              "additionalProperties": false,
              "x-kubernetes-map-type": "atomic"
            }
          },
          "additionalProperties": false
        },
        "pathPrefix": {
          "description": "Specifies the directory inside the backup repository to store the backup.\nThis path is relative to the path of the backup repository.",
          "type": "string"
        },
        "retentionPolicy": {
          "description": "Specifies the backup retention policy. This has a precedence over `backup.spec.retentionPeriod`.",
          "type": "string",
          "enum": [
            "retainLatestBackup",
            "none"
          ]
        },
        "target": {
          "description": "Specifies the target information to back up, such as the target pod, the\ncluster connection credential.",
          "type": "object",
          "properties": {
            "connectionCredential": {
              "description": "Specifies the connection credential to connect to the target database cluster.",
              "type": "object",
              "required": [
                "secretName"
              ],
              "properties": {
                "hostKey": {
                  "description": "Specifies the map key of the host in the connection credential secret.",
                  "type": "string"
                },
                "passwordKey": {
                  "description": "Specifies the map key of the password in the connection credential secret.\nThis password will be saved in the backup annotation for full backup.\nYou can use the environment variable DP_ENCRYPTION_KEY to specify encryption key.",
                  "type": "string",
                  "default": "password"
                },
                "portKey": {
                  "description": "Specifies the map key of the port in the connection credential secret.",
                  "type": "string"
                },
                "secretName": {
                  "description": "Refers to the Secret object that contains the connection credential.",
                  "type": "string",
                  "pattern": "^[a-z0-9]([a-z0-9\\.\\-]*[a-z0-9])?$"
                },
                "usernameKey": {
                  "description": "Specifies the map key of the user in the connection credential secret.",
                  "type": "string",
                  "default": "username"
                }
              },
              "additionalProperties": false
            },
            "containerPort": {
              "description": "Specifies the container port in the target pod.\nIf not specified, the first container and its first port will be used.",
              "type": "object",
              "properties": {
                "containerName": {
                  "description": "Specifies the name of container with the port.",
                  "type": "string"
                },
                "portName": {
                  "description": "Specifies the port name.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "name": {
              "description": "Specifies a mandatory and unique identifier for each target when using the \"targets\" field.\nThe backup data for the current target is stored in a uniquely named subdirectory.",
              "type": "string"
            },
            "podSelector": {
              "description": "Used to find the target pod. The volumes of the target pod will be backed up.",
              "type": "object",
              "properties": {
                "fallbackLabelSelector": {
                  "description": "fallbackLabelSelector is used to filter available pods when the labelSelector fails.\nThis only takes effect when the `strategy` field below is set to `Any`.",
                  "type": "object",
                  "properties": {
                    "matchExpressions": {
                      "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                      "type": "array",
                      "items": {
                        "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                        "type": "object",
                        "required": [
                          "key",
                          "operator"
                        ],
                        "properties": {
                          "key": {
                            "description": "key is the label key that the selector applies to.",
                            "type": "string"
                          },
                          "operator": {
                            "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                            "type": "string"
                          },
                          "values": {
                            "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "matchLabels": {
                      "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    }
                  },
                  "additionalProperties": false,
                  "x-kubernetes-map-type": "atomic"
                },
                "matchExpressions": {
                  "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                  "type": "array",
                  "items": {
                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                    "type": "object",
                    "required": [
                      "key",
                      "operator"
                    ],
                    "properties": {
                      "key": {
                        "description": "key is the label key that the selector applies to.",
                        "type": "string"
                      },
                      "operator": {
                        "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                        "type": "string"
                      },
                      "values": {
                        "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "matchLabels": {
                  "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "strategy": {
                  "description": "Specifies the strategy to select the target pod when multiple pods are selected.\nValid values are:\n\n\n- `Any`: select any one pod that match the labelsSelector.\n- `All`: select all pods that match the labelsSelector. The backup data for the current pod\nwill be stored in a subdirectory named after the pod.",
                  "type": "string",
                  "default": "Any",
                  "enum": [
                    "Any",
                    "All"
                  ]
                },
                "useParentSelectedPods": {
                  "description": "UseParentSelectedPods indicates whether to use the pods selected by the parent for backup.\nIf set to true, the backup will use the same pods selected by the parent.\nAnd only takes effect when the 'strategy' is set to 'Any'.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false,
              "x-kubernetes-map-type": "atomic"
            },
            "resources": {
              "description": "Specifies the kubernetes resources to back up.",
              "type": "object",
              "properties": {
                "excluded": {
                  "description": "excluded is a slice of namespaced-scoped resource type names to exclude in\nthe kubernetes resources.\nThe default value is empty.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "included": {
                  "description": "included is a slice of namespaced-scoped resource type names to include in\nthe kubernetes resources.\nThe default value is empty.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "selector": {
                  "description": "A metav1.LabelSelector to filter the target kubernetes resources that need\nto be backed up. If not set, will do not back up any kubernetes resources.",
                  "type": "object",
                  "properties": {
                    "matchExpressions": {
                      "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                      "type": "array",
                      "items": {
                        "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                        "type": "object",
                        "required": [
                          "key",
                          "operator"
                        ],
                        "properties": {
                          "key": {
                            "description": "key is the label key that the selector applies to.",
                            "type": "string"
                          },
                          "operator": {
                            "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                            "type": "string"
                          },
                          "values": {
                            "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "matchLabels": {
                      "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    }
                  },
                  "additionalProperties": false,
                  "x-kubernetes-map-type": "atomic"
                }
              },
              "additionalProperties": false
            },
            "serviceAccountName": {
              "description": "Specifies the service account to run the backup workload.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "targets": {
          "description": "Specifies multiple target information for backup operations. This includes details\nsuch as the target pod and cluster connection credentials. All specified targets\nwill be backed up collectively.\noptional",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "connectionCredential": {
                "description": "Specifies the connection credential to connect to the target database cluster.",
                "type": "object",
                "required": [
                  "secretName"
                ],
                "properties": {
                  "hostKey": {
                    "description": "Specifies the map key of the host in the connection credential secret.",
                    "type": "string"
                  },
                  "passwordKey": {
                    "description": "Specifies the map key of the password in the connection credential secret.\nThis password will be saved in the backup annotation for full backup.\nYou can use the environment variable DP_ENCRYPTION_KEY to specify encryption key.",
                    "type": "string",
                    "default": "password"
                  },
                  "portKey": {
                    "description": "Specifies the map key of the port in the connection credential secret.",
                    "type": "string"
                  },
                  "secretName": {
                    "description": "Refers to the Secret object that contains the connection credential.",
                    "type": "string",
                    "pattern": "^[a-z0-9]([a-z0-9\\.\\-]*[a-z0-9])?$"
                  },
                  "usernameKey": {
                    "description": "Specifies the map key of the user in the connection credential secret.",
                    "type": "string",
                    "default": "username"
                  }
                },
                "additionalProperties": false
              },
              "containerPort": {
                "description": "Specifies the container port in the target pod.\nIf not specified, the first container and its first port will be used.",
                "type": "object",
                "properties": {
                  "containerName": {
                    "description": "Specifies the name of container with the port.",
                    "type": "string"
                  },
                  "portName": {
                    "description": "Specifies the port name.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              },
              "name": {
                "description": "Specifies a mandatory and unique identifier for each target when using the \"targets\" field.\nThe backup data for the current target is stored in a uniquely named subdirectory.",
                "type": "string"
              },
              "podSelector": {
                "description": "Used to find the target pod. The volumes of the target pod will be backed up.",
                "type": "object",
                "properties": {
                  "fallbackLabelSelector": {
                    "description": "fallbackLabelSelector is used to filter available pods when the labelSelector fails.\nThis only takes effect when the `strategy` field below is set to `Any`.",
                    "type": "object",
                    "properties": {
                      "matchExpressions": {
                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                        "type": "array",
                        "items": {
                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                          "type": "object",
                          "required": [
                            "key",
                            "operator"
                          ],
                          "properties": {
                            "key": {
                              "description": "key is the label key that the selector applies to.",
                              "type": "string"
                            },
                            "operator": {
                              "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                              "type": "string"
                            },
                            "values": {
                              "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "matchLabels": {
                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "additionalProperties": false,
                    "x-kubernetes-map-type": "atomic"
                  },
                  "matchExpressions": {
                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                    "type": "array",
                    "items": {
                      "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                      "type": "object",
                      "required": [
                        "key",
                        "operator"
                      ],
                      "properties": {
                        "key": {
                          "description": "key is the label key that the selector applies to.",
                          "type": "string"
                        },
                        "operator": {
                          "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                          "type": "string"
                        },
                        "values": {
                          "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "matchLabels": {
                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "strategy": {
                    "description": "Specifies the strategy to select the target pod when multiple pods are selected.\nValid values are:\n\n\n- `Any`: select any one pod that match the labelsSelector.\n- `All`: select all pods that match the labelsSelector. The backup data for the current pod\nwill be stored in a subdirectory named after the pod.",
                    "type": "string",
                    "default": "Any",
                    "enum": [
                      "Any",
                      "All"
                    ]
                  },
                  "useParentSelectedPods": {
                    "description": "UseParentSelectedPods indicates whether to use the pods selected by the parent for backup.\nIf set to true, the backup will use the same pods selected by the parent.\nAnd only takes effect when the 'strategy' is set to 'Any'.",
                    "type": "boolean"
                  }
                },
                "additionalProperties": false,
                "x-kubernetes-map-type": "atomic"
              },
              "resources": {
                "description": "Specifies the kubernetes resources to back up.",
                "type": "object",
                "properties": {
                  "excluded": {
                    "description": "excluded is a slice of namespaced-scoped resource type names to exclude in\nthe kubernetes resources.\nThe default value is empty.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "included": {
                    "description": "included is a slice of namespaced-scoped resource type names to include in\nthe kubernetes resources.\nThe default value is empty.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "selector": {
                    "description": "A metav1.LabelSelector to filter the target kubernetes resources that need\nto be backed up. If not set, will do not back up any kubernetes resources.",
                    "type": "object",
                    "properties": {
                      "matchExpressions": {
                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                        "type": "array",
                        "items": {
                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                          "type": "object",
                          "required": [
                            "key",
                            "operator"
                          ],
                          "properties": {
                            "key": {
                              "description": "key is the label key that the selector applies to.",
                              "type": "string"
                            },
                            "operator": {
                              "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                              "type": "string"
                            },
                            "values": {
                              "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "matchLabels": {
                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "additionalProperties": false,
                    "x-kubernetes-map-type": "atomic"
                  }
                },
                "additionalProperties": false
              },
              "serviceAccountName": {
                "description": "Specifies the service account to run the backup workload.",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "useKopia": {
          "description": "Specifies whether backup data should be stored in a Kopia repository.\n\n\nData within the Kopia repository is both compressed and encrypted. Furthermore,\ndata deduplication is implemented across various backups of the same cluster.\nThis approach significantly reduces the actual storage usage, particularly\nfor clusters with a low update frequency.\n\n\nNOTE: This feature should NOT be enabled when using KubeBlocks Community Edition, otherwise the backup will not be processed.",
          "type": "boolean",
          "default": false
        }
      },
      "additionalProperties": false,
      "x-kubernetes-validations": [
        {
          "rule": "(has(self.target) \u0026\u0026 !has(self.targets)) || (has(self.targets) \u0026\u0026 !has(self.target))",
          "message": "either spec.target or spec.targets"
        }
      ]
    },
    "status": {
      "description": "BackupPolicyStatus defines the observed state of BackupPolicy",
      "type": "object",
      "properties": {
        "message": {
          "description": "A human-readable message indicating details about why the BackupPolicy\nis in this phase.",
          "type": "string"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the most recent generation observed for this BackupPolicy.\nIt refers to the BackupPolicy's generation, which is updated on mutation by the API Server.",
          "type": "integer",
          "format": "int64"
        },
        "phase": {
          "description": "Phase - in list of [Available,Unavailable]",
          "type": "string",
          "enum": [
            "Available",
            "Unavailable"
          ]
        }
      },
      "additionalProperties": false
    }
  }
}
