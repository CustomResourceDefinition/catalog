{
  "description": "BackupRepo is a repository for storing backup data.",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "BackupRepoSpec defines the desired state of `BackupRepo`.",
      "type": "object",
      "required": [
        "pvReclaimPolicy",
        "storageProviderRef"
      ],
      "properties": {
        "accessMethod": {
          "description": "Specifies the access method of the backup repository.",
          "type": "string",
          "default": "Mount",
          "enum": [
            "Mount",
            "Tool"
          ]
        },
        "config": {
          "description": "Stores the non-secret configuration parameters for the `StorageProvider`.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "credential": {
          "description": "References to the secret that holds the credentials for the `StorageProvider`.",
          "type": "object",
          "properties": {
            "name": {
              "description": "name is unique within a namespace to reference a secret resource.",
              "type": "string"
            },
            "namespace": {
              "description": "namespace defines the space within which the secret name must be unique.",
              "type": "string"
            }
          },
          "additionalProperties": false,
          "x-kubernetes-map-type": "atomic"
        },
        "pathPrefix": {
          "description": "Specifies the prefix of the path for storing backup data.",
          "type": "string",
          "pattern": "^([a-zA-Z0-9-_]+/?)*$"
        },
        "pvReclaimPolicy": {
          "description": "Specifies reclaim policy of the PV created by this backup repository.",
          "type": "string",
          "enum": [
            "Delete",
            "Retain"
          ]
        },
        "storageProviderRef": {
          "description": "Specifies the name of the `StorageProvider` used by this backup repository.",
          "type": "string",
          "x-kubernetes-validations": [
            {
              "rule": "self == oldSelf",
              "message": "StorageProviderRef is immutable"
            }
          ]
        },
        "volumeCapacity": {
          "description": "Specifies the capacity of the PVC created by this backup repository.",
          "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "type": "string"
            }
          ],
          "x-kubernetes-int-or-string": true
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "BackupRepoStatus defines the observed state of `BackupRepo`.",
      "type": "object",
      "properties": {
        "backupPVCName": {
          "description": "Represents the name of the PVC that stores backup data.",
          "type": "string"
        },
        "conditions": {
          "description": "Provides a detailed description of the current state of the backup repository.",
          "type": "array",
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource.\n---\nThis struct is intended for direct use as an array at the field path .status.conditions.  For example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the observations of a foo's current state.\n\t    // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    // +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t    // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t    // other fields\n\t}",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                "type": "string",
                "maxLength": 32768
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64",
                "minimum": 0
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                "type": "string",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "type": "string",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ]
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase.\n---\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions can be\nuseful (see .node.status.conditions), the ability to deconflict is important.\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                "type": "string",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
              }
            },
            "additionalProperties": false
          }
        },
        "generatedCSIDriverSecret": {
          "description": "Refers to the generated secret for the `StorageProvider`.",
          "type": "object",
          "properties": {
            "name": {
              "description": "name is unique within a namespace to reference a secret resource.",
              "type": "string"
            },
            "namespace": {
              "description": "namespace defines the space within which the secret name must be unique.",
              "type": "string"
            }
          },
          "additionalProperties": false,
          "x-kubernetes-map-type": "atomic"
        },
        "generatedStorageClassName": {
          "description": "Represents the name of the generated storage class.",
          "type": "string"
        },
        "isDefault": {
          "description": "Indicates if this backup repository is the default one.\\",
          "type": "boolean"
        },
        "observedGeneration": {
          "description": "Represents the latest generation of the resource that the controller has observed.",
          "type": "integer",
          "format": "int64"
        },
        "phase": {
          "description": "Represents the current phase of reconciliation for the backup repository.\nPermissible values are PreChecking, Failed, Ready, Deleting.",
          "type": "string",
          "allOf": [
            {
              "enum": [
                "PreChecking",
                "Failed",
                "Ready",
                "Deleting"
              ]
            },
            {
              "enum": [
                "PreChecking",
                "Failed",
                "Ready",
                "Deleting"
              ]
            }
          ]
        },
        "toolConfigSecretName": {
          "description": "Represents the name of the secret that contains the configuration for the tool.",
          "type": "string"
        }
      },
      "additionalProperties": false
    }
  }
}
