{
  "description": "ResourceSet is the Schema for the ResourceSets API.",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "ResourceSetSpec defines the desired state of ResourceSet",
      "type": "object",
      "properties": {
        "commonMetadata": {
          "description": "CommonMetadata specifies the common labels and annotations that are\napplied to all resources. Any existing label or annotation will be\noverridden if its key matches a common one.",
          "type": "object",
          "properties": {
            "annotations": {
              "description": "Annotations to be added to the object's metadata.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "labels": {
              "description": "Labels to be added to the object's metadata.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false
        },
        "dependsOn": {
          "description": "DependsOn specifies the list of Kubernetes resources that must\nexist on the cluster before the reconciliation process starts.",
          "type": "array",
          "items": {
            "description": "Dependency defines a ResourceSet dependency on a Kubernetes resource.",
            "type": "object",
            "required": [
              "apiVersion",
              "kind",
              "name"
            ],
            "properties": {
              "apiVersion": {
                "description": "APIVersion of the resource to depend on.",
                "type": "string"
              },
              "kind": {
                "description": "Kind of the resource to depend on.",
                "type": "string"
              },
              "name": {
                "description": "Name of the resource to depend on.",
                "type": "string"
              },
              "namespace": {
                "description": "Namespace of the resource to depend on.",
                "type": "string"
              },
              "ready": {
                "description": "Ready checks if the resource Ready status condition is true.",
                "type": "boolean"
              },
              "readyExpr": {
                "description": "ReadyExpr checks if the resource satisfies the given CEL expression.\nThe expression replaces the default readiness check and\nis only evaluated if Ready is set to 'true'.",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "inputStrategy": {
          "description": "InputStrategy defines how the inputs are combined when multiple\ninput provider objects are used. Defaults to flattening all inputs\nfrom all providers into a single list of input sets.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name defines how the inputs are combined when multiple\ninput provider objects are used. Supported values are:\n- Flatten: all inputs sets from all input provider objects are\n  flattened into a single list of input sets.\n- Permute: all inputs sets from all input provider objects are\n  combined using a Cartesian product, resulting in a list of input sets\n  that contains every possible combination of input values.\n  For example, if provider A has inputs [{x: 1}, {x: 2}] and provider B has\n  inputs [{y: \"a\"}, {y: \"b\"}], the resulting input sets will be:\n  [{x: 1, y: \"a\"}, {x: 1, y: \"b\"}, {x: 2, y: \"a\"}, {x: 2, y: \"b\"}].\n  This strategy can lead to a large number of input sets and should be\n  used with caution. Users should use filtering features from\n  ResourceSetInputProvider to limit the amount of exported inputs.",
              "type": "string",
              "enum": [
                "Flatten",
                "Permute"
              ]
            }
          },
          "additionalProperties": false
        },
        "inputs": {
          "description": "Inputs contains the list of ResourceSet inputs.",
          "type": "array",
          "items": {
            "description": "ResourceSetInput defines the key-value pairs of the ResourceSet input.",
            "type": "object",
            "additionalProperties": {
              "x-kubernetes-preserve-unknown-fields": true
            }
          }
        },
        "inputsFrom": {
          "description": "InputsFrom contains the list of references to input providers.\nWhen set, the inputs are fetched from the providers and concatenated\nwith the in-line inputs defined in the ResourceSet.",
          "type": "array",
          "items": {
            "description": "InputProviderReference defines a reference to an input provider resource\nin the same namespace as the ResourceSet.",
            "type": "object",
            "properties": {
              "apiVersion": {
                "description": "APIVersion of the input provider resource.\nWhen not set, the APIVersion of the ResourceSet is used.",
                "type": "string",
                "enum": [
                  "fluxcd.controlplane.io/v1"
                ]
              },
              "kind": {
                "description": "Kind of the input provider resource.",
                "type": "string",
                "enum": [
                  "ResourceSetInputProvider"
                ]
              },
              "name": {
                "description": "Name of the input provider resource. Cannot be set\nwhen the Selector field is set.",
                "type": "string"
              },
              "selector": {
                "description": "Selector is a label selector to filter the input provider resources\nas an alternative to the Name field.",
                "type": "object",
                "properties": {
                  "matchExpressions": {
                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                    "type": "array",
                    "items": {
                      "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                      "type": "object",
                      "required": [
                        "key",
                        "operator"
                      ],
                      "properties": {
                        "key": {
                          "description": "key is the label key that the selector applies to.",
                          "type": "string"
                        },
                        "operator": {
                          "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                          "type": "string"
                        },
                        "values": {
                          "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "x-kubernetes-list-type": "atomic"
                        }
                      },
                      "additionalProperties": false
                    },
                    "x-kubernetes-list-type": "atomic"
                  },
                  "matchLabels": {
                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                },
                "additionalProperties": false,
                "x-kubernetes-map-type": "atomic"
              }
            },
            "additionalProperties": false,
            "x-kubernetes-validations": [
              {
                "rule": "has(self.name) || has(self.selector)",
                "message": "at least one of name or selector must be set for input provider references"
              },
              {
                "rule": "!has(self.name) || !has(self.selector)",
                "message": "cannot set both name and selector for input provider references"
              }
            ]
          }
        },
        "resources": {
          "description": "Resources contains the list of Kubernetes resources to reconcile.",
          "type": "array",
          "items": {
            "x-kubernetes-preserve-unknown-fields": true
          }
        },
        "resourcesTemplate": {
          "description": "ResourcesTemplate is a Go template that generates the list of\nKubernetes resources to reconcile. The template is rendered\nas multi-document YAML, the resources should be separated by '---'.\nWhen both Resources and ResourcesTemplate are set, the resulting\nobjects are merged and deduplicated, with the ones from Resources taking precedence.",
          "type": "string"
        },
        "serviceAccountName": {
          "description": "The name of the Kubernetes service account to impersonate\nwhen reconciling the generated resources.",
          "type": "string"
        },
        "wait": {
          "description": "Wait instructs the controller to check the health\nof all the reconciled resources.",
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "ResourceSetStatus defines the observed state of ResourceSet.",
      "type": "object",
      "properties": {
        "conditions": {
          "description": "Conditions contains the readiness conditions of the object.",
          "type": "array",
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                "type": "string",
                "maxLength": 32768
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64",
                "minimum": 0
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                "type": "string",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "type": "string",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ]
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                "type": "string",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
              }
            },
            "additionalProperties": false
          }
        },
        "history": {
          "description": "History contains the reconciliation history of the ResourceSet\nas a list of snapshots ordered by the last reconciled time.",
          "type": "array",
          "items": {
            "description": "Snapshot represents a point-in-time record of a group of resources reconciliation,\nincluding timing information, status, and a unique digest identifier.",
            "type": "object",
            "required": [
              "digest",
              "firstReconciled",
              "lastReconciled",
              "lastReconciledDuration",
              "lastReconciledStatus",
              "totalReconciliations"
            ],
            "properties": {
              "digest": {
                "description": "Digest is the checksum in the format `\u003calgo\u003e:\u003chex\u003e` of the resources in this snapshot.",
                "type": "string"
              },
              "firstReconciled": {
                "description": "FirstReconciled is the time when this revision was first reconciled to the cluster.",
                "type": "string",
                "format": "date-time"
              },
              "lastReconciled": {
                "description": "LastReconciled is the time when this revision was last reconciled to the cluster.",
                "type": "string",
                "format": "date-time"
              },
              "lastReconciledDuration": {
                "description": "LastReconciledDuration is time it took to reconcile the resources in this revision.",
                "type": "string"
              },
              "lastReconciledStatus": {
                "description": "LastReconciledStatus is the status of the last reconciliation.",
                "type": "string"
              },
              "metadata": {
                "description": "Metadata contains additional information about the snapshot.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "totalReconciliations": {
                "description": "TotalReconciliations is the total number of reconciliations that have occurred for this snapshot.",
                "type": "integer",
                "format": "int64"
              }
            },
            "additionalProperties": false
          }
        },
        "inventory": {
          "description": "Inventory contains a list of Kubernetes resource object references\nlast applied on the cluster.",
          "type": "object",
          "required": [
            "entries"
          ],
          "properties": {
            "entries": {
              "description": "Entries of Kubernetes resource object references.",
              "type": "array",
              "items": {
                "description": "ResourceRef contains the information necessary to locate a resource within a cluster.",
                "type": "object",
                "required": [
                  "id",
                  "v"
                ],
                "properties": {
                  "id": {
                    "description": "ID is the string representation of the Kubernetes resource object's metadata,\nin the format '\u003cnamespace\u003e_\u003cname\u003e_\u003cgroup\u003e_\u003ckind\u003e'.",
                    "type": "string"
                  },
                  "v": {
                    "description": "Version is the API version of the Kubernetes resource object's kind.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "additionalProperties": false
        },
        "lastAppliedRevision": {
          "description": "LastAppliedRevision is the digest of the\ngenerated resources that were last reconcile.",
          "type": "string"
        },
        "lastHandledReconcileAt": {
          "description": "LastHandledReconcileAt holds the value of the most recent\nreconcile request value, so a change of the annotation value\ncan be detected.",
          "type": "string"
        }
      },
      "additionalProperties": false
    }
  }
}
