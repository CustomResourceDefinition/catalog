{
  "description": "FeatureGroup is the Schema for the FeatureGroups API. Provides a SageMaker AI Feature Group resource.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "FeatureGroupSpec defines the desired state of FeatureGroup",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "forProvider": {
          "type": "object",
          "required": [
            "region"
          ],
          "properties": {
            "description": {
              "description": "A free-form description of a Feature Group.",
              "type": "string"
            },
            "eventTimeFeatureName": {
              "description": "The name of the feature that stores the EventTime of a Record in a Feature Group.",
              "type": "string"
            },
            "featureDefinition": {
              "description": "A list of Feature names and types. See Feature Definition Below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "collectionConfig": {
                    "type": "object",
                    "properties": {
                      "vectorConfig": {
                        "type": "object",
                        "properties": {
                          "dimension": {
                            "type": "number"
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  },
                  "collectionType": {
                    "type": "string"
                  },
                  "featureName": {
                    "description": "The name of a feature. feature_name cannot be any of the following: is_deleted, write_time, api_invocation_time.",
                    "type": "string"
                  },
                  "featureType": {
                    "description": "The value type of a feature. Valid values are Integral, Fractional, or String.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "offlineStoreConfig": {
              "description": "The Offline Feature Store Configuration. See Offline Store Config Below.",
              "type": "object",
              "properties": {
                "dataCatalogConfig": {
                  "description": "The meta data of the Glue table that is autogenerated when an OfflineStore is created. See Data Catalog Config Below.",
                  "type": "object",
                  "properties": {
                    "catalog": {
                      "description": "The name of the Glue table catalog.",
                      "type": "string"
                    },
                    "database": {
                      "description": "The name of the Glue table database.",
                      "type": "string"
                    },
                    "tableName": {
                      "description": "The name of the Glue table.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "disableGlueTableCreation": {
                  "description": "Set to true to turn Online Store On.",
                  "type": "boolean"
                },
                "s3StorageConfig": {
                  "description": "The Amazon Simple Storage (Amazon S3) location of OfflineStore. See S3 Storage Config Below.",
                  "type": "object",
                  "properties": {
                    "kmsKeyId": {
                      "description": "The AWS Key Management Service (KMS) key ID of the key used to encrypt any objects written into the OfflineStore S3 location.",
                      "type": "string"
                    },
                    "resolvedOutputS3Uri": {
                      "description": "The S3 path where offline records are written.",
                      "type": "string"
                    },
                    "s3Uri": {
                      "description": "The S3 URI, or location in Amazon S3, of OfflineStore.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "tableFormat": {
                  "description": "Format for the offline store table. Supported formats are Glue (Default) and Apache Iceberg (https://iceberg.apache.org/).",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "onlineStoreConfig": {
              "description": "The Online Feature Store Configuration. See Online Store Config Below.",
              "type": "object",
              "properties": {
                "enableOnlineStore": {
                  "description": "Set to true to disable the automatic creation of an AWS Glue table when configuring an OfflineStore.",
                  "type": "boolean"
                },
                "securityConfig": {
                  "description": "Security config for at-rest encryption of your OnlineStore. See Security Config Below.",
                  "type": "object",
                  "properties": {
                    "kmsKeyId": {
                      "description": "The AWS Key Management Service (KMS) key ID of the key used to encrypt any objects written into the OfflineStore S3 location.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "storageType": {
                  "description": "Option for different tiers of low latency storage for real-time data retrieval. Valid values are Standard, or InMemory.",
                  "type": "string"
                },
                "ttlDuration": {
                  "description": "Time to live duration, where the record is hard deleted after the expiration time is reached; ExpiresAt = EventTime + TtlDuration.. See TTl Duration Below.",
                  "type": "object",
                  "properties": {
                    "unit": {
                      "description": "TtlDuration time unit. Valid values are Seconds, Minutes, Hours, Days, or Weeks.",
                      "type": "string"
                    },
                    "value": {
                      "description": "TtlDuration time value.",
                      "type": "number"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "recordIdentifierFeatureName": {
              "description": "The name of the Feature whose value uniquely identifies a Record defined in the Feature Store. Only the latest record per identifier value will be stored in the Online Store.",
              "type": "string"
            },
            "region": {
              "description": "Region where this resource will be managed. Defaults to the Region set in the provider configuration.\nRegion is the region you'd like your resource to be created in.",
              "type": "string"
            },
            "roleArn": {
              "description": "The Amazon Resource Name (ARN) of the IAM execution role used to persist data into the Offline Store if an offline_store_config is provided.",
              "type": "string"
            },
            "roleArnRef": {
              "description": "Reference to a Role in iam to populate roleArn.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referenced object",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "roleArnSelector": {
              "description": "Selector for a Role in iam to populate roleArn.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "namespace": {
                  "description": "Namespace for the selector",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "tags": {
              "description": "Key-value map of resource tags.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "throughputConfig": {
              "type": "object",
              "properties": {
                "provisionedReadCapacityUnits": {
                  "type": "number"
                },
                "provisionedWriteCapacityUnits": {
                  "type": "number"
                },
                "throughputMode": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored\nunless the Management Policies feature flag is disabled.\nInitProvider holds the same fields as ForProvider, with the exception\nof Identifier and other resource reference fields. The fields that are\nin InitProvider are merged into ForProvider when the resource is created.\nThe same fields are also added to the terraform ignore_changes hook, to\navoid updating them after creation. This is useful for fields that are\nrequired on creation, but we do not desire to update them after creation,\nfor example because of an external controller is managing them, like an\nautoscaler.",
          "type": "object",
          "properties": {
            "description": {
              "description": "A free-form description of a Feature Group.",
              "type": "string"
            },
            "eventTimeFeatureName": {
              "description": "The name of the feature that stores the EventTime of a Record in a Feature Group.",
              "type": "string"
            },
            "featureDefinition": {
              "description": "A list of Feature names and types. See Feature Definition Below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "collectionConfig": {
                    "type": "object",
                    "properties": {
                      "vectorConfig": {
                        "type": "object",
                        "properties": {
                          "dimension": {
                            "type": "number"
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  },
                  "collectionType": {
                    "type": "string"
                  },
                  "featureName": {
                    "description": "The name of a feature. feature_name cannot be any of the following: is_deleted, write_time, api_invocation_time.",
                    "type": "string"
                  },
                  "featureType": {
                    "description": "The value type of a feature. Valid values are Integral, Fractional, or String.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "offlineStoreConfig": {
              "description": "The Offline Feature Store Configuration. See Offline Store Config Below.",
              "type": "object",
              "properties": {
                "dataCatalogConfig": {
                  "description": "The meta data of the Glue table that is autogenerated when an OfflineStore is created. See Data Catalog Config Below.",
                  "type": "object",
                  "properties": {
                    "catalog": {
                      "description": "The name of the Glue table catalog.",
                      "type": "string"
                    },
                    "database": {
                      "description": "The name of the Glue table database.",
                      "type": "string"
                    },
                    "tableName": {
                      "description": "The name of the Glue table.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "disableGlueTableCreation": {
                  "description": "Set to true to turn Online Store On.",
                  "type": "boolean"
                },
                "s3StorageConfig": {
                  "description": "The Amazon Simple Storage (Amazon S3) location of OfflineStore. See S3 Storage Config Below.",
                  "type": "object",
                  "properties": {
                    "kmsKeyId": {
                      "description": "The AWS Key Management Service (KMS) key ID of the key used to encrypt any objects written into the OfflineStore S3 location.",
                      "type": "string"
                    },
                    "resolvedOutputS3Uri": {
                      "description": "The S3 path where offline records are written.",
                      "type": "string"
                    },
                    "s3Uri": {
                      "description": "The S3 URI, or location in Amazon S3, of OfflineStore.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "tableFormat": {
                  "description": "Format for the offline store table. Supported formats are Glue (Default) and Apache Iceberg (https://iceberg.apache.org/).",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "onlineStoreConfig": {
              "description": "The Online Feature Store Configuration. See Online Store Config Below.",
              "type": "object",
              "properties": {
                "enableOnlineStore": {
                  "description": "Set to true to disable the automatic creation of an AWS Glue table when configuring an OfflineStore.",
                  "type": "boolean"
                },
                "securityConfig": {
                  "description": "Security config for at-rest encryption of your OnlineStore. See Security Config Below.",
                  "type": "object",
                  "properties": {
                    "kmsKeyId": {
                      "description": "The AWS Key Management Service (KMS) key ID of the key used to encrypt any objects written into the OfflineStore S3 location.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "storageType": {
                  "description": "Option for different tiers of low latency storage for real-time data retrieval. Valid values are Standard, or InMemory.",
                  "type": "string"
                },
                "ttlDuration": {
                  "description": "Time to live duration, where the record is hard deleted after the expiration time is reached; ExpiresAt = EventTime + TtlDuration.. See TTl Duration Below.",
                  "type": "object",
                  "properties": {
                    "unit": {
                      "description": "TtlDuration time unit. Valid values are Seconds, Minutes, Hours, Days, or Weeks.",
                      "type": "string"
                    },
                    "value": {
                      "description": "TtlDuration time value.",
                      "type": "number"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "recordIdentifierFeatureName": {
              "description": "The name of the Feature whose value uniquely identifies a Record defined in the Feature Store. Only the latest record per identifier value will be stored in the Online Store.",
              "type": "string"
            },
            "roleArn": {
              "description": "The Amazon Resource Name (ARN) of the IAM execution role used to persist data into the Offline Store if an offline_store_config is provided.",
              "type": "string"
            },
            "roleArnRef": {
              "description": "Reference to a Role in iam to populate roleArn.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referenced object",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "roleArnSelector": {
              "description": "Selector for a Role in iam to populate roleArn.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "namespace": {
                  "description": "Namespace for the selector",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "tags": {
              "description": "Key-value map of resource tags.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "throughputConfig": {
              "type": "object",
              "properties": {
                "provisionedReadCapacityUnits": {
                  "type": "number"
                },
                "provisionedWriteCapacityUnits": {
                  "type": "number"
                },
                "throughputMode": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "managementPolicies": {
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out\nthrough a Crossplane feature flag.\nManagementPolicies specify the array of actions Crossplane is allowed to\ntake on the managed and external resources.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223\nand this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers\ncan take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to\ncreate, observe, update, and delete this managed resource should be\nconfigured.",
          "type": "object",
          "default": {
            "kind": "ClusterProviderConfig",
            "name": "default"
          },
          "required": [
            "kind",
            "name"
          ],
          "properties": {
            "kind": {
              "description": "Kind of the referenced object.",
              "type": "string"
            },
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a\nSecret to which any connection details for this managed resource should\nbe written. Connection details frequently include the endpoint, username,\nand password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false,
      "x-kubernetes-validations": [
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.eventTimeFeatureName) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.eventTimeFeatureName))",
          "message": "spec.forProvider.eventTimeFeatureName is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.featureDefinition) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.featureDefinition))",
          "message": "spec.forProvider.featureDefinition is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.recordIdentifierFeatureName) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.recordIdentifierFeatureName))",
          "message": "spec.forProvider.recordIdentifierFeatureName is a required parameter"
        }
      ]
    },
    "status": {
      "description": "FeatureGroupStatus defines the observed state of FeatureGroup.",
      "type": "object",
      "properties": {
        "atProvider": {
          "type": "object",
          "properties": {
            "arn": {
              "description": "The Amazon Resource Name (ARN) assigned by AWS to this feature_group.",
              "type": "string"
            },
            "description": {
              "description": "A free-form description of a Feature Group.",
              "type": "string"
            },
            "eventTimeFeatureName": {
              "description": "The name of the feature that stores the EventTime of a Record in a Feature Group.",
              "type": "string"
            },
            "featureDefinition": {
              "description": "A list of Feature names and types. See Feature Definition Below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "collectionConfig": {
                    "type": "object",
                    "properties": {
                      "vectorConfig": {
                        "type": "object",
                        "properties": {
                          "dimension": {
                            "type": "number"
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  },
                  "collectionType": {
                    "type": "string"
                  },
                  "featureName": {
                    "description": "The name of a feature. feature_name cannot be any of the following: is_deleted, write_time, api_invocation_time.",
                    "type": "string"
                  },
                  "featureType": {
                    "description": "The value type of a feature. Valid values are Integral, Fractional, or String.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "id": {
              "type": "string"
            },
            "offlineStoreConfig": {
              "description": "The Offline Feature Store Configuration. See Offline Store Config Below.",
              "type": "object",
              "properties": {
                "dataCatalogConfig": {
                  "description": "The meta data of the Glue table that is autogenerated when an OfflineStore is created. See Data Catalog Config Below.",
                  "type": "object",
                  "properties": {
                    "catalog": {
                      "description": "The name of the Glue table catalog.",
                      "type": "string"
                    },
                    "database": {
                      "description": "The name of the Glue table database.",
                      "type": "string"
                    },
                    "tableName": {
                      "description": "The name of the Glue table.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "disableGlueTableCreation": {
                  "description": "Set to true to turn Online Store On.",
                  "type": "boolean"
                },
                "s3StorageConfig": {
                  "description": "The Amazon Simple Storage (Amazon S3) location of OfflineStore. See S3 Storage Config Below.",
                  "type": "object",
                  "properties": {
                    "kmsKeyId": {
                      "description": "The AWS Key Management Service (KMS) key ID of the key used to encrypt any objects written into the OfflineStore S3 location.",
                      "type": "string"
                    },
                    "resolvedOutputS3Uri": {
                      "description": "The S3 path where offline records are written.",
                      "type": "string"
                    },
                    "s3Uri": {
                      "description": "The S3 URI, or location in Amazon S3, of OfflineStore.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "tableFormat": {
                  "description": "Format for the offline store table. Supported formats are Glue (Default) and Apache Iceberg (https://iceberg.apache.org/).",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "onlineStoreConfig": {
              "description": "The Online Feature Store Configuration. See Online Store Config Below.",
              "type": "object",
              "properties": {
                "enableOnlineStore": {
                  "description": "Set to true to disable the automatic creation of an AWS Glue table when configuring an OfflineStore.",
                  "type": "boolean"
                },
                "securityConfig": {
                  "description": "Security config for at-rest encryption of your OnlineStore. See Security Config Below.",
                  "type": "object",
                  "properties": {
                    "kmsKeyId": {
                      "description": "The AWS Key Management Service (KMS) key ID of the key used to encrypt any objects written into the OfflineStore S3 location.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "storageType": {
                  "description": "Option for different tiers of low latency storage for real-time data retrieval. Valid values are Standard, or InMemory.",
                  "type": "string"
                },
                "ttlDuration": {
                  "description": "Time to live duration, where the record is hard deleted after the expiration time is reached; ExpiresAt = EventTime + TtlDuration.. See TTl Duration Below.",
                  "type": "object",
                  "properties": {
                    "unit": {
                      "description": "TtlDuration time unit. Valid values are Seconds, Minutes, Hours, Days, or Weeks.",
                      "type": "string"
                    },
                    "value": {
                      "description": "TtlDuration time value.",
                      "type": "number"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "recordIdentifierFeatureName": {
              "description": "The name of the Feature whose value uniquely identifies a Record defined in the Feature Store. Only the latest record per identifier value will be stored in the Online Store.",
              "type": "string"
            },
            "region": {
              "description": "Region where this resource will be managed. Defaults to the Region set in the provider configuration.\nRegion is the region you'd like your resource to be created in.",
              "type": "string"
            },
            "roleArn": {
              "description": "The Amazon Resource Name (ARN) of the IAM execution role used to persist data into the Offline Store if an offline_store_config is provided.",
              "type": "string"
            },
            "tags": {
              "description": "Key-value map of resource tags.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "tagsAll": {
              "description": "A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "throughputConfig": {
              "type": "object",
              "properties": {
                "provisionedReadCapacityUnits": {
                  "type": "number"
                },
                "provisionedWriteCapacityUnits": {
                  "type": "number"
                },
                "throughputMode": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "type": "array",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one\nstatus to another.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from\none status to another, if any.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to\na resource at any point in time.",
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest metadata.generation\nwhich resulted in either a ready state, or stalled due to error\nit can not recover from without human intervention.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    }
  }
}
