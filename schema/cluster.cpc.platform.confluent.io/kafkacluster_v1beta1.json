{
  "description": "KafkaCluster is the Schema for the kafkaclusters API",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "KafkaClusterSpec defines the desired state of KafkaCluster",
      "type": "object",
      "required": [
        "blueprintRef"
      ],
      "properties": {
        "blueprintRef": {
          "description": "blueprintRef defines which blueprint the Kafka cluster should use.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name is the name of the referenced CR",
              "type": "string",
              "maxLength": 63,
              "minLength": 1,
              "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
            },
            "namespace": {
              "description": "Namespace of the CR. Defaults to the current namespace of the CR making the reference",
              "type": "string",
              "maxLength": 255,
              "minLength": 1,
              "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
            }
          },
          "additionalProperties": false
        },
        "credentialStoreConfigRef": {
          "description": "credentialStoreConfigRef references the CredentialStoreConfig CR that manages credentials across CP",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name is the name of the referenced CR",
              "type": "string",
              "maxLength": 63,
              "minLength": 1,
              "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
            },
            "namespace": {
              "description": "Namespace of the CR. Defaults to the current namespace of the CR making the reference",
              "type": "string",
              "maxLength": 255,
              "minLength": 1,
              "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
            }
          },
          "additionalProperties": false
        },
        "dataVolumeCapacity": {
          "description": "dataVolumeCapacity will resize the existing volume. If value is less or greater than the value the configured by the class (platform administrator) then the request will be rejected. The webhook will be in place to let user know if the request will be denied",
          "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "type": "string"
            }
          ],
          "x-kubernetes-int-or-string": true
        },
        "dependencies": {
          "description": "dependencies describes the services which kafka has a client dependency on",
          "type": "object",
          "properties": {
            "mdsClusterRef": {
              "description": "mdsClusterRef is the cluster which Kafka will use for metadata. This will be the primary MDS.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name is the name of the referenced CR",
                  "type": "string",
                  "maxLength": 63,
                  "minLength": 1,
                  "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                },
                "namespace": {
                  "description": "Namespace of the CR. Defaults to the current namespace of the CR making the reference",
                  "type": "string",
                  "maxLength": 255,
                  "minLength": 1,
                  "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                }
              },
              "additionalProperties": false
            },
            "metricsReporter": {
              "description": "metricsReporter configures where to send metrics to.",
              "type": "object",
              "properties": {
                "kafkaClusterRef": {
                  "description": "kafkaClusterRef is the cluster which the metrics reporter will report metrics to.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name is the name of the referenced CR",
                      "type": "string",
                      "maxLength": 63,
                      "minLength": 1,
                      "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                    },
                    "namespace": {
                      "description": "Namespace of the CR. Defaults to the current namespace of the CR making the reference",
                      "type": "string",
                      "maxLength": 255,
                      "minLength": 1,
                      "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "schemaRegistryClusterRef": {
              "description": "schemaRegistryClusterRef is the cluster which will be used to enforce schema validation.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name is the name of the referenced CR",
                  "type": "string",
                  "maxLength": 63,
                  "minLength": 1,
                  "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                },
                "namespace": {
                  "description": "Namespace of the CR. Defaults to the current namespace of the CR making the reference",
                  "type": "string",
                  "maxLength": 255,
                  "minLength": 1,
                  "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                }
              },
              "additionalProperties": false
            },
            "zookeeperClusterRef": {
              "description": "zookeeperClusterRef specifies the dependency configuration for Zookeeper.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name is the name of the referenced CR",
                  "type": "string",
                  "maxLength": 63,
                  "minLength": 1,
                  "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                },
                "namespace": {
                  "description": "Namespace of the CR. Defaults to the current namespace of the CR making the reference",
                  "type": "string",
                  "maxLength": 255,
                  "minLength": 1,
                  "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "externalAccess": {
          "description": "externalAccess specifies Kafka external access configurations.",
          "type": "object",
          "properties": {
            "kafkaRest": {
              "description": "kafkaRest specifies the external access configurations for Kafka Rest endpoints.",
              "type": "object",
              "properties": {
                "dnsConfig": {
                  "description": "dnsConfig specifies the DNS configurations for Kafka Rest endpoints.",
                  "type": "object",
                  "properties": {
                    "subdomain": {
                      "description": "subdomain specifies the subdomain for the cluster FQDN.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "tlsConfig": {
                  "description": "tlsConfig specifies the tls certificate configuration for external communication. Only apply to certificate provider type `deployment`.",
                  "type": "object",
                  "required": [
                    "certificateStoreConfigRef"
                  ],
                  "properties": {
                    "certificateStoreConfigRef": {
                      "description": "certificateStoreConfigRef specifies the reference to CertificateStoreConfig.",
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "name": {
                          "description": "Name is the name of the referenced CR",
                          "type": "string",
                          "maxLength": 63,
                          "minLength": 1,
                          "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                        },
                        "namespace": {
                          "description": "Namespace of the CR. Defaults to the current namespace of the CR making the reference",
                          "type": "string",
                          "maxLength": 255,
                          "minLength": 1,
                          "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "listeners": {
              "description": "listeners specifies the external access configurations for Kafka listeners.",
              "type": "object",
              "properties": {
                "custom": {
                  "description": "custom defines the list of KafkaListenerExternalAccess configuration.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "dnsConfig": {
                        "description": "dnsConfig specifies the DNS configuration for Kafka Listener external access. This is required if subdomain provider type is deployment in blueprint.",
                        "type": "object",
                        "properties": {
                          "bootstrapSubdomain": {
                            "description": "bootstrapSubdomain specifies the subdomain for the Kafka bootstrap advertised endpoint. This is required if subdomain provider type is deployment in blueprint.",
                            "type": "string",
                            "minLength": 1
                          },
                          "brokerSubdomain": {
                            "description": "brokerSubdomain specifies the subdomain for the Kafka broker advertised endpoint. This is required if subdomain provider type is deployment in blueprint.",
                            "type": "string",
                            "minLength": 1
                          }
                        },
                        "additionalProperties": false
                      },
                      "name": {
                        "description": "name specifies the name of the custom listener. `internal`, `external`, `replication` and `token` are reserved and can't be used for this property.",
                        "type": "string",
                        "maxLength": 30,
                        "minLength": 1,
                        "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                      },
                      "tlsConfig": {
                        "description": "tlsConfig specifies the tls certificate configuration for external communication. Only apply to certificate provider type `deployment`.",
                        "type": "object",
                        "required": [
                          "certificateStoreConfigRef"
                        ],
                        "properties": {
                          "certificateStoreConfigRef": {
                            "description": "certificateStoreConfigRef specifies the reference to CertificateStoreConfig.",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "description": "Name is the name of the referenced CR",
                                "type": "string",
                                "maxLength": 63,
                                "minLength": 1,
                                "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                              },
                              "namespace": {
                                "description": "Namespace of the CR. Defaults to the current namespace of the CR making the reference",
                                "type": "string",
                                "maxLength": 255,
                                "minLength": 1,
                                "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "external": {
                  "description": "external specifies the configuration for Kafka external listener external access.",
                  "type": "object",
                  "properties": {
                    "dnsConfig": {
                      "description": "dnsConfig specifies the DNS configuration for Kafka Listener external access. This is required if subdomain provider type is deployment in blueprint.",
                      "type": "object",
                      "properties": {
                        "bootstrapSubdomain": {
                          "description": "bootstrapSubdomain specifies the subdomain for the Kafka bootstrap advertised endpoint. This is required if subdomain provider type is deployment in blueprint.",
                          "type": "string",
                          "minLength": 1
                        },
                        "brokerSubdomain": {
                          "description": "brokerSubdomain specifies the subdomain for the Kafka broker advertised endpoint. This is required if subdomain provider type is deployment in blueprint.",
                          "type": "string",
                          "minLength": 1
                        }
                      },
                      "additionalProperties": false
                    },
                    "tlsConfig": {
                      "description": "tlsConfig specifies the tls certificate configuration for external communication. Only apply to certificate provider type `deployment`.",
                      "type": "object",
                      "required": [
                        "certificateStoreConfigRef"
                      ],
                      "properties": {
                        "certificateStoreConfigRef": {
                          "description": "certificateStoreConfigRef specifies the reference to CertificateStoreConfig.",
                          "type": "object",
                          "required": [
                            "name"
                          ],
                          "properties": {
                            "name": {
                              "description": "Name is the name of the referenced CR",
                              "type": "string",
                              "maxLength": 63,
                              "minLength": 1,
                              "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                            },
                            "namespace": {
                              "description": "Namespace of the CR. Defaults to the current namespace of the CR making the reference",
                              "type": "string",
                              "maxLength": 255,
                              "minLength": 1,
                              "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "k8sClusterRef": {
          "description": "k8sClusterRef references to kubernetes clusters where kafka going to be deployed. If missing then the cpc-validator webhook will inject default kubernetes cluster and will assume both Control and data plane service are running in the mothership cluster.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name is the name of the referenced CR",
              "type": "string",
              "maxLength": 63,
              "minLength": 1,
              "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
            },
            "namespace": {
              "description": "Namespace of the CR. Defaults to the current namespace of the CR making the reference",
              "type": "string",
              "maxLength": 255,
              "minLength": 1,
              "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
            }
          },
          "additionalProperties": false
        },
        "replicas": {
          "description": "replicas is the number of replicas for the cluster. If configured, the value will be checked against the KafkaClusterClass configuration max replicas. If not, it will use the default in the KafkaClusterClass.",
          "type": "integer",
          "format": "int32"
        },
        "targetCluster": {
          "description": "targetCluster defines where the kafka cluster should be deployed.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name is the name of the referenced CR",
              "type": "string",
              "maxLength": 63,
              "minLength": 1,
              "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
            },
            "namespace": {
              "description": "Namespace of the CR. Defaults to the current namespace of the CR making the reference",
              "type": "string",
              "maxLength": 255,
              "minLength": 1,
              "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "KafkaClusterStatus defines the observed state of KafkaCluster",
      "type": "object",
      "properties": {
        "brokerOffsetInterval": {
          "description": "brokerOffsetInterval is the offset interval for the kafka broker numbers.",
          "type": "string"
        },
        "classGeneration": {
          "description": "classGeneration is the generation version of the cluster class referenced from the deployment.",
          "type": "integer",
          "format": "int64"
        },
        "clusterClass": {
          "description": "clusterClass is the namespaced name of the ClusterClass that this deployment object is referencing to.",
          "type": "string"
        },
        "clusterState": {
          "description": "clusterState is the state of the cluster.",
          "type": "string",
          "default": "Unknown"
        },
        "conditions": {
          "description": "conditions specify the latest available observations of the current state.",
          "type": "array",
          "items": {
            "description": "Condition represents the latest available observations of the current state.",
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime shows the last time the condition was transitioned from one status to another.",
                "type": "string",
                "format": "date-time"
              },
              "lastUpdateTime": {
                "description": "lastUpdateTime shows the last time the condition was evaluated.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "message shows a human-readable message with details about the transition.",
                "type": "string"
              },
              "reason": {
                "description": "reason shows the reason for the last transition of the condition.",
                "type": "string"
              },
              "status": {
                "description": "status shows the status of the condition, one of `True`, `False`, or `Unknown`.",
                "type": "string"
              },
              "type": {
                "description": "type shows the condition type.",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "confluentPlatformBlueprint": {
          "description": "confluentPlatformBlueprint is the namespaced name of the confluentPlatformBlueprint referenced from the deployment.",
          "type": "string"
        },
        "confluentPlatformBlueprintGeneration": {
          "description": "confluentPlatformBlueprintGeneration is the generation version of the confluentPlatformBlueprint referenced from the deployment.",
          "type": "integer",
          "format": "int64"
        },
        "currentReplicas": {
          "description": "currentReplicas is the number of currently running replicas.",
          "type": "integer",
          "format": "int32"
        },
        "dataVolumeSize": {
          "description": "dataVolumeSize describes the volume size in use by the application.",
          "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "type": "string"
            }
          ],
          "x-kubernetes-int-or-string": true
        },
        "internalSecretName": {
          "description": "internalSecretName is the name of the CPC internal secret created for this cluster",
          "type": "string"
        },
        "kafkaClusterID": {
          "description": "kafkaClusterID is the cluster-id of the kafka-cluster",
          "type": "string"
        },
        "kafkaRestClassName": {
          "description": "kafkaRestClassName references to internal kafkaRestClass name",
          "type": "string"
        },
        "kafkaRestRef": {
          "description": "kafkaRestRef is the status for Kafka Rest APIs or MDS.",
          "type": "object",
          "properties": {
            "externalAccess": {
              "description": "externalAccess is the status of Kafka Rest external Access.",
              "type": "object",
              "properties": {
                "advertisedExternalEndpoint": {
                  "description": "advertisedExternalEndpoint is the advertised endpoint for the http server of this cluster.",
                  "type": "object",
                  "properties": {
                    "dnsEndpoint": {
                      "description": "dnsEndpoint is the endpoint with FQDN and port number, with format `\u003cFQDN\u003e:\u003cport\u003e`.",
                      "type": "string"
                    },
                    "ipAddress": {
                      "description": "ipAddress is the assigned ip address for the FQDN.",
                      "type": "string"
                    },
                    "url": {
                      "description": "url is the URL endpoint. The format is `http|s://\u003cFQDN\u003e:\u003cport\u003e`.",
                      "type": "string",
                      "minLength": 1,
                      "pattern": "^https?://.*"
                    }
                  },
                  "additionalProperties": false
                },
                "type": {
                  "description": "type is the external access type.",
                  "type": "string",
                  "enum": [
                    "loadBalancer",
                    "ingress",
                    "nodePort",
                    "route"
                  ]
                }
              },
              "additionalProperties": false
            },
            "tls": {
              "description": "tls shows whether TLS is configured for the Kafka Rest endpoint.",
              "type": "object",
              "properties": {
                "enabled": {
                  "description": "enabled specifies whether tls is enabled.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "kubernetesCluster": {
          "description": "kubernetesCluster is the namespaced name of the  kubernetesCluster CR that is the deployment is provisioned to.",
          "type": "string"
        },
        "listeners": {
          "description": "listeners are the list of Kafka listener Statuses.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "externalAccess": {
                "description": "externalAccess is the external access status of this listener.",
                "type": "object",
                "properties": {
                  "advertisedExternalEndpoint": {
                    "description": "advertisedExternalEndpoint is the advertised endpoint for this listener.",
                    "type": "object",
                    "properties": {
                      "bootstrap": {
                        "description": "bootstrap is the bootstrap advertised endpoint.",
                        "type": "object",
                        "properties": {
                          "dnsEndpoint": {
                            "description": "dnsEndpoint is the endpoint with FQDN and port number, with format `\u003cFQDN\u003e:\u003cport\u003e`.",
                            "type": "string"
                          },
                          "ipAddress": {
                            "description": "ipAddress is the assigned ip address for the FQDN.",
                            "type": "string"
                          }
                        },
                        "additionalProperties": false
                      },
                      "broker": {
                        "description": "broker is the list of broker advertised endpoint.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "dnsEndpoint": {
                              "description": "dnsEndpoint is the endpoint with FQDN and port number, with format `\u003cFQDN\u003e:\u003cport\u003e`.",
                              "type": "string"
                            },
                            "ipAddress": {
                              "description": "ipAddress is the assigned ip address for the FQDN.",
                              "type": "string"
                            },
                            "name": {
                              "description": "name is the broker name.",
                              "type": "string"
                            }
                          },
                          "additionalProperties": false
                        }
                      }
                    },
                    "additionalProperties": false
                  },
                  "type": {
                    "description": "type is the external access type.",
                    "type": "string",
                    "enum": [
                      "loadBalancer",
                      "ingress",
                      "nodePort",
                      "route"
                    ]
                  }
                },
                "additionalProperties": false
              },
              "name": {
                "description": "name is the listener name.",
                "type": "string"
              },
              "tls": {
                "description": "tls shows whether TLS is configured for the listener.",
                "type": "object",
                "properties": {
                  "enabled": {
                    "description": "enabled specifies whether tls is enabled.",
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        },
        "maxReplicas": {
          "description": "maxReplicas is the max number of replicas.",
          "type": "integer",
          "format": "int32"
        },
        "observedGeneration": {
          "description": "observedGeneration is the most recent generation observed for this cluster.",
          "type": "integer",
          "format": "int64"
        },
        "passwordEncoder": {
          "description": "passwordEncoder whether passwordEncoder is enabled this feature must be enabled for clusterlink to work.",
          "type": "boolean"
        },
        "phase": {
          "description": "phase describes whether the internal state is generated. Values are Bound, Pending and Unknown.",
          "type": "string",
          "default": "Unknown"
        },
        "provisionerType": {
          "description": "provisionerType is the type of underlying resource for the cluster",
          "type": "string",
          "enum": [
            "cfk",
            "ccloud"
          ]
        },
        "ready": {
          "description": "ready is the number of ready replicas based on the desired replicas. The value is in the following format: `readyReplicas/replicas`.",
          "type": "string"
        },
        "readyReplicas": {
          "description": "readyReplicas is the number of currently ready replicas.",
          "type": "integer",
          "format": "int32"
        },
        "replicas": {
          "description": "replicas is the number of replicas.",
          "type": "integer",
          "format": "int32"
        },
        "schemaRegistryClusterRef": {
          "description": "schemaRegistryClusterRef references schemaRegistry cluster",
          "type": "string"
        },
        "targetCluster": {
          "description": "targetCluster is the namespaced name of the cluster that is created from the deployment.",
          "type": "string"
        },
        "zookeeperClusterRef": {
          "description": "zookeeperClusterRef references zookeeper cluster",
          "type": "string"
        }
      },
      "additionalProperties": false
    }
  }
}
