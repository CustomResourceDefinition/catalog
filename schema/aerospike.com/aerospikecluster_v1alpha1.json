{
  "description": "AerospikeCluster is the Schema for the aerospikeclusters API",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "AerospikeClusterSpec defines the desired state of AerospikeCluster",
      "type": "object",
      "required": [
        "aerospikeConfig",
        "image",
        "resources",
        "size"
      ],
      "properties": {
        "aerospikeAccessControl": {
          "description": "AerospikeAccessControl has the Aerospike roles and users definitions. Required if aerospike cluster security is enabled.",
          "type": "object",
          "required": [
            "users"
          ],
          "properties": {
            "adminPolicy": {
              "description": "AerospikeClientAdminPolicy specify the aerospike client admin policy for access control operations.",
              "type": "object",
              "required": [
                "timeout"
              ],
              "properties": {
                "timeout": {
                  "description": "Timeout for admin client policy in milliseconds.",
                  "type": "integer"
                }
              },
              "additionalProperties": false
            },
            "roles": {
              "description": "Roles is the set of roles to allow on the Aerospike cluster.",
              "type": "array",
              "items": {
                "description": "AerospikeRoleSpec specifies an Aerospike database role and its associated privileges.",
                "type": "object",
                "required": [
                  "name",
                  "privileges"
                ],
                "properties": {
                  "name": {
                    "description": "Name of this role.",
                    "type": "string"
                  },
                  "privileges": {
                    "description": "Privileges granted to this role.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "whitelist": {
                    "description": "Whitelist of host address allowed for this role.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "users": {
              "description": "Users is the set of users to allow on the Aerospike cluster.",
              "type": "array",
              "items": {
                "description": "AerospikeUserSpec specifies an Aerospike database user, the secret name for the password and, associated roles.",
                "type": "object",
                "required": [
                  "name",
                  "roles",
                  "secretName"
                ],
                "properties": {
                  "name": {
                    "description": "Name is the user's username.",
                    "type": "string"
                  },
                  "roles": {
                    "description": "Roles is the list of roles granted to the user.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "secretName": {
                    "description": "SecretName has secret info created by user. User needs to create this secret from password literal. eg: kubectl create secret generic dev-db-secret --from-literal=password='password'",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "additionalProperties": false
        },
        "aerospikeConfig": {
          "description": "AerospikeConfig sets config in aerospike.conf file. Other configs are taken as default"
        },
        "aerospikeConfigSecret": {
          "description": "AerospikeConfigSecret has secret info created by user. User needs to create this secret having tls files, feature key for cluster",
          "type": "object",
          "required": [
            "mountPath",
            "secretName"
          ],
          "properties": {
            "mountPath": {
              "type": "string"
            },
            "secretName": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "aerospikeNetworkPolicy": {
          "description": "AerospikeNetworkPolicy specifies how clients and tools access the Aerospike cluster.",
          "type": "object",
          "properties": {
            "access": {
              "description": "AccessType is the type of network address to use for Aerospike access address. Defaults to hostInternal.",
              "type": "string",
              "enum": [
                "pod",
                "hostInternal",
                "hostExternal"
              ]
            },
            "alternateAccess": {
              "description": "AlternateAccessType is the type of network address to use for Aerospike alternate access address. Defaults to hostExternal.",
              "type": "string",
              "enum": [
                "pod",
                "hostInternal",
                "hostExternal"
              ]
            },
            "tlsAccess": {
              "description": "TLSAccessType is the type of network address to use for Aerospike TLS access address. Defaults to hostInternal.",
              "type": "string",
              "enum": [
                "pod",
                "hostInternal",
                "hostExternal"
              ]
            },
            "tlsAlternateAccess": {
              "description": "TLSAlternateAccessType is the type of network address to use for Aerospike TLS alternate access address. Defaults to hostExternal.",
              "type": "string",
              "enum": [
                "pod",
                "hostInternal",
                "hostExternal"
              ]
            }
          },
          "additionalProperties": false
        },
        "image": {
          "description": "Aerospike server image",
          "type": "string"
        },
        "multiPodPerHost": {
          "description": "If set true then multiple pods can be created per Kubernetes Node. This will create a NodePort service for each Pod. NodePort, as the name implies, opens a specific port on all the Kubernetes Nodes , and any traffic that is sent to this port is forwarded to the service. Here service picks a random port in range (30000-32767), so these port should be open. \n If set false then only single pod can be created per Kubernetes Node. This will create Pods using hostPort setting. The container port will be exposed to the external network at \u003chostIP\u003e:\u003chostPort\u003e, where the hostIP is the IP address of the Kubernetes Node where the container is running and the hostPort is the port requested by the user.",
          "type": "boolean"
        },
        "podSpec": {
          "description": "Additional configuration for create Aerospike pods.",
          "type": "object",
          "properties": {
            "sidecars": {
              "description": "Sidecars to add to pods.",
              "type": "array",
              "items": {
                "description": "A single application container that you want to run within a pod.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "args": {
                    "description": "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "command": {
                    "description": "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "env": {
                    "description": "List of environment variables to set in the container. Cannot be updated.",
                    "type": "array",
                    "items": {
                      "description": "EnvVar represents an environment variable present in a Container.",
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "name": {
                          "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
                          "type": "string"
                        },
                        "value": {
                          "description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".",
                          "type": "string"
                        },
                        "valueFrom": {
                          "description": "Source for the environment variable's value. Cannot be used if value is not empty.",
                          "type": "object",
                          "properties": {
                            "configMapKeyRef": {
                              "description": "Selects a key of a ConfigMap.",
                              "type": "object",
                              "required": [
                                "key"
                              ],
                              "properties": {
                                "key": {
                                  "description": "The key to select.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                  "type": "string"
                                },
                                "optional": {
                                  "description": "Specify whether the ConfigMap or its key must be defined",
                                  "type": "boolean"
                                }
                              },
                              "additionalProperties": false
                            },
                            "fieldRef": {
                              "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.",
                              "type": "object",
                              "required": [
                                "fieldPath"
                              ],
                              "properties": {
                                "apiVersion": {
                                  "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                                  "type": "string"
                                },
                                "fieldPath": {
                                  "description": "Path of the field to select in the specified API version.",
                                  "type": "string"
                                }
                              },
                              "additionalProperties": false
                            },
                            "resourceFieldRef": {
                              "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.",
                              "type": "object",
                              "required": [
                                "resource"
                              ],
                              "properties": {
                                "containerName": {
                                  "description": "Container name: required for volumes, optional for env vars",
                                  "type": "string"
                                },
                                "divisor": {
                                  "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                                  "type": "string"
                                },
                                "resource": {
                                  "description": "Required: resource to select",
                                  "type": "string"
                                }
                              },
                              "additionalProperties": false
                            },
                            "secretKeyRef": {
                              "description": "Selects a key of a secret in the pod's namespace",
                              "type": "object",
                              "required": [
                                "key"
                              ],
                              "properties": {
                                "key": {
                                  "description": "The key of the secret to select from.  Must be a valid secret key.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                  "type": "string"
                                },
                                "optional": {
                                  "description": "Specify whether the Secret or its key must be defined",
                                  "type": "boolean"
                                }
                              },
                              "additionalProperties": false
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "envFrom": {
                    "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
                    "type": "array",
                    "items": {
                      "description": "EnvFromSource represents the source of a set of ConfigMaps",
                      "type": "object",
                      "properties": {
                        "configMapRef": {
                          "description": "The ConfigMap to select from",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                              "type": "string"
                            },
                            "optional": {
                              "description": "Specify whether the ConfigMap must be defined",
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "prefix": {
                          "description": "An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.",
                          "type": "string"
                        },
                        "secretRef": {
                          "description": "The Secret to select from",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                              "type": "string"
                            },
                            "optional": {
                              "description": "Specify whether the Secret must be defined",
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "image": {
                    "description": "Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.",
                    "type": "string"
                  },
                  "imagePullPolicy": {
                    "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
                    "type": "string"
                  },
                  "lifecycle": {
                    "description": "Actions that the management system should take in response to container lifecycle events. Cannot be updated.",
                    "type": "object",
                    "properties": {
                      "postStart": {
                        "description": "PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
                        "type": "object",
                        "properties": {
                          "exec": {
                            "description": "One and only one of the following should be specified. Exec specifies the action to take.",
                            "type": "object",
                            "properties": {
                              "command": {
                                "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            },
                            "additionalProperties": false
                          },
                          "httpGet": {
                            "description": "HTTPGet specifies the http request to perform.",
                            "type": "object",
                            "required": [
                              "port"
                            ],
                            "properties": {
                              "host": {
                                "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                                "type": "string"
                              },
                              "httpHeaders": {
                                "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                "type": "array",
                                "items": {
                                  "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                  "type": "object",
                                  "required": [
                                    "name",
                                    "value"
                                  ],
                                  "properties": {
                                    "name": {
                                      "description": "The header field name",
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "The header field value",
                                      "type": "string"
                                    }
                                  },
                                  "additionalProperties": false
                                }
                              },
                              "path": {
                                "description": "Path to access on the HTTP server.",
                                "type": "string"
                              },
                              "port": {
                                "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                "anyOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "integer"
                                  }
                                ]
                              },
                              "scheme": {
                                "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                                "type": "string"
                              }
                            },
                            "additionalProperties": false
                          },
                          "tcpSocket": {
                            "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook",
                            "type": "object",
                            "required": [
                              "port"
                            ],
                            "properties": {
                              "host": {
                                "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                "type": "string"
                              },
                              "port": {
                                "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                "anyOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "integer"
                                  }
                                ]
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "additionalProperties": false
                      },
                      "preStop": {
                        "description": "PreStop is called immediately before a container is terminated due to an API request or management event such as liveness probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
                        "type": "object",
                        "properties": {
                          "exec": {
                            "description": "One and only one of the following should be specified. Exec specifies the action to take.",
                            "type": "object",
                            "properties": {
                              "command": {
                                "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            },
                            "additionalProperties": false
                          },
                          "httpGet": {
                            "description": "HTTPGet specifies the http request to perform.",
                            "type": "object",
                            "required": [
                              "port"
                            ],
                            "properties": {
                              "host": {
                                "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                                "type": "string"
                              },
                              "httpHeaders": {
                                "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                "type": "array",
                                "items": {
                                  "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                  "type": "object",
                                  "required": [
                                    "name",
                                    "value"
                                  ],
                                  "properties": {
                                    "name": {
                                      "description": "The header field name",
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "The header field value",
                                      "type": "string"
                                    }
                                  },
                                  "additionalProperties": false
                                }
                              },
                              "path": {
                                "description": "Path to access on the HTTP server.",
                                "type": "string"
                              },
                              "port": {
                                "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                "anyOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "integer"
                                  }
                                ]
                              },
                              "scheme": {
                                "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                                "type": "string"
                              }
                            },
                            "additionalProperties": false
                          },
                          "tcpSocket": {
                            "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook",
                            "type": "object",
                            "required": [
                              "port"
                            ],
                            "properties": {
                              "host": {
                                "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                "type": "string"
                              },
                              "port": {
                                "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                                "anyOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "integer"
                                  }
                                ]
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  },
                  "livenessProbe": {
                    "description": "Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                    "type": "object",
                    "properties": {
                      "exec": {
                        "description": "One and only one of the following should be specified. Exec specifies the action to take.",
                        "type": "object",
                        "properties": {
                          "command": {
                            "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        },
                        "additionalProperties": false
                      },
                      "failureThreshold": {
                        "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "httpGet": {
                        "description": "HTTPGet specifies the http request to perform.",
                        "type": "object",
                        "required": [
                          "port"
                        ],
                        "properties": {
                          "host": {
                            "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                            "type": "string"
                          },
                          "httpHeaders": {
                            "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                            "type": "array",
                            "items": {
                              "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                              "type": "object",
                              "required": [
                                "name",
                                "value"
                              ],
                              "properties": {
                                "name": {
                                  "description": "The header field name",
                                  "type": "string"
                                },
                                "value": {
                                  "description": "The header field value",
                                  "type": "string"
                                }
                              },
                              "additionalProperties": false
                            }
                          },
                          "path": {
                            "description": "Path to access on the HTTP server.",
                            "type": "string"
                          },
                          "port": {
                            "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "integer"
                              }
                            ]
                          },
                          "scheme": {
                            "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                            "type": "string"
                          }
                        },
                        "additionalProperties": false
                      },
                      "initialDelaySeconds": {
                        "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                        "type": "integer",
                        "format": "int32"
                      },
                      "periodSeconds": {
                        "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "successThreshold": {
                        "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "tcpSocket": {
                        "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook",
                        "type": "object",
                        "required": [
                          "port"
                        ],
                        "properties": {
                          "host": {
                            "description": "Optional: Host name to connect to, defaults to the pod IP.",
                            "type": "string"
                          },
                          "port": {
                            "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "integer"
                              }
                            ]
                          }
                        },
                        "additionalProperties": false
                      },
                      "timeoutSeconds": {
                        "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                        "type": "integer",
                        "format": "int32"
                      }
                    },
                    "additionalProperties": false
                  },
                  "name": {
                    "description": "Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.",
                    "type": "string"
                  },
                  "ports": {
                    "description": "List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Cannot be updated.",
                    "type": "array",
                    "items": {
                      "description": "ContainerPort represents a network port in a single container.",
                      "type": "object",
                      "required": [
                        "containerPort"
                      ],
                      "properties": {
                        "containerPort": {
                          "description": "Number of port to expose on the pod's IP address. This must be a valid port number, 0 \u003c x \u003c 65536.",
                          "type": "integer",
                          "format": "int32"
                        },
                        "hostIP": {
                          "description": "What host IP to bind the external port to.",
                          "type": "string"
                        },
                        "hostPort": {
                          "description": "Number of port to expose on the host. If specified, this must be a valid port number, 0 \u003c x \u003c 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.",
                          "type": "integer",
                          "format": "int32"
                        },
                        "name": {
                          "description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.",
                          "type": "string"
                        },
                        "protocol": {
                          "description": "Protocol for port. Must be UDP, TCP, or SCTP. Defaults to \"TCP\".",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "readinessProbe": {
                    "description": "Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                    "type": "object",
                    "properties": {
                      "exec": {
                        "description": "One and only one of the following should be specified. Exec specifies the action to take.",
                        "type": "object",
                        "properties": {
                          "command": {
                            "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        },
                        "additionalProperties": false
                      },
                      "failureThreshold": {
                        "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "httpGet": {
                        "description": "HTTPGet specifies the http request to perform.",
                        "type": "object",
                        "required": [
                          "port"
                        ],
                        "properties": {
                          "host": {
                            "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                            "type": "string"
                          },
                          "httpHeaders": {
                            "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                            "type": "array",
                            "items": {
                              "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                              "type": "object",
                              "required": [
                                "name",
                                "value"
                              ],
                              "properties": {
                                "name": {
                                  "description": "The header field name",
                                  "type": "string"
                                },
                                "value": {
                                  "description": "The header field value",
                                  "type": "string"
                                }
                              },
                              "additionalProperties": false
                            }
                          },
                          "path": {
                            "description": "Path to access on the HTTP server.",
                            "type": "string"
                          },
                          "port": {
                            "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "integer"
                              }
                            ]
                          },
                          "scheme": {
                            "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                            "type": "string"
                          }
                        },
                        "additionalProperties": false
                      },
                      "initialDelaySeconds": {
                        "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                        "type": "integer",
                        "format": "int32"
                      },
                      "periodSeconds": {
                        "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "successThreshold": {
                        "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "tcpSocket": {
                        "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook",
                        "type": "object",
                        "required": [
                          "port"
                        ],
                        "properties": {
                          "host": {
                            "description": "Optional: Host name to connect to, defaults to the pod IP.",
                            "type": "string"
                          },
                          "port": {
                            "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "integer"
                              }
                            ]
                          }
                        },
                        "additionalProperties": false
                      },
                      "timeoutSeconds": {
                        "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                        "type": "integer",
                        "format": "int32"
                      }
                    },
                    "additionalProperties": false
                  },
                  "resources": {
                    "description": "Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                    "type": "object",
                    "properties": {
                      "limits": {
                        "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "requests": {
                        "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "additionalProperties": false
                  },
                  "securityContext": {
                    "description": "Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
                    "type": "object",
                    "properties": {
                      "allowPrivilegeEscalation": {
                        "description": "AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN",
                        "type": "boolean"
                      },
                      "capabilities": {
                        "description": "The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.",
                        "type": "object",
                        "properties": {
                          "add": {
                            "description": "Added capabilities",
                            "type": "array",
                            "items": {
                              "description": "Capability represent POSIX capabilities type",
                              "type": "string"
                            }
                          },
                          "drop": {
                            "description": "Removed capabilities",
                            "type": "array",
                            "items": {
                              "description": "Capability represent POSIX capabilities type",
                              "type": "string"
                            }
                          }
                        },
                        "additionalProperties": false
                      },
                      "privileged": {
                        "description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.",
                        "type": "boolean"
                      },
                      "procMount": {
                        "description": "procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.",
                        "type": "string"
                      },
                      "readOnlyRootFilesystem": {
                        "description": "Whether this container has a read-only root filesystem. Default is false.",
                        "type": "boolean"
                      },
                      "runAsGroup": {
                        "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                        "type": "integer",
                        "format": "int64"
                      },
                      "runAsNonRoot": {
                        "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                        "type": "boolean"
                      },
                      "runAsUser": {
                        "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                        "type": "integer",
                        "format": "int64"
                      },
                      "seLinuxOptions": {
                        "description": "The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                        "type": "object",
                        "properties": {
                          "level": {
                            "description": "Level is SELinux level label that applies to the container.",
                            "type": "string"
                          },
                          "role": {
                            "description": "Role is a SELinux role label that applies to the container.",
                            "type": "string"
                          },
                          "type": {
                            "description": "Type is a SELinux type label that applies to the container.",
                            "type": "string"
                          },
                          "user": {
                            "description": "User is a SELinux user label that applies to the container.",
                            "type": "string"
                          }
                        },
                        "additionalProperties": false
                      },
                      "windowsOptions": {
                        "description": "Windows security options.",
                        "type": "object",
                        "properties": {
                          "gmsaCredentialSpec": {
                            "description": "GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field. This field is alpha-level and is only honored by servers that enable the WindowsGMSA feature flag.",
                            "type": "string"
                          },
                          "gmsaCredentialSpecName": {
                            "description": "GMSACredentialSpecName is the name of the GMSA credential spec to use. This field is alpha-level and is only honored by servers that enable the WindowsGMSA feature flag.",
                            "type": "string"
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  },
                  "stdin": {
                    "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.",
                    "type": "boolean"
                  },
                  "stdinOnce": {
                    "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false",
                    "type": "boolean"
                  },
                  "terminationMessagePath": {
                    "description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
                    "type": "string"
                  },
                  "terminationMessagePolicy": {
                    "description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.",
                    "type": "string"
                  },
                  "tty": {
                    "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
                    "type": "boolean"
                  },
                  "volumeDevices": {
                    "description": "volumeDevices is the list of block devices to be used by the container. This is a beta feature.",
                    "type": "array",
                    "items": {
                      "description": "volumeDevice describes a mapping of a raw block device within a container.",
                      "type": "object",
                      "required": [
                        "devicePath",
                        "name"
                      ],
                      "properties": {
                        "devicePath": {
                          "description": "devicePath is the path inside of the container that the device will be mapped to.",
                          "type": "string"
                        },
                        "name": {
                          "description": "name must match the name of a persistentVolumeClaim in the pod",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "volumeMounts": {
                    "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
                    "type": "array",
                    "items": {
                      "description": "VolumeMount describes a mounting of a Volume within a container.",
                      "type": "object",
                      "required": [
                        "mountPath",
                        "name"
                      ],
                      "properties": {
                        "mountPath": {
                          "description": "Path within the container at which the volume should be mounted.  Must not contain ':'.",
                          "type": "string"
                        },
                        "mountPropagation": {
                          "description": "mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.",
                          "type": "string"
                        },
                        "name": {
                          "description": "This must match the Name of a Volume.",
                          "type": "string"
                        },
                        "readOnly": {
                          "description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.",
                          "type": "boolean"
                        },
                        "subPath": {
                          "description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).",
                          "type": "string"
                        },
                        "subPathExpr": {
                          "description": "Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to \"\" (volume's root). SubPathExpr and SubPath are mutually exclusive. This field is beta in 1.15.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "workingDir": {
                    "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "additionalProperties": false
        },
        "rackConfig": {
          "description": "RackConfig Configures the operator to deploy rack aware Aerospike cluster. Pods will be deployed in given racks based on given configuration",
          "type": "object",
          "required": [
            "racks"
          ],
          "properties": {
            "namespaces": {
              "description": "List of Aerospike namespaces for which rack feature will be enabled",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "racks": {
              "description": "Racks is the list of all racks",
              "type": "array",
              "items": {
                "description": "Rack specifies single rack config",
                "type": "object",
                "required": [
                  "effectiveAerospikeConfig",
                  "effectiveStorage",
                  "id"
                ],
                "properties": {
                  "aerospikeConfig": {
                    "description": "AerospikeConfig overrides the common AerospikeConfig for this Rack. This is merged with global Aerospike config."
                  },
                  "effectiveAerospikeConfig": {
                    "description": "Effective/operative Aerospike config. The resultant is merge of rack Aerospike config and the global Aerospike config"
                  },
                  "effectiveStorage": {
                    "description": "Effective/operative storage. The resultant is user input if specified else global storage",
                    "type": "object",
                    "properties": {
                      "blockVolumePolicy": {
                        "description": "BlockVolumePolicy contains default policies for block volumes.",
                        "type": "object",
                        "required": [
                          "effectiveCascadeDelete"
                        ],
                        "properties": {
                          "cascadeDelete": {
                            "description": "CascadeDelete determines if the persistent volumes are deleted after the pod this volume binds to is terminated and removed from the cluster.",
                            "type": "boolean"
                          },
                          "effectiveCascadeDelete": {
                            "description": "Effective/operative value to use for cascade delete after applying defaults.",
                            "type": "boolean"
                          },
                          "effectiveInitMethod": {
                            "description": "Effective/operative value to use as the volume init method after applying defaults.",
                            "type": "string",
                            "enum": [
                              "none",
                              "dd",
                              "blkdiscard",
                              "deleteFiles"
                            ]
                          },
                          "initMethod": {
                            "description": "InitMethod determines how volumes attached to Aerospike server pods are initialized when the pods comes up the first time. Defaults to \"none\".",
                            "type": "string",
                            "enum": [
                              "none",
                              "dd",
                              "blkdiscard",
                              "deleteFiles"
                            ]
                          }
                        },
                        "additionalProperties": false
                      },
                      "filesystemVolumePolicy": {
                        "description": "FileSystemVolumePolicy contains default policies for filesystem volumes.",
                        "type": "object",
                        "required": [
                          "effectiveCascadeDelete"
                        ],
                        "properties": {
                          "cascadeDelete": {
                            "description": "CascadeDelete determines if the persistent volumes are deleted after the pod this volume binds to is terminated and removed from the cluster.",
                            "type": "boolean"
                          },
                          "effectiveCascadeDelete": {
                            "description": "Effective/operative value to use for cascade delete after applying defaults.",
                            "type": "boolean"
                          },
                          "effectiveInitMethod": {
                            "description": "Effective/operative value to use as the volume init method after applying defaults.",
                            "type": "string",
                            "enum": [
                              "none",
                              "dd",
                              "blkdiscard",
                              "deleteFiles"
                            ]
                          },
                          "initMethod": {
                            "description": "InitMethod determines how volumes attached to Aerospike server pods are initialized when the pods comes up the first time. Defaults to \"none\".",
                            "type": "string",
                            "enum": [
                              "none",
                              "dd",
                              "blkdiscard",
                              "deleteFiles"
                            ]
                          }
                        },
                        "additionalProperties": false
                      },
                      "volumes": {
                        "description": "Volumes list to attach to created pods.",
                        "type": "array",
                        "items": {
                          "description": "AerospikePersistentVolumeSpec describes a persistent volume to claim and attach to Aerospike pods.",
                          "type": "object",
                          "required": [
                            "effectiveCascadeDelete",
                            "path",
                            "sizeInGB",
                            "storageClass",
                            "volumeMode"
                          ],
                          "properties": {
                            "cascadeDelete": {
                              "description": "CascadeDelete determines if the persistent volumes are deleted after the pod this volume binds to is terminated and removed from the cluster.",
                              "type": "boolean"
                            },
                            "configMap": {
                              "description": "Name of the configmap for 'configmap' mode volumes.",
                              "type": "string"
                            },
                            "effectiveCascadeDelete": {
                              "description": "Effective/operative value to use for cascade delete after applying defaults.",
                              "type": "boolean"
                            },
                            "effectiveInitMethod": {
                              "description": "Effective/operative value to use as the volume init method after applying defaults.",
                              "type": "string",
                              "enum": [
                                "none",
                                "dd",
                                "blkdiscard",
                                "deleteFiles"
                              ]
                            },
                            "initMethod": {
                              "description": "InitMethod determines how volumes attached to Aerospike server pods are initialized when the pods comes up the first time. Defaults to \"none\".",
                              "type": "string",
                              "enum": [
                                "none",
                                "dd",
                                "blkdiscard",
                                "deleteFiles"
                              ]
                            },
                            "path": {
                              "description": "Path is the device path where block 'block' mode volumes are attached to the pod or the mount path for 'filesystem' mode.",
                              "type": "string"
                            },
                            "sizeInGB": {
                              "description": "SizeInGB Size of volume in GB.",
                              "type": "integer",
                              "format": "int32"
                            },
                            "storageClass": {
                              "description": "StorageClass should be pre-created by user.",
                              "type": "string"
                            },
                            "volumeMode": {
                              "description": "VolumeMode specifies if the volume is block/raw or a filesystem.",
                              "type": "string",
                              "enum": [
                                "filesystem",
                                "block",
                                "configMap"
                              ]
                            }
                          },
                          "additionalProperties": false
                        }
                      }
                    },
                    "additionalProperties": false
                  },
                  "id": {
                    "description": "Identifier for the rack",
                    "type": "integer"
                  },
                  "nodeName": {
                    "description": "K8s Node name for setting rack affinity. Rack pods will be deployed in given k8s Node",
                    "type": "string"
                  },
                  "rackLabel": {
                    "description": "Racklabel for setting rack affinity. Rack pods will be deployed in k8s nodes having rackLable {aerospike.com/rack-label: \u003crack-label\u003e}",
                    "type": "string"
                  },
                  "region": {
                    "description": "Region name for setting rack affinity. Rack pods will be deployed to given Region",
                    "type": "string"
                  },
                  "storage": {
                    "description": "Storage specify persistent storage to use for the pods in this rack. This value overwrites the global storage config",
                    "type": "object",
                    "properties": {
                      "blockVolumePolicy": {
                        "description": "BlockVolumePolicy contains default policies for block volumes.",
                        "type": "object",
                        "required": [
                          "effectiveCascadeDelete"
                        ],
                        "properties": {
                          "cascadeDelete": {
                            "description": "CascadeDelete determines if the persistent volumes are deleted after the pod this volume binds to is terminated and removed from the cluster.",
                            "type": "boolean"
                          },
                          "effectiveCascadeDelete": {
                            "description": "Effective/operative value to use for cascade delete after applying defaults.",
                            "type": "boolean"
                          },
                          "effectiveInitMethod": {
                            "description": "Effective/operative value to use as the volume init method after applying defaults.",
                            "type": "string",
                            "enum": [
                              "none",
                              "dd",
                              "blkdiscard",
                              "deleteFiles"
                            ]
                          },
                          "initMethod": {
                            "description": "InitMethod determines how volumes attached to Aerospike server pods are initialized when the pods comes up the first time. Defaults to \"none\".",
                            "type": "string",
                            "enum": [
                              "none",
                              "dd",
                              "blkdiscard",
                              "deleteFiles"
                            ]
                          }
                        },
                        "additionalProperties": false
                      },
                      "filesystemVolumePolicy": {
                        "description": "FileSystemVolumePolicy contains default policies for filesystem volumes.",
                        "type": "object",
                        "required": [
                          "effectiveCascadeDelete"
                        ],
                        "properties": {
                          "cascadeDelete": {
                            "description": "CascadeDelete determines if the persistent volumes are deleted after the pod this volume binds to is terminated and removed from the cluster.",
                            "type": "boolean"
                          },
                          "effectiveCascadeDelete": {
                            "description": "Effective/operative value to use for cascade delete after applying defaults.",
                            "type": "boolean"
                          },
                          "effectiveInitMethod": {
                            "description": "Effective/operative value to use as the volume init method after applying defaults.",
                            "type": "string",
                            "enum": [
                              "none",
                              "dd",
                              "blkdiscard",
                              "deleteFiles"
                            ]
                          },
                          "initMethod": {
                            "description": "InitMethod determines how volumes attached to Aerospike server pods are initialized when the pods comes up the first time. Defaults to \"none\".",
                            "type": "string",
                            "enum": [
                              "none",
                              "dd",
                              "blkdiscard",
                              "deleteFiles"
                            ]
                          }
                        },
                        "additionalProperties": false
                      },
                      "volumes": {
                        "description": "Volumes list to attach to created pods.",
                        "type": "array",
                        "items": {
                          "description": "AerospikePersistentVolumeSpec describes a persistent volume to claim and attach to Aerospike pods.",
                          "type": "object",
                          "required": [
                            "effectiveCascadeDelete",
                            "path",
                            "sizeInGB",
                            "storageClass",
                            "volumeMode"
                          ],
                          "properties": {
                            "cascadeDelete": {
                              "description": "CascadeDelete determines if the persistent volumes are deleted after the pod this volume binds to is terminated and removed from the cluster.",
                              "type": "boolean"
                            },
                            "configMap": {
                              "description": "Name of the configmap for 'configmap' mode volumes.",
                              "type": "string"
                            },
                            "effectiveCascadeDelete": {
                              "description": "Effective/operative value to use for cascade delete after applying defaults.",
                              "type": "boolean"
                            },
                            "effectiveInitMethod": {
                              "description": "Effective/operative value to use as the volume init method after applying defaults.",
                              "type": "string",
                              "enum": [
                                "none",
                                "dd",
                                "blkdiscard",
                                "deleteFiles"
                              ]
                            },
                            "initMethod": {
                              "description": "InitMethod determines how volumes attached to Aerospike server pods are initialized when the pods comes up the first time. Defaults to \"none\".",
                              "type": "string",
                              "enum": [
                                "none",
                                "dd",
                                "blkdiscard",
                                "deleteFiles"
                              ]
                            },
                            "path": {
                              "description": "Path is the device path where block 'block' mode volumes are attached to the pod or the mount path for 'filesystem' mode.",
                              "type": "string"
                            },
                            "sizeInGB": {
                              "description": "SizeInGB Size of volume in GB.",
                              "type": "integer",
                              "format": "int32"
                            },
                            "storageClass": {
                              "description": "StorageClass should be pre-created by user.",
                              "type": "string"
                            },
                            "volumeMode": {
                              "description": "VolumeMode specifies if the volume is block/raw or a filesystem.",
                              "type": "string",
                              "enum": [
                                "filesystem",
                                "block",
                                "configMap"
                              ]
                            }
                          },
                          "additionalProperties": false
                        }
                      }
                    },
                    "additionalProperties": false
                  },
                  "zone": {
                    "description": "Zone name for setting rack affinity. Rack pods will be deployed to given Zone",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "additionalProperties": false
        },
        "resources": {
          "description": "Define resources requests and limits for Aerospike Server Container. Please contact aerospike for proper sizing exercise Only Memory and Cpu resources can be given Resources.Limits should be more than Resources.Requests.",
          "type": "object",
          "properties": {
            "limits": {
              "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "requests": {
              "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false
        },
        "size": {
          "description": "Aerospike cluster size",
          "type": "integer",
          "format": "int32"
        },
        "storage": {
          "description": "Storage specify persistent storage to use for the Aerospike pods.",
          "type": "object",
          "properties": {
            "blockVolumePolicy": {
              "description": "BlockVolumePolicy contains default policies for block volumes.",
              "type": "object",
              "required": [
                "effectiveCascadeDelete"
              ],
              "properties": {
                "cascadeDelete": {
                  "description": "CascadeDelete determines if the persistent volumes are deleted after the pod this volume binds to is terminated and removed from the cluster.",
                  "type": "boolean"
                },
                "effectiveCascadeDelete": {
                  "description": "Effective/operative value to use for cascade delete after applying defaults.",
                  "type": "boolean"
                },
                "effectiveInitMethod": {
                  "description": "Effective/operative value to use as the volume init method after applying defaults.",
                  "type": "string",
                  "enum": [
                    "none",
                    "dd",
                    "blkdiscard",
                    "deleteFiles"
                  ]
                },
                "initMethod": {
                  "description": "InitMethod determines how volumes attached to Aerospike server pods are initialized when the pods comes up the first time. Defaults to \"none\".",
                  "type": "string",
                  "enum": [
                    "none",
                    "dd",
                    "blkdiscard",
                    "deleteFiles"
                  ]
                }
              },
              "additionalProperties": false
            },
            "filesystemVolumePolicy": {
              "description": "FileSystemVolumePolicy contains default policies for filesystem volumes.",
              "type": "object",
              "required": [
                "effectiveCascadeDelete"
              ],
              "properties": {
                "cascadeDelete": {
                  "description": "CascadeDelete determines if the persistent volumes are deleted after the pod this volume binds to is terminated and removed from the cluster.",
                  "type": "boolean"
                },
                "effectiveCascadeDelete": {
                  "description": "Effective/operative value to use for cascade delete after applying defaults.",
                  "type": "boolean"
                },
                "effectiveInitMethod": {
                  "description": "Effective/operative value to use as the volume init method after applying defaults.",
                  "type": "string",
                  "enum": [
                    "none",
                    "dd",
                    "blkdiscard",
                    "deleteFiles"
                  ]
                },
                "initMethod": {
                  "description": "InitMethod determines how volumes attached to Aerospike server pods are initialized when the pods comes up the first time. Defaults to \"none\".",
                  "type": "string",
                  "enum": [
                    "none",
                    "dd",
                    "blkdiscard",
                    "deleteFiles"
                  ]
                }
              },
              "additionalProperties": false
            },
            "volumes": {
              "description": "Volumes list to attach to created pods.",
              "type": "array",
              "items": {
                "description": "AerospikePersistentVolumeSpec describes a persistent volume to claim and attach to Aerospike pods.",
                "type": "object",
                "required": [
                  "effectiveCascadeDelete",
                  "path",
                  "sizeInGB",
                  "storageClass",
                  "volumeMode"
                ],
                "properties": {
                  "cascadeDelete": {
                    "description": "CascadeDelete determines if the persistent volumes are deleted after the pod this volume binds to is terminated and removed from the cluster.",
                    "type": "boolean"
                  },
                  "configMap": {
                    "description": "Name of the configmap for 'configmap' mode volumes.",
                    "type": "string"
                  },
                  "effectiveCascadeDelete": {
                    "description": "Effective/operative value to use for cascade delete after applying defaults.",
                    "type": "boolean"
                  },
                  "effectiveInitMethod": {
                    "description": "Effective/operative value to use as the volume init method after applying defaults.",
                    "type": "string",
                    "enum": [
                      "none",
                      "dd",
                      "blkdiscard",
                      "deleteFiles"
                    ]
                  },
                  "initMethod": {
                    "description": "InitMethod determines how volumes attached to Aerospike server pods are initialized when the pods comes up the first time. Defaults to \"none\".",
                    "type": "string",
                    "enum": [
                      "none",
                      "dd",
                      "blkdiscard",
                      "deleteFiles"
                    ]
                  },
                  "path": {
                    "description": "Path is the device path where block 'block' mode volumes are attached to the pod or the mount path for 'filesystem' mode.",
                    "type": "string"
                  },
                  "sizeInGB": {
                    "description": "SizeInGB Size of volume in GB.",
                    "type": "integer",
                    "format": "int32"
                  },
                  "storageClass": {
                    "description": "StorageClass should be pre-created by user.",
                    "type": "string"
                  },
                  "volumeMode": {
                    "description": "VolumeMode specifies if the volume is block/raw or a filesystem.",
                    "type": "string",
                    "enum": [
                      "filesystem",
                      "block",
                      "configMap"
                    ]
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "additionalProperties": false
        },
        "validationPolicy": {
          "description": "ValidationPolicy controls validation of the Aerospike cluster resource.",
          "type": "object",
          "required": [
            "skipWorkDirValidate",
            "skipXdrDlogFileValidate"
          ],
          "properties": {
            "skipWorkDirValidate": {
              "description": "skipWorkDirValidate validates that Aerospike work directory is mounted on a persistent file storage. Defaults to false.",
              "type": "boolean"
            },
            "skipXdrDlogFileValidate": {
              "description": "ValidateXdrDigestLogFile validates that xdr digest log file is mounted on a persistent file storage. Defaults to false.",
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "AerospikeClusterStatus defines the observed state of AerospikeCluster",
      "type": "object",
      "required": [
        "pods"
      ],
      "properties": {
        "pods": {
          "description": "Pods has Aerospike specific status of the pods. This is map instead of the conventional map as list convention to allow each pod to patch update its own status. The map key is the name of the pod.",
          "type": "object",
          "additionalProperties": {
            "description": "AerospikePodStatus contains the Aerospike specific status of the Aerospike serverpods.",
            "type": "object",
            "required": [
              "aerospikeConfigHash",
              "image",
              "initializedVolumePaths",
              "networkPolicyHash",
              "podIP",
              "podPort",
              "podSpecHash",
              "servicePort"
            ],
            "properties": {
              "aerospike": {
                "description": "Aerospike server instance summary for this pod.",
                "type": "object",
                "required": [
                  "clusterName",
                  "nodeID"
                ],
                "properties": {
                  "accessEndpoints": {
                    "description": "AccessEndpoints are the access endpoints for this pod.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "alternateAccessEndpoints": {
                    "description": "AlternateAccessEndpoints are the alternate access endpoints for this pod.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "clusterName": {
                    "description": "ClusterName is the name of the Aerospike cluster this pod belongs to.",
                    "type": "string"
                  },
                  "nodeID": {
                    "description": "NodeID is the unique Aerospike ID for this pod.",
                    "type": "string"
                  },
                  "rackID": {
                    "description": "RackID of rack to which this node belongs",
                    "type": "integer"
                  },
                  "tlsAccessEndpoints": {
                    "description": "TLSAccessEndpoints are the TLS access endpoints for this pod.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "tlsAlternateAccessEndpoints": {
                    "description": "TLSAlternateAccessEndpoints are the alternate TLS access endpoints for this pod.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "tlsName": {
                    "description": "TLSName is the TLS name of this pod in the Aerospike cluster.",
                    "type": "string"
                  }
                }
              },
              "aerospikeConfigHash": {
                "description": "AerospikeConfigHash is ripemd160 hash of aerospikeConfig used by this pod",
                "type": "string"
              },
              "hostExternalIP": {
                "description": "HostExternalIP of the K8s host this pod is scheduled on.",
                "type": "string"
              },
              "hostInternalIP": {
                "description": "HostInternalIP of the K8s host this pod is scheduled on.",
                "type": "string"
              },
              "image": {
                "description": "Image is the Aerospike image this pod is running.",
                "type": "string"
              },
              "initializedVolumePaths": {
                "description": "InitializedVolumePaths is the list of device path that have already been initialized.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "networkPolicyHash": {
                "description": "NetworkPolicyHash is ripemd160 hash of NetworkPolicy used by this pod",
                "type": "string"
              },
              "podIP": {
                "description": "PodIP in the K8s network.",
                "type": "string"
              },
              "podPort": {
                "description": "PodPort is the port K8s intenral Aerospike clients can connect to.",
                "type": "integer"
              },
              "podSpecHash": {
                "description": "PodSpecHash is ripemd160 hash of PodSpec used by this pod",
                "type": "string"
              },
              "servicePort": {
                "description": "ServicePort is the port Aerospike clients outside K8s can connect to.",
                "type": "integer",
                "format": "int32"
              }
            }
          }
        }
      },
      "additionalProperties": false
    }
  }
}
