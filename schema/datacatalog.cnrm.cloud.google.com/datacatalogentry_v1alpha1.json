{
  "description": "DataCatalogEntry is the Schema for the DataCatalogEntry API",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "DataCatalogEntrySpec defines the desired state of DataCatalogEntry",
      "type": "object",
      "required": [
        "entryGroupRef"
      ],
      "properties": {
        "businessContext": {
          "description": "Business Context of the entry. Not supported for BigQuery datasets",
          "type": "object",
          "properties": {
            "contacts": {
              "description": "Contact people for the entry.",
              "type": "object",
              "properties": {
                "people": {
                  "description": "The list of contact people for the entry.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "designation": {
                        "description": "Designation of the person, for example, Data Steward.",
                        "type": "string"
                      },
                      "email": {
                        "description": "Email of the person in the format of `john.doe@xyz`, `\u003cjohn.doe@xyz\u003e`, or `John Doe\u003cjohn.doe@xyz\u003e`.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                }
              },
              "additionalProperties": false
            },
            "entryOverview": {
              "description": "Entry overview fields for rich text descriptions of entries.",
              "type": "object",
              "properties": {
                "overview": {
                  "description": "Entry overview with support for rich text.\n\n The overview must only contain Unicode characters, and should be\n formatted using HTML.\n The maximum length is 10 MiB as this value holds HTML descriptions\n including encoded images. The maximum length of the text without images\n is 100 KiB.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "cloudBigtableSystemSpec": {
          "description": "Specification that applies to Cloud Bigtable system. Only settable when `integrated_system` is equal to `CLOUD_BIGTABLE`",
          "type": "object",
          "properties": {
            "instanceDisplayName": {
              "description": "Display name of the Instance. This is user specified and different from the resource name.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "dataSourceConnectionSpec": {
          "description": "Specification that applies to a data source connection. Valid only for entries with the `DATA_SOURCE_CONNECTION` type.",
          "type": "object",
          "properties": {
            "bigqueryConnectionSpec": {
              "description": "Output only. Fields specific to BigQuery connections.",
              "type": "object",
              "properties": {
                "cloudSQL": {
                  "description": "Specification for the BigQuery connection to a Cloud SQL instance.",
                  "type": "object",
                  "properties": {
                    "database": {
                      "description": "Database name.",
                      "type": "string"
                    },
                    "instanceID": {
                      "description": "Cloud SQL instance ID in the format of `project:location:instance`.",
                      "type": "string"
                    },
                    "type": {
                      "description": "Type of the Cloud SQL database.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "connectionType": {
                  "description": "The type of the BigQuery connection.",
                  "type": "string"
                },
                "hasCredential": {
                  "description": "True if there are credentials attached to the BigQuery connection; false otherwise.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "databaseTableSpec": {
          "description": "Specification that applies to a table resource. Valid only for entries with the `TABLE` or `EXPLORE` type.",
          "type": "object",
          "properties": {
            "databaseViewSpec": {
              "description": "Spec what aplies to tables that are actually views. Not set for \"real\" tables.",
              "type": "object",
              "properties": {
                "baseTable": {
                  "description": "Name of a singular table this view reflects one to one.",
                  "type": "string"
                },
                "sqlQuery": {
                  "description": "SQL query used to generate this view.",
                  "type": "string"
                },
                "viewType": {
                  "description": "Type of this view.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "type": {
              "description": "Type of this table.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "datasetSpec": {
          "description": "Specification that applies to a dataset.",
          "type": "object",
          "properties": {
            "vertexDatasetSpec": {
              "description": "Vertex AI Dataset specific fields",
              "type": "object",
              "properties": {
                "dataItemCount": {
                  "description": "The number of DataItems in this Dataset. Only apply for non-structured Dataset.",
                  "type": "integer",
                  "format": "int64"
                },
                "dataType": {
                  "description": "Type of the dataset.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "description": {
          "description": "Entry description that can consist of several sentences or paragraphs\n that describe entry contents.\n\n The description must not contain Unicode non-characters as well as C0\n and C1 control codes except tabs (HT), new lines (LF), carriage returns\n (CR), and page breaks (FF).\n The maximum size is 2000 bytes when encoded in UTF-8.\n Default value is an empty string.",
          "type": "string"
        },
        "displayName": {
          "description": "Display name of an entry.\n\n The maximum size is 500 bytes when encoded in UTF-8.\n Default value is an empty string.",
          "type": "string"
        },
        "entryGroupRef": {
          "description": "Reference to the entry group that contains the entry.",
          "type": "object",
          "oneOf": [
            {
              "required": [
                "name"
              ],
              "not": {
                "required": [
                  "external"
                ]
              }
            },
            {
              "required": [
                "external"
              ],
              "not": {
                "anyOf": [
                  {
                    "required": [
                      "name"
                    ]
                  },
                  {
                    "required": [
                      "namespace"
                    ]
                  }
                ]
              }
            }
          ],
          "properties": {
            "external": {
              "description": "A reference to an externally managed DataCatalogEntryGroup resource. Should be in the format \"projects/{{projectID}}/locations/{{location}}/entrygroups/{{entrygroupID}}\".",
              "type": "string"
            },
            "name": {
              "description": "The name of a DataCatalogEntryGroup resource.",
              "type": "string"
            },
            "namespace": {
              "description": "The namespace of a DataCatalogEntryGroup resource.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "featureOnlineStoreSpec": {
          "description": "FeatureonlineStore spec for Vertex AI Feature Store.",
          "type": "object"
        },
        "filesetSpec": {
          "description": "Specification that applies to a fileset resource. Valid only for entries with the `FILESET` type.",
          "type": "object",
          "properties": {
            "dataplexFileset": {
              "description": "Fields specific to a Dataplex fileset and present only in the Dataplex fileset entries.",
              "type": "object",
              "properties": {
                "dataplexSpec": {
                  "description": "Common Dataplex fields.",
                  "type": "object",
                  "properties": {
                    "asset": {
                      "description": "Fully qualified resource name of an asset in Dataplex, to which the underlying data source (Cloud Storage bucket or BigQuery dataset) of the entity is attached.",
                      "type": "string"
                    },
                    "compressionFormat": {
                      "description": "Compression format of the data, e.g., zip, gzip etc.",
                      "type": "string"
                    },
                    "dataFormat": {
                      "description": "Format of the data.",
                      "type": "object",
                      "properties": {
                        "avro": {
                          "description": "Schema in Avro JSON format.",
                          "type": "object",
                          "properties": {
                            "text": {
                              "description": "JSON source of the Avro schema.",
                              "type": "string"
                            }
                          },
                          "additionalProperties": false
                        },
                        "csv": {
                          "description": "Marks a CSV-encoded data source.",
                          "type": "object"
                        },
                        "orc": {
                          "description": "Marks an ORC-encoded data source.",
                          "type": "object"
                        },
                        "parquet": {
                          "description": "Marks a Parquet-encoded data source.",
                          "type": "object"
                        },
                        "protobuf": {
                          "description": "Schema in protocol buffer format.",
                          "type": "object",
                          "properties": {
                            "text": {
                              "description": "Protocol buffer source of the schema.",
                              "type": "string"
                            }
                          },
                          "additionalProperties": false
                        },
                        "thrift": {
                          "description": "Schema in Thrift format.",
                          "type": "object",
                          "properties": {
                            "text": {
                              "description": "Thrift IDL source of the schema.",
                              "type": "string"
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    },
                    "projectID": {
                      "description": "Project ID of the underlying Cloud Storage or BigQuery data. Note that this may not be the same project as the correspondingly Dataplex lake / zone / asset.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "gcsFilesetSpec": {
          "description": "Specification that applies to a Cloud Storage fileset. Valid only for entries with the `FILESET` type.",
          "type": "object",
          "required": [
            "filePatterns"
          ],
          "properties": {
            "filePatterns": {
              "description": "Required. Patterns to identify a set of files in Google Cloud Storage.\n\n For more information, see [Wildcard Names]\n (https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames).\n\n Note: Currently, bucket wildcards are not supported.\n\n Examples of valid `file_patterns`:\n\n  * `gs://bucket_name/dir/*`: matches all files in `bucket_name/dir`\n                              directory\n  * `gs://bucket_name/dir/**`: matches all files in `bucket_name/dir`\n                               and all subdirectories\n  * `gs://bucket_name/file*`: matches files prefixed by `file` in\n                              `bucket_name`\n  * `gs://bucket_name/??.txt`: matches files with two characters followed by\n                               `.txt` in `bucket_name`\n  * `gs://bucket_name/[aeiou].txt`: matches files that contain a single\n                                    vowel character followed by `.txt` in\n                                    `bucket_name`\n  * `gs://bucket_name/[a-m].txt`: matches files that contain `a`, `b`, ...\n                                  or `m` followed by `.txt` in `bucket_name`\n  * `gs://bucket_name/a/*/b`: matches all files in `bucket_name` that match\n                              the `a/*/b` pattern, such as `a/c/b`, `a/d/b`\n  * `gs://another_bucket/a.txt`: matches `gs://another_bucket/a.txt`\n\n You can combine wildcards to match complex sets of files, for example:\n\n `gs://bucket_name/[a-m]??.j*g`",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false
        },
        "labels": {
          "description": "Cloud labels attached to the entry.\n\n In Data Catalog, you can create and modify labels attached only to custom\n entries. Synced entries have unmodifiable labels that come from the source\n system.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "lookerSystemSpec": {
          "description": "Specification that applies to Looker sysstem. Only settable when `user_specified_system` is equal to `LOOKER`",
          "type": "object",
          "properties": {
            "parentInstanceDisplayName": {
              "description": "Name of the parent Looker Instance. Empty if it does not exist.",
              "type": "string"
            },
            "parentInstanceID": {
              "description": "ID of the parent Looker Instance. Empty if it does not exist. Example value: `someinstance.looker.com`",
              "type": "string"
            },
            "parentModelDisplayName": {
              "description": "Name of the parent Model. Empty if it does not exist.",
              "type": "string"
            },
            "parentModelID": {
              "description": "ID of the parent Model. Empty if it does not exist.",
              "type": "string"
            },
            "parentViewDisplayName": {
              "description": "Name of the parent View. Empty if it does not exist.",
              "type": "string"
            },
            "parentViewID": {
              "description": "ID of the parent View. Empty if it does not exist.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "modelSpec": {
          "description": "Model specification.",
          "type": "object",
          "properties": {
            "vertexModelSpec": {
              "description": "Specification for vertex model resources.",
              "type": "object",
              "properties": {
                "containerImageURI": {
                  "description": "URI of the Docker image to be used as the custom container for serving predictions.",
                  "type": "string"
                },
                "versionAliases": {
                  "description": "User provided version aliases so that a model version can be referenced via alias",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "versionDescription": {
                  "description": "The description of this version.",
                  "type": "string"
                },
                "versionID": {
                  "description": "The version ID of the model.",
                  "type": "string"
                },
                "vertexModelSourceInfo": {
                  "description": "Source of a Vertex model.",
                  "type": "object",
                  "properties": {
                    "copy": {
                      "description": "If this Model is copy of another Model. If true then [source_type][google.cloud.datacatalog.v1.VertexModelSourceInfo.source_type] pertains to the original.",
                      "type": "boolean"
                    },
                    "sourceType": {
                      "description": "Type of the model source.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "resourceID": {
          "description": "The DataCatalogEntry name. If not given, the metadata.name will be used.",
          "type": "string"
        },
        "routineSpec": {
          "description": "Specification that applies to a user-defined function or procedure. Valid only for entries with the `ROUTINE` type.",
          "type": "object",
          "properties": {
            "bigqueryRoutineSpec": {
              "description": "Fields specific for BigQuery routines.",
              "type": "object",
              "properties": {
                "importedLibraries": {
                  "description": "Paths of the imported libraries.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "additionalProperties": false
            },
            "definitionBody": {
              "description": "The body of the routine.",
              "type": "string"
            },
            "language": {
              "description": "The language the routine is written in. The exact value depends on the\n source system. For BigQuery routines, possible values are:\n\n * `SQL`\n * `JAVASCRIPT`",
              "type": "string"
            },
            "returnType": {
              "description": "Return type of the argument. The exact value depends on the source system and the language.",
              "type": "string"
            },
            "routineArguments": {
              "description": "Arguments of the routine.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "mode": {
                    "description": "Specifies whether the argument is input or output.",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the argument. A return argument of a function might not have a name.",
                    "type": "string"
                  },
                  "type": {
                    "description": "Type of the argument. The exact value depends on the source system and the language.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "routineType": {
              "description": "The type of the routine.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "schema": {
          "description": "Schema of the entry. An entry might not have any schema attached to it.",
          "type": "object",
          "properties": {
            "columns": {
              "description": "The unified GoogleSQL-like schema of columns.\n\n The overall maximum number of columns and nested columns is 10,000.\n The maximum nested depth is 15 levels.",
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "column",
                  "type"
                ],
                "properties": {
                  "column": {
                    "description": "Required. Name of the column.\n\n Must be a UTF-8 string without dots (.).\n The maximum size is 64 bytes.",
                    "type": "string"
                  },
                  "defaultValue": {
                    "description": "Optional. Default value for the column.",
                    "type": "string"
                  },
                  "description": {
                    "description": "Optional. Description of the column. Default value is an empty string.\n\n The description must be a UTF-8 string with the maximum size of 2000\n bytes.",
                    "type": "string"
                  },
                  "gcRule": {
                    "description": "Optional. Garbage collection policy for the column or column family. Applies to systems like Cloud Bigtable.",
                    "type": "string"
                  },
                  "highestIndexingType": {
                    "description": "Optional. Most important inclusion of this column.",
                    "type": "string"
                  },
                  "lookerColumnSpec": {
                    "description": "Looker specific column info of this column.",
                    "type": "object",
                    "properties": {
                      "type": {
                        "description": "Looker specific column type of this column.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "mode": {
                    "description": "Optional. A column's mode indicates whether values in this column are\n required, nullable, or repeated.\n\n Only `NULLABLE`, `REQUIRED`, and `REPEATED` values are supported.\n Default mode is `NULLABLE`.",
                    "type": "string"
                  },
                  "ordinalPosition": {
                    "description": "Optional. Ordinal position",
                    "type": "integer",
                    "format": "int32"
                  },
                  "rangeElementType": {
                    "description": "Optional. The subtype of the RANGE, if the type of this field is RANGE. If the type is RANGE, this field is required. Possible values for the field element type of a RANGE include: * DATE * DATETIME * TIMESTAMP",
                    "type": "object",
                    "required": [
                      "type"
                    ],
                    "properties": {
                      "type": {
                        "description": "Required. The type of a field element. See [ColumnSchema.type][google.cloud.datacatalog.v1.ColumnSchema.type].",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "subcolumns": {
                    "description": "Optional. Schema of sub-columns. A column can have zero or more sub-columns.",
                    "x-kubernetes-preserve-unknown-fields": true
                  },
                  "type": {
                    "description": "Required. Type of the column.\n\n Must be a UTF-8 string with the maximum size of 128 bytes.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "additionalProperties": false
        },
        "serviceSpec": {
          "description": "Specification that applies to a Service resource.",
          "type": "object",
          "properties": {
            "cloudBigtableInstanceSpec": {
              "description": "Specification that applies to Instance entries of `CLOUD_BIGTABLE` system.",
              "type": "object",
              "properties": {
                "cloudBigtableClusterSpecs": {
                  "description": "The list of clusters for the Instance.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "displayName": {
                        "description": "Name of the cluster.",
                        "type": "string"
                      },
                      "linkedResource": {
                        "description": "A link back to the parent resource, in this case Instance.",
                        "type": "string"
                      },
                      "location": {
                        "description": "Location of the cluster, typically a Cloud zone.",
                        "type": "string"
                      },
                      "type": {
                        "description": "Type of the resource. For a cluster this would be \"CLUSTER\".",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "sourceSystemTimestamps": {
          "description": "Timestamps from the underlying resource, not from the Data Catalog\n entry.\n\n Output only when the entry has a system listed in the `IntegratedSystem`\n enum. For entries with `user_specified_system`, this field is optional\n and defaults to an empty timestamp.",
          "type": "object",
          "properties": {
            "createTime": {
              "description": "Creation timestamp of the resource within the given system.",
              "type": "string"
            },
            "updateTime": {
              "description": "Timestamp of the last modification of the resource or its metadata within\n a given system.\n\n Note: Depending on the source system, not every modification updates this\n timestamp.\n For example, BigQuery timestamps every metadata modification but not data\n or permission changes.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "sqlDatabaseSystemSpec": {
          "description": "Specification that applies to a relational database system. Only settable when `user_specified_system` is equal to `SQL_DATABASE`",
          "type": "object",
          "properties": {
            "databaseVersion": {
              "description": "Version of the database engine.",
              "type": "string"
            },
            "instanceHost": {
              "description": "Host of the SQL database enum InstanceHost { UNDEFINED = 0; SELF_HOSTED = 1; CLOUD_SQL = 2; AMAZON_RDS = 3; AZURE_SQL = 4; } Host of the enclousing database instance.",
              "type": "string"
            },
            "sqlEngine": {
              "description": "SQL Database Engine. enum SqlEngine { UNDEFINED = 0; MY_SQL = 1; POSTGRE_SQL = 2; SQL_SERVER = 3; } Engine of the enclosing database instance.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "type": {
          "description": "The type of the entry.\n\n For details, see [`EntryType`](#entrytype).",
          "type": "string"
        },
        "usageSignal": {
          "description": "Resource usage statistics.",
          "type": "object",
          "properties": {
            "favoriteCount": {
              "description": "Favorite count in the source system.",
              "type": "integer",
              "format": "int64"
            },
            "updateTime": {
              "description": "The end timestamp of the duration of usage statistics.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "userSpecifiedSystem": {
          "description": "Indicates the entry's source system that Data Catalog doesn't\n automatically integrate with.\n\n The `user_specified_system` string has the following limitations:\n\n * Is case insensitive.\n * Must begin with a letter or underscore.\n * Can only contain letters, numbers, and underscores.\n * Must be at least 1 character and at most 64 characters long.",
          "type": "string"
        },
        "userSpecifiedType": {
          "description": "Custom entry type that doesn't match any of the values allowed for input\n and listed in the `EntryType` enum.\n\n When creating an entry, first check the type values in the enum.\n If there are no appropriate types for the new entry,\n provide a custom value, for example, `my_special_type`.\n\n The `user_specified_type` string has the following limitations:\n\n * Is case insensitive.\n * Must begin with a letter or underscore.\n * Can only contain letters, numbers, and underscores.\n * Must be at least 1 character and at most 64 characters long.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "DataCatalogEntryStatus defines the config connector machine state of DataCatalogEntry",
      "type": "object",
      "properties": {
        "conditions": {
          "description": "Conditions represent the latest available observations of the object's current state.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "lastTransitionTime": {
                "description": "Last time the condition transitioned from one status to another.",
                "type": "string"
              },
              "message": {
                "description": "Human-readable message indicating details about last transition.",
                "type": "string"
              },
              "reason": {
                "description": "Unique, one-word, CamelCase reason for the condition's last transition.",
                "type": "string"
              },
              "status": {
                "description": "Status is the status of the condition. Can be True, False, Unknown.",
                "type": "string"
              },
              "type": {
                "description": "Type is the type of the condition.",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "externalRef": {
          "description": "A unique specifier for the DataCatalogEntry resource in GCP.",
          "type": "string"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.",
          "type": "integer",
          "format": "int64"
        },
        "observedState": {
          "description": "ObservedState is the state of the resource as most recently observed in GCP.",
          "type": "object",
          "properties": {
            "bigqueryDateShardedSpec": {
              "description": "Output only. Specification for a group of BigQuery tables with\n the `[prefix]YYYYMMDD` name pattern.\n\n For more information, see [Introduction to partitioned tables]\n (https://cloud.google.com/bigquery/docs/partitioned-tables#partitioning_versus_sharding).",
              "type": "object",
              "properties": {
                "dataset": {
                  "description": "Output only. The Data Catalog resource name of the dataset entry the\n current table belongs to. For example:\n\n `projects/{PROJECT_ID}/locations/{LOCATION}/entrygroups/{ENTRY_GROUP_ID}/entries/{ENTRY_ID}`.",
                  "type": "string"
                },
                "latestShardResource": {
                  "description": "Output only. BigQuery resource name of the latest shard.",
                  "type": "string"
                },
                "shardCount": {
                  "description": "Output only. Total number of shards.",
                  "type": "integer",
                  "format": "int64"
                },
                "tablePrefix": {
                  "description": "Output only. The table name prefix of the shards.\n\n The name of any given shard is `[table_prefix]YYYYMMDD`.\n For example, for the `MyTable20180101` shard, the\n `table_prefix` is `MyTable`.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "bigqueryTableSpec": {
              "description": "Output only. Specification that applies to a BigQuery table. Valid only for entries with the `TABLE` type.",
              "type": "object",
              "properties": {
                "tableSourceType": {
                  "description": "Output only. The table source type.",
                  "type": "string"
                },
                "tableSpec": {
                  "description": "Specification of a BigQuery table. Populated only if the `table_source_type` is `BIGQUERY_TABLE`.",
                  "type": "object",
                  "properties": {
                    "groupedEntry": {
                      "description": "Output only. If the table is date-sharded, that is, it matches the\n `[prefix]YYYYMMDD` name pattern, this field is the Data Catalog resource\n name of the date-sharded grouped entry. For example:\n\n `projects/{PROJECT_ID}/locations/{LOCATION}/entrygroups/{ENTRY_GROUP_ID}/entries/{ENTRY_ID}`.\n\n Otherwise, `grouped_entry` is empty.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "viewSpec": {
                  "description": "Table view specification. Populated only if the `table_source_type` is `BIGQUERY_VIEW`.",
                  "type": "object",
                  "properties": {
                    "viewQuery": {
                      "description": "Output only. The query that defines the table view.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "dataSource": {
              "description": "Output only. Physical location of the entry.",
              "type": "object",
              "properties": {
                "resource": {
                  "description": "Full name of a resource as defined by the service. For example:\n\n `//bigquery.googleapis.com/projects/{PROJECT_ID}/locations/{LOCATION}/datasets/{DATASET_ID}/tables/{TABLE_ID}`",
                  "type": "string"
                },
                "service": {
                  "description": "Service that physically stores the data.",
                  "type": "string"
                },
                "sourceEntry": {
                  "description": "Output only. Data Catalog entry name, if applicable.",
                  "type": "string"
                },
                "storageProperties": {
                  "description": "Detailed properties of the underlying storage.",
                  "type": "object",
                  "properties": {
                    "filePattern": {
                      "description": "Patterns to identify a set of files for this fileset.\n\n Examples of a valid `file_pattern`:\n\n  * `gs://bucket_name/dir/*`: matches all files in the `bucket_name/dir`\n                              directory\n  * `gs://bucket_name/dir/**`: matches all files in the `bucket_name/dir`\n                               and all subdirectories recursively\n  * `gs://bucket_name/file*`: matches files prefixed by `file` in\n                              `bucket_name`\n  * `gs://bucket_name/??.txt`: matches files with two characters followed by\n                               `.txt` in `bucket_name`\n  * `gs://bucket_name/[aeiou].txt`: matches files that contain a single\n                                    vowel character followed by `.txt` in\n                                    `bucket_name`\n  * `gs://bucket_name/[a-m].txt`: matches files that contain `a`, `b`, ...\n                                  or `m` followed by `.txt` in `bucket_name`\n  * `gs://bucket_name/a/*/b`: matches all files in `bucket_name` that match\n                              the `a/*/b` pattern, such as `a/c/b`, `a/d/b`\n  * `gs://another_bucket/a.txt`: matches `gs://another_bucket/a.txt`",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "fileType": {
                      "description": "File type in MIME format, for example, `text/plain`.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "databaseTableSpec": {
              "description": "Specification that applies to a table resource. Valid only for entries with the `TABLE` or `EXPLORE` type.",
              "type": "object",
              "properties": {
                "dataplexTable": {
                  "description": "Output only. Fields specific to a Dataplex table and present only in the Dataplex table entries.",
                  "type": "object",
                  "properties": {
                    "dataplexSpec": {
                      "description": "Common Dataplex fields.",
                      "type": "object",
                      "properties": {
                        "asset": {
                          "description": "Fully qualified resource name of an asset in Dataplex, to which the underlying data source (Cloud Storage bucket or BigQuery dataset) of the entity is attached.",
                          "type": "string"
                        },
                        "compressionFormat": {
                          "description": "Compression format of the data, e.g., zip, gzip etc.",
                          "type": "string"
                        },
                        "dataFormat": {
                          "description": "Format of the data.",
                          "type": "object",
                          "properties": {
                            "avro": {
                              "description": "Schema in Avro JSON format.",
                              "type": "object",
                              "properties": {
                                "text": {
                                  "description": "JSON source of the Avro schema.",
                                  "type": "string"
                                }
                              },
                              "additionalProperties": false
                            },
                            "csv": {
                              "description": "Marks a CSV-encoded data source.",
                              "type": "object"
                            },
                            "orc": {
                              "description": "Marks an ORC-encoded data source.",
                              "type": "object"
                            },
                            "parquet": {
                              "description": "Marks a Parquet-encoded data source.",
                              "type": "object"
                            },
                            "protobuf": {
                              "description": "Schema in protocol buffer format.",
                              "type": "object",
                              "properties": {
                                "text": {
                                  "description": "Protocol buffer source of the schema.",
                                  "type": "string"
                                }
                              },
                              "additionalProperties": false
                            },
                            "thrift": {
                              "description": "Schema in Thrift format.",
                              "type": "object",
                              "properties": {
                                "text": {
                                  "description": "Thrift IDL source of the schema.",
                                  "type": "string"
                                }
                              },
                              "additionalProperties": false
                            }
                          },
                          "additionalProperties": false
                        },
                        "projectID": {
                          "description": "Project ID of the underlying Cloud Storage or BigQuery data. Note that this may not be the same project as the correspondingly Dataplex lake / zone / asset.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    },
                    "externalTables": {
                      "description": "List of external tables registered by Dataplex in other systems based on\n the same underlying data.\n\n External tables allow to query this data in those systems.",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "dataCatalogEntry": {
                            "description": "Name of the Data Catalog entry representing the external table.",
                            "type": "string"
                          },
                          "fullyQualifiedName": {
                            "description": "Fully qualified name (FQN) of the external table.",
                            "type": "string"
                          },
                          "googleCloudResource": {
                            "description": "Google Cloud resource name of the external table.",
                            "type": "string"
                          },
                          "system": {
                            "description": "Service in which the external table is registered.",
                            "type": "string"
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "userManaged": {
                      "description": "Indicates if the table schema is managed by the user or not.",
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "featureOnlineStoreSpec": {
              "description": "FeatureonlineStore spec for Vertex AI Feature Store.",
              "type": "object",
              "properties": {
                "storageType": {
                  "description": "Output only. Type of underelaying storage for the FeatureOnlineStore.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "gcsFilesetSpec": {
              "description": "Specification that applies to a Cloud Storage fileset. Valid only for entries with the `FILESET` type.",
              "type": "object",
              "properties": {
                "sampleGCSFileSpecs": {
                  "description": "Output only. Sample files contained in this fileset, not all files contained in this fileset are represented here.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "filePath"
                    ],
                    "properties": {
                      "filePath": {
                        "description": "Required. Full file path. Example: `gs://bucket_name/a/b.txt`.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                }
              },
              "additionalProperties": false
            },
            "integratedSystem": {
              "description": "Output only. Indicates the entry's source system that Data Catalog integrates with, such as BigQuery, Pub/Sub, or Dataproc Metastore.",
              "type": "string"
            },
            "linkedResource": {
              "description": "The resource this metadata entry refers to.\n\n For Google Cloud Platform resources, `linked_resource` is the\n [Full Resource Name]\n (https://cloud.google.com/apis/design/resource_names#full_resource_name).\n\n Output only when the entry is one of the types in the `EntryType` enum.\n\n For entries with a `user_specified_type`, this field is optional and\n defaults to an empty string.\n\n The resource string must contain only letters (a-z, A-Z), numbers (0-9),\n underscores (_), periods (.), colons (:), slashes (/), dashes (-),\n and hashes (#).\n The maximum size is 200 bytes when encoded in UTF-8.",
              "type": "string"
            },
            "personalDetails": {
              "description": "Output only. Additional information related to the entry. Private to the current user.",
              "type": "object",
              "properties": {
                "starTime": {
                  "description": "Set if the entry is starred; unset otherwise.",
                  "type": "string"
                },
                "starred": {
                  "description": "True if the entry is starred by the user; false otherwise.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "usageSignal": {
              "description": "Resource usage statistics.",
              "type": "object"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  }
}
