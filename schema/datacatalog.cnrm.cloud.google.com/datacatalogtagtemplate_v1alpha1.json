{
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "type": "string"
    },
    "kind": {
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "type": "object",
      "required": [
        "location",
        "projectRef"
      ],
      "properties": {
        "displayName": {
          "type": "string"
        },
        "fields": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "description": {
                "description": "The description for this field. Defaults to an empty string.",
                "type": "string"
              },
              "displayName": {
                "description": "The display name for this field. Defaults to an empty string.\n\n The name must contain only Unicode letters, numbers (0-9), underscores (_),\n dashes (-), spaces ( ), and can't start or end with spaces.\n The maximum length is 200 characters.",
                "type": "string"
              },
              "isRequired": {
                "description": "If true, this field is required. Defaults to false.",
                "type": "boolean"
              },
              "name": {
                "description": "Identifier. The resource name of the tag template field in URL format.\n\n Note: The tag template field itself might not be stored in the location\n specified in its name.\n\n The name must contain only letters (a-z, A-Z), numbers (0-9),\n or underscores (_), and must start with a letter or underscore.\n The maximum length is 64 characters.",
                "type": "string"
              },
              "order": {
                "description": "The order of this field with respect to other fields in this tag\n template.\n\n For example, a higher value can indicate a more important field.\n The value can be negative. Multiple fields can have the same order and\n field orders within a tag don't have to be sequential.",
                "type": "integer",
                "format": "int32"
              },
              "type": {
                "description": "Required. The type of value this tag field can contain.",
                "type": "object",
                "properties": {
                  "enumType": {
                    "description": "An enum type.",
                    "type": "object",
                    "properties": {
                      "allowedValues": {
                        "description": "The set of allowed values for this enum.\n\n This set must not be empty and can include up to 100 allowed values.\n The display names of the values in this set must not be empty and must\n be case-insensitively unique within this set.\n\n The order of items in this set is preserved. This field can be used to\n create, remove, and reorder enum values. To rename enum values, use the\n `RenameTagTemplateFieldEnumValue` method.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "displayName"
                          ],
                          "properties": {
                            "displayName": {
                              "description": "Required. The display name of the enum value. Must not be an empty\n string.\n\n The name must contain only Unicode letters, numbers (0-9), underscores\n (_), dashes (-), spaces ( ), and can't start or end with spaces. The\n maximum length is 200 characters.",
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "primitiveType": {
                    "description": "Primitive types, such as string, boolean, etc.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "isPubliclyReadable": {
          "type": "boolean"
        },
        "location": {
          "type": "string"
        },
        "projectRef": {
          "type": "object",
          "oneOf": [
            {
              "required": [
                "name"
              ],
              "not": {
                "required": [
                  "external"
                ]
              }
            },
            {
              "required": [
                "external"
              ],
              "not": {
                "anyOf": [
                  {
                    "required": [
                      "name"
                    ]
                  },
                  {
                    "required": [
                      "namespace"
                    ]
                  }
                ]
              }
            }
          ],
          "properties": {
            "external": {
              "type": "string"
            },
            "kind": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "namespace": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "resourceID": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "status": {
      "type": "object",
      "properties": {
        "conditions": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "lastTransitionTime": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "reason": {
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "externalRef": {
          "type": "string"
        },
        "observedGeneration": {
          "type": "integer",
          "format": "int64"
        },
        "observedState": {
          "type": "object",
          "properties": {
            "dataplexTransferStatus": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  }
}
