{
  "description": "TargetGroupBinding is the Schema for the TargetGroupBinding API",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "TargetGroupBindingSpec defines the desired state of TargetGroupBinding",
      "type": "object",
      "required": [
        "serviceRef"
      ],
      "properties": {
        "assumeRoleExternalId": {
          "description": "IAM Role ARN to assume when calling AWS APIs. Needed to assume a role in another account and prevent the confused deputy problem. https://docs.aws.amazon.com/IAM/latest/UserGuide/confused-deputy.html",
          "type": "string"
        },
        "iamRoleArnToAssume": {
          "description": "IAM Role ARN to assume when calling AWS APIs. Useful if the target group is in a different AWS account",
          "type": "string"
        },
        "ipAddressType": {
          "description": "ipAddressType specifies whether the target group is of type IPv4 or IPv6. If unspecified, it will be automatically inferred.",
          "type": "string",
          "enum": [
            "ipv4",
            "ipv6"
          ]
        },
        "multiClusterTargetGroup": {
          "description": "MultiClusterTargetGroup Denotes if the TargetGroup is shared among multiple clusters",
          "type": "boolean"
        },
        "networking": {
          "description": "networking defines the networking rules to allow ELBV2 LoadBalancer to access targets in TargetGroup.",
          "type": "object",
          "properties": {
            "ingress": {
              "description": "List of ingress rules to allow ELBV2 LoadBalancer to access targets in TargetGroup.",
              "type": "array",
              "items": {
                "description": "NetworkingIngressRule defines a particular set of traffic that is allowed to access TargetGroup's targets.",
                "type": "object",
                "required": [
                  "from",
                  "ports"
                ],
                "properties": {
                  "from": {
                    "description": "List of peers which should be able to access the targets in TargetGroup.\nAt least one NetworkingPeer should be specified.",
                    "type": "array",
                    "items": {
                      "description": "NetworkingPeer defines the source/destination peer for networking rules.",
                      "type": "object",
                      "properties": {
                        "ipBlock": {
                          "description": "IPBlock defines an IPBlock peer.\nIf specified, none of the other fields can be set.",
                          "type": "object",
                          "required": [
                            "cidr"
                          ],
                          "properties": {
                            "cidr": {
                              "description": "CIDR is the network CIDR.\nBoth IPV4 or IPV6 CIDR are accepted.",
                              "type": "string"
                            }
                          },
                          "additionalProperties": false
                        },
                        "securityGroup": {
                          "description": "SecurityGroup defines a SecurityGroup peer.\nIf specified, none of the other fields can be set.",
                          "type": "object",
                          "required": [
                            "groupID"
                          ],
                          "properties": {
                            "groupID": {
                              "description": "GroupID is the EC2 SecurityGroupID.",
                              "type": "string"
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "ports": {
                    "description": "List of ports which should be made accessible on the targets in TargetGroup.\nIf ports is empty or unspecified, it defaults to all ports with TCP.",
                    "type": "array",
                    "items": {
                      "description": "NetworkingPort defines the port and protocol for networking rules.",
                      "type": "object",
                      "properties": {
                        "port": {
                          "description": "The port which traffic must match.\nWhen NodePort endpoints(instance TargetType) is used, this must be a numerical port.\nWhen Port endpoints(ip TargetType) is used, this can be either numerical or named port on pods.\nif port is unspecified, it defaults to all ports.",
                          "anyOf": [
                            {
                              "type": "integer"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "x-kubernetes-int-or-string": true
                        },
                        "protocol": {
                          "description": "The protocol which traffic must match.\nIf protocol is unspecified, it defaults to TCP.",
                          "type": "string",
                          "enum": [
                            "TCP",
                            "UDP"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "additionalProperties": false
        },
        "nodeSelector": {
          "description": "node selector for instance type target groups to only register certain nodes",
          "type": "object",
          "properties": {
            "matchExpressions": {
              "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
              "type": "array",
              "items": {
                "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                "type": "object",
                "required": [
                  "key",
                  "operator"
                ],
                "properties": {
                  "key": {
                    "description": "key is the label key that the selector applies to.",
                    "type": "string"
                  },
                  "operator": {
                    "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                    "type": "string"
                  },
                  "values": {
                    "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "x-kubernetes-list-type": "atomic"
                  }
                },
                "additionalProperties": false
              },
              "x-kubernetes-list-type": "atomic"
            },
            "matchLabels": {
              "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false,
          "x-kubernetes-map-type": "atomic"
        },
        "serviceRef": {
          "description": "serviceRef is a reference to a Kubernetes Service and ServicePort.",
          "type": "object",
          "required": [
            "name",
            "port"
          ],
          "properties": {
            "name": {
              "description": "Name is the name of the Service.",
              "type": "string"
            },
            "port": {
              "description": "Port is the port of the ServicePort.",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ],
              "x-kubernetes-int-or-string": true
            }
          },
          "additionalProperties": false
        },
        "targetGroupARN": {
          "description": "targetGroupARN is the Amazon Resource Name (ARN) for the TargetGroup.",
          "type": "string"
        },
        "targetGroupName": {
          "description": "targetGroupName is the Name of the TargetGroup.",
          "type": "string"
        },
        "targetGroupProtocol": {
          "description": "targetGroupProtocol is the Protocol of the TargetGroup. If unspecified, it will be automatically inferred.",
          "type": "string",
          "enum": [
            "HTTP",
            "HTTPS",
            "TCP",
            "TLS",
            "UDP",
            "TCP_UDP"
          ]
        },
        "targetType": {
          "description": "targetType is the TargetType of TargetGroup. If unspecified, it will be automatically inferred.",
          "type": "string",
          "enum": [
            "instance",
            "ip"
          ]
        },
        "vpcID": {
          "description": "VpcID is the VPC of the TargetGroup. If unspecified, it will be automatically inferred.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "TargetGroupBindingStatus defines the observed state of TargetGroupBinding",
      "type": "object",
      "properties": {
        "observedGeneration": {
          "description": "The generation observed by the TargetGroupBinding controller.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    }
  }
}
