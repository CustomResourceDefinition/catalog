{
  "description": "KeycloakClient is the Schema for the keycloak clients API.",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "KeycloakClientSpec defines the desired state of KeycloakClient.",
      "type": "object",
      "required": [
        "clientId",
        "realmRef"
      ],
      "properties": {
        "adminFineGrainedPermissionsEnabled": {
          "description": "AdminFineGrainedPermissionsEnabled enable/disable fine-grained admin permissions for a client.",
          "type": "boolean"
        },
        "adminUrl": {
          "description": "AdminUrl is client admin url.\nIf empty - WebUrl will be used.",
          "type": "string"
        },
        "advancedProtocolMappers": {
          "description": "AdvancedProtocolMappers is a flag to enable advanced protocol mappers.",
          "type": "boolean"
        },
        "attributes": {
          "description": "Attributes is a map of client attributes.",
          "type": "object",
          "default": {
            "post.logout.redirect.uris": "+"
          },
          "additionalProperties": {
            "type": "string"
          },
          "nullable": true
        },
        "authenticationFlowBindingOverrides": {
          "description": "AuthenticationFlowBindingOverrides client auth flow overrides",
          "type": "object",
          "properties": {
            "browser": {
              "type": "string"
            },
            "directGrant": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "authorization": {
          "description": "Authorization is a client authorization configuration.",
          "type": "object",
          "properties": {
            "permissions": {
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "name",
                  "type"
                ],
                "properties": {
                  "decisionStrategy": {
                    "description": "DecisionStrategy is a permission decision strategy.",
                    "type": "string",
                    "default": "UNANIMOUS",
                    "enum": [
                      "UNANIMOUS",
                      "AFFIRMATIVE",
                      "CONSENSUS"
                    ]
                  },
                  "description": {
                    "description": "Description is a permission description.",
                    "type": "string"
                  },
                  "logic": {
                    "description": "Logic is a permission logic.",
                    "type": "string",
                    "default": "POSITIVE",
                    "enum": [
                      "POSITIVE",
                      "NEGATIVE"
                    ]
                  },
                  "name": {
                    "description": "Name is a permission name.",
                    "type": "string"
                  },
                  "policies": {
                    "description": "Policies is a list of policies names.\nSpecifies all the policies that must be applied to the scopes defined by this policy or permission.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "policy1",
                      "policy2"
                    ],
                    "nullable": true
                  },
                  "resources": {
                    "description": "Resources is a list of resources names.\nSpecifies that this permission must be applied to all resource instances of a given type.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "resource1",
                      "resource2"
                    ],
                    "nullable": true
                  },
                  "scopes": {
                    "description": "Scopes is a list of authorization scopes names.\nSpecifies that this permission must be applied to one or more scopes.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "scope1",
                      "scope2"
                    ],
                    "nullable": true
                  },
                  "type": {
                    "description": "Type is a permission type.",
                    "type": "string",
                    "enum": [
                      "resource",
                      "scope"
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "policies": {
              "type": "array",
              "items": {
                "description": "Policy represents a client authorization policy.",
                "type": "object",
                "required": [
                  "name",
                  "type"
                ],
                "properties": {
                  "aggregatedPolicy": {
                    "description": "AggregatedPolicy is an aggregated policy settings.",
                    "type": "object",
                    "required": [
                      "policies"
                    ],
                    "properties": {
                      "policies": {
                        "description": "Policies is a list of aggregated policies names.\nSpecifies all the policies that must be applied to the scopes defined by this policy or permission.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "example": {
                          "policies": [
                            "policy1",
                            "policy2"
                          ]
                        }
                      }
                    },
                    "additionalProperties": false
                  },
                  "clientPolicy": {
                    "description": "ClientPolicy is a client policy settings.",
                    "type": "object",
                    "required": [
                      "clients"
                    ],
                    "properties": {
                      "clients": {
                        "description": "Clients is a list of client names. Specifies which client(s) are allowed by this policy.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "example": [
                          "clients1",
                          "clients2"
                        ]
                      }
                    },
                    "additionalProperties": false
                  },
                  "decisionStrategy": {
                    "description": "DecisionStrategy is a policy decision strategy.",
                    "type": "string",
                    "default": "UNANIMOUS",
                    "enum": [
                      "UNANIMOUS",
                      "AFFIRMATIVE",
                      "CONSENSUS"
                    ]
                  },
                  "description": {
                    "description": "Description is a policy description.",
                    "type": "string"
                  },
                  "groupPolicy": {
                    "description": "GroupPolicy is a group policy settings.",
                    "type": "object",
                    "required": [
                      "groups"
                    ],
                    "properties": {
                      "groups": {
                        "description": "Groups is a list of group names. Specifies which group(s) are allowed by this policy.",
                        "type": "array",
                        "items": {
                          "description": "GroupDefinition represents a group in a GroupPolicyData.",
                          "type": "object",
                          "required": [
                            "name"
                          ],
                          "properties": {
                            "extendChildren": {
                              "description": "ExtendChildren is a flag that specifies whether to extend children.",
                              "type": "boolean"
                            },
                            "name": {
                              "description": "Name is a group name.",
                              "type": "string",
                              "example": "group1"
                            }
                          },
                          "additionalProperties": false
                        },
                        "example": "{\"groups\":[{\"name\":\"group1\",\"extendChildren\":true},{\"name\":\"group2\"}]}"
                      },
                      "groupsClaim": {
                        "description": "GroupsClaim is a group claim.\nIf defined, the policy will fetch user's groups from the given claim\nwithin an access token or ID token representing the identity asking permissions.\nIf not defined, user's groups are obtained from your realm configuration.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "logic": {
                    "description": "Logic is a policy logic.",
                    "type": "string",
                    "default": "POSITIVE",
                    "enum": [
                      "POSITIVE",
                      "NEGATIVE"
                    ]
                  },
                  "name": {
                    "description": "Name is a policy name.",
                    "type": "string"
                  },
                  "rolePolicy": {
                    "description": "RolePolicy is a role policy settings.",
                    "type": "object",
                    "required": [
                      "roles"
                    ],
                    "properties": {
                      "roles": {
                        "description": "Roles is a list of role.",
                        "type": "array",
                        "items": {
                          "description": "RoleDefinition represents a role in a RolePolicyData.",
                          "type": "object",
                          "required": [
                            "name"
                          ],
                          "properties": {
                            "name": {
                              "description": "Name is a role name.",
                              "type": "string",
                              "example": "role1"
                            },
                            "required": {
                              "description": "Required is a flag that specifies whether the role is required.",
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "example": {
                          "roles": [
                            {
                              "name": "role1",
                              "required": true
                            },
                            {
                              "name": "role2"
                            }
                          ]
                        }
                      }
                    },
                    "additionalProperties": false
                  },
                  "timePolicy": {
                    "description": "ScopePolicy is a scope policy settings.",
                    "type": "object",
                    "required": [
                      "notBefore",
                      "notOnOrAfter"
                    ],
                    "properties": {
                      "dayMonth": {
                        "description": "Day defines the month which the policy MUST be granted.\nYou can also provide a range by filling the dayMonthEnd field.\nIn this case, permission is granted only if current month is between or equal to the two values you provided.",
                        "type": "string",
                        "example": "1"
                      },
                      "dayMonthEnd": {
                        "type": "string",
                        "example": "2"
                      },
                      "hour": {
                        "description": "Hour defines the hour when the policy MUST be granted.\nYou can also provide a range by filling the hourEnd.\nIn this case, permission is granted only if current hour is between or equal to the two values you provided.",
                        "type": "string",
                        "example": "1"
                      },
                      "hourEnd": {
                        "type": "string",
                        "example": "2"
                      },
                      "minute": {
                        "description": "Minute defines the minute when the policy MUST be granted.\nYou can also provide a range by filling the minuteEnd field.\nIn this case, permission is granted only if current minute is between or equal to the two values you provided.",
                        "type": "string",
                        "example": "1"
                      },
                      "minuteEnd": {
                        "type": "string",
                        "example": "2"
                      },
                      "month": {
                        "description": "Month defines the month which the policy MUST be granted.\nYou can also provide a range by filling the monthEnd.\nIn this case, permission is granted only if current month is between or equal to the two values you provided.",
                        "type": "string",
                        "example": "1"
                      },
                      "monthEnd": {
                        "type": "string",
                        "example": "2"
                      },
                      "notBefore": {
                        "description": "NotBefore defines the time before which the policy MUST NOT be granted.\nOnly granted if current date/time is after or equal to this value.",
                        "type": "string",
                        "example": "2024-03-03 00:00:00"
                      },
                      "notOnOrAfter": {
                        "description": "NotOnOrAfter defines the time after which the policy MUST NOT be granted.\nOnly granted if current date/time is before or equal to this value.",
                        "type": "string",
                        "example": "2024-04-04 00:00:00"
                      }
                    },
                    "additionalProperties": false
                  },
                  "type": {
                    "description": "Type is a policy type.",
                    "type": "string",
                    "enum": [
                      "aggregate",
                      "client",
                      "group",
                      "role",
                      "time",
                      "user"
                    ]
                  },
                  "userPolicy": {
                    "description": "UserPolicy is a user policy settings.",
                    "type": "object",
                    "required": [
                      "users"
                    ],
                    "properties": {
                      "users": {
                        "description": "Users is a list of usernames. Specifies which user(s) are allowed by this policy.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "example": [
                          "users1",
                          "users2"
                        ]
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              }
            },
            "resources": {
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "displayName",
                  "name"
                ],
                "properties": {
                  "attributes": {
                    "description": "Attributes is a map of resource attributes.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "nullable": true
                  },
                  "displayName": {
                    "description": "DisplayName for Identity Providers.",
                    "type": "string"
                  },
                  "iconUri": {
                    "description": "IconURI pointing to an icon.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name is unique resource name.",
                    "type": "string"
                  },
                  "ownerManagedAccess": {
                    "description": "OwnerManagedAccess if enabled, the access to this resource can be managed by the resource owner.",
                    "type": "boolean"
                  },
                  "scopes": {
                    "description": "Scopes requested or assigned in advance to the client to determine whether the policy is applied to this client.\nCondition is evaluated during OpenID Connect authorization request and/or token request.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "type": {
                    "description": "Type of this resource. It can be used to group different resource instances with the same type.",
                    "type": "string"
                  },
                  "uris": {
                    "description": "URIs which are protected by resource.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  }
                },
                "additionalProperties": false
              }
            },
            "scopes": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false,
          "nullable": true
        },
        "authorizationServicesEnabled": {
          "description": "AuthorizationServicesEnabled enable/disable fine-grained authorization support for a client.",
          "type": "boolean"
        },
        "bearerOnly": {
          "description": "BearerOnly is a flag to enable bearer-only.",
          "type": "boolean"
        },
        "clientAuthenticatorType": {
          "description": "ClientAuthenticatorType is a client authenticator type.",
          "type": "string",
          "default": "client-secret"
        },
        "clientId": {
          "description": "ClientId is a unique keycloak client ID referenced in URI and tokens.",
          "type": "string"
        },
        "clientRoles": {
          "description": "ClientRoles is a list of client roles names assigned to client.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "nullable": true
        },
        "consentRequired": {
          "description": "ConsentRequired is a flag to enable consent.",
          "type": "boolean"
        },
        "defaultClientScopes": {
          "description": "DefaultClientScopes is a list of default client scopes assigned to client.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "nullable": true
        },
        "description": {
          "description": "Description is a client description.",
          "type": "string"
        },
        "directAccess": {
          "description": "DirectAccess is a flag to set client as direct access.",
          "type": "boolean"
        },
        "enabled": {
          "description": "Enabled is a flag to enable client.",
          "type": "boolean",
          "default": true
        },
        "frontChannelLogout": {
          "description": "FrontChannelLogout is a flag to enable front channel logout.",
          "type": "boolean"
        },
        "fullScopeAllowed": {
          "description": "FullScopeAllowed is a flag to enable full scope.",
          "type": "boolean",
          "default": true
        },
        "homeUrl": {
          "description": "HomeUrl is a client home url.",
          "type": "string"
        },
        "implicitFlowEnabled": {
          "description": "ImplicitFlowEnabled is a flag to enable support for OpenID Connect redirect based authentication without authorization code.",
          "type": "boolean"
        },
        "name": {
          "description": "Name is a client name.",
          "type": "string"
        },
        "optionalClientScopes": {
          "description": "OptionalClientScopes is a list of optional client scopes assigned to client.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "nullable": true
        },
        "permission": {
          "description": "Permission is a client permissions configuration",
          "type": "object",
          "properties": {
            "scopePermissions": {
              "description": "ScopePermissions mapping of scope and the policies attached",
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "policies": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "additionalProperties": false,
          "nullable": true
        },
        "protocol": {
          "description": "Protocol is a client protocol.",
          "type": "string",
          "nullable": true
        },
        "protocolMappers": {
          "description": "ProtocolMappers is a list of protocol mappers assigned to client.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "config": {
                "description": "Config is a map of protocol mapper configuration.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "nullable": true
              },
              "name": {
                "description": "Name is a protocol mapper name.",
                "type": "string"
              },
              "protocol": {
                "description": "Protocol is a protocol name.",
                "type": "string"
              },
              "protocolMapper": {
                "description": "ProtocolMapper is a protocol mapper name.",
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "nullable": true
        },
        "public": {
          "description": "Public is a flag to set client as public.",
          "type": "boolean"
        },
        "realmRef": {
          "description": "RealmRef is reference to Realm custom resource.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "kind": {
              "description": "Kind specifies the kind of the Keycloak resource.",
              "type": "string",
              "default": "KeycloakRealm",
              "enum": [
                "KeycloakRealm",
                "ClusterKeycloakRealm"
              ]
            },
            "name": {
              "description": "Name specifies the name of the Keycloak resource.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "realmRoles": {
          "description": "RealmRoles is a list of realm roles assigned to client.",
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "composite"
            ],
            "properties": {
              "composite": {
                "description": "Composite is a realm composite role name.",
                "type": "string"
              },
              "name": {
                "description": "Name is a realm role name.",
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "nullable": true
        },
        "reconciliationStrategy": {
          "description": "ReconciliationStrategy is a strategy to reconcile client.",
          "type": "string",
          "enum": [
            "full",
            "addOnly"
          ]
        },
        "redirectUris": {
          "description": "RedirectUris is a list of valid URI pattern a browser can redirect to after a successful login.\nSimple wildcards are allowed such as 'https://example.com/*'.\nRelative path can be specified too, such as /my/relative/path/*. Relative paths are relative to the client root URL.\nIf not specified, spec.webUrl + \"/*\" will be used.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "https://example.com/*",
            "/my/relative/path/*"
          ],
          "nullable": true
        },
        "secret": {
          "description": "Secret is kubernetes secret name where the client's secret will be stored.\nSecret should have the following format: $secretName:secretKey.\nIf not specified, a client secret will be generated and stored in a secret with the name keycloak-client-{metadata.name}-secret.\nIf keycloak client is public, secret property will be ignored.",
          "type": "string",
          "example": "$keycloak-secret:client_secret"
        },
        "serviceAccount": {
          "description": "ServiceAccount is a service account configuration.",
          "type": "object",
          "properties": {
            "attributes": {
              "description": "Attributes is a map of service account attributes.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "nullable": true
            },
            "clientRoles": {
              "description": "ClientRoles is a list of client roles assigned to service account.",
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "clientId"
                ],
                "properties": {
                  "clientId": {
                    "description": "ClientID is a client ID.",
                    "type": "string"
                  },
                  "roles": {
                    "description": "Roles is a list of client roles names assigned to user.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  }
                },
                "additionalProperties": false
              },
              "nullable": true
            },
            "enabled": {
              "description": "Enabled is a flag to enable service account.",
              "type": "boolean"
            },
            "groups": {
              "description": "Groups is a list of groups assigned to service account",
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "realmRoles": {
              "description": "RealmRoles is a list of realm roles assigned to service account.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            }
          },
          "additionalProperties": false,
          "nullable": true
        },
        "standardFlowEnabled": {
          "description": "StandardFlowEnabled is a flag to enable standard flow.",
          "type": "boolean",
          "default": true
        },
        "surrogateAuthRequired": {
          "description": "SurrogateAuthRequired is a flag to enable surrogate auth.",
          "type": "boolean"
        },
        "webOrigins": {
          "description": "WebOrigins is a list of allowed CORS origins.\nTo permit all origins of Valid Redirect URIs, add '+'. This does not include the '*' wildcard though.\nTo permit all origins, explicitly add '*'.\nIf not specified, the value from `WebUrl` is used",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "https://example.com/*"
          ],
          "nullable": true
        },
        "webUrl": {
          "description": "WebUrl is a client web url.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "KeycloakClientStatus defines the observed state of KeycloakClient.",
      "type": "object",
      "properties": {
        "clientId": {
          "type": "string"
        },
        "failureCount": {
          "type": "integer",
          "format": "int64"
        },
        "value": {
          "type": "string"
        }
      },
      "additionalProperties": false
    }
  }
}
