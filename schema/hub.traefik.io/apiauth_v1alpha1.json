{
  "description": "APIAuth defines the authentication configuration for APIs.",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "The desired behavior of this APIAuth.",
      "type": "object",
      "required": [
        "isDefault"
      ],
      "properties": {
        "apiKey": {
          "description": "APIKey configures API key authentication.",
          "type": "object",
          "x-kubernetes-preserve-unknown-fields": true
        },
        "isDefault": {
          "description": "IsDefault specifies if this APIAuth should be used as the default API authentication method for the namespace.\nOnly one APIAuth per namespace should have isDefault set to true.",
          "type": "boolean"
        },
        "jwt": {
          "description": "JWT configures JWT authentication.",
          "type": "object",
          "required": [
            "appIdClaim"
          ],
          "properties": {
            "appIdClaim": {
              "description": "AppIDClaim is the name of the claim holding the identifier of the application.\nThis field is sometimes named `client_id`.",
              "type": "string"
            },
            "forwardHeaders": {
              "description": "ForwardHeaders specifies additional headers to forward with the request.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "jwksFile": {
              "description": "JWKSFile contains the JWKS file content for JWT verification.",
              "type": "string"
            },
            "jwksUrl": {
              "description": "JWKSURL is the URL to fetch the JWKS for JWT verification.",
              "type": "string",
              "x-kubernetes-validations": [
                {
                  "rule": "isURL(self)",
                  "message": "must be a valid URL"
                }
              ]
            },
            "publicKey": {
              "description": "PublicKey is the PEM-encoded public key for JWT verification.",
              "type": "string"
            },
            "signingSecretName": {
              "description": "SigningSecretName is the name of the Kubernetes Secret containing the signing secret.\nThe secret must be of type Opaque and contain a key named 'value'.",
              "type": "string",
              "maxLength": 253
            },
            "stripAuthorizationHeader": {
              "description": "StripAuthorizationHeader determines whether to strip the Authorization header before forwarding the request.",
              "type": "boolean"
            },
            "tokenNameClaim": {
              "description": "TokenNameClaim is the name of the claim holding the name of the token.\nThis name, if provided, will be used in the metrics.",
              "type": "string"
            },
            "tokenQueryKey": {
              "description": "TokenQueryKey specifies the query parameter name for the JWT token.",
              "type": "string"
            }
          },
          "additionalProperties": false,
          "x-kubernetes-validations": [
            {
              "rule": "[has(self.signingSecretName), has(self.publicKey), has(self.jwksFile), has(self.jwksUrl)].filter(x, x).size() == 1",
              "message": "exactly one of signingSecretName, publicKey, jwksFile, or jwksUrl must be specified"
            }
          ]
        }
      },
      "additionalProperties": false,
      "x-kubernetes-validations": [
        {
          "rule": "(has(self.apiKey) \u0026\u0026 !has(self.jwt)) || (!has(self.apiKey) \u0026\u0026 has(self.jwt))",
          "message": "exactly one of apiKey or jwt must be specified"
        }
      ]
    },
    "status": {
      "description": "The current status of this APIAuth.",
      "type": "object",
      "properties": {
        "hash": {
          "description": "Hash is a hash representing the APIAuth.",
          "type": "string"
        },
        "syncedAt": {
          "type": "string",
          "format": "date-time"
        },
        "version": {
          "type": "string"
        }
      },
      "additionalProperties": false
    }
  }
}
