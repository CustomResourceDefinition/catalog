{
  "description": "APICatalogItem defines APIs that will be part of the API catalog on the portal.",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "The desired behavior of this APICatalogItem.",
      "type": "object",
      "properties": {
        "apiBundles": {
          "description": "APIBundles defines a set of APIBundle that will be visible to the configured audience.\nMultiple APICatalogItem can select the same APIBundles.",
          "type": "array",
          "maxItems": 100,
          "items": {
            "description": "APIBundleReference references an APIBundle.",
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "description": "Name of the APIBundle.",
                "type": "string",
                "maxLength": 253
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-validations": [
            {
              "rule": "self.all(x, self.exists_one(y, x.name == y.name))",
              "message": "duplicated apiBundles"
            }
          ]
        },
        "apiPlan": {
          "description": "APIPlan defines which APIPlan will be available.\nIf multiple APICatalogItem specify the same API with different APIPlan, the API consumer will be able to pick\na plan from this list.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the APIPlan.",
              "type": "string",
              "maxLength": 253
            }
          },
          "additionalProperties": false
        },
        "apiSelector": {
          "description": "APISelector selects the APIs that will be visible to the configured audience.\nMultiple APICatalogItem can select the same set of APIs.\nThis field is optional and follows standard label selector semantics.\nAn empty APISelector matches any API.",
          "type": "object",
          "properties": {
            "matchExpressions": {
              "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
              "type": "array",
              "items": {
                "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                "type": "object",
                "required": [
                  "key",
                  "operator"
                ],
                "properties": {
                  "key": {
                    "description": "key is the label key that the selector applies to.",
                    "type": "string"
                  },
                  "operator": {
                    "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                    "type": "string"
                  },
                  "values": {
                    "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "x-kubernetes-list-type": "atomic"
                  }
                },
                "additionalProperties": false
              },
              "x-kubernetes-list-type": "atomic"
            },
            "matchLabels": {
              "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false,
          "x-kubernetes-map-type": "atomic"
        },
        "apis": {
          "description": "APIs defines a set of APIs that will be visible to the configured audience.\nMultiple APICatalogItem can select the same APIs.\nWhen combined with APISelector, this set of APIs is appended to the matching APIs.",
          "type": "array",
          "maxItems": 100,
          "items": {
            "description": "APIReference references an API.",
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "description": "Name of the API.",
                "type": "string",
                "maxLength": 253
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-validations": [
            {
              "rule": "self.all(x, self.exists_one(y, x.name == y.name))",
              "message": "duplicated apis"
            }
          ]
        },
        "everyone": {
          "description": "Everyone indicates that all users will see these APIs.",
          "type": "boolean"
        },
        "groups": {
          "description": "Groups are the consumer groups that will see the APIs.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "operationFilter": {
          "description": "OperationFilter specifies the visible operations on APIs and APIVersions.\nIf not set, all operations are available.\nAn empty OperationFilter prohibits all operations.",
          "type": "object",
          "properties": {
            "include": {
              "description": "Include defines the names of OperationSets that will be accessible.",
              "type": "array",
              "maxItems": 100,
              "items": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false,
      "x-kubernetes-validations": [
        {
          "rule": "(has(self.everyone) \u0026\u0026 has(self.groups)) ? !(self.everyone \u0026\u0026 self.groups.size() \u003e 0) : true",
          "message": "groups and everyone are mutually exclusive"
        }
      ]
    },
    "status": {
      "description": "The current status of this APICatalogItem.",
      "type": "object",
      "properties": {
        "hash": {
          "description": "Hash is a hash representing the APICatalogItem.",
          "type": "string"
        },
        "syncedAt": {
          "type": "string",
          "format": "date-time"
        },
        "version": {
          "type": "string"
        }
      },
      "additionalProperties": false
    }
  }
}
