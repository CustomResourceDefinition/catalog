{
  "description": "ManagementGroupPolicyAssignment is the Schema for the ManagementGroupPolicyAssignments API. Manages a Policy Assignment to a Management Group.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "ManagementGroupPolicyAssignmentSpec defines the desired state of ManagementGroupPolicyAssignment",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "deletionPolicy": {
          "description": "DeletionPolicy specifies what will happen to the underlying external\nwhen this managed resource is deleted - either \"Delete\" or \"Orphan\" the\nexternal resource.\nThis field is planned to be deprecated in favor of the ManagementPolicies\nfield in a future release. Currently, both could be set independently and\nnon-default values would be honored if the feature flag is enabled.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "type": "string",
          "default": "Delete",
          "enum": [
            "Orphan",
            "Delete"
          ]
        },
        "forProvider": {
          "type": "object",
          "properties": {
            "description": {
              "description": "A description which should be used for this Policy Assignment.",
              "type": "string"
            },
            "displayName": {
              "description": "The Display Name for this Policy Assignment.",
              "type": "string"
            },
            "enforce": {
              "description": "Specifies if this Policy should be enforced or not? Defaults to true.",
              "type": "boolean"
            },
            "identity": {
              "description": "An identity block as defined below.",
              "type": "object",
              "properties": {
                "identityIds": {
                  "description": "A list of User Managed Identity IDs which should be assigned to the Policy Definition.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "x-kubernetes-list-type": "set"
                },
                "type": {
                  "description": "The Type of Managed Identity which should be added to this Policy Definition. Possible values are SystemAssigned and UserAssigned.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "location": {
              "description": "The Azure Region where the Policy Assignment should exist. Changing this forces a new Policy Assignment to be created.",
              "type": "string"
            },
            "managementGroupId": {
              "description": "The ID of the Management Group. Changing this forces a new Policy Assignment to be created.",
              "type": "string"
            },
            "managementGroupIdRef": {
              "description": "Reference to a ManagementGroup in management to populate managementGroupId.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "managementGroupIdSelector": {
              "description": "Selector for a ManagementGroup in management to populate managementGroupId.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "metadata": {
              "description": "A JSON mapping of any Metadata for this Policy.",
              "type": "string"
            },
            "nonComplianceMessage": {
              "description": "One or more non_compliance_message blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "content": {
                    "description": "The non-compliance message text. When assigning policy sets (initiatives), unless policy_definition_reference_id is specified then this message will be the default for all policies.",
                    "type": "string"
                  },
                  "policyDefinitionReferenceId": {
                    "description": "When assigning policy sets (initiatives), this is the ID of the policy definition that the non-compliance message applies to.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "notScopes": {
              "description": "Specifies a list of Resource Scopes (for example a Subscription, or a Resource Group) within this Management Group which are excluded from this Policy.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "overrides": {
              "description": "One or more overrides blocks as defined below. More detail about overrides and resource_selectors see policy assignment structure",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "selectors": {
                    "description": "One or more override_selector block as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "in": {
                          "description": "The list of allowed values for the specified kind. Cannot be used with not_in. Can contain up to 50 values.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "notIn": {
                          "description": "The list of not-allowed values for the specified kind. Cannot be used with in. Can contain up to 50 values.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "value": {
                    "description": "Specifies the value to override the policy property. Possible values for policyEffect override listed policy effects.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "parameters": {
              "description": "A JSON mapping of any Parameters for this Policy.",
              "type": "string"
            },
            "policyDefinitionId": {
              "description": "The ID of the Policy Definition or Policy Definition Set. Changing this forces a new Policy Assignment to be created.",
              "type": "string"
            },
            "policyDefinitionIdRef": {
              "description": "Reference to a PolicyDefinition in authorization to populate policyDefinitionId.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "policyDefinitionIdSelector": {
              "description": "Selector for a PolicyDefinition in authorization to populate policyDefinitionId.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "resourceSelectors": {
              "description": "One or more resource_selectors blocks as defined below to filter polices by resource properties.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Specifies a name for the resource selector.",
                    "type": "string"
                  },
                  "selectors": {
                    "description": "One or more resource_selector block as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "in": {
                          "description": "The list of allowed values for the specified kind. Cannot be used with not_in. Can contain up to 50 values.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "kind": {
                          "description": "Specifies which characteristic will narrow down the set of evaluated resources. Possible values are resourceLocation, resourceType and resourceWithoutLocation.",
                          "type": "string"
                        },
                        "notIn": {
                          "description": "The list of not-allowed values for the specified kind. Cannot be used with in. Can contain up to 50 values.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "additionalProperties": false
                    }
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored\nunless the Management Policies feature flag is disabled.\nInitProvider holds the same fields as ForProvider, with the exception\nof Identifier and other resource reference fields. The fields that are\nin InitProvider are merged into ForProvider when the resource is created.\nThe same fields are also added to the terraform ignore_changes hook, to\navoid updating them after creation. This is useful for fields that are\nrequired on creation, but we do not desire to update them after creation,\nfor example because of an external controller is managing them, like an\nautoscaler.",
          "type": "object",
          "properties": {
            "description": {
              "description": "A description which should be used for this Policy Assignment.",
              "type": "string"
            },
            "displayName": {
              "description": "The Display Name for this Policy Assignment.",
              "type": "string"
            },
            "enforce": {
              "description": "Specifies if this Policy should be enforced or not? Defaults to true.",
              "type": "boolean"
            },
            "identity": {
              "description": "An identity block as defined below.",
              "type": "object",
              "properties": {
                "identityIds": {
                  "description": "A list of User Managed Identity IDs which should be assigned to the Policy Definition.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "x-kubernetes-list-type": "set"
                },
                "type": {
                  "description": "The Type of Managed Identity which should be added to this Policy Definition. Possible values are SystemAssigned and UserAssigned.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "location": {
              "description": "The Azure Region where the Policy Assignment should exist. Changing this forces a new Policy Assignment to be created.",
              "type": "string"
            },
            "metadata": {
              "description": "A JSON mapping of any Metadata for this Policy.",
              "type": "string"
            },
            "nonComplianceMessage": {
              "description": "One or more non_compliance_message blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "content": {
                    "description": "The non-compliance message text. When assigning policy sets (initiatives), unless policy_definition_reference_id is specified then this message will be the default for all policies.",
                    "type": "string"
                  },
                  "policyDefinitionReferenceId": {
                    "description": "When assigning policy sets (initiatives), this is the ID of the policy definition that the non-compliance message applies to.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "notScopes": {
              "description": "Specifies a list of Resource Scopes (for example a Subscription, or a Resource Group) within this Management Group which are excluded from this Policy.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "overrides": {
              "description": "One or more overrides blocks as defined below. More detail about overrides and resource_selectors see policy assignment structure",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "selectors": {
                    "description": "One or more override_selector block as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "in": {
                          "description": "The list of allowed values for the specified kind. Cannot be used with not_in. Can contain up to 50 values.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "notIn": {
                          "description": "The list of not-allowed values for the specified kind. Cannot be used with in. Can contain up to 50 values.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "value": {
                    "description": "Specifies the value to override the policy property. Possible values for policyEffect override listed policy effects.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "parameters": {
              "description": "A JSON mapping of any Parameters for this Policy.",
              "type": "string"
            },
            "policyDefinitionId": {
              "description": "The ID of the Policy Definition or Policy Definition Set. Changing this forces a new Policy Assignment to be created.",
              "type": "string"
            },
            "policyDefinitionIdRef": {
              "description": "Reference to a PolicyDefinition in authorization to populate policyDefinitionId.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "policyDefinitionIdSelector": {
              "description": "Selector for a PolicyDefinition in authorization to populate policyDefinitionId.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "resourceSelectors": {
              "description": "One or more resource_selectors blocks as defined below to filter polices by resource properties.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Specifies a name for the resource selector.",
                    "type": "string"
                  },
                  "selectors": {
                    "description": "One or more resource_selector block as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "in": {
                          "description": "The list of allowed values for the specified kind. Cannot be used with not_in. Can contain up to 50 values.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "kind": {
                          "description": "Specifies which characteristic will narrow down the set of evaluated resources. Possible values are resourceLocation, resourceType and resourceWithoutLocation.",
                          "type": "string"
                        },
                        "notIn": {
                          "description": "The list of not-allowed values for the specified kind. Cannot be used with in. Can contain up to 50 values.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "additionalProperties": false
                    }
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "additionalProperties": false
        },
        "managementPolicies": {
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out\nthrough a Crossplane feature flag.\nManagementPolicies specify the array of actions Crossplane is allowed to\ntake on the managed and external resources.\nThis field is planned to replace the DeletionPolicy field in a future\nrelease. Currently, both could be set independently and non-default\nvalues would be honored if the feature flag is enabled. If both are\ncustom, the DeletionPolicy field will be ignored.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223\nand this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers\ncan take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to\ncreate, observe, update, and delete this managed resource should be\nconfigured.",
          "type": "object",
          "default": {
            "name": "default"
          },
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "type": "object",
              "properties": {
                "resolution": {
                  "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                  "type": "string",
                  "default": "Required",
                  "enum": [
                    "Required",
                    "Optional"
                  ]
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                  "type": "string",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a\nSecret to which any connection details for this managed resource should\nbe written. Connection details frequently include the endpoint, username,\nand password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name",
            "namespace"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "ManagementGroupPolicyAssignmentStatus defines the observed state of ManagementGroupPolicyAssignment.",
      "type": "object",
      "properties": {
        "atProvider": {
          "type": "object",
          "properties": {
            "description": {
              "description": "A description which should be used for this Policy Assignment.",
              "type": "string"
            },
            "displayName": {
              "description": "The Display Name for this Policy Assignment.",
              "type": "string"
            },
            "enforce": {
              "description": "Specifies if this Policy should be enforced or not? Defaults to true.",
              "type": "boolean"
            },
            "id": {
              "description": "The ID of the Management Group Policy Assignment.",
              "type": "string"
            },
            "identity": {
              "description": "An identity block as defined below.",
              "type": "object",
              "properties": {
                "identityIds": {
                  "description": "A list of User Managed Identity IDs which should be assigned to the Policy Definition.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "x-kubernetes-list-type": "set"
                },
                "principalId": {
                  "description": "The Principal ID of the Policy Assignment for this Management Group.",
                  "type": "string"
                },
                "tenantId": {
                  "description": "The Tenant ID of the Policy Assignment for this Management Group.",
                  "type": "string"
                },
                "type": {
                  "description": "The Type of Managed Identity which should be added to this Policy Definition. Possible values are SystemAssigned and UserAssigned.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "location": {
              "description": "The Azure Region where the Policy Assignment should exist. Changing this forces a new Policy Assignment to be created.",
              "type": "string"
            },
            "managementGroupId": {
              "description": "The ID of the Management Group. Changing this forces a new Policy Assignment to be created.",
              "type": "string"
            },
            "metadata": {
              "description": "A JSON mapping of any Metadata for this Policy.",
              "type": "string"
            },
            "nonComplianceMessage": {
              "description": "One or more non_compliance_message blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "content": {
                    "description": "The non-compliance message text. When assigning policy sets (initiatives), unless policy_definition_reference_id is specified then this message will be the default for all policies.",
                    "type": "string"
                  },
                  "policyDefinitionReferenceId": {
                    "description": "When assigning policy sets (initiatives), this is the ID of the policy definition that the non-compliance message applies to.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "notScopes": {
              "description": "Specifies a list of Resource Scopes (for example a Subscription, or a Resource Group) within this Management Group which are excluded from this Policy.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "overrides": {
              "description": "One or more overrides blocks as defined below. More detail about overrides and resource_selectors see policy assignment structure",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "selectors": {
                    "description": "One or more override_selector block as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "in": {
                          "description": "The list of allowed values for the specified kind. Cannot be used with not_in. Can contain up to 50 values.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "kind": {
                          "description": "Specifies which characteristic will narrow down the set of evaluated resources. Possible values are resourceLocation, resourceType and resourceWithoutLocation.",
                          "type": "string"
                        },
                        "notIn": {
                          "description": "The list of not-allowed values for the specified kind. Cannot be used with in. Can contain up to 50 values.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "value": {
                    "description": "Specifies the value to override the policy property. Possible values for policyEffect override listed policy effects.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "parameters": {
              "description": "A JSON mapping of any Parameters for this Policy.",
              "type": "string"
            },
            "policyDefinitionId": {
              "description": "The ID of the Policy Definition or Policy Definition Set. Changing this forces a new Policy Assignment to be created.",
              "type": "string"
            },
            "resourceSelectors": {
              "description": "One or more resource_selectors blocks as defined below to filter polices by resource properties.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Specifies a name for the resource selector.",
                    "type": "string"
                  },
                  "selectors": {
                    "description": "One or more resource_selector block as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "in": {
                          "description": "The list of allowed values for the specified kind. Cannot be used with not_in. Can contain up to 50 values.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "kind": {
                          "description": "Specifies which characteristic will narrow down the set of evaluated resources. Possible values are resourceLocation, resourceType and resourceWithoutLocation.",
                          "type": "string"
                        },
                        "notIn": {
                          "description": "The list of not-allowed values for the specified kind. Cannot be used with in. Can contain up to 50 values.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "additionalProperties": false
                    }
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "type": "array",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one\nstatus to another.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from\none status to another, if any.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to\na resource at any point in time.",
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest metadata.generation\nwhich resulted in either a ready state, or stalled due to error\nit can not recover from without human intervention.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    }
  }
}
