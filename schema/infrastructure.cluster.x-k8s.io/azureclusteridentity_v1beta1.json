{
  "description": "AzureClusterIdentity is the Schema for the azureclustersidentities API.",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "AzureClusterIdentitySpec defines the parameters that are used to create an AzureIdentity.",
      "type": "object",
      "required": [
        "clientID",
        "tenantID",
        "type"
      ],
      "properties": {
        "allowedNamespaces": {
          "description": "AllowedNamespaces is used to identify the namespaces the clusters are allowed to use the identity from.\nNamespaces can be selected either using an array of namespaces or with label selector.\nAn empty allowedNamespaces object indicates that AzureClusters can use this identity from any namespace.\nIf this object is nil, no namespaces will be allowed (default behaviour, if this field is not provided)\nA namespace should be either in the NamespaceList or match with Selector to use the identity.",
          "type": "object",
          "properties": {
            "list": {
              "description": "A nil or empty list indicates that AzureCluster cannot use the identity from any namespace.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "selector": {
              "description": "Selector is a selector of namespaces that AzureCluster can\nuse this Identity from. This is a standard Kubernetes LabelSelector,\na label query over a set of resources. The result of matchLabels and\nmatchExpressions are ANDed.\n\nA nil or empty selector indicates that AzureCluster cannot use this\nAzureClusterIdentity from any namespace.",
              "type": "object",
              "properties": {
                "matchExpressions": {
                  "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                  "type": "array",
                  "items": {
                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                    "type": "object",
                    "required": [
                      "key",
                      "operator"
                    ],
                    "properties": {
                      "key": {
                        "description": "key is the label key that the selector applies to.",
                        "type": "string"
                      },
                      "operator": {
                        "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                        "type": "string"
                      },
                      "values": {
                        "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "x-kubernetes-list-type": "atomic"
                      }
                    },
                    "additionalProperties": false
                  },
                  "x-kubernetes-list-type": "atomic"
                },
                "matchLabels": {
                  "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              },
              "additionalProperties": false,
              "x-kubernetes-map-type": "atomic"
            }
          },
          "additionalProperties": false,
          "nullable": true
        },
        "certPath": {
          "description": "CertPath is the path where certificates exist. When set, it takes precedence over ClientSecret for types that use certs like ServicePrincipalCertificate.",
          "type": "string"
        },
        "clientID": {
          "description": "ClientID is the service principal client ID.\nBoth User Assigned MSI and SP can use this field.",
          "type": "string"
        },
        "clientSecret": {
          "description": "ClientSecret is a secret reference which should contain either a Service Principal password or certificate secret.",
          "type": "object",
          "properties": {
            "name": {
              "description": "name is unique within a namespace to reference a secret resource.",
              "type": "string"
            },
            "namespace": {
              "description": "namespace defines the space within which the secret name must be unique.",
              "type": "string"
            }
          },
          "additionalProperties": false,
          "x-kubernetes-map-type": "atomic"
        },
        "resourceID": {
          "description": "ResourceID is the Azure resource ID for the User Assigned MSI resource.\nOnly applicable when type is UserAssignedMSI.\n\nDeprecated: This field no longer has any effect.",
          "type": "string"
        },
        "tenantID": {
          "description": "TenantID is the service principal primary tenant id.",
          "type": "string"
        },
        "type": {
          "description": "Type is the type of Azure Identity used.\nServicePrincipal, ServicePrincipalCertificate, UserAssignedMSI, ManualServicePrincipal, UserAssignedIdentityCredential, or WorkloadIdentity.",
          "type": "string",
          "enum": [
            "ServicePrincipal",
            "UserAssignedMSI",
            "ManualServicePrincipal",
            "ServicePrincipalCertificate",
            "WorkloadIdentity",
            "UserAssignedIdentityCredential"
          ]
        },
        "userAssignedIdentityCredentialsCloudType": {
          "description": "UserAssignedIdentityCredentialsCloudType is used with UserAssignedIdentityCredentialsPath to specify the Cloud\ntype. Can only be one of the following values: public, china, or usgovernment\nIf a value is not specified, defaults to public",
          "type": "string"
        },
        "userAssignedIdentityCredentialsPath": {
          "description": "UserAssignedIdentityCredentialsPath is the path where an existing JSON file exists containing the JSON format of\na UserAssignedIdentityCredentials struct.\nSee the msi-dataplane for more details on UserAssignedIdentityCredentials - https://github.com/Azure/msi-dataplane/blob/main/pkg/dataplane/internal/client/models.go#L125",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "AzureClusterIdentityStatus defines the observed state of AzureClusterIdentity.",
      "type": "object",
      "properties": {
        "conditions": {
          "description": "Conditions defines current service state of the AzureClusterIdentity.",
          "type": "array",
          "items": {
            "description": "Condition defines an observation of a Cluster API resource operational state.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed. If that is not known, then using the time when\nthe API field changed is acceptable.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition.\nThis field may be empty.",
                "type": "string",
                "maxLength": 10240,
                "minLength": 1
              },
              "reason": {
                "description": "reason is the reason for the condition's last transition in CamelCase.\nThe specific API may choose whether or not this field is considered a guaranteed API.\nThis field may be empty.",
                "type": "string",
                "maxLength": 256,
                "minLength": 1
              },
              "severity": {
                "description": "severity provides an explicit classification of Reason code, so the users or machines can immediately\nunderstand the current situation and act accordingly.\nThe Severity field MUST be set only when Status=False.",
                "type": "string",
                "maxLength": 32
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "type": "string"
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase.\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions\ncan be useful (see .node.status.conditions), the ability to deconflict is important.",
                "type": "string",
                "maxLength": 256,
                "minLength": 1
              }
            },
            "additionalProperties": false
          }
        }
      },
      "additionalProperties": false
    }
  }
}
