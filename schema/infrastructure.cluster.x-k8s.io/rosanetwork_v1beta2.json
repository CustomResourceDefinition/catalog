{
  "description": "ROSANetwork is the schema for the rosanetworks API",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "ROSANetworkSpec defines the desired state of ROSANetwork",
      "type": "object",
      "required": [
        "cidrBlock",
        "region",
        "stackName"
      ],
      "properties": {
        "availabilityZoneCount": {
          "description": "The number of availability zones to be used for creation of the network infrastructure.\nYou can specify anything between one and four, depending on the chosen AWS region.",
          "type": "integer",
          "default": 1
        },
        "availabilityZones": {
          "description": "The list of availability zones to be used for creation of the network infrastructure.\nYou can specify anything between one and four valid availability zones from a given region.\nShould you specify both the availabilityZoneCount and availabilityZones, the list of availability zones takes preference.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "cidrBlock": {
          "description": "CIDR block to be used for the VPC",
          "type": "string",
          "format": "cidr"
        },
        "identityRef": {
          "description": "IdentityRef is a reference to an identity to be used when reconciling rosa network.\nIf no identity is specified, the default identity for this controller will be used.",
          "type": "object",
          "required": [
            "kind",
            "name"
          ],
          "properties": {
            "kind": {
              "description": "Kind of the identity.",
              "type": "string",
              "enum": [
                "AWSClusterControllerIdentity",
                "AWSClusterRoleIdentity",
                "AWSClusterStaticIdentity"
              ]
            },
            "name": {
              "description": "Name of the identity.",
              "type": "string",
              "minLength": 1
            }
          },
          "additionalProperties": false
        },
        "region": {
          "description": "The AWS region in which the components of ROSA network infrastruture are to be crated",
          "type": "string"
        },
        "stackName": {
          "description": "The name of the cloudformation stack under which the network infrastructure would be created",
          "type": "string"
        },
        "stackTags": {
          "description": "StackTags is an optional set of tags to add to the created cloudformation stack.\nThe stack tags will then be automatically applied to the supported AWS resources (VPC, subnets, ...).",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "ROSANetworkStatus defines the observed state of ROSANetwork",
      "type": "object",
      "properties": {
        "conditions": {
          "description": "Conditions specifies the conditions for ROSANetwork",
          "type": "array",
          "items": {
            "description": "Condition defines an observation of a Cluster API resource operational state.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed. If that is not known, then using the time when\nthe API field changed is acceptable.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition.\nThis field may be empty.",
                "type": "string",
                "maxLength": 10240,
                "minLength": 1
              },
              "reason": {
                "description": "reason is the reason for the condition's last transition in CamelCase.\nThe specific API may choose whether or not this field is considered a guaranteed API.\nThis field may be empty.",
                "type": "string",
                "maxLength": 256,
                "minLength": 1
              },
              "severity": {
                "description": "severity provides an explicit classification of Reason code, so the users or machines can immediately\nunderstand the current situation and act accordingly.\nThe Severity field MUST be set only when Status=False.",
                "type": "string",
                "maxLength": 32
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "type": "string"
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase.\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions\ncan be useful (see .node.status.conditions), the ability to deconflict is important.",
                "type": "string",
                "maxLength": 256,
                "minLength": 1
              }
            },
            "additionalProperties": false
          }
        },
        "resources": {
          "description": "Resources created in the cloudformation stack",
          "type": "array",
          "items": {
            "description": "CFResource groups information pertaining to a resource created as a part of a cloudformation stack",
            "type": "object",
            "required": [
              "logicalId",
              "physicalId",
              "reason",
              "resource",
              "status"
            ],
            "properties": {
              "logicalId": {
                "description": "LogicalResourceID of the created resource.",
                "type": "string"
              },
              "physicalId": {
                "description": "PhysicalResourceID of the created resource.",
                "type": "string"
              },
              "reason": {
                "description": "Message pertaining to the status of the resource",
                "type": "string"
              },
              "resource": {
                "description": "Type of the created resource: AWS::EC2::VPC, AWS::EC2::Subnet, ...",
                "type": "string"
              },
              "status": {
                "description": "Status of the resource: CREATE_IN_PROGRESS, CREATE_COMPLETE, ...",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "subnets": {
          "description": "Array of created private, public subnets and availability zones, grouped by availability zones",
          "type": "array",
          "items": {
            "description": "ROSANetworkSubnet groups public and private subnet and the availability zone in which the two subnets got created",
            "type": "object",
            "required": [
              "availabilityZone",
              "privateSubnet",
              "publicSubnet"
            ],
            "properties": {
              "availabilityZone": {
                "description": "Availability zone of the subnet pair, for example us-west-2a",
                "type": "string"
              },
              "privateSubnet": {
                "description": "ID of the private subnet, for example subnet-07a20d6c41af2b725",
                "type": "string"
              },
              "publicSubnet": {
                "description": "ID of the public subnet, for example subnet-0f7e49a3ce68ff338",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        }
      },
      "additionalProperties": false
    }
  }
}
