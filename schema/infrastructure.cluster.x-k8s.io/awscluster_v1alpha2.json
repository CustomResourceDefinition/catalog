{
  "description": "AWSCluster is the Schema for the awsclusters API",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "AWSClusterSpec defines the desired state of AWSCluster",
      "type": "object",
      "properties": {
        "additionalTags": {
          "description": "AdditionalTags is an optional set of tags to add to AWS resources managed by the AWS provider, in addition to the ones added by default.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "controlPlaneLoadBalancer": {
          "description": "ControlPlaneLoadBalancer is optional configuration for customizing control plane behavior",
          "type": "object",
          "properties": {
            "scheme": {
              "description": "Scheme sets the scheme of the load balancer (defaults to Internet-facing)",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "disableBastionHost": {
          "description": "DisableBastionHost is an optional configuration field to prevent the creation of a bastion host instance.",
          "type": "boolean"
        },
        "networkSpec": {
          "description": "NetworkSpec encapsulates all things related to AWS network.",
          "type": "object",
          "properties": {
            "subnets": {
              "description": "Subnets configuration.",
              "type": "array",
              "items": {
                "description": "SubnetSpec configures an AWS Subnet.",
                "type": "object",
                "properties": {
                  "availabilityZone": {
                    "description": "AvailabilityZone defines the availability zone to use for this subnet in the cluster's region.",
                    "type": "string"
                  },
                  "cidrBlock": {
                    "description": "CidrBlock is the CIDR block to be used when the provider creates a managed VPC.",
                    "type": "string"
                  },
                  "id": {
                    "description": "ID defines a unique identifier to reference this resource.",
                    "type": "string"
                  },
                  "isPublic": {
                    "description": "IsPublic defines the subnet as a public subnet. A subnet is public when it is associated with a route table that has a route to an internet gateway.",
                    "type": "boolean"
                  },
                  "natGatewayId": {
                    "description": "NatGatewayID is the NAT gateway id associated with the subnet. Ignored unless the subnet is managed by the provider, in which case this is set on the public subnet where the NAT gateway resides. It is then used to determine routes for private subnets in the same AZ as the public subnet.",
                    "type": "string"
                  },
                  "routeTableId": {
                    "description": "RouteTableID is the routing table id associated with the subnet.",
                    "type": "string"
                  },
                  "tags": {
                    "description": "Tags is a collection of tags describing the resource.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "vpc": {
              "description": "VPC configuration.",
              "type": "object",
              "properties": {
                "cidrBlock": {
                  "description": "CidrBlock is the CIDR block to be used when the provider creates a managed VPC. Defaults to 10.0.0.0/16.",
                  "type": "string"
                },
                "id": {
                  "description": "ID is the vpc-id of the VPC this provider should use to create resources.",
                  "type": "string"
                },
                "internetGatewayId": {
                  "description": "InternetGatewayID is the id of the internet gateway associated with the VPC.",
                  "type": "string"
                },
                "tags": {
                  "description": "Tags is a collection of tags describing the resource.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "region": {
          "description": "The AWS Region the cluster lives in.",
          "type": "string"
        },
        "sshKeyName": {
          "description": "SSHKeyName is the name of the ssh key to attach to the bastion host.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "AWSClusterStatus defines the observed state of AWSCluster",
      "type": "object",
      "required": [
        "ready"
      ],
      "properties": {
        "apiEndpoints": {
          "description": "APIEndpoints represents the endpoints to communicate with the control plane.",
          "type": "array",
          "items": {
            "description": "APIEndpoint represents a reachable Kubernetes API endpoint.",
            "type": "object",
            "required": [
              "host",
              "port"
            ],
            "properties": {
              "host": {
                "description": "The hostname on which the API server is serving.",
                "type": "string"
              },
              "port": {
                "description": "The port on which the API server is serving.",
                "type": "integer"
              }
            },
            "additionalProperties": false
          }
        },
        "bastion": {
          "description": "Instance describes an AWS instance.",
          "type": "object",
          "required": [
            "id"
          ],
          "properties": {
            "addresses": {
              "description": "Addresses contains the AWS instance associated addresses.",
              "type": "array",
              "items": {
                "description": "MachineAddress contains information for the node's address.",
                "type": "object",
                "required": [
                  "address",
                  "type"
                ],
                "properties": {
                  "address": {
                    "description": "The machine address.",
                    "type": "string"
                  },
                  "type": {
                    "description": "Machine address type, one of Hostname, ExternalIP or InternalIP.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "ebsOptimized": {
              "description": "Indicates whether the instance is optimized for Amazon EBS I/O.",
              "type": "boolean"
            },
            "enaSupport": {
              "description": "Specifies whether enhanced networking with ENA is enabled.",
              "type": "boolean"
            },
            "iamProfile": {
              "description": "The name of the IAM instance profile associated with the instance, if applicable.",
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "imageId": {
              "description": "The ID of the AMI used to launch the instance.",
              "type": "string"
            },
            "instanceState": {
              "description": "The current state of the instance.",
              "type": "string"
            },
            "networkInterfaces": {
              "description": "Specifies ENIs attached to instance",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "privateIp": {
              "description": "The private IPv4 address assigned to the instance.",
              "type": "string"
            },
            "publicIp": {
              "description": "The public IPv4 address assigned to the instance, if applicable.",
              "type": "string"
            },
            "rootDeviceSize": {
              "description": "Specifies size (in Gi) of the root storage device",
              "type": "integer",
              "format": "int64"
            },
            "securityGroupIds": {
              "description": "SecurityGroupIDs are one or more security group IDs this instance belongs to.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "sshKeyName": {
              "description": "The name of the SSH key pair.",
              "type": "string"
            },
            "subnetId": {
              "description": "The ID of the subnet of the instance.",
              "type": "string"
            },
            "tags": {
              "description": "The tags associated with the instance.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "type": {
              "description": "The instance type.",
              "type": "string"
            },
            "userData": {
              "description": "UserData is the raw data script passed to the instance which is run upon bootstrap. This field must not be base64 encoded and should only be used when running a new instance.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "network": {
          "description": "Network encapsulates AWS networking resources.",
          "type": "object",
          "properties": {
            "apiServerElb": {
              "description": "APIServerELB is the Kubernetes api server classic load balancer.",
              "type": "object",
              "properties": {
                "attributes": {
                  "description": "Attributes defines extra attributes associated with the load balancer.",
                  "type": "object",
                  "properties": {
                    "idleTimeout": {
                      "description": "IdleTimeout is time that the connection is allowed to be idle (no data has been sent over the connection) before it is closed by the load balancer.",
                      "type": "integer",
                      "format": "int64"
                    }
                  },
                  "additionalProperties": false
                },
                "dnsName": {
                  "description": "DNSName is the dns name of the load balancer.",
                  "type": "string"
                },
                "healthChecks": {
                  "description": "HealthCheck is the classic elb health check associated with the load balancer.",
                  "type": "object",
                  "required": [
                    "healthyThreshold",
                    "interval",
                    "target",
                    "timeout",
                    "unhealthyThreshold"
                  ],
                  "properties": {
                    "healthyThreshold": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "interval": {
                      "description": "A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years.",
                      "type": "integer",
                      "format": "int64"
                    },
                    "target": {
                      "type": "string"
                    },
                    "timeout": {
                      "description": "A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years.",
                      "type": "integer",
                      "format": "int64"
                    },
                    "unhealthyThreshold": {
                      "type": "integer",
                      "format": "int64"
                    }
                  },
                  "additionalProperties": false
                },
                "listeners": {
                  "description": "Listeners is an array of classic elb listeners associated with the load balancer. There must be at least one.",
                  "type": "array",
                  "items": {
                    "description": "ClassicELBListener defines an AWS classic load balancer listener.",
                    "type": "object",
                    "required": [
                      "instancePort",
                      "instanceProtocol",
                      "port",
                      "protocol"
                    ],
                    "properties": {
                      "instancePort": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "instanceProtocol": {
                        "description": "ClassicELBProtocol defines listener protocols for a classic load balancer.",
                        "type": "string"
                      },
                      "port": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "protocol": {
                        "description": "ClassicELBProtocol defines listener protocols for a classic load balancer.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "name": {
                  "description": "The name of the load balancer. It must be unique within the set of load balancers defined in the region. It also serves as identifier.",
                  "type": "string"
                },
                "scheme": {
                  "description": "Scheme is the load balancer scheme, either internet-facing or private.",
                  "type": "string"
                },
                "securityGroupIds": {
                  "description": "SecurityGroupIDs is an array of security groups assigned to the load balancer.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "subnetIds": {
                  "description": "SubnetIDs is an array of subnets in the VPC attached to the load balancer.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "tags": {
                  "description": "Tags is a map of tags associated with the load balancer.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              },
              "additionalProperties": false
            },
            "securityGroups": {
              "description": "SecurityGroups is a map from the role/kind of the security group to its unique name, if any.",
              "type": "object",
              "additionalProperties": {
                "description": "SecurityGroup defines an AWS security group.",
                "type": "object",
                "required": [
                  "id",
                  "name"
                ],
                "properties": {
                  "id": {
                    "description": "ID is a unique identifier.",
                    "type": "string"
                  },
                  "ingressRule": {
                    "description": "IngressRules is the inbound rules associated with the security group.",
                    "type": "array",
                    "items": {
                      "description": "IngressRule defines an AWS ingress rule for security groups.",
                      "type": "object",
                      "required": [
                        "description",
                        "fromPort",
                        "protocol",
                        "toPort"
                      ],
                      "properties": {
                        "cidrBlocks": {
                          "description": "List of CIDR blocks to allow access from. Cannot be specified with SourceSecurityGroupID.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "description": {
                          "type": "string"
                        },
                        "fromPort": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "protocol": {
                          "description": "SecurityGroupProtocol defines the protocol type for a security group rule.",
                          "type": "string"
                        },
                        "sourceSecurityGroupIds": {
                          "description": "The security group id to allow access from. Cannot be specified with CidrBlocks.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "toPort": {
                          "type": "integer",
                          "format": "int64"
                        }
                      }
                    }
                  },
                  "name": {
                    "description": "Name is the security group name.",
                    "type": "string"
                  },
                  "tags": {
                    "description": "Tags is a map of tags associated with the security group.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "additionalProperties": false
        },
        "ready": {
          "type": "boolean"
        }
      },
      "additionalProperties": false
    }
  }
}
