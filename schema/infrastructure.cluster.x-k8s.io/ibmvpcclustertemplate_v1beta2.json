{
  "description": "IBMVPCClusterTemplate is the Schema for the ibmvpcclustertemplates API.",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "IBMVPCClusterTemplateSpec defines the desired state of IBMVPCClusterTemplate.",
      "type": "object",
      "properties": {
        "template": {
          "description": "IBMVPCClusterTemplateResource describes the data needed to create an IBMVPCCluster from a template.",
          "type": "object",
          "required": [
            "spec"
          ],
          "properties": {
            "metadata": {
              "description": "Standard object's metadata.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
              "type": "object",
              "properties": {
                "annotations": {
                  "description": "annotations is an unstructured key value map stored with a resource that may be\nset by external tools to store and retrieve arbitrary metadata. They are not\nqueryable and should be preserved when modifying objects.\nMore info: http://kubernetes.io/docs/user-guide/annotations",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "labels": {
                  "description": "labels is a map of string keys and values that can be used to organize and categorize\n(scope and select) objects. May match selectors of replication controllers\nand services.\nMore info: http://kubernetes.io/docs/user-guide/labels",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              },
              "additionalProperties": false
            },
            "spec": {
              "description": "IBMVPCClusterSpec defines the desired state of IBMVPCCluster.",
              "type": "object",
              "required": [
                "region",
                "resourceGroup"
              ],
              "properties": {
                "controlPlaneEndpoint": {
                  "description": "ControlPlaneEndpoint represents the endpoint used to communicate with the control plane.",
                  "type": "object",
                  "required": [
                    "host",
                    "port"
                  ],
                  "properties": {
                    "host": {
                      "description": "host is the hostname on which the API server is serving.",
                      "type": "string",
                      "maxLength": 512
                    },
                    "port": {
                      "description": "port is the port on which the API server is serving.",
                      "type": "integer",
                      "format": "int32"
                    }
                  },
                  "additionalProperties": false
                },
                "controlPlaneLoadBalancer": {
                  "description": "ControlPlaneLoadBalancer is optional configuration for customizing control plane behavior.\nUse this for legacy support, use Network.LoadBalancers for the extended VPC support.",
                  "type": "object",
                  "properties": {
                    "additionalListeners": {
                      "description": "AdditionalListeners sets the additional listeners for the control plane load balancer.",
                      "type": "array",
                      "items": {
                        "description": "AdditionalListenerSpec defines the desired state of an\nadditional listener on an VPC load balancer.",
                        "type": "object",
                        "required": [
                          "port"
                        ],
                        "properties": {
                          "defaultPoolName": {
                            "description": "defaultPoolName defines the name of a VPC Load Balancer Backend Pool to use for the VPC Load Balancer Listener.",
                            "type": "string",
                            "maxLength": 63,
                            "minLength": 1,
                            "pattern": "^([a-z]|[a-z][-a-z0-9]*[a-z0-9])$"
                          },
                          "port": {
                            "description": "Port sets the port for the additional listener.",
                            "type": "integer",
                            "format": "int64",
                            "maximum": 65535,
                            "minimum": 1
                          },
                          "protocol": {
                            "description": "protocol defines the protocol to use for the VPC Load Balancer Listener.\nWill default to TCP protocol if not specified.",
                            "type": "string",
                            "enum": [
                              "http",
                              "https",
                              "tcp",
                              "udp"
                            ]
                          },
                          "selector": {
                            "description": "The selector is used to find IBMPowerVSMachines with matching labels.\nIf the label matches, the machine is then added to the load balancer listener configuration.",
                            "type": "object",
                            "properties": {
                              "matchExpressions": {
                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                "type": "array",
                                "items": {
                                  "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                  "type": "object",
                                  "required": [
                                    "key",
                                    "operator"
                                  ],
                                  "properties": {
                                    "key": {
                                      "description": "key is the label key that the selector applies to.",
                                      "type": "string"
                                    },
                                    "operator": {
                                      "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                      "type": "string"
                                    },
                                    "values": {
                                      "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "x-kubernetes-list-type": "atomic"
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "x-kubernetes-list-type": "atomic"
                              },
                              "matchLabels": {
                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              }
                            },
                            "additionalProperties": false,
                            "x-kubernetes-map-type": "atomic"
                          }
                        },
                        "additionalProperties": false
                      },
                      "x-kubernetes-list-map-keys": [
                        "port"
                      ],
                      "x-kubernetes-list-type": "map"
                    },
                    "backendPools": {
                      "description": "backendPools defines the load balancer's backend pools.",
                      "type": "array",
                      "items": {
                        "description": "VPCLoadBalancerBackendPoolSpec defines the desired configuration of a VPC Load Balancer Backend Pool.",
                        "type": "object",
                        "required": [
                          "algorithm",
                          "healthMonitor",
                          "protocol"
                        ],
                        "properties": {
                          "algorithm": {
                            "description": "algorithm defines the load balancing algorithm to use.",
                            "type": "string",
                            "enum": [
                              "least_connections",
                              "round_robin",
                              "weighted_round_robin"
                            ]
                          },
                          "healthMonitor": {
                            "description": "healthMonitor defines the backend pool's health monitor.",
                            "type": "object",
                            "required": [
                              "delay",
                              "retries",
                              "timeout",
                              "type"
                            ],
                            "properties": {
                              "delay": {
                                "description": "delay defines the seconds to wait between health checks.",
                                "type": "integer",
                                "format": "int64",
                                "maximum": 60,
                                "minimum": 2
                              },
                              "port": {
                                "description": "port defines the port to perform health monitoring on.",
                                "type": "integer",
                                "format": "int64",
                                "maximum": 65535,
                                "minimum": 1
                              },
                              "retries": {
                                "description": "retries defines the max retries for health check.",
                                "type": "integer",
                                "format": "int64",
                                "maximum": 10,
                                "minimum": 1
                              },
                              "timeout": {
                                "description": "timeout defines the seconds to wait for a health check response.",
                                "type": "integer",
                                "format": "int64",
                                "maximum": 59,
                                "minimum": 1
                              },
                              "type": {
                                "description": "type defines the protocol used for health checks.",
                                "type": "string",
                                "enum": [
                                  "http",
                                  "https",
                                  "tcp"
                                ]
                              },
                              "urlPath": {
                                "description": "urlPath defines the URL to use for health monitoring.",
                                "type": "string",
                                "pattern": "^\\/(([a-zA-Z0-9-._~!$\u0026'()*+,;=:@]|%[a-fA-F0-9]{2})+(\\/([a-zA-Z0-9-._~!$\u0026'()*+,;=:@]|%[a-fA-F0-9]{2})*)*)?(\\\\?([a-zA-Z0-9-._~!$\u0026'()*+,;=:@\\/?]|%[a-fA-F0-9]{2})*)?$"
                              }
                            },
                            "additionalProperties": false
                          },
                          "name": {
                            "description": "name defines the name of the Backend Pool.",
                            "type": "string",
                            "maxLength": 63,
                            "minLength": 1,
                            "pattern": "^([a-z]|[a-z][-a-z0-9]*[a-z0-9])$"
                          },
                          "protocol": {
                            "description": "protocol defines the protocol to use for the Backend Pool.",
                            "type": "string",
                            "enum": [
                              "http",
                              "https",
                              "tcp",
                              "udp"
                            ]
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "id": {
                      "description": "id of the loadbalancer",
                      "type": "string",
                      "maxLength": 64,
                      "minLength": 1,
                      "pattern": "^[-0-9a-z_]+$"
                    },
                    "name": {
                      "description": "Name sets the name of the VPC load balancer.",
                      "type": "string",
                      "maxLength": 63,
                      "minLength": 1,
                      "pattern": "^([a-z]|[a-z][-a-z0-9]*[a-z0-9])$"
                    },
                    "public": {
                      "description": "public indicates that load balancer is public or private",
                      "type": "boolean",
                      "default": true
                    },
                    "securityGroups": {
                      "description": "securityGroups defines the Security Groups to attach to the load balancer.\nSecurity Groups defined here are expected to already exist when the load balancer is reconciled (these do not get created when reconciling the load balancer).",
                      "type": "array",
                      "items": {
                        "description": "VPCResource represents a VPC resource.",
                        "type": "object",
                        "properties": {
                          "id": {
                            "description": "id of the resource.",
                            "type": "string",
                            "minLength": 1
                          },
                          "name": {
                            "description": "name of the resource.",
                            "type": "string",
                            "minLength": 1
                          }
                        },
                        "additionalProperties": false,
                        "x-kubernetes-validations": [
                          {
                            "rule": "has(self.id) || has(self.name)",
                            "message": "an id or name must be provided"
                          }
                        ]
                      }
                    },
                    "subnets": {
                      "description": "subnets defines the VPC Subnets to attach to the load balancer.\nSubnets defiens here are expected to already exist when the load balancer is reconciled (these do not get created when reconciling the load balancer).",
                      "type": "array",
                      "items": {
                        "description": "VPCResource represents a VPC resource.",
                        "type": "object",
                        "properties": {
                          "id": {
                            "description": "id of the resource.",
                            "type": "string",
                            "minLength": 1
                          },
                          "name": {
                            "description": "name of the resource.",
                            "type": "string",
                            "minLength": 1
                          }
                        },
                        "additionalProperties": false,
                        "x-kubernetes-validations": [
                          {
                            "rule": "has(self.id) || has(self.name)",
                            "message": "an id or name must be provided"
                          }
                        ]
                      }
                    }
                  },
                  "additionalProperties": false
                },
                "image": {
                  "description": "image represents the Image details used for the cluster.",
                  "type": "object",
                  "properties": {
                    "cosBucket": {
                      "description": "cosBucket is the name of the IBM Cloud COS Bucket containing the source of the image, if necessary.",
                      "type": "string"
                    },
                    "cosBucketRegion": {
                      "description": "cosBucketRegion is the COS region the bucket is in.",
                      "type": "string"
                    },
                    "cosInstance": {
                      "description": "cosInstance is the name of the IBM Cloud COS Instance containing the source of the image, if necessary.",
                      "type": "string"
                    },
                    "cosObject": {
                      "description": "cosObject is the name of a IBM Cloud COS Object used as the source of the image, if necessary.",
                      "type": "string"
                    },
                    "crn": {
                      "description": "crn is the IBM Cloud CRN of the existing VPC Custom Image.",
                      "type": "string"
                    },
                    "name": {
                      "description": "name is the name of the desired VPC Custom Image.",
                      "type": "string",
                      "maxLength": 63,
                      "minLength": 1,
                      "pattern": "^([a-z]|[a-z][-a-z0-9]*[a-z0-9])$"
                    },
                    "operatingSystem": {
                      "description": "operatingSystem is the Custom Image's Operating System name.",
                      "type": "string"
                    },
                    "resourceGroup": {
                      "description": "resourceGroup is the Resource Group to create the Custom Image in.",
                      "type": "object",
                      "required": [
                        "id"
                      ],
                      "properties": {
                        "id": {
                          "description": "id defines the IBM Cloud Resource ID.",
                          "type": "string"
                        },
                        "name": {
                          "description": "name defines the IBM Cloud Resource Name.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false,
                  "x-kubernetes-validations": [
                    {
                      "rule": "(!has(self.cosInstance) \u0026\u0026 !has(self.cosBucket) \u0026\u0026 !has(self.cosObject)) || (has(self.cosInstance) \u0026\u0026 has(self.cosBucket) \u0026\u0026 has(self.cosObject))",
                      "message": "if any of cosInstance, cosBucket, or cosObject are specified, all must be specified"
                    },
                    {
                      "rule": "has(self.name) || has(self.crn) || (has(self.cosInstance) \u0026\u0026 has(self.cosBucket) \u0026\u0026 has(self.cosObject))",
                      "message": "an existing image name or crn must be provided, or to create a new image the cos resources must be provided, with or without a name"
                    }
                  ]
                },
                "network": {
                  "description": "network represents the VPC network to use for the cluster.",
                  "type": "object",
                  "properties": {
                    "controlPlaneSubnets": {
                      "description": "controlPlaneSubnets is a set of Subnet's which define the Control Plane subnets.",
                      "type": "array",
                      "items": {
                        "description": "Subnet describes a subnet.",
                        "type": "object",
                        "properties": {
                          "cidr": {
                            "type": "string"
                          },
                          "id": {
                            "type": "string",
                            "maxLength": 64,
                            "minLength": 1,
                            "pattern": "^[-0-9a-z_]+$"
                          },
                          "name": {
                            "type": "string",
                            "maxLength": 63,
                            "minLength": 1,
                            "pattern": "^([a-z]|[a-z][-a-z0-9]*[a-z0-9])$"
                          },
                          "zone": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "loadBalancers": {
                      "description": "loadBalancers is a set of VPC Load Balancer definitions to use for the cluster.",
                      "type": "array",
                      "items": {
                        "description": "VPCLoadBalancerSpec defines the desired state of an VPC load balancer.",
                        "type": "object",
                        "properties": {
                          "additionalListeners": {
                            "description": "AdditionalListeners sets the additional listeners for the control plane load balancer.",
                            "type": "array",
                            "items": {
                              "description": "AdditionalListenerSpec defines the desired state of an\nadditional listener on an VPC load balancer.",
                              "type": "object",
                              "required": [
                                "port"
                              ],
                              "properties": {
                                "defaultPoolName": {
                                  "description": "defaultPoolName defines the name of a VPC Load Balancer Backend Pool to use for the VPC Load Balancer Listener.",
                                  "type": "string",
                                  "maxLength": 63,
                                  "minLength": 1,
                                  "pattern": "^([a-z]|[a-z][-a-z0-9]*[a-z0-9])$"
                                },
                                "port": {
                                  "description": "Port sets the port for the additional listener.",
                                  "type": "integer",
                                  "format": "int64",
                                  "maximum": 65535,
                                  "minimum": 1
                                },
                                "protocol": {
                                  "description": "protocol defines the protocol to use for the VPC Load Balancer Listener.\nWill default to TCP protocol if not specified.",
                                  "type": "string",
                                  "enum": [
                                    "http",
                                    "https",
                                    "tcp",
                                    "udp"
                                  ]
                                },
                                "selector": {
                                  "description": "The selector is used to find IBMPowerVSMachines with matching labels.\nIf the label matches, the machine is then added to the load balancer listener configuration.",
                                  "type": "object",
                                  "properties": {
                                    "matchExpressions": {
                                      "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                      "type": "array",
                                      "items": {
                                        "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                        "type": "object",
                                        "required": [
                                          "key",
                                          "operator"
                                        ],
                                        "properties": {
                                          "key": {
                                            "description": "key is the label key that the selector applies to.",
                                            "type": "string"
                                          },
                                          "operator": {
                                            "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                            "type": "string"
                                          },
                                          "values": {
                                            "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            },
                                            "x-kubernetes-list-type": "atomic"
                                          }
                                        },
                                        "additionalProperties": false
                                      },
                                      "x-kubernetes-list-type": "atomic"
                                    },
                                    "matchLabels": {
                                      "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                      "type": "object",
                                      "additionalProperties": {
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "additionalProperties": false,
                                  "x-kubernetes-map-type": "atomic"
                                }
                              },
                              "additionalProperties": false
                            },
                            "x-kubernetes-list-map-keys": [
                              "port"
                            ],
                            "x-kubernetes-list-type": "map"
                          },
                          "backendPools": {
                            "description": "backendPools defines the load balancer's backend pools.",
                            "type": "array",
                            "items": {
                              "description": "VPCLoadBalancerBackendPoolSpec defines the desired configuration of a VPC Load Balancer Backend Pool.",
                              "type": "object",
                              "required": [
                                "algorithm",
                                "healthMonitor",
                                "protocol"
                              ],
                              "properties": {
                                "algorithm": {
                                  "description": "algorithm defines the load balancing algorithm to use.",
                                  "type": "string",
                                  "enum": [
                                    "least_connections",
                                    "round_robin",
                                    "weighted_round_robin"
                                  ]
                                },
                                "healthMonitor": {
                                  "description": "healthMonitor defines the backend pool's health monitor.",
                                  "type": "object",
                                  "required": [
                                    "delay",
                                    "retries",
                                    "timeout",
                                    "type"
                                  ],
                                  "properties": {
                                    "delay": {
                                      "description": "delay defines the seconds to wait between health checks.",
                                      "type": "integer",
                                      "format": "int64",
                                      "maximum": 60,
                                      "minimum": 2
                                    },
                                    "port": {
                                      "description": "port defines the port to perform health monitoring on.",
                                      "type": "integer",
                                      "format": "int64",
                                      "maximum": 65535,
                                      "minimum": 1
                                    },
                                    "retries": {
                                      "description": "retries defines the max retries for health check.",
                                      "type": "integer",
                                      "format": "int64",
                                      "maximum": 10,
                                      "minimum": 1
                                    },
                                    "timeout": {
                                      "description": "timeout defines the seconds to wait for a health check response.",
                                      "type": "integer",
                                      "format": "int64",
                                      "maximum": 59,
                                      "minimum": 1
                                    },
                                    "type": {
                                      "description": "type defines the protocol used for health checks.",
                                      "type": "string",
                                      "enum": [
                                        "http",
                                        "https",
                                        "tcp"
                                      ]
                                    },
                                    "urlPath": {
                                      "description": "urlPath defines the URL to use for health monitoring.",
                                      "type": "string",
                                      "pattern": "^\\/(([a-zA-Z0-9-._~!$\u0026'()*+,;=:@]|%[a-fA-F0-9]{2})+(\\/([a-zA-Z0-9-._~!$\u0026'()*+,;=:@]|%[a-fA-F0-9]{2})*)*)?(\\\\?([a-zA-Z0-9-._~!$\u0026'()*+,;=:@\\/?]|%[a-fA-F0-9]{2})*)?$"
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "name": {
                                  "description": "name defines the name of the Backend Pool.",
                                  "type": "string",
                                  "maxLength": 63,
                                  "minLength": 1,
                                  "pattern": "^([a-z]|[a-z][-a-z0-9]*[a-z0-9])$"
                                },
                                "protocol": {
                                  "description": "protocol defines the protocol to use for the Backend Pool.",
                                  "type": "string",
                                  "enum": [
                                    "http",
                                    "https",
                                    "tcp",
                                    "udp"
                                  ]
                                }
                              },
                              "additionalProperties": false
                            }
                          },
                          "id": {
                            "description": "id of the loadbalancer",
                            "type": "string",
                            "maxLength": 64,
                            "minLength": 1,
                            "pattern": "^[-0-9a-z_]+$"
                          },
                          "name": {
                            "description": "Name sets the name of the VPC load balancer.",
                            "type": "string",
                            "maxLength": 63,
                            "minLength": 1,
                            "pattern": "^([a-z]|[a-z][-a-z0-9]*[a-z0-9])$"
                          },
                          "public": {
                            "description": "public indicates that load balancer is public or private",
                            "type": "boolean",
                            "default": true
                          },
                          "securityGroups": {
                            "description": "securityGroups defines the Security Groups to attach to the load balancer.\nSecurity Groups defined here are expected to already exist when the load balancer is reconciled (these do not get created when reconciling the load balancer).",
                            "type": "array",
                            "items": {
                              "description": "VPCResource represents a VPC resource.",
                              "type": "object",
                              "properties": {
                                "id": {
                                  "description": "id of the resource.",
                                  "type": "string",
                                  "minLength": 1
                                },
                                "name": {
                                  "description": "name of the resource.",
                                  "type": "string",
                                  "minLength": 1
                                }
                              },
                              "additionalProperties": false,
                              "x-kubernetes-validations": [
                                {
                                  "rule": "has(self.id) || has(self.name)",
                                  "message": "an id or name must be provided"
                                }
                              ]
                            }
                          },
                          "subnets": {
                            "description": "subnets defines the VPC Subnets to attach to the load balancer.\nSubnets defiens here are expected to already exist when the load balancer is reconciled (these do not get created when reconciling the load balancer).",
                            "type": "array",
                            "items": {
                              "description": "VPCResource represents a VPC resource.",
                              "type": "object",
                              "properties": {
                                "id": {
                                  "description": "id of the resource.",
                                  "type": "string",
                                  "minLength": 1
                                },
                                "name": {
                                  "description": "name of the resource.",
                                  "type": "string",
                                  "minLength": 1
                                }
                              },
                              "additionalProperties": false,
                              "x-kubernetes-validations": [
                                {
                                  "rule": "has(self.id) || has(self.name)",
                                  "message": "an id or name must be provided"
                                }
                              ]
                            }
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "resourceGroup": {
                      "description": "resourceGroup is the Resource Group containing all of the newtork resources.\nThis can be different than the Resource Group containing the remaining cluster resources.",
                      "type": "object",
                      "required": [
                        "id"
                      ],
                      "properties": {
                        "id": {
                          "description": "id defines the IBM Cloud Resource ID.",
                          "type": "string"
                        },
                        "name": {
                          "description": "name defines the IBM Cloud Resource Name.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    },
                    "securityGroups": {
                      "description": "securityGroups is a set of VPCSecurityGroup's which define the VPC Security Groups that manage traffic within and out of the VPC.",
                      "type": "array",
                      "items": {
                        "description": "VPCSecurityGroup defines a VPC Security Group that should exist or be created within the specified VPC, with the specified Security Group Rules.",
                        "type": "object",
                        "properties": {
                          "id": {
                            "description": "id of the Security Group.",
                            "type": "string"
                          },
                          "name": {
                            "description": "name of the Security Group.",
                            "type": "string"
                          },
                          "rules": {
                            "description": "rules are the Security Group Rules for the Security Group.",
                            "type": "array",
                            "items": {
                              "description": "VPCSecurityGroupRule defines a VPC Security Group Rule for a specified Security Group.",
                              "type": "object",
                              "required": [
                                "action",
                                "direction"
                              ],
                              "properties": {
                                "action": {
                                  "description": "action defines whether to allow or deny traffic defined by the Security Group Rule.",
                                  "type": "string",
                                  "enum": [
                                    "allow",
                                    "deny"
                                  ]
                                },
                                "destination": {
                                  "description": "destination is a VPCSecurityGroupRulePrototype which defines the destination of outbound traffic for the Security Group Rule.\nOnly used when direction is VPCSecurityGroupRuleDirectionOutbound.",
                                  "type": "object",
                                  "required": [
                                    "protocol",
                                    "remotes"
                                  ],
                                  "properties": {
                                    "icmpCode": {
                                      "description": "icmpCode is the ICMP code for the Rule.\nOnly used when Protocol is VPCSecurityGroupRuleProtocolIcmp.",
                                      "type": "integer",
                                      "format": "int64"
                                    },
                                    "icmpType": {
                                      "description": "icmpType is the ICMP type for the Rule.\nOnly used when Protocol is VPCSecurityGroupRuleProtocolIcmp.",
                                      "type": "integer",
                                      "format": "int64"
                                    },
                                    "portRange": {
                                      "description": "portRange is a range of ports allowed for the Rule's remote.",
                                      "type": "object",
                                      "properties": {
                                        "maximumPort": {
                                          "description": "maximumPort is the inclusive upper range of ports.",
                                          "type": "integer",
                                          "format": "int64",
                                          "maximum": 65535,
                                          "minimum": 1
                                        },
                                        "minimumPort": {
                                          "description": "minimumPort is the inclusive lower range of ports.",
                                          "type": "integer",
                                          "format": "int64",
                                          "maximum": 65535,
                                          "minimum": 1
                                        }
                                      },
                                      "additionalProperties": false,
                                      "x-kubernetes-validations": [
                                        {
                                          "rule": "self.maximumPort \u003e= self.minimumPort",
                                          "message": "maximum port must be greater than or equal to minimum port"
                                        }
                                      ]
                                    },
                                    "protocol": {
                                      "description": "protocol defines the traffic protocol used for the Security Group Rule.",
                                      "type": "string",
                                      "enum": [
                                        "all",
                                        "icmp",
                                        "tcp",
                                        "udp"
                                      ]
                                    },
                                    "remotes": {
                                      "description": "remotes is a set of VPCSecurityGroupRuleRemote's that define the traffic allowed by the Rule's remote.\nSpecifying multiple VPCSecurityGroupRuleRemote's creates a unique Security Group Rule with the shared Protocol, PortRange, etc.\nThis allows for easier management of Security Group Rule's for sets of CIDR's, IP's, etc.",
                                      "type": "array",
                                      "items": {
                                        "description": "VPCSecurityGroupRuleRemote defines a VPC Security Group Rule's remote details.\nThe type of remote defines the additional remote details where are used for defining the remote.",
                                        "type": "object",
                                        "required": [
                                          "remoteType"
                                        ],
                                        "properties": {
                                          "address": {
                                            "description": " address is the address to use for the remote's destination/source.\nOnly used when remoteType is VPCSecurityGroupRuleRemoteTypeAddress.",
                                            "type": "string"
                                          },
                                          "cidrSubnetName": {
                                            "description": "cidrSubnetName is the name of the VPC Subnet to retrieve the CIDR from, to use for the remote's destination/source.\nOnly used when remoteType is VPCSecurityGroupRuleRemoteTypeCIDR.",
                                            "type": "string"
                                          },
                                          "remoteType": {
                                            "description": "remoteType defines the type of filter to define for the remote's destination/source.",
                                            "type": "string",
                                            "enum": [
                                              "any",
                                              "cidr",
                                              "address",
                                              "sg"
                                            ]
                                          },
                                          "securityGroupName": {
                                            "description": "securityGroupName is the name of the VPC Security Group to use for the remote's destination/source.\nOnly used when remoteType is VPCSecurityGroupRuleRemoteTypeSG",
                                            "type": "string"
                                          }
                                        },
                                        "additionalProperties": false,
                                        "x-kubernetes-validations": [
                                          {
                                            "rule": "self.remoteType == 'any' ? (!has(self.cidrSubnetName) \u0026\u0026 !has(self.address) \u0026\u0026 !has(self.securityGroupName)) : true",
                                            "message": "cidrSubnetName, addresss, and securityGroupName are not valid for VPCSecurityGroupRuleRemoteTypeAny remoteType"
                                          },
                                          {
                                            "rule": "self.remoteType == 'cidr' ? (has(self.cidrSubnetName) \u0026\u0026 !has(self.address) \u0026\u0026 !has(self.securityGroupName)) : true",
                                            "message": "only cidrSubnetName is valid for VPCSecurityGroupRuleRemoteTypeCIDR remoteType"
                                          },
                                          {
                                            "rule": "self.remoteType == 'address' ? (has(self.address) \u0026\u0026 !has(self.cidrSubnetName) \u0026\u0026 !has(self.securityGroupName)) : true",
                                            "message": "only address is valid for VPCSecurityGroupRuleRemoteTypeIP remoteType"
                                          },
                                          {
                                            "rule": "self.remoteType == 'sg' ? (has(self.securityGroupName) \u0026\u0026 !has(self.cidrSubnetName) \u0026\u0026 !has(self.address)) : true",
                                            "message": "only securityGroupName is valid for VPCSecurityGroupRuleRemoteTypeSG remoteType"
                                          }
                                        ]
                                      }
                                    }
                                  },
                                  "additionalProperties": false,
                                  "x-kubernetes-validations": [
                                    {
                                      "rule": "self.protocol != 'icmp' ? (!has(self.icmpCode) \u0026\u0026 !has(self.icmpType)) : true",
                                      "message": "icmpCode and icmpType are only supported for VPCSecurityGroupRuleProtocolIcmp protocol"
                                    },
                                    {
                                      "rule": "self.protocol == 'all' ? !has(self.portRange) : true",
                                      "message": "portRange is not valid for VPCSecurityGroupRuleProtocolAll protocol"
                                    },
                                    {
                                      "rule": "self.protocol == 'icmp' ? !has(self.portRange) : true",
                                      "message": "portRange is not valid for VPCSecurityGroupRuleProtocolIcmp protocol"
                                    }
                                  ]
                                },
                                "direction": {
                                  "description": "direction defines whether the traffic is inbound or outbound for the Security Group Rule.",
                                  "type": "string",
                                  "enum": [
                                    "inbound",
                                    "outbound"
                                  ]
                                },
                                "securityGroupID": {
                                  "description": "securityGroupID is the ID of the Security Group for the Security Group Rule.",
                                  "type": "string"
                                },
                                "source": {
                                  "description": "source is a VPCSecurityGroupRulePrototype which defines the source of inbound traffic for the Security Group Rule.\nOnly used when direction is VPCSecurityGroupRuleDirectionInbound.",
                                  "type": "object",
                                  "required": [
                                    "protocol",
                                    "remotes"
                                  ],
                                  "properties": {
                                    "icmpCode": {
                                      "description": "icmpCode is the ICMP code for the Rule.\nOnly used when Protocol is VPCSecurityGroupRuleProtocolIcmp.",
                                      "type": "integer",
                                      "format": "int64"
                                    },
                                    "icmpType": {
                                      "description": "icmpType is the ICMP type for the Rule.\nOnly used when Protocol is VPCSecurityGroupRuleProtocolIcmp.",
                                      "type": "integer",
                                      "format": "int64"
                                    },
                                    "portRange": {
                                      "description": "portRange is a range of ports allowed for the Rule's remote.",
                                      "type": "object",
                                      "properties": {
                                        "maximumPort": {
                                          "description": "maximumPort is the inclusive upper range of ports.",
                                          "type": "integer",
                                          "format": "int64",
                                          "maximum": 65535,
                                          "minimum": 1
                                        },
                                        "minimumPort": {
                                          "description": "minimumPort is the inclusive lower range of ports.",
                                          "type": "integer",
                                          "format": "int64",
                                          "maximum": 65535,
                                          "minimum": 1
                                        }
                                      },
                                      "additionalProperties": false,
                                      "x-kubernetes-validations": [
                                        {
                                          "rule": "self.maximumPort \u003e= self.minimumPort",
                                          "message": "maximum port must be greater than or equal to minimum port"
                                        }
                                      ]
                                    },
                                    "protocol": {
                                      "description": "protocol defines the traffic protocol used for the Security Group Rule.",
                                      "type": "string",
                                      "enum": [
                                        "all",
                                        "icmp",
                                        "tcp",
                                        "udp"
                                      ]
                                    },
                                    "remotes": {
                                      "description": "remotes is a set of VPCSecurityGroupRuleRemote's that define the traffic allowed by the Rule's remote.\nSpecifying multiple VPCSecurityGroupRuleRemote's creates a unique Security Group Rule with the shared Protocol, PortRange, etc.\nThis allows for easier management of Security Group Rule's for sets of CIDR's, IP's, etc.",
                                      "type": "array",
                                      "items": {
                                        "description": "VPCSecurityGroupRuleRemote defines a VPC Security Group Rule's remote details.\nThe type of remote defines the additional remote details where are used for defining the remote.",
                                        "type": "object",
                                        "required": [
                                          "remoteType"
                                        ],
                                        "properties": {
                                          "address": {
                                            "description": " address is the address to use for the remote's destination/source.\nOnly used when remoteType is VPCSecurityGroupRuleRemoteTypeAddress.",
                                            "type": "string"
                                          },
                                          "cidrSubnetName": {
                                            "description": "cidrSubnetName is the name of the VPC Subnet to retrieve the CIDR from, to use for the remote's destination/source.\nOnly used when remoteType is VPCSecurityGroupRuleRemoteTypeCIDR.",
                                            "type": "string"
                                          },
                                          "remoteType": {
                                            "description": "remoteType defines the type of filter to define for the remote's destination/source.",
                                            "type": "string",
                                            "enum": [
                                              "any",
                                              "cidr",
                                              "address",
                                              "sg"
                                            ]
                                          },
                                          "securityGroupName": {
                                            "description": "securityGroupName is the name of the VPC Security Group to use for the remote's destination/source.\nOnly used when remoteType is VPCSecurityGroupRuleRemoteTypeSG",
                                            "type": "string"
                                          }
                                        },
                                        "additionalProperties": false,
                                        "x-kubernetes-validations": [
                                          {
                                            "rule": "self.remoteType == 'any' ? (!has(self.cidrSubnetName) \u0026\u0026 !has(self.address) \u0026\u0026 !has(self.securityGroupName)) : true",
                                            "message": "cidrSubnetName, addresss, and securityGroupName are not valid for VPCSecurityGroupRuleRemoteTypeAny remoteType"
                                          },
                                          {
                                            "rule": "self.remoteType == 'cidr' ? (has(self.cidrSubnetName) \u0026\u0026 !has(self.address) \u0026\u0026 !has(self.securityGroupName)) : true",
                                            "message": "only cidrSubnetName is valid for VPCSecurityGroupRuleRemoteTypeCIDR remoteType"
                                          },
                                          {
                                            "rule": "self.remoteType == 'address' ? (has(self.address) \u0026\u0026 !has(self.cidrSubnetName) \u0026\u0026 !has(self.securityGroupName)) : true",
                                            "message": "only address is valid for VPCSecurityGroupRuleRemoteTypeIP remoteType"
                                          },
                                          {
                                            "rule": "self.remoteType == 'sg' ? (has(self.securityGroupName) \u0026\u0026 !has(self.cidrSubnetName) \u0026\u0026 !has(self.address)) : true",
                                            "message": "only securityGroupName is valid for VPCSecurityGroupRuleRemoteTypeSG remoteType"
                                          }
                                        ]
                                      }
                                    }
                                  },
                                  "additionalProperties": false,
                                  "x-kubernetes-validations": [
                                    {
                                      "rule": "self.protocol != 'icmp' ? (!has(self.icmpCode) \u0026\u0026 !has(self.icmpType)) : true",
                                      "message": "icmpCode and icmpType are only supported for VPCSecurityGroupRuleProtocolIcmp protocol"
                                    },
                                    {
                                      "rule": "self.protocol == 'all' ? !has(self.portRange) : true",
                                      "message": "portRange is not valid for VPCSecurityGroupRuleProtocolAll protocol"
                                    },
                                    {
                                      "rule": "self.protocol == 'icmp' ? !has(self.portRange) : true",
                                      "message": "portRange is not valid for VPCSecurityGroupRuleProtocolIcmp protocol"
                                    }
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "x-kubernetes-validations": [
                                {
                                  "rule": "(has(self.destination) \u0026\u0026 !has(self.source)) || (!has(self.destination) \u0026\u0026 has(self.source))",
                                  "message": "both destination and source cannot be provided"
                                },
                                {
                                  "rule": "self.direction == 'inbound' ? has(self.source) : true",
                                  "message": "source must be set for VPCSecurityGroupRuleDirectionInbound direction"
                                },
                                {
                                  "rule": "self.direction == 'inbound' ? !has(self.destination) : true",
                                  "message": "destination is not valid for VPCSecurityGroupRuleDirectionInbound direction"
                                },
                                {
                                  "rule": "self.direction == 'outbound' ? has(self.destination) : true",
                                  "message": "destination must be set for VPCSecurityGroupRuleDirectionOutbound direction"
                                },
                                {
                                  "rule": "self.direction == 'outbound' ? !has(self.source) : true",
                                  "message": "source is not valid for VPCSecurityGroupRuleDirectionOutbound direction"
                                }
                              ]
                            }
                          },
                          "tags": {
                            "description": "tags are tags to add to the Security Group.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        },
                        "additionalProperties": false,
                        "x-kubernetes-validations": [
                          {
                            "rule": "has(self.id) || has(self.name)",
                            "message": "either an id or name must be specified"
                          }
                        ]
                      }
                    },
                    "vpc": {
                      "description": "vpc defines the IBM Cloud VPC for extended VPC Infrastructure support.",
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "id of the resource.",
                          "type": "string",
                          "minLength": 1
                        },
                        "name": {
                          "description": "name of the resource.",
                          "type": "string",
                          "minLength": 1
                        }
                      },
                      "additionalProperties": false,
                      "x-kubernetes-validations": [
                        {
                          "rule": "has(self.id) || has(self.name)",
                          "message": "an id or name must be provided"
                        }
                      ]
                    },
                    "workerSubnets": {
                      "description": "workerSubnets is a set of Subnet's which define the Worker subnets.",
                      "type": "array",
                      "items": {
                        "description": "Subnet describes a subnet.",
                        "type": "object",
                        "properties": {
                          "cidr": {
                            "type": "string"
                          },
                          "id": {
                            "type": "string",
                            "maxLength": 64,
                            "minLength": 1,
                            "pattern": "^[-0-9a-z_]+$"
                          },
                          "name": {
                            "type": "string",
                            "maxLength": 63,
                            "minLength": 1,
                            "pattern": "^([a-z]|[a-z][-a-z0-9]*[a-z0-9])$"
                          },
                          "zone": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": false
                      }
                    }
                  },
                  "additionalProperties": false
                },
                "region": {
                  "description": "The IBM Cloud Region the cluster lives in.",
                  "type": "string"
                },
                "resourceGroup": {
                  "description": "The VPC resources should be created under the resource group.",
                  "type": "string"
                },
                "vpc": {
                  "description": "The Name of VPC.",
                  "type": "string"
                },
                "zone": {
                  "description": "The Name of availability zone.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  }
}
