{
  "type": "object",
  "properties": {
    "apiVersion": {
      "type": "string"
    },
    "kind": {
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "type": "object",
      "required": [
        "network",
        "serviceInstanceID"
      ],
      "properties": {
        "controlPlaneEndpoint": {
          "type": "object",
          "required": [
            "host",
            "port"
          ],
          "properties": {
            "host": {
              "type": "string",
              "maxLength": 512
            },
            "port": {
              "type": "integer",
              "format": "int32"
            }
          },
          "additionalProperties": false
        },
        "cosInstance": {
          "type": "object",
          "properties": {
            "bucketName": {
              "type": "string"
            },
            "bucketRegion": {
              "type": "string"
            },
            "name": {
              "type": "string",
              "maxLength": 63,
              "minLength": 3,
              "pattern": "^[a-z0-9][a-z0-9.-]{1,61}[a-z0-9]$"
            }
          },
          "additionalProperties": false
        },
        "dhcpServer": {
          "type": "object",
          "properties": {
            "cidr": {
              "type": "string"
            },
            "dnsServer": {
              "type": "string",
              "default": "1.1.1.1"
            },
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "snat": {
              "type": "boolean",
              "default": true
            }
          },
          "additionalProperties": false
        },
        "ignition": {
          "type": "object",
          "properties": {
            "version": {
              "type": "string",
              "default": "2.3",
              "enum": [
                "2.3",
                "2.4",
                "3.0",
                "3.1",
                "3.2",
                "3.3",
                "3.4"
              ]
            }
          },
          "additionalProperties": false
        },
        "loadBalancers": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "additionalListeners": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "port"
                  ],
                  "properties": {
                    "defaultPoolName": {
                      "type": "string",
                      "maxLength": 63,
                      "minLength": 1,
                      "pattern": "^([a-z]|[a-z][-a-z0-9]*[a-z0-9])$"
                    },
                    "port": {
                      "type": "integer",
                      "format": "int64",
                      "maximum": 65535,
                      "minimum": 1
                    },
                    "protocol": {
                      "type": "string",
                      "enum": [
                        "http",
                        "https",
                        "tcp",
                        "udp"
                      ]
                    }
                  },
                  "additionalProperties": false
                },
                "x-kubernetes-list-map-keys": [
                  "port"
                ],
                "x-kubernetes-list-type": "map"
              },
              "backendPools": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "algorithm",
                    "healthMonitor",
                    "protocol"
                  ],
                  "properties": {
                    "algorithm": {
                      "type": "string",
                      "enum": [
                        "least_connections",
                        "round_robin",
                        "weighted_round_robin"
                      ]
                    },
                    "healthMonitor": {
                      "type": "object",
                      "required": [
                        "delay",
                        "retries",
                        "timeout",
                        "type"
                      ],
                      "properties": {
                        "delay": {
                          "type": "integer",
                          "format": "int64",
                          "maximum": 60,
                          "minimum": 2
                        },
                        "port": {
                          "type": "integer",
                          "format": "int64",
                          "maximum": 65535,
                          "minimum": 1
                        },
                        "retries": {
                          "type": "integer",
                          "format": "int64",
                          "maximum": 10,
                          "minimum": 1
                        },
                        "timeout": {
                          "type": "integer",
                          "format": "int64",
                          "maximum": 59,
                          "minimum": 1
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "http",
                            "https",
                            "tcp"
                          ]
                        },
                        "urlPath": {
                          "type": "string",
                          "pattern": "^\\/(([a-zA-Z0-9-._~!$\u0026'()*+,;=:@]|%[a-fA-F0-9]{2})+(\\/([a-zA-Z0-9-._~!$\u0026'()*+,;=:@]|%[a-fA-F0-9]{2})*)*)?(\\\\?([a-zA-Z0-9-._~!$\u0026'()*+,;=:@\\/?]|%[a-fA-F0-9]{2})*)?$"
                        }
                      },
                      "additionalProperties": false
                    },
                    "name": {
                      "type": "string",
                      "maxLength": 63,
                      "minLength": 1,
                      "pattern": "^([a-z]|[a-z][-a-z0-9]*[a-z0-9])$"
                    },
                    "protocol": {
                      "type": "string",
                      "enum": [
                        "http",
                        "https",
                        "tcp",
                        "udp"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "id": {
                "type": "string",
                "maxLength": 64,
                "minLength": 1,
                "pattern": "^[-0-9a-z_]+$"
              },
              "name": {
                "type": "string",
                "maxLength": 63,
                "minLength": 1,
                "pattern": "^([a-z]|[a-z][-a-z0-9]*[a-z0-9])$"
              },
              "public": {
                "type": "boolean",
                "default": true
              },
              "securityGroups": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "minLength": 1
                    },
                    "name": {
                      "type": "string",
                      "minLength": 1
                    }
                  },
                  "additionalProperties": false,
                  "x-kubernetes-validations": [
                    {
                      "rule": "has(self.id) || has(self.name)",
                      "message": "an id or name must be provided"
                    }
                  ]
                }
              },
              "subnets": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "minLength": 1
                    },
                    "name": {
                      "type": "string",
                      "minLength": 1
                    }
                  },
                  "additionalProperties": false,
                  "x-kubernetes-validations": [
                    {
                      "rule": "has(self.id) || has(self.name)",
                      "message": "an id or name must be provided"
                    }
                  ]
                }
              }
            },
            "additionalProperties": false
          }
        },
        "network": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "minLength": 1
            },
            "name": {
              "type": "string",
              "minLength": 1
            },
            "regex": {
              "type": "string",
              "minLength": 1
            }
          },
          "additionalProperties": false
        },
        "resourceGroup": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "minLength": 1
            },
            "name": {
              "type": "string",
              "minLength": 1
            },
            "regex": {
              "type": "string",
              "minLength": 1
            }
          },
          "additionalProperties": false
        },
        "serviceInstance": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "minLength": 1
            },
            "name": {
              "type": "string",
              "minLength": 1
            },
            "regex": {
              "type": "string",
              "minLength": 1
            }
          },
          "additionalProperties": false
        },
        "serviceInstanceID": {
          "type": "string"
        },
        "transitGateway": {
          "type": "object",
          "properties": {
            "globalRouting": {
              "type": "boolean"
            },
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string",
              "maxLength": 63,
              "minLength": 1,
              "pattern": "^([a-zA-Z]|[a-zA-Z][-_a-zA-Z0-9]*[a-zA-Z0-9])$"
            }
          },
          "additionalProperties": false
        },
        "vpc": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[-0-9a-z_]+$"
            },
            "name": {
              "type": "string",
              "maxLength": 63,
              "minLength": 1,
              "pattern": "^([a-z]|[a-z][-a-z0-9]*[a-z0-9])$"
            },
            "region": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "vpcSecurityGroups": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "rules": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "action",
                    "direction"
                  ],
                  "properties": {
                    "action": {
                      "type": "string",
                      "enum": [
                        "allow",
                        "deny"
                      ]
                    },
                    "destination": {
                      "type": "object",
                      "required": [
                        "protocol",
                        "remotes"
                      ],
                      "properties": {
                        "icmpCode": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "icmpType": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "portRange": {
                          "type": "object",
                          "properties": {
                            "maximumPort": {
                              "type": "integer",
                              "format": "int64",
                              "maximum": 65535,
                              "minimum": 1
                            },
                            "minimumPort": {
                              "type": "integer",
                              "format": "int64",
                              "maximum": 65535,
                              "minimum": 1
                            }
                          },
                          "additionalProperties": false,
                          "x-kubernetes-validations": [
                            {
                              "rule": "self.maximumPort \u003e= self.minimumPort",
                              "message": "maximum port must be greater than or equal to minimum port"
                            }
                          ]
                        },
                        "protocol": {
                          "type": "string",
                          "enum": [
                            "all",
                            "icmp",
                            "tcp",
                            "udp"
                          ]
                        },
                        "remotes": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "remoteType"
                            ],
                            "properties": {
                              "address": {
                                "type": "string"
                              },
                              "cidrSubnetName": {
                                "type": "string"
                              },
                              "remoteType": {
                                "type": "string",
                                "enum": [
                                  "any",
                                  "cidr",
                                  "address",
                                  "sg"
                                ]
                              },
                              "securityGroupName": {
                                "type": "string"
                              }
                            },
                            "additionalProperties": false,
                            "x-kubernetes-validations": [
                              {
                                "rule": "self.remoteType == 'any' ? (!has(self.cidrSubnetName) \u0026\u0026 !has(self.address) \u0026\u0026 !has(self.securityGroupName)) : true",
                                "message": "cidrSubnetName, addresss, and securityGroupName are not valid for VPCSecurityGroupRuleRemoteTypeAny remoteType"
                              },
                              {
                                "rule": "self.remoteType == 'cidr' ? (has(self.cidrSubnetName) \u0026\u0026 !has(self.address) \u0026\u0026 !has(self.securityGroupName)) : true",
                                "message": "only cidrSubnetName is valid for VPCSecurityGroupRuleRemoteTypeCIDR remoteType"
                              },
                              {
                                "rule": "self.remoteType == 'address' ? (has(self.address) \u0026\u0026 !has(self.cidrSubnetName) \u0026\u0026 !has(self.securityGroupName)) : true",
                                "message": "only address is valid for VPCSecurityGroupRuleRemoteTypeIP remoteType"
                              },
                              {
                                "rule": "self.remoteType == 'sg' ? (has(self.securityGroupName) \u0026\u0026 !has(self.cidrSubnetName) \u0026\u0026 !has(self.address)) : true",
                                "message": "only securityGroupName is valid for VPCSecurityGroupRuleRemoteTypeSG remoteType"
                              }
                            ]
                          }
                        }
                      },
                      "additionalProperties": false,
                      "x-kubernetes-validations": [
                        {
                          "rule": "self.protocol != 'icmp' ? (!has(self.icmpCode) \u0026\u0026 !has(self.icmpType)) : true",
                          "message": "icmpCode and icmpType are only supported for VPCSecurityGroupRuleProtocolIcmp protocol"
                        },
                        {
                          "rule": "self.protocol == 'all' ? !has(self.portRange) : true",
                          "message": "portRange is not valid for VPCSecurityGroupRuleProtocolAll protocol"
                        },
                        {
                          "rule": "self.protocol == 'icmp' ? !has(self.portRange) : true",
                          "message": "portRange is not valid for VPCSecurityGroupRuleProtocolIcmp protocol"
                        }
                      ]
                    },
                    "direction": {
                      "type": "string",
                      "enum": [
                        "inbound",
                        "outbound"
                      ]
                    },
                    "securityGroupID": {
                      "type": "string"
                    },
                    "source": {
                      "type": "object",
                      "required": [
                        "protocol",
                        "remotes"
                      ],
                      "properties": {
                        "icmpCode": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "icmpType": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "portRange": {
                          "type": "object",
                          "properties": {
                            "maximumPort": {
                              "type": "integer",
                              "format": "int64",
                              "maximum": 65535,
                              "minimum": 1
                            },
                            "minimumPort": {
                              "type": "integer",
                              "format": "int64",
                              "maximum": 65535,
                              "minimum": 1
                            }
                          },
                          "additionalProperties": false,
                          "x-kubernetes-validations": [
                            {
                              "rule": "self.maximumPort \u003e= self.minimumPort",
                              "message": "maximum port must be greater than or equal to minimum port"
                            }
                          ]
                        },
                        "protocol": {
                          "type": "string",
                          "enum": [
                            "all",
                            "icmp",
                            "tcp",
                            "udp"
                          ]
                        },
                        "remotes": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "remoteType"
                            ],
                            "properties": {
                              "address": {
                                "type": "string"
                              },
                              "cidrSubnetName": {
                                "type": "string"
                              },
                              "remoteType": {
                                "type": "string",
                                "enum": [
                                  "any",
                                  "cidr",
                                  "address",
                                  "sg"
                                ]
                              },
                              "securityGroupName": {
                                "type": "string"
                              }
                            },
                            "additionalProperties": false,
                            "x-kubernetes-validations": [
                              {
                                "rule": "self.remoteType == 'any' ? (!has(self.cidrSubnetName) \u0026\u0026 !has(self.address) \u0026\u0026 !has(self.securityGroupName)) : true",
                                "message": "cidrSubnetName, addresss, and securityGroupName are not valid for VPCSecurityGroupRuleRemoteTypeAny remoteType"
                              },
                              {
                                "rule": "self.remoteType == 'cidr' ? (has(self.cidrSubnetName) \u0026\u0026 !has(self.address) \u0026\u0026 !has(self.securityGroupName)) : true",
                                "message": "only cidrSubnetName is valid for VPCSecurityGroupRuleRemoteTypeCIDR remoteType"
                              },
                              {
                                "rule": "self.remoteType == 'address' ? (has(self.address) \u0026\u0026 !has(self.cidrSubnetName) \u0026\u0026 !has(self.securityGroupName)) : true",
                                "message": "only address is valid for VPCSecurityGroupRuleRemoteTypeIP remoteType"
                              },
                              {
                                "rule": "self.remoteType == 'sg' ? (has(self.securityGroupName) \u0026\u0026 !has(self.cidrSubnetName) \u0026\u0026 !has(self.address)) : true",
                                "message": "only securityGroupName is valid for VPCSecurityGroupRuleRemoteTypeSG remoteType"
                              }
                            ]
                          }
                        }
                      },
                      "additionalProperties": false,
                      "x-kubernetes-validations": [
                        {
                          "rule": "self.protocol != 'icmp' ? (!has(self.icmpCode) \u0026\u0026 !has(self.icmpType)) : true",
                          "message": "icmpCode and icmpType are only supported for VPCSecurityGroupRuleProtocolIcmp protocol"
                        },
                        {
                          "rule": "self.protocol == 'all' ? !has(self.portRange) : true",
                          "message": "portRange is not valid for VPCSecurityGroupRuleProtocolAll protocol"
                        },
                        {
                          "rule": "self.protocol == 'icmp' ? !has(self.portRange) : true",
                          "message": "portRange is not valid for VPCSecurityGroupRuleProtocolIcmp protocol"
                        }
                      ]
                    }
                  },
                  "additionalProperties": false,
                  "x-kubernetes-validations": [
                    {
                      "rule": "(has(self.destination) \u0026\u0026 !has(self.source)) || (!has(self.destination) \u0026\u0026 has(self.source))",
                      "message": "both destination and source cannot be provided"
                    },
                    {
                      "rule": "self.direction == 'inbound' ? has(self.source) : true",
                      "message": "source must be set for VPCSecurityGroupRuleDirectionInbound direction"
                    },
                    {
                      "rule": "self.direction == 'inbound' ? !has(self.destination) : true",
                      "message": "destination is not valid for VPCSecurityGroupRuleDirectionInbound direction"
                    },
                    {
                      "rule": "self.direction == 'outbound' ? has(self.destination) : true",
                      "message": "destination must be set for VPCSecurityGroupRuleDirectionOutbound direction"
                    },
                    {
                      "rule": "self.direction == 'outbound' ? !has(self.source) : true",
                      "message": "source is not valid for VPCSecurityGroupRuleDirectionOutbound direction"
                    }
                  ]
                }
              },
              "tags": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false,
            "x-kubernetes-validations": [
              {
                "rule": "has(self.id) || has(self.name)",
                "message": "either an id or name must be specified"
              }
            ]
          }
        },
        "vpcSubnets": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "cidr": {
                "type": "string"
              },
              "id": {
                "type": "string",
                "maxLength": 64,
                "minLength": 1,
                "pattern": "^[-0-9a-z_]+$"
              },
              "name": {
                "type": "string",
                "maxLength": 63,
                "minLength": 1,
                "pattern": "^([a-z]|[a-z][-a-z0-9]*[a-z0-9])$"
              },
              "zone": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "zone": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "status": {
      "type": "object",
      "required": [
        "ready"
      ],
      "properties": {
        "conditions": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "lastTransitionTime",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "type": "string",
                "maxLength": 10240,
                "minLength": 1
              },
              "reason": {
                "type": "string",
                "maxLength": 256,
                "minLength": 1
              },
              "severity": {
                "type": "string",
                "maxLength": 32
              },
              "status": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "maxLength": 256,
                "minLength": 1
              }
            },
            "additionalProperties": false
          }
        },
        "cosInstance": {
          "type": "object",
          "properties": {
            "controllerCreated": {
              "type": "boolean",
              "default": false
            },
            "id": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "dhcpServer": {
          "type": "object",
          "properties": {
            "controllerCreated": {
              "type": "boolean",
              "default": false
            },
            "id": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "loadBalancers": {
          "type": "object",
          "additionalProperties": {
            "description": "VPCLoadBalancerStatus defines the status VPC load balancer.",
            "type": "object",
            "properties": {
              "controllerCreated": {
                "description": "controllerCreated indicates whether the resource is created by the controller.",
                "type": "boolean",
                "default": false
              },
              "hostname": {
                "description": "hostname is the hostname of load balancer.",
                "type": "string"
              },
              "id": {
                "description": "id of VPC load balancer.",
                "type": "string"
              },
              "state": {
                "description": "State is the status of the load balancer.",
                "type": "string"
              }
            }
          }
        },
        "network": {
          "type": "object",
          "properties": {
            "controllerCreated": {
              "type": "boolean",
              "default": false
            },
            "id": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "ready": {
          "type": "boolean",
          "default": false
        },
        "resourceGroupID": {
          "type": "object",
          "properties": {
            "controllerCreated": {
              "type": "boolean",
              "default": false
            },
            "id": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "serviceInstance": {
          "type": "object",
          "properties": {
            "controllerCreated": {
              "type": "boolean",
              "default": false
            },
            "id": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "transitGateway": {
          "type": "object",
          "properties": {
            "controllerCreated": {
              "type": "boolean",
              "default": false
            },
            "id": {
              "type": "string"
            },
            "powerVSConnection": {
              "type": "object",
              "properties": {
                "controllerCreated": {
                  "type": "boolean",
                  "default": false
                },
                "id": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "vpcConnection": {
              "type": "object",
              "properties": {
                "controllerCreated": {
                  "type": "boolean",
                  "default": false
                },
                "id": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "v1beta2": {
          "type": "object",
          "properties": {
            "conditions": {
              "type": "array",
              "maxItems": 32,
              "items": {
                "type": "object",
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "properties": {
                  "lastTransitionTime": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "message": {
                    "type": "string",
                    "maxLength": 32768
                  },
                  "observedGeneration": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "reason": {
                    "type": "string",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ]
                  },
                  "type": {
                    "type": "string",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                  }
                },
                "additionalProperties": false
              },
              "x-kubernetes-list-map-keys": [
                "type"
              ],
              "x-kubernetes-list-type": "map"
            }
          },
          "additionalProperties": false
        },
        "vpc": {
          "type": "object",
          "properties": {
            "controllerCreated": {
              "type": "boolean",
              "default": false
            },
            "id": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "vpcSecurityGroups": {
          "type": "object",
          "additionalProperties": {
            "description": "VPCSecurityGroupStatus defines a vpc security group resource status with its id and respective rule's ids.",
            "type": "object",
            "properties": {
              "controllerCreated": {
                "description": "controllerCreated indicates whether the resource is created by the controller.",
                "type": "boolean",
                "default": false
              },
              "id": {
                "description": "id represents the id of the resource.",
                "type": "string"
              },
              "ruleIDs": {
                "description": "rules contains the id of rules created under the security group",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "vpcSubnet": {
          "type": "object",
          "additionalProperties": {
            "description": "ResourceReference identifies a resource with id.",
            "type": "object",
            "properties": {
              "controllerCreated": {
                "description": "controllerCreated indicates whether the resource is created by the controller.",
                "type": "boolean",
                "default": false
              },
              "id": {
                "description": "id represents the id of the resource.",
                "type": "string"
              }
            }
          }
        }
      },
      "additionalProperties": false
    }
  }
}
