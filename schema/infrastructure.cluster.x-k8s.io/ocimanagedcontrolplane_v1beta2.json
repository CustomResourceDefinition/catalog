{
  "description": "OCIManagedControlPlane is the Schema for the ocimanagedcontrolplane API.",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "OCIManagedControlPlaneSpec defines the desired state of OCIManagedControlPlane. The properties are generated from https://docs.oracle.com/en-us/iaas/api/#/en/containerengine/20180222/datatypes/CreateClusterDetails",
      "type": "object",
      "properties": {
        "addons": {
          "description": "The list of addons to be applied to the OKE cluster.",
          "type": "array",
          "items": {
            "description": "Addon defines the properties of an addon.",
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "configurations": {
                "description": "Configurations defines a list of configurations of the addon.",
                "type": "array",
                "items": {
                  "description": "AddonConfiguration defines a configuration of an addon.",
                  "type": "object",
                  "properties": {
                    "key": {
                      "description": "The key of the configuration.",
                      "type": "string"
                    },
                    "value": {
                      "description": "The value of the configuration.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "name": {
                "description": "Name represents the name of the addon.",
                "type": "string"
              },
              "version": {
                "description": "Version represents the version of the addon.",
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "name"
          ],
          "x-kubernetes-list-type": "map"
        },
        "clusterOptions": {
          "description": "ClusterOptions defines Optional attributes for the cluster.",
          "type": "object",
          "properties": {
            "addOnOptions": {
              "description": "AddOnOptions defines the properties that define options for supported add-ons.",
              "type": "object",
              "properties": {
                "isKubernetesDashboardEnabled": {
                  "description": "IsKubernetesDashboardEnabled defines whether or not to enable the Kubernetes Dashboard add-on.",
                  "type": "boolean"
                },
                "isTillerEnabled": {
                  "description": "IsKubernetesDashboardEnabled defines whether or not to enable the Tiller add-on.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "admissionControllerOptions": {
              "description": "AdmissionControllerOptions defines the properties that define supported admission controllers.",
              "type": "object",
              "properties": {
                "isPodSecurityPolicyEnabled": {
                  "description": "IsPodSecurityPolicyEnabled defines whether or not to enable the Pod Security Policy admission controller.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "openIdConnectDiscovery": {
              "description": "OpenIDConnectDiscovery specifies OIDC discovery settings",
              "type": "object",
              "properties": {
                "isOpenIdConnectDiscoveryEnabled": {
                  "description": "IsOpenIDConnectDiscoveryEnabled defines whether or not to enable the OIDC discovery.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "openIdConnectTokenAuthenticationConfig": {
              "description": "OpenIDConnectTokenAuthenticationConfig",
              "type": "object",
              "required": [
                "isOpenIdConnectAuthEnabled"
              ],
              "properties": {
                "caCertificate": {
                  "description": "A Base64 encoded public RSA or ECDSA certificates used to sign your identity provider's web certificate.",
                  "type": "string"
                },
                "clientId": {
                  "description": "A client id that all tokens must be issued for.",
                  "type": "string"
                },
                "groupsClaim": {
                  "description": "JWT claim to use as the user's group. If the claim is present it must be an array of strings.",
                  "type": "string"
                },
                "groupsPrefix": {
                  "description": "Prefix prepended to group claims to prevent clashes with existing names (such as system:groups).",
                  "type": "string"
                },
                "isOpenIdConnectAuthEnabled": {
                  "description": "IsOpenIdConnectAuthEnabled defines whether or not to enable the OIDC authentication.",
                  "type": "boolean"
                },
                "issuerUrl": {
                  "description": "URL of the provider that allows the API server to discover public signing keys. Only URLs that use the https:// scheme are accepted. This is typically the provider's discovery URL, changed to have an empty path.",
                  "type": "string"
                },
                "requiredClaims": {
                  "description": "A key=value pair that describes a required claim in the ID Token. If set, the claim is verified to be present in the ID Token with a matching value. Repeat this flag to specify multiple claims.",
                  "type": "array",
                  "items": {
                    "description": "KeyValue The properties that define a key value pair.",
                    "type": "object",
                    "required": [
                      "key",
                      "value"
                    ],
                    "properties": {
                      "key": {
                        "description": "The key of the pair.",
                        "type": "string"
                      },
                      "value": {
                        "description": "The value of the pair.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "signingAlgorithms": {
                  "description": "The signing algorithms accepted. Default is [\"RS256\"].",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "usernameClaim": {
                  "description": "JWT claim to use as the user name. By default sub, which is expected to be a unique identifier of the end user. Admins can choose other claims, such as email or name, depending on their provider. However, claims other than email will be prefixed with the issuer URL to prevent naming clashes with other plugins.",
                  "type": "string"
                },
                "usernamePrefix": {
                  "description": "Prefix prepended to username claims to prevent clashes with existing names (such as system:users). For example, the value oidc: will create usernames like oidc:jane.doe. If this flag isn't provided and --oidc-username-claim is a value other than email the prefix defaults to ( Issuer URL )# where ( Issuer URL ) is the value of --oidc-issuer-url. The value - can be used to disable all prefixing.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "clusterPodNetworkOptions": {
          "description": "ClusterPodNetworkOptions defines the available CNIs and network options for existing and new node pools of the cluster",
          "type": "array",
          "items": {
            "description": "ClusterPodNetworkOptions defines the available CNIs and network options for existing and new node pools of the cluster",
            "type": "object",
            "properties": {
              "cniType": {
                "description": "The CNI to be used are OCI_VCN_IP_NATIVE and FLANNEL_OVERLAY",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "clusterType": {
          "description": "ClusterTypeEnum defines the type of cluster. Supported types are * `BASIC_CLUSTER` * `ENHANCED_CLUSTER`",
          "type": "string"
        },
        "controlPlaneEndpoint": {
          "description": "ControlPlaneEndpoint represents the endpoint used to communicate with the control plane.",
          "type": "object",
          "required": [
            "host",
            "port"
          ],
          "properties": {
            "host": {
              "description": "The hostname on which the API server is serving.",
              "type": "string"
            },
            "port": {
              "description": "The port on which the API server is serving.",
              "type": "integer",
              "format": "int32"
            }
          },
          "additionalProperties": false
        },
        "id": {
          "description": "ID of the OKEcluster.",
          "type": "string"
        },
        "imagePolicyConfig": {
          "description": "ImagePolicyConfig defines the properties that define a image verification policy.",
          "type": "object",
          "properties": {
            "isPolicyEnabled": {
              "description": "IsPolicyEnabled defines Whether the image verification policy is enabled.",
              "type": "boolean"
            },
            "keyDetails": {
              "description": "KeyDetails defines a list of KMS key details.",
              "type": "array",
              "items": {
                "description": "KeyDetails defines the properties that define the kms keys used by OKE for Image Signature verification.",
                "type": "object",
                "properties": {
                  "keyDetails": {
                    "description": "KmsKeyId defines the OCID of the KMS key that will be used to verify whether the images are signed by an approved source.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "additionalProperties": false
        },
        "kmsKeyId": {
          "description": "KmsKeyId defines the OCID of the KMS key to be used as the master encryption key for Kubernetes secret encryption. When used,",
          "type": "string"
        },
        "version": {
          "description": "Version represents the version of the Kubernetes Cluster Control Plane.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "OCIManagedControlPlaneStatus defines the observed state of OCIManagedControlPlane",
      "type": "object",
      "properties": {
        "addonStatus": {
          "description": "AddonStatus represents the status of the addon.",
          "type": "object",
          "additionalProperties": {
            "description": "AddonStatus defines the status of an Addon.",
            "type": "object",
            "properties": {
              "addonError": {
                "description": "AddonError defines the error encountered by the Addon.",
                "type": "object",
                "properties": {
                  "code": {
                    "description": "Code defines a  short error code that defines the upstream error, meant for programmatic parsing.",
                    "type": "string"
                  },
                  "message": {
                    "description": "Message defines a human-readable error string of the upstream error.",
                    "type": "string"
                  },
                  "status": {
                    "description": "Status defines the status of the HTTP response encountered in the upstream error.",
                    "type": "string"
                  }
                }
              },
              "currentlyInstalledVersion": {
                "description": "Version represents the version of the addon.",
                "type": "string"
              },
              "lifecycleState": {
                "description": "LifecycleState defines the lifecycle state of the addon.",
                "type": "string"
              }
            }
          }
        },
        "conditions": {
          "description": "NetworkSpec encapsulates all things related to OCI network.",
          "type": "array",
          "items": {
            "description": "Condition defines an observation of a Cluster API resource operational state.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "A human readable message indicating details about the transition. This field may be empty.",
                "type": "string"
              },
              "reason": {
                "description": "The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.",
                "type": "string"
              },
              "severity": {
                "description": "Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.",
                "type": "string"
              },
              "status": {
                "description": "Status of the condition, one of True, False, Unknown.",
                "type": "string"
              },
              "type": {
                "description": "Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "initialized": {
          "description": "Initialized denotes whether or not the control plane has the uploaded kubernetes config-map.",
          "type": "boolean"
        },
        "ready": {
          "type": "boolean"
        },
        "version": {
          "description": "Version represents the current Kubernetes version for the control plane.",
          "type": "string"
        }
      },
      "additionalProperties": false
    }
  }
}
