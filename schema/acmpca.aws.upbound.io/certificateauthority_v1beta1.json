{
  "description": "CertificateAuthority is the Schema for the CertificateAuthoritys API. Provides a resource to manage AWS Certificate Manager Private Certificate Authorities",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "CertificateAuthoritySpec defines the desired state of CertificateAuthority",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "deletionPolicy": {
          "description": "DeletionPolicy specifies what will happen to the underlying external\nwhen this managed resource is deleted - either \"Delete\" or \"Orphan\" the\nexternal resource.\nThis field is planned to be deprecated in favor of the ManagementPolicies\nfield in a future release. Currently, both could be set independently and\nnon-default values would be honored if the feature flag is enabled.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "type": "string",
          "default": "Delete",
          "enum": [
            "Orphan",
            "Delete"
          ]
        },
        "forProvider": {
          "type": "object",
          "required": [
            "region"
          ],
          "properties": {
            "certificateAuthorityConfiguration": {
              "description": "Nested argument containing algorithms and certificate subject information. Defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "keyAlgorithm": {
                    "description": "Type of the public key algorithm and size, in bits, of the key pair that your key pair creates when it issues a certificate. Valid values can be found in the ACM PCA Documentation.",
                    "type": "string"
                  },
                  "signingAlgorithm": {
                    "description": "Name of the algorithm your private CA uses to sign certificate requests. Valid values can be found in the ACM PCA Documentation.",
                    "type": "string"
                  },
                  "subject": {
                    "description": "Nested argument that contains X.500 distinguished name information. At least one nested attribute must be specified.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "commonName": {
                          "description": "Fully qualified domain name (FQDN) associated with the certificate subject. Must be less than or equal to 64 characters in length.",
                          "type": "string"
                        },
                        "country": {
                          "description": "Two digit code that specifies the country in which the certificate subject located. Must be less than or equal to 2 characters in length.",
                          "type": "string"
                        },
                        "distinguishedNameQualifier": {
                          "description": "Disambiguating information for the certificate subject. Must be less than or equal to 64 characters in length.",
                          "type": "string"
                        },
                        "generationQualifier": {
                          "description": "Typically a qualifier appended to the name of an individual. Examples include Jr. for junior, Sr. for senior, and III for third. Must be less than or equal to 3 characters in length.",
                          "type": "string"
                        },
                        "givenName": {
                          "description": "First name. Must be less than or equal to 16 characters in length.",
                          "type": "string"
                        },
                        "initials": {
                          "description": "Concatenation that typically contains the first letter of the given_name, the first letter of the middle name if one exists, and the first letter of the surname. Must be less than or equal to 5 characters in length.",
                          "type": "string"
                        },
                        "locality": {
                          "description": "Locality (such as a city or town) in which the certificate subject is located. Must be less than or equal to 128 characters in length.",
                          "type": "string"
                        },
                        "organization": {
                          "description": "Legal name of the organization with which the certificate subject is affiliated. Must be less than or equal to 64 characters in length.",
                          "type": "string"
                        },
                        "organizationalUnit": {
                          "description": "Subdivision or unit of the organization (such as sales or finance) with which the certificate subject is affiliated. Must be less than or equal to 64 characters in length.",
                          "type": "string"
                        },
                        "pseudonym": {
                          "description": "Typically a shortened version of a longer given_name. For example, Jonathan is often shortened to John. Elizabeth is often shortened to Beth, Liz, or Eliza. Must be less than or equal to 128 characters in length.",
                          "type": "string"
                        },
                        "state": {
                          "description": "State in which the subject of the certificate is located. Must be less than or equal to 128 characters in length.",
                          "type": "string"
                        },
                        "surname": {
                          "description": "Family name. In the US and the UK for example, the surname of an individual is ordered last. In Asian cultures the surname is typically ordered first. Must be less than or equal to 40 characters in length.",
                          "type": "string"
                        },
                        "title": {
                          "description": "Title such as Mr. or Ms. which is pre-pended to the name to refer formally to the certificate subject. Must be less than or equal to 64 characters in length.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "enabled": {
              "description": "Whether the certificate authority is enabled or disabled. Defaults to true. Can only be disabled if the CA is in an ACTIVE state.",
              "type": "boolean"
            },
            "keyStorageSecurityStandard": {
              "description": "Cryptographic key management compliance standard used for handling CA keys. Defaults to FIPS_140_2_LEVEL_3_OR_HIGHER. Valid values: FIPS_140_2_LEVEL_3_OR_HIGHER and FIPS_140_2_LEVEL_2_OR_HIGHER. Supported standard for each region can be found in the Storage and security compliance of AWS Private CA private keys Documentation.",
              "type": "string"
            },
            "permanentDeletionTimeInDays": {
              "description": "Number of days to make a CA restorable after it has been deleted, must be between 7 to 30 days, with default to 30 days.",
              "type": "number"
            },
            "region": {
              "description": "Region where this resource will be managed. Defaults to the Region set in the provider configuration.\nRegion is the region you'd like your resource to be created in.",
              "type": "string"
            },
            "revocationConfiguration": {
              "description": "Nested argument containing revocation configuration. Defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "crlConfiguration": {
                    "description": "Nested argument containing configuration of the certificate revocation list (CRL), if any, maintained by the certificate authority. Defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "customCname": {
                          "description": "Name inserted into the certificate CRL Distribution Points extension that enables the use of an alias for the CRL distribution point. Use this value if you don't want the name of your S3 bucket to be public. Must be less than or equal to 253 characters in length.",
                          "type": "string"
                        },
                        "enabled": {
                          "description": "Boolean value that specifies whether certificate revocation lists (CRLs) are enabled. Defaults to false.",
                          "type": "boolean"
                        },
                        "expirationInDays": {
                          "description": "Number of days until a certificate expires. Must be between 1 and 5000.",
                          "type": "number"
                        },
                        "s3BucketName": {
                          "description": "Name of the S3 bucket that contains the CRL. If you do not provide a value for the custom_cname argument, the name of your S3 bucket is placed into the CRL Distribution Points extension of the issued certificate. You must specify a bucket policy that allows ACM PCA to write the CRL to your bucket. Must be between 3 and 255 characters in length.",
                          "type": "string"
                        },
                        "s3ObjectAcl": {
                          "description": "Determines whether the CRL will be publicly readable or privately held in the CRL Amazon S3 bucket. Defaults to PUBLIC_READ.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "ocspConfiguration": {
                    "description": "Nested argument containing configuration of\nthe custom OCSP responder endpoint. Defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "enabled": {
                          "description": "Boolean value that specifies whether a custom OCSP responder is enabled.",
                          "type": "boolean"
                        },
                        "ocspCustomCname": {
                          "description": "CNAME specifying a customized OCSP domain. Note: The value of the CNAME must not include a protocol prefix such as \"http://\" or \"https://\".",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "tags": {
              "description": "Key-value map of resource tags.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "type": {
              "description": "Type of the certificate authority. Defaults to SUBORDINATE. Valid values: ROOT and SUBORDINATE.",
              "type": "string"
            },
            "usageMode": {
              "description": "Specifies whether the CA issues general-purpose certificates that typically require a revocation mechanism, or short-lived certificates that may optionally omit revocation because they expire quickly. Short-lived certificate validity is limited to seven days. Defaults to GENERAL_PURPOSE. Valid values: GENERAL_PURPOSE and SHORT_LIVED_CERTIFICATE.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored\nunless the Management Policies feature flag is disabled.\nInitProvider holds the same fields as ForProvider, with the exception\nof Identifier and other resource reference fields. The fields that are\nin InitProvider are merged into ForProvider when the resource is created.\nThe same fields are also added to the terraform ignore_changes hook, to\navoid updating them after creation. This is useful for fields that are\nrequired on creation, but we do not desire to update them after creation,\nfor example because of an external controller is managing them, like an\nautoscaler.",
          "type": "object",
          "properties": {
            "certificateAuthorityConfiguration": {
              "description": "Nested argument containing algorithms and certificate subject information. Defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "keyAlgorithm": {
                    "description": "Type of the public key algorithm and size, in bits, of the key pair that your key pair creates when it issues a certificate. Valid values can be found in the ACM PCA Documentation.",
                    "type": "string"
                  },
                  "signingAlgorithm": {
                    "description": "Name of the algorithm your private CA uses to sign certificate requests. Valid values can be found in the ACM PCA Documentation.",
                    "type": "string"
                  },
                  "subject": {
                    "description": "Nested argument that contains X.500 distinguished name information. At least one nested attribute must be specified.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "commonName": {
                          "description": "Fully qualified domain name (FQDN) associated with the certificate subject. Must be less than or equal to 64 characters in length.",
                          "type": "string"
                        },
                        "country": {
                          "description": "Two digit code that specifies the country in which the certificate subject located. Must be less than or equal to 2 characters in length.",
                          "type": "string"
                        },
                        "distinguishedNameQualifier": {
                          "description": "Disambiguating information for the certificate subject. Must be less than or equal to 64 characters in length.",
                          "type": "string"
                        },
                        "generationQualifier": {
                          "description": "Typically a qualifier appended to the name of an individual. Examples include Jr. for junior, Sr. for senior, and III for third. Must be less than or equal to 3 characters in length.",
                          "type": "string"
                        },
                        "givenName": {
                          "description": "First name. Must be less than or equal to 16 characters in length.",
                          "type": "string"
                        },
                        "initials": {
                          "description": "Concatenation that typically contains the first letter of the given_name, the first letter of the middle name if one exists, and the first letter of the surname. Must be less than or equal to 5 characters in length.",
                          "type": "string"
                        },
                        "locality": {
                          "description": "Locality (such as a city or town) in which the certificate subject is located. Must be less than or equal to 128 characters in length.",
                          "type": "string"
                        },
                        "organization": {
                          "description": "Legal name of the organization with which the certificate subject is affiliated. Must be less than or equal to 64 characters in length.",
                          "type": "string"
                        },
                        "organizationalUnit": {
                          "description": "Subdivision or unit of the organization (such as sales or finance) with which the certificate subject is affiliated. Must be less than or equal to 64 characters in length.",
                          "type": "string"
                        },
                        "pseudonym": {
                          "description": "Typically a shortened version of a longer given_name. For example, Jonathan is often shortened to John. Elizabeth is often shortened to Beth, Liz, or Eliza. Must be less than or equal to 128 characters in length.",
                          "type": "string"
                        },
                        "state": {
                          "description": "State in which the subject of the certificate is located. Must be less than or equal to 128 characters in length.",
                          "type": "string"
                        },
                        "surname": {
                          "description": "Family name. In the US and the UK for example, the surname of an individual is ordered last. In Asian cultures the surname is typically ordered first. Must be less than or equal to 40 characters in length.",
                          "type": "string"
                        },
                        "title": {
                          "description": "Title such as Mr. or Ms. which is pre-pended to the name to refer formally to the certificate subject. Must be less than or equal to 64 characters in length.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "enabled": {
              "description": "Whether the certificate authority is enabled or disabled. Defaults to true. Can only be disabled if the CA is in an ACTIVE state.",
              "type": "boolean"
            },
            "keyStorageSecurityStandard": {
              "description": "Cryptographic key management compliance standard used for handling CA keys. Defaults to FIPS_140_2_LEVEL_3_OR_HIGHER. Valid values: FIPS_140_2_LEVEL_3_OR_HIGHER and FIPS_140_2_LEVEL_2_OR_HIGHER. Supported standard for each region can be found in the Storage and security compliance of AWS Private CA private keys Documentation.",
              "type": "string"
            },
            "permanentDeletionTimeInDays": {
              "description": "Number of days to make a CA restorable after it has been deleted, must be between 7 to 30 days, with default to 30 days.",
              "type": "number"
            },
            "revocationConfiguration": {
              "description": "Nested argument containing revocation configuration. Defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "crlConfiguration": {
                    "description": "Nested argument containing configuration of the certificate revocation list (CRL), if any, maintained by the certificate authority. Defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "customCname": {
                          "description": "Name inserted into the certificate CRL Distribution Points extension that enables the use of an alias for the CRL distribution point. Use this value if you don't want the name of your S3 bucket to be public. Must be less than or equal to 253 characters in length.",
                          "type": "string"
                        },
                        "enabled": {
                          "description": "Boolean value that specifies whether certificate revocation lists (CRLs) are enabled. Defaults to false.",
                          "type": "boolean"
                        },
                        "expirationInDays": {
                          "description": "Number of days until a certificate expires. Must be between 1 and 5000.",
                          "type": "number"
                        },
                        "s3BucketName": {
                          "description": "Name of the S3 bucket that contains the CRL. If you do not provide a value for the custom_cname argument, the name of your S3 bucket is placed into the CRL Distribution Points extension of the issued certificate. You must specify a bucket policy that allows ACM PCA to write the CRL to your bucket. Must be between 3 and 255 characters in length.",
                          "type": "string"
                        },
                        "s3ObjectAcl": {
                          "description": "Determines whether the CRL will be publicly readable or privately held in the CRL Amazon S3 bucket. Defaults to PUBLIC_READ.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "ocspConfiguration": {
                    "description": "Nested argument containing configuration of\nthe custom OCSP responder endpoint. Defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "enabled": {
                          "description": "Boolean value that specifies whether a custom OCSP responder is enabled.",
                          "type": "boolean"
                        },
                        "ocspCustomCname": {
                          "description": "CNAME specifying a customized OCSP domain. Note: The value of the CNAME must not include a protocol prefix such as \"http://\" or \"https://\".",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "tags": {
              "description": "Key-value map of resource tags.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "type": {
              "description": "Type of the certificate authority. Defaults to SUBORDINATE. Valid values: ROOT and SUBORDINATE.",
              "type": "string"
            },
            "usageMode": {
              "description": "Specifies whether the CA issues general-purpose certificates that typically require a revocation mechanism, or short-lived certificates that may optionally omit revocation because they expire quickly. Short-lived certificate validity is limited to seven days. Defaults to GENERAL_PURPOSE. Valid values: GENERAL_PURPOSE and SHORT_LIVED_CERTIFICATE.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "managementPolicies": {
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out\nthrough a Crossplane feature flag.\nManagementPolicies specify the array of actions Crossplane is allowed to\ntake on the managed and external resources.\nThis field is planned to replace the DeletionPolicy field in a future\nrelease. Currently, both could be set independently and non-default\nvalues would be honored if the feature flag is enabled. If both are\ncustom, the DeletionPolicy field will be ignored.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223\nand this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers\ncan take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to\ncreate, observe, update, and delete this managed resource should be\nconfigured.",
          "type": "object",
          "default": {
            "name": "default"
          },
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "type": "object",
              "properties": {
                "resolution": {
                  "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                  "type": "string",
                  "default": "Required",
                  "enum": [
                    "Required",
                    "Optional"
                  ]
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                  "type": "string",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a\nSecret to which any connection details for this managed resource should\nbe written. Connection details frequently include the endpoint, username,\nand password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name",
            "namespace"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false,
      "x-kubernetes-validations": [
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.certificateAuthorityConfiguration) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.certificateAuthorityConfiguration))",
          "message": "spec.forProvider.certificateAuthorityConfiguration is a required parameter"
        }
      ]
    },
    "status": {
      "description": "CertificateAuthorityStatus defines the observed state of CertificateAuthority.",
      "type": "object",
      "properties": {
        "atProvider": {
          "type": "object",
          "properties": {
            "arn": {
              "description": "ARN of the certificate authority.",
              "type": "string"
            },
            "certificate": {
              "description": "Base64-encoded certificate authority (CA) certificate. Only available after the certificate authority certificate has been imported.",
              "type": "string"
            },
            "certificateAuthorityConfiguration": {
              "description": "Nested argument containing algorithms and certificate subject information. Defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "keyAlgorithm": {
                    "description": "Type of the public key algorithm and size, in bits, of the key pair that your key pair creates when it issues a certificate. Valid values can be found in the ACM PCA Documentation.",
                    "type": "string"
                  },
                  "signingAlgorithm": {
                    "description": "Name of the algorithm your private CA uses to sign certificate requests. Valid values can be found in the ACM PCA Documentation.",
                    "type": "string"
                  },
                  "subject": {
                    "description": "Nested argument that contains X.500 distinguished name information. At least one nested attribute must be specified.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "commonName": {
                          "description": "Fully qualified domain name (FQDN) associated with the certificate subject. Must be less than or equal to 64 characters in length.",
                          "type": "string"
                        },
                        "country": {
                          "description": "Two digit code that specifies the country in which the certificate subject located. Must be less than or equal to 2 characters in length.",
                          "type": "string"
                        },
                        "distinguishedNameQualifier": {
                          "description": "Disambiguating information for the certificate subject. Must be less than or equal to 64 characters in length.",
                          "type": "string"
                        },
                        "generationQualifier": {
                          "description": "Typically a qualifier appended to the name of an individual. Examples include Jr. for junior, Sr. for senior, and III for third. Must be less than or equal to 3 characters in length.",
                          "type": "string"
                        },
                        "givenName": {
                          "description": "First name. Must be less than or equal to 16 characters in length.",
                          "type": "string"
                        },
                        "initials": {
                          "description": "Concatenation that typically contains the first letter of the given_name, the first letter of the middle name if one exists, and the first letter of the surname. Must be less than or equal to 5 characters in length.",
                          "type": "string"
                        },
                        "locality": {
                          "description": "Locality (such as a city or town) in which the certificate subject is located. Must be less than or equal to 128 characters in length.",
                          "type": "string"
                        },
                        "organization": {
                          "description": "Legal name of the organization with which the certificate subject is affiliated. Must be less than or equal to 64 characters in length.",
                          "type": "string"
                        },
                        "organizationalUnit": {
                          "description": "Subdivision or unit of the organization (such as sales or finance) with which the certificate subject is affiliated. Must be less than or equal to 64 characters in length.",
                          "type": "string"
                        },
                        "pseudonym": {
                          "description": "Typically a shortened version of a longer given_name. For example, Jonathan is often shortened to John. Elizabeth is often shortened to Beth, Liz, or Eliza. Must be less than or equal to 128 characters in length.",
                          "type": "string"
                        },
                        "state": {
                          "description": "State in which the subject of the certificate is located. Must be less than or equal to 128 characters in length.",
                          "type": "string"
                        },
                        "surname": {
                          "description": "Family name. In the US and the UK for example, the surname of an individual is ordered last. In Asian cultures the surname is typically ordered first. Must be less than or equal to 40 characters in length.",
                          "type": "string"
                        },
                        "title": {
                          "description": "Title such as Mr. or Ms. which is pre-pended to the name to refer formally to the certificate subject. Must be less than or equal to 64 characters in length.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "certificateChain": {
              "description": "Base64-encoded certificate chain that includes any intermediate certificates and chains up to root on-premises certificate that you used to sign your private CA certificate. The chain does not include your private CA certificate. Only available after the certificate authority certificate has been imported.",
              "type": "string"
            },
            "certificateSigningRequest": {
              "description": "The base64 PEM-encoded certificate signing request (CSR) for your private CA certificate.",
              "type": "string"
            },
            "enabled": {
              "description": "Whether the certificate authority is enabled or disabled. Defaults to true. Can only be disabled if the CA is in an ACTIVE state.",
              "type": "boolean"
            },
            "id": {
              "description": "ARN of the certificate authority.",
              "type": "string"
            },
            "keyStorageSecurityStandard": {
              "description": "Cryptographic key management compliance standard used for handling CA keys. Defaults to FIPS_140_2_LEVEL_3_OR_HIGHER. Valid values: FIPS_140_2_LEVEL_3_OR_HIGHER and FIPS_140_2_LEVEL_2_OR_HIGHER. Supported standard for each region can be found in the Storage and security compliance of AWS Private CA private keys Documentation.",
              "type": "string"
            },
            "notAfter": {
              "description": "Date and time after which the certificate authority is not valid. Only available after the certificate authority certificate has been imported.",
              "type": "string"
            },
            "notBefore": {
              "description": "Date and time before which the certificate authority is not valid. Only available after the certificate authority certificate has been imported.",
              "type": "string"
            },
            "permanentDeletionTimeInDays": {
              "description": "Number of days to make a CA restorable after it has been deleted, must be between 7 to 30 days, with default to 30 days.",
              "type": "number"
            },
            "region": {
              "description": "Region where this resource will be managed. Defaults to the Region set in the provider configuration.\nRegion is the region you'd like your resource to be created in.",
              "type": "string"
            },
            "revocationConfiguration": {
              "description": "Nested argument containing revocation configuration. Defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "crlConfiguration": {
                    "description": "Nested argument containing configuration of the certificate revocation list (CRL), if any, maintained by the certificate authority. Defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "customCname": {
                          "description": "Name inserted into the certificate CRL Distribution Points extension that enables the use of an alias for the CRL distribution point. Use this value if you don't want the name of your S3 bucket to be public. Must be less than or equal to 253 characters in length.",
                          "type": "string"
                        },
                        "enabled": {
                          "description": "Boolean value that specifies whether certificate revocation lists (CRLs) are enabled. Defaults to false.",
                          "type": "boolean"
                        },
                        "expirationInDays": {
                          "description": "Number of days until a certificate expires. Must be between 1 and 5000.",
                          "type": "number"
                        },
                        "s3BucketName": {
                          "description": "Name of the S3 bucket that contains the CRL. If you do not provide a value for the custom_cname argument, the name of your S3 bucket is placed into the CRL Distribution Points extension of the issued certificate. You must specify a bucket policy that allows ACM PCA to write the CRL to your bucket. Must be between 3 and 255 characters in length.",
                          "type": "string"
                        },
                        "s3ObjectAcl": {
                          "description": "Determines whether the CRL will be publicly readable or privately held in the CRL Amazon S3 bucket. Defaults to PUBLIC_READ.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "ocspConfiguration": {
                    "description": "Nested argument containing configuration of\nthe custom OCSP responder endpoint. Defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "enabled": {
                          "description": "Boolean value that specifies whether a custom OCSP responder is enabled.",
                          "type": "boolean"
                        },
                        "ocspCustomCname": {
                          "description": "CNAME specifying a customized OCSP domain. Note: The value of the CNAME must not include a protocol prefix such as \"http://\" or \"https://\".",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "serial": {
              "description": "Serial number of the certificate authority. Only available after the certificate authority certificate has been imported.",
              "type": "string"
            },
            "tags": {
              "description": "Key-value map of resource tags.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "tagsAll": {
              "description": "Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "type": {
              "description": "Type of the certificate authority. Defaults to SUBORDINATE. Valid values: ROOT and SUBORDINATE.",
              "type": "string"
            },
            "usageMode": {
              "description": "Specifies whether the CA issues general-purpose certificates that typically require a revocation mechanism, or short-lived certificates that may optionally omit revocation because they expire quickly. Short-lived certificate validity is limited to seven days. Defaults to GENERAL_PURPOSE. Valid values: GENERAL_PURPOSE and SHORT_LIVED_CERTIFICATE.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "type": "array",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one\nstatus to another.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from\none status to another, if any.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to\na resource at any point in time.",
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest metadata.generation\nwhich resulted in either a ready state, or stalled due to error\nit can not recover from without human intervention.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    }
  }
}
