{
  "description": "An EgressNetwork captures traffic to egress destinations",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVerson": {
      "type": "string"
    },
    "kind": {
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "type": "object",
      "required": [
        "trafficPolicy"
      ],
      "properties": {
        "networks": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "cidr"
            ],
            "properties": {
              "cidr": {
                "description": "The CIDR of the network to be authorized.",
                "type": "string"
              },
              "except": {
                "description": "A list of IP networks/addresses not to be included in the above `cidr`.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "trafficPolicy": {
          "description": "This field controls the traffic policy enforced upon traffic that does not match any explicit route resources associated with an instance of this object. The values that are allowed currently are:\n - Allow - permits all traffic, even if it has not been\n              explicitly described via attaching an xRoute\n              resources.\n - Deny -  blocks all traffic that has not been described via\n              attaching an xRoute resource.",
          "type": "string",
          "enum": [
            "Allow",
            "Deny"
          ]
        }
      },
      "additionalProperties": false
    },
    "status": {
      "type": "object",
      "properties": {
        "conditions": {
          "type": "array",
          "required": [
            "status",
            "type"
          ],
          "items": {
            "type": "object",
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
                "type": "string",
                "maxLength": 32768
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
                "type": "string",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
              },
              "status": {
                "description": "status of the condition (one of True, False, Unknown)",
                "type": "string",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ]
              },
              "type": {
                "description": "type of the condition in CamelCase or in foo.example.com/CamelCase.",
                "type": "string",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
              }
            },
            "additionalProperties": false
          }
        }
      },
      "additionalProperties": false
    }
  }
}
