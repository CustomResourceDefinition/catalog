{
  "description": "Provider is the schema for provider definitions in terraform controller",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "ProviderSpec defines the desired state of a provider",
      "type": "object",
      "required": [
        "provider",
        "source"
      ],
      "properties": {
        "backendTemplate": {
          "description": "BackendTemplate is the reference to a backend template used for the terraform\nstate storage. This field can override the default backend template, which is supplied as\na command line argument to the controller binary. The contents of the secret MUST be a\nsingle field 'backend.tf' which contains the backend template.",
          "type": "object",
          "properties": {
            "name": {
              "description": "name is unique within a namespace to reference a secret resource.",
              "type": "string"
            },
            "namespace": {
              "description": "namespace defines the space within which the secret name must be unique.",
              "type": "string"
            }
          },
          "additionalProperties": false,
          "x-kubernetes-map-type": "atomic"
        },
        "configuration": {
          "description": "Configuration is optional configuration to the provider. This is terraform provider specific.",
          "type": "object",
          "x-kubernetes-preserve-unknown-fields": true
        },
        "job": {
          "description": "Job defined a custom collection of labels and annotations to be applied to all jobs\nwhich are created and 'use' this provider.",
          "type": "object",
          "properties": {
            "annotations": {
              "description": "Annotations is a collection of annotations which are automatically added to all jobs.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "labels": {
              "description": "Labels is a collection of labels which are automatically added to all jobs.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false
        },
        "preload": {
          "description": "Preload defines the configuration for the preloading of contextual data from the cloud vendor.",
          "type": "object",
          "properties": {
            "cluster": {
              "description": "Cluster is the name of the kubernetes cluster we use to pivot the data around",
              "type": "string"
            },
            "context": {
              "description": "Context is the context name of the Context we should create from the preload\nimplementation",
              "type": "string"
            },
            "enabled": {
              "description": "Enabled indicates if the preloader is enabled",
              "type": "boolean"
            },
            "interval": {
              "description": "Interval is the interval to run the preloader",
              "type": "string"
            },
            "region": {
              "description": "Region is the cloud region the cluster is location in",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "provider": {
          "description": "ProviderType defines the cloud provider which is being used, currently supported providers are\naws, google or azurerm.",
          "type": "string"
        },
        "secretRef": {
          "description": "SecretRef is a reference to a kubernetes secret. This is required only when using the source: secret.\nThe secret should include the environment variables required to by the terraform provider.",
          "type": "object",
          "properties": {
            "name": {
              "description": "name is unique within a namespace to reference a secret resource.",
              "type": "string"
            },
            "namespace": {
              "description": "namespace defines the space within which the secret name must be unique.",
              "type": "string"
            }
          },
          "additionalProperties": false,
          "x-kubernetes-map-type": "atomic"
        },
        "selector": {
          "description": "Selector provider the ability to filter who can use this provider. If empty, all users\nin the cluster is permitted to use the provider. Otherrise you can specify a selector\nwhich can use namespace and resource labels",
          "type": "object",
          "properties": {
            "namespace": {
              "description": "Namespace is used to filter a configuration based on the namespace labels of\nwhere it exists",
              "type": "object",
              "properties": {
                "matchExpressions": {
                  "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                  "type": "array",
                  "items": {
                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                    "type": "object",
                    "required": [
                      "key",
                      "operator"
                    ],
                    "properties": {
                      "key": {
                        "description": "key is the label key that the selector applies to.",
                        "type": "string"
                      },
                      "operator": {
                        "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                        "type": "string"
                      },
                      "values": {
                        "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "x-kubernetes-list-type": "atomic"
                      }
                    },
                    "additionalProperties": false
                  },
                  "x-kubernetes-list-type": "atomic"
                },
                "matchLabels": {
                  "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              },
              "additionalProperties": false,
              "x-kubernetes-map-type": "atomic"
            },
            "resource": {
              "description": "Resource provides the ability to filter a configuration based on it's labels",
              "type": "object",
              "properties": {
                "matchExpressions": {
                  "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                  "type": "array",
                  "items": {
                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                    "type": "object",
                    "required": [
                      "key",
                      "operator"
                    ],
                    "properties": {
                      "key": {
                        "description": "key is the label key that the selector applies to.",
                        "type": "string"
                      },
                      "operator": {
                        "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                        "type": "string"
                      },
                      "values": {
                        "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "x-kubernetes-list-type": "atomic"
                      }
                    },
                    "additionalProperties": false
                  },
                  "x-kubernetes-list-type": "atomic"
                },
                "matchLabels": {
                  "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              },
              "additionalProperties": false,
              "x-kubernetes-map-type": "atomic"
            }
          },
          "additionalProperties": false
        },
        "serviceAccount": {
          "description": "ServiceAccount is the name of a service account to use when the provider source is 'injected'. The\nservice account should exist in the terraform controller namespace and be configure per cloud vendor\nrequirements for pod identity.",
          "type": "string"
        },
        "source": {
          "description": "Source defines the type of credentials the provider is wrapper, this could be wrapping a static secret\nor using a managed identity. The currently supported values are secret and injected.",
          "type": "string"
        },
        "summary": {
          "description": "Summary provides a human readable description of the provider",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "ProviderStatus defines the observed state of a provider",
      "type": "object",
      "properties": {
        "conditions": {
          "description": "Conditions represents the observations of the resource's current state.",
          "type": "array",
          "items": {
            "description": "Condition is the current observed condition of some aspect of a resource",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "name",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "detail": {
                "description": "Detail is any additional human-readable detail to understand this condition, for example,\nthe full underlying error which caused an issue",
                "type": "string"
              },
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "Message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                "type": "string",
                "maxLength": 32768
              },
              "name": {
                "description": "Name is a human-readable name for this condition.",
                "type": "string",
                "minLength": 1
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64",
                "minimum": 0
              },
              "reason": {
                "description": "Reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                "type": "string",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
              },
              "status": {
                "description": "Status of the condition, one of True, False, Unknown.",
                "type": "string",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ]
              },
              "type": {
                "description": "Type of condition in CamelCase or in foo.example.com/CamelCase.",
                "type": "string",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "lastPreloadTime": {
          "description": "LastPreloadTime is the last time the provider was used to run a preload\njob",
          "type": "string",
          "format": "date-time"
        },
        "lastReconcile": {
          "description": "LastReconcile describes the generation and time of the last reconciliation",
          "type": "object",
          "properties": {
            "generation": {
              "description": "Generation is the generation reconciled on the last reconciliation",
              "type": "integer",
              "format": "int64"
            },
            "time": {
              "description": "Time is the last time the resource was reconciled",
              "type": "string",
              "format": "date-time"
            }
          },
          "additionalProperties": false
        },
        "lastSuccess": {
          "description": "LastSuccess descibes the generation and time of the last reconciliation which resulted in\na Success status",
          "type": "object",
          "properties": {
            "generation": {
              "description": "Generation is the generation reconciled on the last reconciliation",
              "type": "integer",
              "format": "int64"
            },
            "time": {
              "description": "Time is the last time the resource was reconciled",
              "type": "string",
              "format": "date-time"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  }
}
