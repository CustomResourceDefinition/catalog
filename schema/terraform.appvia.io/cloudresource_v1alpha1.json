{
  "description": "CloudResource is the schema for terraform definitions in terraform controller",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "CloudResourceSpec defines the desired state of a terraform",
      "type": "object",
      "required": [
        "plan"
      ],
      "properties": {
        "auth": {
          "description": "Auth is used to configure any options required when the source of the terraform\nmodule is private or requires credentials to retrieve. This could be SSH keys or git\nuser/pass or AWS credentials for an s3 bucket.",
          "type": "object",
          "properties": {
            "name": {
              "description": "name is unique within a namespace to reference a secret resource.",
              "type": "string"
            },
            "namespace": {
              "description": "namespace defines the space within which the secret name must be unique.",
              "type": "string"
            }
          },
          "additionalProperties": false,
          "x-kubernetes-map-type": "atomic"
        },
        "enableAutoApproval": {
          "description": "EnableAutoApproval when enabled indicates the configuration does not need to be\nmanually approved. On a change to the configuration, the controller will automatically\napprove the configuration. Note it still needs to adhere to any checks or policies.",
          "type": "boolean"
        },
        "enableDriftDetection": {
          "description": "EnableDriftDetection when enabled run periodic reconciliation configurations looking\nfor any drift between the expected and current state. If any drift is detected the\nstatus is changed and a kubernetes event raised.",
          "type": "boolean"
        },
        "plan": {
          "description": "Plan is the reference to the plan which this cloud resource is associated with. This\nfield is required, and needs both the name and version the plan revision to use",
          "type": "object",
          "required": [
            "name",
            "revision"
          ],
          "properties": {
            "name": {
              "description": "Name is the name of the plan this configuration is associated with",
              "type": "string"
            },
            "revision": {
              "description": "Revision is the revision of the plan this configuration is associated with",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "providerRef": {
          "description": "ProviderRef is the reference to the provider which should be used to execute this\nconfiguration.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name is the name of the provider which contains the credentials to use for this\nconfiguration.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace is the namespace of the provider itself.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "terraformVersion": {
          "description": "TerraformVersion provides the ability to override the default terraform version. Before\nchanging this field its best to consult with platform administrator. As the\nvalue of this field is used to change the tag of the terraform container image.",
          "type": "string"
        },
        "valueFrom": {
          "description": "ValueFromSource is a collection of value from sources, where the source of the value\nis taken from a secret",
          "type": "array",
          "items": {
            "description": "ValueFromSource defines a value which is taken from a secret",
            "type": "object",
            "required": [
              "key"
            ],
            "properties": {
              "context": {
                "description": "Context is the context is the name of the terraform context where the\nvalue should be retrieved from",
                "type": "string"
              },
              "key": {
                "description": "Key is the key in the secret which we should used for the value",
                "type": "string"
              },
              "name": {
                "description": "Name is the name which we use when injecting the value into the terraform code\ni.e. the secret may contain data.DB_HOST but you call this database_hostname. Note,\nfor backwards compatiability if no name is provided, we using the key at the name",
                "type": "string"
              },
              "optional": {
                "description": "Optional indicates the secret can be optional, i.e if the secret does not exist, or the key is\nnot contained in the secret, we ignore the error",
                "type": "boolean"
              },
              "secret": {
                "description": "Secret is the name of the secret in the configuration namespace",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "variables": {
          "description": "Variables provides the inputs for the terraform module itself. These are passed to the\nterraform executor and used to execute the plan, apply and destroy phases.",
          "type": "object",
          "x-kubernetes-preserve-unknown-fields": true
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToRef is the name for a secret. On execution of the terraform module\nany module outputs are written to this secret. The outputs are automatically uppercased\nand ready to be consumed as environment variables.\nWriteConnectionSecretRef is the secret where the terraform outputs will be written.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "keys": {
              "description": "Keys is a collection of name used to filter the terraform output. By default all keys from the\noutput of the terraform state are written to the connection secret. Here we can define exactly\nwhich keys we want from that output.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "name": {
              "description": "Name is the of the secret where you want to the terraform output to be written. The terraform outputs\nwill be written to the secret as a key value pair. All are uppercased can read to be consumed by the\nworkload.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "CloudResourceStatus defines the observed state of a terraform",
      "type": "object",
      "properties": {
        "conditions": {
          "description": "Conditions represents the observations of the resource's current state.",
          "type": "array",
          "items": {
            "description": "Condition is the current observed condition of some aspect of a resource",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "name",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "detail": {
                "description": "Detail is any additional human-readable detail to understand this condition, for example,\nthe full underlying error which caused an issue",
                "type": "string"
              },
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "Message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                "type": "string",
                "maxLength": 32768
              },
              "name": {
                "description": "Name is a human-readable name for this condition.",
                "type": "string",
                "minLength": 1
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64",
                "minimum": 0
              },
              "reason": {
                "description": "Reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                "type": "string",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
              },
              "status": {
                "description": "Status of the condition, one of True, False, Unknown.",
                "type": "string",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ]
              },
              "type": {
                "description": "Type of condition in CamelCase or in foo.example.com/CamelCase.",
                "type": "string",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "configurationName": {
          "description": "ConfigurationName is the of the configuration this cloudresource is managing on behalf of",
          "type": "string"
        },
        "configurationStatus": {
          "description": "Configuration is the state taken from the underlying configuration",
          "type": "object",
          "properties": {
            "conditions": {
              "description": "Conditions represents the observations of the resource's current state.",
              "type": "array",
              "items": {
                "description": "Condition is the current observed condition of some aspect of a resource",
                "type": "object",
                "required": [
                  "lastTransitionTime",
                  "name",
                  "reason",
                  "status",
                  "type"
                ],
                "properties": {
                  "detail": {
                    "description": "Detail is any additional human-readable detail to understand this condition, for example,\nthe full underlying error which caused an issue",
                    "type": "string"
                  },
                  "lastTransitionTime": {
                    "description": "LastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "type": "string",
                    "format": "date-time"
                  },
                  "message": {
                    "description": "Message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                    "type": "string",
                    "maxLength": 32768
                  },
                  "name": {
                    "description": "Name is a human-readable name for this condition.",
                    "type": "string",
                    "minLength": 1
                  },
                  "observedGeneration": {
                    "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "reason": {
                    "description": "Reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                    "type": "string",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
                  },
                  "status": {
                    "description": "Status of the condition, one of True, False, Unknown.",
                    "type": "string",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ]
                  },
                  "type": {
                    "description": "Type of condition in CamelCase or in foo.example.com/CamelCase.",
                    "type": "string",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                  }
                },
                "additionalProperties": false
              },
              "x-kubernetes-list-map-keys": [
                "type"
              ],
              "x-kubernetes-list-type": "map"
            },
            "costs": {
              "description": "Costs is the predicted costs of this configuration. Note this field is only populated\nwhen the integration has been configured by the administrator.",
              "type": "object",
              "properties": {
                "enabled": {
                  "description": "Enabled indicates if the cost integration was enabled when this configuration was last\nexecuted.",
                  "type": "boolean"
                },
                "hourly": {
                  "description": "Hourly is the hourly estimated cost of the configuration",
                  "type": "string"
                },
                "monthly": {
                  "description": "Monthly is the monthly estimated cost of the configuration",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "driftTimestamp": {
              "description": "DriftTimestamp is the timestamp of the last drift detection",
              "type": "string"
            },
            "lastReconcile": {
              "description": "LastReconcile describes the generation and time of the last reconciliation",
              "type": "object",
              "properties": {
                "generation": {
                  "description": "Generation is the generation reconciled on the last reconciliation",
                  "type": "integer",
                  "format": "int64"
                },
                "time": {
                  "description": "Time is the last time the resource was reconciled",
                  "type": "string",
                  "format": "date-time"
                }
              },
              "additionalProperties": false
            },
            "lastSuccess": {
              "description": "LastSuccess descibes the generation and time of the last reconciliation which resulted in\na Success status",
              "type": "object",
              "properties": {
                "generation": {
                  "description": "Generation is the generation reconciled on the last reconciliation",
                  "type": "integer",
                  "format": "int64"
                },
                "time": {
                  "description": "Time is the last time the resource was reconciled",
                  "type": "string",
                  "format": "date-time"
                }
              },
              "additionalProperties": false
            },
            "resourceStatus": {
              "description": "ResourceStatus indicates the status of the resources and if the resources are insync with the\nconfiguration",
              "type": "string"
            },
            "resources": {
              "description": "Resources is the number of managed cloud resources which are currently under management.\nThis field is taken from the terraform state itself.",
              "type": "integer"
            },
            "terraformVersion": {
              "description": "TerraformVersion is the version of terraform which was last used to run this\nconfiguration",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "costs": {
          "description": "Costs is the predicted costs of this configuration. Note this field is only populated\nwhen the integration has been configured by the administrator.",
          "type": "object",
          "properties": {
            "enabled": {
              "description": "Enabled indicates if the cost integration was enabled when this configuration was last\nexecuted.",
              "type": "boolean"
            },
            "hourly": {
              "description": "Hourly is the hourly estimated cost of the configuration",
              "type": "string"
            },
            "monthly": {
              "description": "Monthly is the monthly estimated cost of the configuration",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "lastReconcile": {
          "description": "LastReconcile describes the generation and time of the last reconciliation",
          "type": "object",
          "properties": {
            "generation": {
              "description": "Generation is the generation reconciled on the last reconciliation",
              "type": "integer",
              "format": "int64"
            },
            "time": {
              "description": "Time is the last time the resource was reconciled",
              "type": "string",
              "format": "date-time"
            }
          },
          "additionalProperties": false
        },
        "lastSuccess": {
          "description": "LastSuccess descibes the generation and time of the last reconciliation which resulted in\na Success status",
          "type": "object",
          "properties": {
            "generation": {
              "description": "Generation is the generation reconciled on the last reconciliation",
              "type": "integer",
              "format": "int64"
            },
            "time": {
              "description": "Time is the last time the resource was reconciled",
              "type": "string",
              "format": "date-time"
            }
          },
          "additionalProperties": false
        },
        "resourceStatus": {
          "description": "ResourceStatus indicates the status of the resources and if the resources are insync with the\nconfiguration",
          "type": "string"
        },
        "resources": {
          "description": "Resources is the number of managed cloud resources which are currently under management.\nThis field is taken from the terraform state itself.",
          "type": "integer"
        },
        "updateAvailable": {
          "description": "UpdateAvailable indicates if there is a new version of the plan available",
          "type": "string"
        }
      },
      "additionalProperties": false
    }
  }
}
