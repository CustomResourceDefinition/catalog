{
  "description": "Policy is the schema for provider definitions in terraform controller",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "PolicySpec defines the desired state of a provider",
      "type": "object",
      "properties": {
        "constraints": {
          "description": "Constraints provides a series or constraints that must be enforced on the selectored\nterraform configurations.",
          "type": "object",
          "properties": {
            "checkov": {
              "description": "Checkov provides the ability to enforce a set of security standards on all configurations.\nThese can be configured to target specific resources based on namespace and resource\nlabels",
              "type": "object",
              "properties": {
                "checks": {
                  "description": "Checks is a list of checks which should be applied against the configuration. Note, an\nempty list here implies checkov should run ALL checks.\nPlease see https://www.checkov.io/5.Policy%20Index/terraform.html",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "external": {
                  "description": "External is a collection of external checks which should be included in the scan. Each\nof the external sources and retrieved and sourced into /run/policy/NAME where they can\nbe included as part of the scan",
                  "type": "array",
                  "items": {
                    "description": "ExternalCheck defines the definition for an external check - this comprises of the\nsource and any optional secret",
                    "type": "object",
                    "required": [
                      "name",
                      "url"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name provides a arbitrary name to the checks - note, this name is used as the directory\nname when we source the code",
                        "type": "string"
                      },
                      "secretRef": {
                        "description": "SecretRef is reference to secret which contains environment variables used by the source\ncommand to retrieve the code. This could be cloud credentials, ssh keys, git username\nand password etc",
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "name is unique within a namespace to reference a secret resource.",
                            "type": "string"
                          },
                          "namespace": {
                            "description": "namespace defines the space within which the secret name must be unique.",
                            "type": "string"
                          }
                        },
                        "additionalProperties": false,
                        "x-kubernetes-map-type": "atomic"
                      },
                      "url": {
                        "description": "URL is the source external checks - this is usually a git repository. The notation\nfor this is https://github.com/hashicorp/go-getter",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "selector": {
                  "description": "Selector is the selector on the namespace or labels on the configuration. By leaving this\nfields empty you can implicitly selecting all configurations.",
                  "type": "object",
                  "properties": {
                    "namespace": {
                      "description": "Namespace is used to filter a configuration based on the namespace labels of\nwhere it exists",
                      "type": "object",
                      "properties": {
                        "matchExpressions": {
                          "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                          "type": "array",
                          "items": {
                            "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                            "type": "object",
                            "required": [
                              "key",
                              "operator"
                            ],
                            "properties": {
                              "key": {
                                "description": "key is the label key that the selector applies to.",
                                "type": "string"
                              },
                              "operator": {
                                "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                "type": "string"
                              },
                              "values": {
                                "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "x-kubernetes-list-type": "atomic"
                              }
                            },
                            "additionalProperties": false
                          },
                          "x-kubernetes-list-type": "atomic"
                        },
                        "matchLabels": {
                          "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        }
                      },
                      "additionalProperties": false,
                      "x-kubernetes-map-type": "atomic"
                    },
                    "resource": {
                      "description": "Resource provides the ability to filter a configuration based on it's labels",
                      "type": "object",
                      "properties": {
                        "matchExpressions": {
                          "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                          "type": "array",
                          "items": {
                            "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                            "type": "object",
                            "required": [
                              "key",
                              "operator"
                            ],
                            "properties": {
                              "key": {
                                "description": "key is the label key that the selector applies to.",
                                "type": "string"
                              },
                              "operator": {
                                "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                "type": "string"
                              },
                              "values": {
                                "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "x-kubernetes-list-type": "atomic"
                              }
                            },
                            "additionalProperties": false
                          },
                          "x-kubernetes-list-type": "atomic"
                        },
                        "matchLabels": {
                          "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        }
                      },
                      "additionalProperties": false,
                      "x-kubernetes-map-type": "atomic"
                    }
                  },
                  "additionalProperties": false
                },
                "skipChecks": {
                  "description": "SkipChecks is a collection of checkov checks which you can defined as skipped. The security\nscan will ignore any failures on these checks.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "source": {
                  "description": "Source indicates an external source for the checkov configurations",
                  "type": "object",
                  "required": [
                    "configuration",
                    "url"
                  ],
                  "properties": {
                    "configuration": {
                      "description": "Configuration is the configuration to use within the source directory",
                      "type": "string"
                    },
                    "secretRef": {
                      "description": "SecretRef is reference to secret which contains environment variables used by the source\ncommand to retrieve the code. This could be cloud credentials, ssh keys, git username\nand password etc",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "name is unique within a namespace to reference a secret resource.",
                          "type": "string"
                        },
                        "namespace": {
                          "description": "namespace defines the space within which the secret name must be unique.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false,
                      "x-kubernetes-map-type": "atomic"
                    },
                    "url": {
                      "description": "URL is the source external checks - this is usually a git repository. The notation\nfor this is https://github.com/hashicorp/go-getter",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "modules": {
              "description": "Modules provides the ability to control the source for all terraform modules. Allowing\nplatform teams to control where the modules can be downloaded from.",
              "type": "object",
              "properties": {
                "allowed": {
                  "description": "Allowed is a collection of regexes which are applied to the source of the terraform\nconfiguration. The configuration MUST match one or more of the regexes in order to\nbe allowed to run.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "selector": {
                  "description": "Selector is the selector on the namespace or labels on the configuration. By leaving\nthis field empty you are implicitly selecting all configurations.",
                  "type": "object",
                  "properties": {
                    "namespace": {
                      "description": "Namespace is used to filter a configuration based on the namespace labels of\nwhere it exists",
                      "type": "object",
                      "properties": {
                        "matchExpressions": {
                          "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                          "type": "array",
                          "items": {
                            "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                            "type": "object",
                            "required": [
                              "key",
                              "operator"
                            ],
                            "properties": {
                              "key": {
                                "description": "key is the label key that the selector applies to.",
                                "type": "string"
                              },
                              "operator": {
                                "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                "type": "string"
                              },
                              "values": {
                                "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "x-kubernetes-list-type": "atomic"
                              }
                            },
                            "additionalProperties": false
                          },
                          "x-kubernetes-list-type": "atomic"
                        },
                        "matchLabels": {
                          "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        }
                      },
                      "additionalProperties": false,
                      "x-kubernetes-map-type": "atomic"
                    },
                    "resource": {
                      "description": "Resource provides the ability to filter a configuration based on it's labels",
                      "type": "object",
                      "properties": {
                        "matchExpressions": {
                          "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                          "type": "array",
                          "items": {
                            "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                            "type": "object",
                            "required": [
                              "key",
                              "operator"
                            ],
                            "properties": {
                              "key": {
                                "description": "key is the label key that the selector applies to.",
                                "type": "string"
                              },
                              "operator": {
                                "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                "type": "string"
                              },
                              "values": {
                                "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "x-kubernetes-list-type": "atomic"
                              }
                            },
                            "additionalProperties": false
                          },
                          "x-kubernetes-list-type": "atomic"
                        },
                        "matchLabels": {
                          "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        }
                      },
                      "additionalProperties": false,
                      "x-kubernetes-map-type": "atomic"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "defaults": {
          "description": "Defaults provides the ability to target specific terraform module based on namespace or\nresource labels and automatically inject variables into the configurations.",
          "type": "array",
          "items": {
            "description": "DefaultVariables provides platform administrators the ability to inject\ndefault variables into a configuration",
            "type": "object",
            "required": [
              "selector"
            ],
            "properties": {
              "secrets": {
                "description": "Secrets is a collection of secrets which are used to inject variables into the configuration",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "selector": {
                "description": "Selector is used to determine which configurations the variables should be injected into",
                "type": "object",
                "properties": {
                  "modules": {
                    "description": "Modules provides a collection of regexes which are used to match against the\nconfiguration module",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "namespace": {
                    "description": "Namespace selectors all configurations under one or more namespaces, determined by the\nlabeling on the namespace.",
                    "type": "object",
                    "properties": {
                      "matchExpressions": {
                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                        "type": "array",
                        "items": {
                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                          "type": "object",
                          "required": [
                            "key",
                            "operator"
                          ],
                          "properties": {
                            "key": {
                              "description": "key is the label key that the selector applies to.",
                              "type": "string"
                            },
                            "operator": {
                              "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                              "type": "string"
                            },
                            "values": {
                              "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "x-kubernetes-list-type": "atomic"
                            }
                          },
                          "additionalProperties": false
                        },
                        "x-kubernetes-list-type": "atomic"
                      },
                      "matchLabels": {
                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "additionalProperties": false,
                    "x-kubernetes-map-type": "atomic"
                  }
                },
                "additionalProperties": false
              },
              "variables": {
                "description": "Variables is a collection of variables to inject into the configuration",
                "type": "object",
                "x-kubernetes-preserve-unknown-fields": true
              }
            },
            "additionalProperties": false
          }
        },
        "summary": {
          "description": "Summary is an optional field which can be used to define a summary of what the policy is\nconfigured to enforce.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "PolicyStatus defines the observed state of a provider",
      "type": "object",
      "properties": {
        "conditions": {
          "description": "Conditions represents the observations of the resource's current state.",
          "type": "array",
          "items": {
            "description": "Condition is the current observed condition of some aspect of a resource",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "name",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "detail": {
                "description": "Detail is any additional human-readable detail to understand this condition, for example,\nthe full underlying error which caused an issue",
                "type": "string"
              },
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "Message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                "type": "string",
                "maxLength": 32768
              },
              "name": {
                "description": "Name is a human-readable name for this condition.",
                "type": "string",
                "minLength": 1
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64",
                "minimum": 0
              },
              "reason": {
                "description": "Reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                "type": "string",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
              },
              "status": {
                "description": "Status of the condition, one of True, False, Unknown.",
                "type": "string",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ]
              },
              "type": {
                "description": "Type of condition in CamelCase or in foo.example.com/CamelCase.",
                "type": "string",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "lastReconcile": {
          "description": "LastReconcile describes the generation and time of the last reconciliation",
          "type": "object",
          "properties": {
            "generation": {
              "description": "Generation is the generation reconciled on the last reconciliation",
              "type": "integer",
              "format": "int64"
            },
            "time": {
              "description": "Time is the last time the resource was reconciled",
              "type": "string",
              "format": "date-time"
            }
          },
          "additionalProperties": false
        },
        "lastSuccess": {
          "description": "LastSuccess descibes the generation and time of the last reconciliation which resulted in\na Success status",
          "type": "object",
          "properties": {
            "generation": {
              "description": "Generation is the generation reconciled on the last reconciliation",
              "type": "integer",
              "format": "int64"
            },
            "time": {
              "description": "Time is the last time the resource was reconciled",
              "type": "string",
              "format": "date-time"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  }
}
