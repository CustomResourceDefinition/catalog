{
  "description": "SecretBackendRole is the Schema for the SecretBackendRoles API. Creates a role on an AWS Secret Backend for Vault.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "SecretBackendRoleSpec defines the desired state of SecretBackendRole",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "deletionPolicy": {
          "description": "DeletionPolicy specifies what will happen to the underlying external\nwhen this managed resource is deleted - either \"Delete\" or \"Orphan\" the\nexternal resource.\nThis field is planned to be deprecated in favor of the ManagementPolicies\nfield in a future release. Currently, both could be set independently and\nnon-default values would be honored if the feature flag is enabled.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "type": "string",
          "default": "Delete",
          "enum": [
            "Orphan",
            "Delete"
          ]
        },
        "forProvider": {
          "type": "object",
          "properties": {
            "backend": {
              "description": "The path the AWS secret backend is mounted at,\nwith no leading or trailing /s.\nThe path of the AWS Secret Backend the role belongs to.",
              "type": "string"
            },
            "backendRef": {
              "description": "Reference to a SecretBackend in aws to populate backend.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "backendSelector": {
              "description": "Selector for a SecretBackend in aws to populate backend.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "credentialType": {
              "description": "Specifies the type of credential to be used when\nretrieving credentials from the role. Must be one of iam_user, assumed_role, or\nfederation_token.\nRole credential type.",
              "type": "string"
            },
            "defaultStsTtl": {
              "description": "The default TTL in seconds for STS credentials.\nWhen a TTL is not specified when STS credentials are requested,\nand a default TTL is specified on the role,\nthen this default TTL will be used. Valid only when credential_type is one of\nassumed_role or federation_token.\nThe default TTL in seconds for STS credentials. When a TTL is not specified when STS credentials are requested, and a default TTL is specified on the role, then this default TTL will be used. Valid only when credential_type is one of assumed_role or federation_token.",
              "type": "number"
            },
            "externalId": {
              "description": "External ID to set for assume role creds.\nValid only when credential_type is set to assumed_role.\nExternal ID to set for assume role creds.",
              "type": "string"
            },
            "iamGroups": {
              "description": "A list of IAM group names. IAM users generated\nagainst this vault role will be added to these IAM Groups. For a credential\ntype of assumed_role or federation_token, the policies sent to the\ncorresponding AWS call (sts:AssumeRole or sts:GetFederation) will be the\npolicies from each group in iam_groups combined with the policy_document\nand policy_arns parameters.\nA list of IAM group names. IAM users generated against this vault role will be added to these IAM Groups. For a credential type of assumed_role or federation_token, the policies sent to the corresponding AWS call (sts:AssumeRole or sts:GetFederation) will be the policies from each group in iam_groups combined with the policy_document and policy_arns parameters.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-kubernetes-list-type": "set"
            },
            "iamTags": {
              "description": "A map of strings representing key/value pairs\nto be used as tags for any IAM user that is created by this role.\nA map of strings representing key/value pairs used as tags for any IAM user created by this role.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "maxStsTtl": {
              "description": "The max allowed TTL in seconds for STS credentials\n(credentials TTL are capped to max_sts_ttl). Valid only when credential_type is\none of assumed_role or federation_token.\nThe max allowed TTL in seconds for STS credentials (credentials TTL are capped to max_sts_ttl). Valid only when credential_type is one of assumed_role or federation_token.",
              "type": "number"
            },
            "name": {
              "description": "The name to identify this role within the backend.\nMust be unique within the backend.\nUnique name for the role.",
              "type": "string"
            },
            "namespace": {
              "description": "The namespace to provision the resource in.\nThe value should not contain leading or trailing forward slashes.\nThe namespace is always relative to the provider's configured namespace.\nAvailable only for Vault Enterprise.\nTarget namespace. (requires Enterprise)",
              "type": "string"
            },
            "permissionsBoundaryArn": {
              "description": "The ARN of the AWS Permissions\nBoundary to attach to IAM users created in the role. Valid only when\ncredential_type is iam_user. If not specified, then no permissions boundary\npolicy will be attached.\nThe ARN of the AWS Permissions Boundary to attach to IAM users created in the role. Valid only when credential_type is iam_user. If not specified, then no permissions boundary policy will be attached.",
              "type": "string"
            },
            "policyArns": {
              "description": "Specifies a list of AWS managed policy ARNs. The\nbehavior depends on the credential type. With iam_user, the policies will be\nattached to IAM users when they are requested. With assumed_role and\nfederation_token, the policy ARNs will act as a filter on what the credentials\ncan do, similar to policy_document. When credential_type is iam_user or\nfederation_token, at least one of policy_document or policy_arns must\nbe specified.\nARN for an existing IAM policy the role should use.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-kubernetes-list-type": "set"
            },
            "policyDocument": {
              "description": "The IAM policy document for the role. The\nbehavior depends on the credential type. With iam_user, the policy document\nwill be attached to the IAM user generated and augment the permissions the IAM\nuser has. With assumed_role and federation_token, the policy document will\nact as a filter on what the credentials can do, similar to policy_arns.\nIAM policy the role should use in JSON format.",
              "type": "string"
            },
            "roleArns": {
              "description": "Specifies the ARNs of the AWS roles this Vault role\nis allowed to assume. Required when credential_type is assumed_role and\nprohibited otherwise.\nARNs of AWS roles allowed to be assumed. Only valid when credential_type is 'assumed_role'",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-kubernetes-list-type": "set"
            },
            "sessionTags": {
              "description": "A map of strings representing key/value pairs to be set\nduring assume role creds creation. Valid only when credential_type is set to\nassumed_role.\nSession tags to be set for assume role creds created.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "userPath": {
              "description": "The path for the user name. Valid only when\ncredential_type is iam_user. Default is /.\nThe path for the user name. Valid only when credential_type is iam_user. Default is /",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored\nunless the Management Policies feature flag is disabled.\nInitProvider holds the same fields as ForProvider, with the exception\nof Identifier and other resource reference fields. The fields that are\nin InitProvider are merged into ForProvider when the resource is created.\nThe same fields are also added to the terraform ignore_changes hook, to\navoid updating them after creation. This is useful for fields that are\nrequired on creation, but we do not desire to update them after creation,\nfor example because of an external controller is managing them, like an\nautoscaler.",
          "type": "object",
          "properties": {
            "backend": {
              "description": "The path the AWS secret backend is mounted at,\nwith no leading or trailing /s.\nThe path of the AWS Secret Backend the role belongs to.",
              "type": "string"
            },
            "backendRef": {
              "description": "Reference to a SecretBackend in aws to populate backend.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "backendSelector": {
              "description": "Selector for a SecretBackend in aws to populate backend.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "credentialType": {
              "description": "Specifies the type of credential to be used when\nretrieving credentials from the role. Must be one of iam_user, assumed_role, or\nfederation_token.\nRole credential type.",
              "type": "string"
            },
            "defaultStsTtl": {
              "description": "The default TTL in seconds for STS credentials.\nWhen a TTL is not specified when STS credentials are requested,\nand a default TTL is specified on the role,\nthen this default TTL will be used. Valid only when credential_type is one of\nassumed_role or federation_token.\nThe default TTL in seconds for STS credentials. When a TTL is not specified when STS credentials are requested, and a default TTL is specified on the role, then this default TTL will be used. Valid only when credential_type is one of assumed_role or federation_token.",
              "type": "number"
            },
            "externalId": {
              "description": "External ID to set for assume role creds.\nValid only when credential_type is set to assumed_role.\nExternal ID to set for assume role creds.",
              "type": "string"
            },
            "iamGroups": {
              "description": "A list of IAM group names. IAM users generated\nagainst this vault role will be added to these IAM Groups. For a credential\ntype of assumed_role or federation_token, the policies sent to the\ncorresponding AWS call (sts:AssumeRole or sts:GetFederation) will be the\npolicies from each group in iam_groups combined with the policy_document\nand policy_arns parameters.\nA list of IAM group names. IAM users generated against this vault role will be added to these IAM Groups. For a credential type of assumed_role or federation_token, the policies sent to the corresponding AWS call (sts:AssumeRole or sts:GetFederation) will be the policies from each group in iam_groups combined with the policy_document and policy_arns parameters.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-kubernetes-list-type": "set"
            },
            "iamTags": {
              "description": "A map of strings representing key/value pairs\nto be used as tags for any IAM user that is created by this role.\nA map of strings representing key/value pairs used as tags for any IAM user created by this role.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "maxStsTtl": {
              "description": "The max allowed TTL in seconds for STS credentials\n(credentials TTL are capped to max_sts_ttl). Valid only when credential_type is\none of assumed_role or federation_token.\nThe max allowed TTL in seconds for STS credentials (credentials TTL are capped to max_sts_ttl). Valid only when credential_type is one of assumed_role or federation_token.",
              "type": "number"
            },
            "name": {
              "description": "The name to identify this role within the backend.\nMust be unique within the backend.\nUnique name for the role.",
              "type": "string"
            },
            "namespace": {
              "description": "The namespace to provision the resource in.\nThe value should not contain leading or trailing forward slashes.\nThe namespace is always relative to the provider's configured namespace.\nAvailable only for Vault Enterprise.\nTarget namespace. (requires Enterprise)",
              "type": "string"
            },
            "permissionsBoundaryArn": {
              "description": "The ARN of the AWS Permissions\nBoundary to attach to IAM users created in the role. Valid only when\ncredential_type is iam_user. If not specified, then no permissions boundary\npolicy will be attached.\nThe ARN of the AWS Permissions Boundary to attach to IAM users created in the role. Valid only when credential_type is iam_user. If not specified, then no permissions boundary policy will be attached.",
              "type": "string"
            },
            "policyArns": {
              "description": "Specifies a list of AWS managed policy ARNs. The\nbehavior depends on the credential type. With iam_user, the policies will be\nattached to IAM users when they are requested. With assumed_role and\nfederation_token, the policy ARNs will act as a filter on what the credentials\ncan do, similar to policy_document. When credential_type is iam_user or\nfederation_token, at least one of policy_document or policy_arns must\nbe specified.\nARN for an existing IAM policy the role should use.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-kubernetes-list-type": "set"
            },
            "policyDocument": {
              "description": "The IAM policy document for the role. The\nbehavior depends on the credential type. With iam_user, the policy document\nwill be attached to the IAM user generated and augment the permissions the IAM\nuser has. With assumed_role and federation_token, the policy document will\nact as a filter on what the credentials can do, similar to policy_arns.\nIAM policy the role should use in JSON format.",
              "type": "string"
            },
            "roleArns": {
              "description": "Specifies the ARNs of the AWS roles this Vault role\nis allowed to assume. Required when credential_type is assumed_role and\nprohibited otherwise.\nARNs of AWS roles allowed to be assumed. Only valid when credential_type is 'assumed_role'",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-kubernetes-list-type": "set"
            },
            "sessionTags": {
              "description": "A map of strings representing key/value pairs to be set\nduring assume role creds creation. Valid only when credential_type is set to\nassumed_role.\nSession tags to be set for assume role creds created.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "userPath": {
              "description": "The path for the user name. Valid only when\ncredential_type is iam_user. Default is /.\nThe path for the user name. Valid only when credential_type is iam_user. Default is /",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "managementPolicies": {
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out\nthrough a Crossplane feature flag.\nManagementPolicies specify the array of actions Crossplane is allowed to\ntake on the managed and external resources.\nThis field is planned to replace the DeletionPolicy field in a future\nrelease. Currently, both could be set independently and non-default\nvalues would be honored if the feature flag is enabled. If both are\ncustom, the DeletionPolicy field will be ignored.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223\nand this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers\ncan take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to\ncreate, observe, update, and delete this managed resource should be\nconfigured.",
          "type": "object",
          "default": {
            "name": "default"
          },
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "type": "object",
              "properties": {
                "resolution": {
                  "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                  "type": "string",
                  "default": "Required",
                  "enum": [
                    "Required",
                    "Optional"
                  ]
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                  "type": "string",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a\nSecret to which any connection details for this managed resource should\nbe written. Connection details frequently include the endpoint, username,\nand password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name",
            "namespace"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false,
      "x-kubernetes-validations": [
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.credentialType) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.credentialType))",
          "message": "spec.forProvider.credentialType is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.name))",
          "message": "spec.forProvider.name is a required parameter"
        }
      ]
    },
    "status": {
      "description": "SecretBackendRoleStatus defines the observed state of SecretBackendRole.",
      "type": "object",
      "properties": {
        "atProvider": {
          "type": "object",
          "properties": {
            "backend": {
              "description": "The path the AWS secret backend is mounted at,\nwith no leading or trailing /s.\nThe path of the AWS Secret Backend the role belongs to.",
              "type": "string"
            },
            "credentialType": {
              "description": "Specifies the type of credential to be used when\nretrieving credentials from the role. Must be one of iam_user, assumed_role, or\nfederation_token.\nRole credential type.",
              "type": "string"
            },
            "defaultStsTtl": {
              "description": "The default TTL in seconds for STS credentials.\nWhen a TTL is not specified when STS credentials are requested,\nand a default TTL is specified on the role,\nthen this default TTL will be used. Valid only when credential_type is one of\nassumed_role or federation_token.\nThe default TTL in seconds for STS credentials. When a TTL is not specified when STS credentials are requested, and a default TTL is specified on the role, then this default TTL will be used. Valid only when credential_type is one of assumed_role or federation_token.",
              "type": "number"
            },
            "externalId": {
              "description": "External ID to set for assume role creds.\nValid only when credential_type is set to assumed_role.\nExternal ID to set for assume role creds.",
              "type": "string"
            },
            "iamGroups": {
              "description": "A list of IAM group names. IAM users generated\nagainst this vault role will be added to these IAM Groups. For a credential\ntype of assumed_role or federation_token, the policies sent to the\ncorresponding AWS call (sts:AssumeRole or sts:GetFederation) will be the\npolicies from each group in iam_groups combined with the policy_document\nand policy_arns parameters.\nA list of IAM group names. IAM users generated against this vault role will be added to these IAM Groups. For a credential type of assumed_role or federation_token, the policies sent to the corresponding AWS call (sts:AssumeRole or sts:GetFederation) will be the policies from each group in iam_groups combined with the policy_document and policy_arns parameters.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-kubernetes-list-type": "set"
            },
            "iamTags": {
              "description": "A map of strings representing key/value pairs\nto be used as tags for any IAM user that is created by this role.\nA map of strings representing key/value pairs used as tags for any IAM user created by this role.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "id": {
              "type": "string"
            },
            "maxStsTtl": {
              "description": "The max allowed TTL in seconds for STS credentials\n(credentials TTL are capped to max_sts_ttl). Valid only when credential_type is\none of assumed_role or federation_token.\nThe max allowed TTL in seconds for STS credentials (credentials TTL are capped to max_sts_ttl). Valid only when credential_type is one of assumed_role or federation_token.",
              "type": "number"
            },
            "name": {
              "description": "The name to identify this role within the backend.\nMust be unique within the backend.\nUnique name for the role.",
              "type": "string"
            },
            "namespace": {
              "description": "The namespace to provision the resource in.\nThe value should not contain leading or trailing forward slashes.\nThe namespace is always relative to the provider's configured namespace.\nAvailable only for Vault Enterprise.\nTarget namespace. (requires Enterprise)",
              "type": "string"
            },
            "permissionsBoundaryArn": {
              "description": "The ARN of the AWS Permissions\nBoundary to attach to IAM users created in the role. Valid only when\ncredential_type is iam_user. If not specified, then no permissions boundary\npolicy will be attached.\nThe ARN of the AWS Permissions Boundary to attach to IAM users created in the role. Valid only when credential_type is iam_user. If not specified, then no permissions boundary policy will be attached.",
              "type": "string"
            },
            "policyArns": {
              "description": "Specifies a list of AWS managed policy ARNs. The\nbehavior depends on the credential type. With iam_user, the policies will be\nattached to IAM users when they are requested. With assumed_role and\nfederation_token, the policy ARNs will act as a filter on what the credentials\ncan do, similar to policy_document. When credential_type is iam_user or\nfederation_token, at least one of policy_document or policy_arns must\nbe specified.\nARN for an existing IAM policy the role should use.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-kubernetes-list-type": "set"
            },
            "policyDocument": {
              "description": "The IAM policy document for the role. The\nbehavior depends on the credential type. With iam_user, the policy document\nwill be attached to the IAM user generated and augment the permissions the IAM\nuser has. With assumed_role and federation_token, the policy document will\nact as a filter on what the credentials can do, similar to policy_arns.\nIAM policy the role should use in JSON format.",
              "type": "string"
            },
            "roleArns": {
              "description": "Specifies the ARNs of the AWS roles this Vault role\nis allowed to assume. Required when credential_type is assumed_role and\nprohibited otherwise.\nARNs of AWS roles allowed to be assumed. Only valid when credential_type is 'assumed_role'",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-kubernetes-list-type": "set"
            },
            "sessionTags": {
              "description": "A map of strings representing key/value pairs to be set\nduring assume role creds creation. Valid only when credential_type is set to\nassumed_role.\nSession tags to be set for assume role creds created.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "userPath": {
              "description": "The path for the user name. Valid only when\ncredential_type is iam_user. Default is /.\nThe path for the user name. Valid only when credential_type is iam_user. Default is /",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "type": "array",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one\nstatus to another.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from\none status to another, if any.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to\na resource at any point in time.",
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest metadata.generation\nwhich resulted in either a ready state, or stalled due to error\nit can not recover from without human intervention.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    }
  }
}
