{
  "description": "DeploymentGroup is the Schema for the DeploymentGroups API. Provides a CodeDeploy deployment group.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "DeploymentGroupSpec defines the desired state of DeploymentGroup",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "deletionPolicy": {
          "description": "DeletionPolicy specifies what will happen to the underlying external\nwhen this managed resource is deleted - either \"Delete\" or \"Orphan\" the\nexternal resource.\nThis field is planned to be deprecated in favor of the ManagementPolicies\nfield in a future release. Currently, both could be set independently and\nnon-default values would be honored if the feature flag is enabled.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "type": "string",
          "default": "Delete",
          "enum": [
            "Orphan",
            "Delete"
          ]
        },
        "forProvider": {
          "type": "object",
          "required": [
            "region"
          ],
          "properties": {
            "alarmConfiguration": {
              "description": "Configuration block of alarms associated with the deployment group (documented below).",
              "type": "object",
              "properties": {
                "alarms": {
                  "description": "A list of alarms configured for the deployment group.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "x-kubernetes-list-type": "set"
                },
                "enabled": {
                  "description": "Indicates whether the alarm configuration is enabled. This option is useful when you want to temporarily deactivate alarm monitoring for a deployment group without having to add the same alarms again later.",
                  "type": "boolean"
                },
                "ignorePollAlarmFailure": {
                  "description": "Indicates whether a deployment should continue if information about the current state of alarms cannot be retrieved from CloudWatch. The default value is false.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "appName": {
              "description": "The name of the application.",
              "type": "string"
            },
            "appNameRef": {
              "description": "Reference to a App in deploy to populate appName.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "appNameSelector": {
              "description": "Selector for a App in deploy to populate appName.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "autoRollbackConfiguration": {
              "description": "Configuration block of the automatic rollback configuration associated with the deployment group (documented below).",
              "type": "object",
              "properties": {
                "enabled": {
                  "description": "Indicates whether the alarm configuration is enabled. This option is useful when you want to temporarily deactivate alarm monitoring for a deployment group without having to add the same alarms again later.",
                  "type": "boolean"
                },
                "events": {
                  "description": "The event type or types that trigger a rollback. Supported types are DEPLOYMENT_FAILURE, DEPLOYMENT_STOP_ON_ALARM and DEPLOYMENT_STOP_ON_REQUEST.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "x-kubernetes-list-type": "set"
                }
              },
              "additionalProperties": false
            },
            "autoscalingGroups": {
              "description": "Autoscaling groups associated with the deployment group.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-kubernetes-list-type": "set"
            },
            "blueGreenDeploymentConfig": {
              "description": "Configuration block of the blue/green deployment options for a deployment group (documented below).",
              "type": "object",
              "properties": {
                "deploymentReadyOption": {
                  "description": "Information about the action to take when newly provisioned instances are ready to receive traffic in a blue/green deployment (documented below).",
                  "type": "object",
                  "properties": {
                    "actionOnTimeout": {
                      "description": "When to reroute traffic from an original environment to a replacement environment in a blue/green deployment.",
                      "type": "string"
                    },
                    "waitTimeInMinutes": {
                      "description": "The number of minutes to wait before the status of a blue/green deployment changed to Stopped if rerouting is not started manually. Applies only to the STOP_DEPLOYMENT option for action_on_timeout.",
                      "type": "number"
                    }
                  },
                  "additionalProperties": false
                },
                "greenFleetProvisioningOption": {
                  "description": "Information about how instances are provisioned for a replacement environment in a blue/green deployment (documented below).",
                  "type": "object",
                  "properties": {
                    "action": {
                      "description": "The method used to add instances to a replacement environment.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "terminateBlueInstancesOnDeploymentSuccess": {
                  "description": "Information about whether to terminate instances in the original fleet during a blue/green deployment (documented below).",
                  "type": "object",
                  "properties": {
                    "action": {
                      "description": "The method used to add instances to a replacement environment.",
                      "type": "string"
                    },
                    "terminationWaitTimeInMinutes": {
                      "description": "The number of minutes to wait after a successful blue/green deployment before terminating instances from the original environment.",
                      "type": "number"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "deploymentConfigName": {
              "description": "The name of the group's deployment config. The default is \"CodeDeployDefault.OneAtATime\".",
              "type": "string"
            },
            "deploymentStyle": {
              "description": "Configuration block of the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer (documented below).",
              "type": "object",
              "properties": {
                "deploymentOption": {
                  "description": "Indicates whether to route deployment traffic behind a load balancer. Valid Values are WITH_TRAFFIC_CONTROL or WITHOUT_TRAFFIC_CONTROL. Default is WITHOUT_TRAFFIC_CONTROL.",
                  "type": "string"
                },
                "deploymentType": {
                  "description": "Indicates whether to run an in-place deployment or a blue/green deployment. Valid Values are IN_PLACE or BLUE_GREEN. Default is IN_PLACE.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "ec2TagFilter": {
              "description": "Tag filters associated with the deployment group. See the AWS docs for details.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "key": {
                    "description": "The key of the tag filter.",
                    "type": "string"
                  },
                  "type": {
                    "description": "The type of the tag filter, either KEY_ONLY, VALUE_ONLY, or KEY_AND_VALUE.",
                    "type": "string"
                  },
                  "value": {
                    "description": "The value of the tag filter.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "ec2TagSet": {
              "description": "Configuration block(s) of Tag filters associated with the deployment group, which are also referred to as tag groups (documented below). See the AWS docs for details.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "ec2TagFilter": {
                    "description": "Tag filters associated with the deployment group. See the AWS docs for details.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "description": "The key of the tag filter.",
                          "type": "string"
                        },
                        "type": {
                          "description": "The type of the tag filter, either KEY_ONLY, VALUE_ONLY, or KEY_AND_VALUE.",
                          "type": "string"
                        },
                        "value": {
                          "description": "The value of the tag filter.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "ecsService": {
              "description": "Configuration block(s) of the ECS services for a deployment group (documented below).",
              "type": "object",
              "properties": {
                "clusterName": {
                  "description": "The name of the ECS cluster.",
                  "type": "string"
                },
                "clusterNameRef": {
                  "description": "Reference to a Cluster in ecs to populate clusterName.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name of the referenced object.",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for referencing.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "clusterNameSelector": {
                  "description": "Selector for a Cluster in ecs to populate clusterName.",
                  "type": "object",
                  "properties": {
                    "matchControllerRef": {
                      "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                      "type": "boolean"
                    },
                    "matchLabels": {
                      "description": "MatchLabels ensures an object with matching labels is selected.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "policy": {
                      "description": "Policies for selection.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "serviceName": {
                  "description": "The name of the ECS service.",
                  "type": "string"
                },
                "serviceNameRef": {
                  "description": "Reference to a Service in ecs to populate serviceName.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name of the referenced object.",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for referencing.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "serviceNameSelector": {
                  "description": "Selector for a Service in ecs to populate serviceName.",
                  "type": "object",
                  "properties": {
                    "matchControllerRef": {
                      "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                      "type": "boolean"
                    },
                    "matchLabels": {
                      "description": "MatchLabels ensures an object with matching labels is selected.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "policy": {
                      "description": "Policies for selection.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "loadBalancerInfo": {
              "description": "Single configuration block of the load balancer to use in a blue/green deployment (documented below).",
              "type": "object",
              "properties": {
                "elbInfo": {
                  "description": "The Classic Elastic Load Balancer to use in a deployment. Conflicts with target_group_info and target_group_pair_info.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "The name of the target group that instances in the original environment are deregistered from, and instances in the replacement environment registered with. For in-place deployments, the name of the target group that instances are deregistered from, so they are not serving traffic during a deployment, and then re-registered with after the deployment completes.",
                        "type": "string"
                      },
                      "nameRef": {
                        "description": "Reference to a ELB in elb to populate name.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name of the referenced object.",
                            "type": "string"
                          },
                          "policy": {
                            "description": "Policies for referencing.",
                            "type": "object",
                            "properties": {
                              "resolution": {
                                "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                                "type": "string",
                                "default": "Required",
                                "enum": [
                                  "Required",
                                  "Optional"
                                ]
                              },
                              "resolve": {
                                "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                                "type": "string",
                                "enum": [
                                  "Always",
                                  "IfNotPresent"
                                ]
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "additionalProperties": false
                      },
                      "nameSelector": {
                        "description": "Selector for a ELB in elb to populate name.",
                        "type": "object",
                        "properties": {
                          "matchControllerRef": {
                            "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                            "type": "boolean"
                          },
                          "matchLabels": {
                            "description": "MatchLabels ensures an object with matching labels is selected.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "policy": {
                            "description": "Policies for selection.",
                            "type": "object",
                            "properties": {
                              "resolution": {
                                "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                                "type": "string",
                                "default": "Required",
                                "enum": [
                                  "Required",
                                  "Optional"
                                ]
                              },
                              "resolve": {
                                "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                                "type": "string",
                                "enum": [
                                  "Always",
                                  "IfNotPresent"
                                ]
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "targetGroupInfo": {
                  "description": "The (Application/Network Load Balancer) target group to use in a deployment. Conflicts with elb_info and target_group_pair_info.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "The name of the target group that instances in the original environment are deregistered from, and instances in the replacement environment registered with. For in-place deployments, the name of the target group that instances are deregistered from, so they are not serving traffic during a deployment, and then re-registered with after the deployment completes.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "targetGroupPairInfo": {
                  "description": "The (Application/Network Load Balancer) target group pair to use in a deployment. Conflicts with elb_info and target_group_info.",
                  "type": "object",
                  "properties": {
                    "prodTrafficRoute": {
                      "description": "Configuration block for the production traffic route (documented below).",
                      "type": "object",
                      "properties": {
                        "listenerArns": {
                          "description": "List of Amazon Resource Names (ARNs) of the load balancer listeners.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "x-kubernetes-list-type": "set"
                        },
                        "listenerArnsRefs": {
                          "description": "References to LBListener in elbv2 to populate listenerArns.",
                          "type": "array",
                          "items": {
                            "description": "A Reference to a named object.",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "description": "Name of the referenced object.",
                                "type": "string"
                              },
                              "policy": {
                                "description": "Policies for referencing.",
                                "type": "object",
                                "properties": {
                                  "resolution": {
                                    "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                                    "type": "string",
                                    "default": "Required",
                                    "enum": [
                                      "Required",
                                      "Optional"
                                    ]
                                  },
                                  "resolve": {
                                    "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                                    "type": "string",
                                    "enum": [
                                      "Always",
                                      "IfNotPresent"
                                    ]
                                  }
                                },
                                "additionalProperties": false
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "listenerArnsSelector": {
                          "description": "Selector for a list of LBListener in elbv2 to populate listenerArns.",
                          "type": "object",
                          "properties": {
                            "matchControllerRef": {
                              "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                              "type": "boolean"
                            },
                            "matchLabels": {
                              "description": "MatchLabels ensures an object with matching labels is selected.",
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              }
                            },
                            "policy": {
                              "description": "Policies for selection.",
                              "type": "object",
                              "properties": {
                                "resolution": {
                                  "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                                  "type": "string",
                                  "default": "Required",
                                  "enum": [
                                    "Required",
                                    "Optional"
                                  ]
                                },
                                "resolve": {
                                  "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                                  "type": "string",
                                  "enum": [
                                    "Always",
                                    "IfNotPresent"
                                  ]
                                }
                              },
                              "additionalProperties": false
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    },
                    "targetGroup": {
                      "description": "Configuration blocks for a target group within a target group pair (documented below).",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "The name of the target group that instances in the original environment are deregistered from, and instances in the replacement environment registered with. For in-place deployments, the name of the target group that instances are deregistered from, so they are not serving traffic during a deployment, and then re-registered with after the deployment completes.",
                            "type": "string"
                          },
                          "nameRef": {
                            "description": "Reference to a LBTargetGroup in elbv2 to populate name.",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "description": "Name of the referenced object.",
                                "type": "string"
                              },
                              "policy": {
                                "description": "Policies for referencing.",
                                "type": "object",
                                "properties": {
                                  "resolution": {
                                    "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                                    "type": "string",
                                    "default": "Required",
                                    "enum": [
                                      "Required",
                                      "Optional"
                                    ]
                                  },
                                  "resolve": {
                                    "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                                    "type": "string",
                                    "enum": [
                                      "Always",
                                      "IfNotPresent"
                                    ]
                                  }
                                },
                                "additionalProperties": false
                              }
                            },
                            "additionalProperties": false
                          },
                          "nameSelector": {
                            "description": "Selector for a LBTargetGroup in elbv2 to populate name.",
                            "type": "object",
                            "properties": {
                              "matchControllerRef": {
                                "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                                "type": "boolean"
                              },
                              "matchLabels": {
                                "description": "MatchLabels ensures an object with matching labels is selected.",
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              },
                              "policy": {
                                "description": "Policies for selection.",
                                "type": "object",
                                "properties": {
                                  "resolution": {
                                    "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                                    "type": "string",
                                    "default": "Required",
                                    "enum": [
                                      "Required",
                                      "Optional"
                                    ]
                                  },
                                  "resolve": {
                                    "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                                    "type": "string",
                                    "enum": [
                                      "Always",
                                      "IfNotPresent"
                                    ]
                                  }
                                },
                                "additionalProperties": false
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "testTrafficRoute": {
                      "description": "Configuration block for the test traffic route (documented below).",
                      "type": "object",
                      "properties": {
                        "listenerArns": {
                          "description": "List of Amazon Resource Names (ARNs) of the load balancer listeners.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "x-kubernetes-list-type": "set"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "onPremisesInstanceTagFilter": {
              "description": "On premise tag filters associated with the group. See the AWS docs for details.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "key": {
                    "description": "The key of the tag filter.",
                    "type": "string"
                  },
                  "type": {
                    "description": "The type of the tag filter, either KEY_ONLY, VALUE_ONLY, or KEY_AND_VALUE.",
                    "type": "string"
                  },
                  "value": {
                    "description": "The value of the tag filter.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "outdatedInstancesStrategy": {
              "description": "Configuration block of Indicates what happens when new Amazon EC2 instances are launched mid-deployment and do not receive the deployed application revision. Valid values are UPDATE and IGNORE. Defaults to UPDATE.",
              "type": "string"
            },
            "region": {
              "description": "Region where this resource will be managed. Defaults to the Region set in the provider configuration.\nRegion is the region you'd like your resource to be created in.",
              "type": "string"
            },
            "serviceRoleArn": {
              "description": "The service role ARN that allows deployments.",
              "type": "string"
            },
            "serviceRoleArnRef": {
              "description": "Reference to a Role in iam to populate serviceRoleArn.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "serviceRoleArnSelector": {
              "description": "Selector for a Role in iam to populate serviceRoleArn.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "tags": {
              "description": "Key-value map of resource tags.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "terminationHookEnabled": {
              "description": "Indicates whether the deployment group was configured to have CodeDeploy install a termination hook into an Auto Scaling group.",
              "type": "boolean"
            },
            "triggerConfiguration": {
              "description": "Configuration block(s) of the triggers for the deployment group (documented below).",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "triggerEvents": {
                    "description": "The event type or types for which notifications are triggered. Some values that are supported: DeploymentStart, DeploymentSuccess, DeploymentFailure, DeploymentStop, DeploymentRollback, InstanceStart, InstanceSuccess, InstanceFailure.  See the CodeDeploy documentation for all possible values.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "x-kubernetes-list-type": "set"
                  },
                  "triggerName": {
                    "description": "The name of the notification trigger.",
                    "type": "string"
                  },
                  "triggerTargetArn": {
                    "description": "The ARN of the SNS topic through which notifications are sent.",
                    "type": "string"
                  },
                  "triggerTargetArnRef": {
                    "description": "Reference to a Topic in sns to populate triggerTargetArn.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  },
                  "triggerTargetArnSelector": {
                    "description": "Selector for a Topic in sns to populate triggerTargetArn.",
                    "type": "object",
                    "properties": {
                      "matchControllerRef": {
                        "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                        "type": "boolean"
                      },
                      "matchLabels": {
                        "description": "MatchLabels ensures an object with matching labels is selected.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "policy": {
                        "description": "Policies for selection.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored\nunless the Management Policies feature flag is disabled.\nInitProvider holds the same fields as ForProvider, with the exception\nof Identifier and other resource reference fields. The fields that are\nin InitProvider are merged into ForProvider when the resource is created.\nThe same fields are also added to the terraform ignore_changes hook, to\navoid updating them after creation. This is useful for fields that are\nrequired on creation, but we do not desire to update them after creation,\nfor example because of an external controller is managing them, like an\nautoscaler.",
          "type": "object",
          "properties": {
            "alarmConfiguration": {
              "description": "Configuration block of alarms associated with the deployment group (documented below).",
              "type": "object",
              "properties": {
                "alarms": {
                  "description": "A list of alarms configured for the deployment group.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "x-kubernetes-list-type": "set"
                },
                "enabled": {
                  "description": "Indicates whether the alarm configuration is enabled. This option is useful when you want to temporarily deactivate alarm monitoring for a deployment group without having to add the same alarms again later.",
                  "type": "boolean"
                },
                "ignorePollAlarmFailure": {
                  "description": "Indicates whether a deployment should continue if information about the current state of alarms cannot be retrieved from CloudWatch. The default value is false.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "autoRollbackConfiguration": {
              "description": "Configuration block of the automatic rollback configuration associated with the deployment group (documented below).",
              "type": "object",
              "properties": {
                "enabled": {
                  "description": "Indicates whether the alarm configuration is enabled. This option is useful when you want to temporarily deactivate alarm monitoring for a deployment group without having to add the same alarms again later.",
                  "type": "boolean"
                },
                "events": {
                  "description": "The event type or types that trigger a rollback. Supported types are DEPLOYMENT_FAILURE, DEPLOYMENT_STOP_ON_ALARM and DEPLOYMENT_STOP_ON_REQUEST.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "x-kubernetes-list-type": "set"
                }
              },
              "additionalProperties": false
            },
            "autoscalingGroups": {
              "description": "Autoscaling groups associated with the deployment group.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-kubernetes-list-type": "set"
            },
            "blueGreenDeploymentConfig": {
              "description": "Configuration block of the blue/green deployment options for a deployment group (documented below).",
              "type": "object",
              "properties": {
                "deploymentReadyOption": {
                  "description": "Information about the action to take when newly provisioned instances are ready to receive traffic in a blue/green deployment (documented below).",
                  "type": "object",
                  "properties": {
                    "actionOnTimeout": {
                      "description": "When to reroute traffic from an original environment to a replacement environment in a blue/green deployment.",
                      "type": "string"
                    },
                    "waitTimeInMinutes": {
                      "description": "The number of minutes to wait before the status of a blue/green deployment changed to Stopped if rerouting is not started manually. Applies only to the STOP_DEPLOYMENT option for action_on_timeout.",
                      "type": "number"
                    }
                  },
                  "additionalProperties": false
                },
                "greenFleetProvisioningOption": {
                  "description": "Information about how instances are provisioned for a replacement environment in a blue/green deployment (documented below).",
                  "type": "object",
                  "properties": {
                    "action": {
                      "description": "The method used to add instances to a replacement environment.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "terminateBlueInstancesOnDeploymentSuccess": {
                  "description": "Information about whether to terminate instances in the original fleet during a blue/green deployment (documented below).",
                  "type": "object",
                  "properties": {
                    "action": {
                      "description": "The method used to add instances to a replacement environment.",
                      "type": "string"
                    },
                    "terminationWaitTimeInMinutes": {
                      "description": "The number of minutes to wait after a successful blue/green deployment before terminating instances from the original environment.",
                      "type": "number"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "deploymentConfigName": {
              "description": "The name of the group's deployment config. The default is \"CodeDeployDefault.OneAtATime\".",
              "type": "string"
            },
            "deploymentStyle": {
              "description": "Configuration block of the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer (documented below).",
              "type": "object",
              "properties": {
                "deploymentOption": {
                  "description": "Indicates whether to route deployment traffic behind a load balancer. Valid Values are WITH_TRAFFIC_CONTROL or WITHOUT_TRAFFIC_CONTROL. Default is WITHOUT_TRAFFIC_CONTROL.",
                  "type": "string"
                },
                "deploymentType": {
                  "description": "Indicates whether to run an in-place deployment or a blue/green deployment. Valid Values are IN_PLACE or BLUE_GREEN. Default is IN_PLACE.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "ec2TagFilter": {
              "description": "Tag filters associated with the deployment group. See the AWS docs for details.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "key": {
                    "description": "The key of the tag filter.",
                    "type": "string"
                  },
                  "type": {
                    "description": "The type of the tag filter, either KEY_ONLY, VALUE_ONLY, or KEY_AND_VALUE.",
                    "type": "string"
                  },
                  "value": {
                    "description": "The value of the tag filter.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "ec2TagSet": {
              "description": "Configuration block(s) of Tag filters associated with the deployment group, which are also referred to as tag groups (documented below). See the AWS docs for details.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "ec2TagFilter": {
                    "description": "Tag filters associated with the deployment group. See the AWS docs for details.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "description": "The key of the tag filter.",
                          "type": "string"
                        },
                        "type": {
                          "description": "The type of the tag filter, either KEY_ONLY, VALUE_ONLY, or KEY_AND_VALUE.",
                          "type": "string"
                        },
                        "value": {
                          "description": "The value of the tag filter.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "ecsService": {
              "description": "Configuration block(s) of the ECS services for a deployment group (documented below).",
              "type": "object",
              "properties": {
                "clusterName": {
                  "description": "The name of the ECS cluster.",
                  "type": "string"
                },
                "clusterNameRef": {
                  "description": "Reference to a Cluster in ecs to populate clusterName.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name of the referenced object.",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for referencing.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "clusterNameSelector": {
                  "description": "Selector for a Cluster in ecs to populate clusterName.",
                  "type": "object",
                  "properties": {
                    "matchControllerRef": {
                      "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                      "type": "boolean"
                    },
                    "matchLabels": {
                      "description": "MatchLabels ensures an object with matching labels is selected.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "policy": {
                      "description": "Policies for selection.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "serviceName": {
                  "description": "The name of the ECS service.",
                  "type": "string"
                },
                "serviceNameRef": {
                  "description": "Reference to a Service in ecs to populate serviceName.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name of the referenced object.",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for referencing.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "serviceNameSelector": {
                  "description": "Selector for a Service in ecs to populate serviceName.",
                  "type": "object",
                  "properties": {
                    "matchControllerRef": {
                      "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                      "type": "boolean"
                    },
                    "matchLabels": {
                      "description": "MatchLabels ensures an object with matching labels is selected.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "policy": {
                      "description": "Policies for selection.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "loadBalancerInfo": {
              "description": "Single configuration block of the load balancer to use in a blue/green deployment (documented below).",
              "type": "object",
              "properties": {
                "elbInfo": {
                  "description": "The Classic Elastic Load Balancer to use in a deployment. Conflicts with target_group_info and target_group_pair_info.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "The name of the target group that instances in the original environment are deregistered from, and instances in the replacement environment registered with. For in-place deployments, the name of the target group that instances are deregistered from, so they are not serving traffic during a deployment, and then re-registered with after the deployment completes.",
                        "type": "string"
                      },
                      "nameRef": {
                        "description": "Reference to a ELB in elb to populate name.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name of the referenced object.",
                            "type": "string"
                          },
                          "policy": {
                            "description": "Policies for referencing.",
                            "type": "object",
                            "properties": {
                              "resolution": {
                                "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                                "type": "string",
                                "default": "Required",
                                "enum": [
                                  "Required",
                                  "Optional"
                                ]
                              },
                              "resolve": {
                                "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                                "type": "string",
                                "enum": [
                                  "Always",
                                  "IfNotPresent"
                                ]
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "additionalProperties": false
                      },
                      "nameSelector": {
                        "description": "Selector for a ELB in elb to populate name.",
                        "type": "object",
                        "properties": {
                          "matchControllerRef": {
                            "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                            "type": "boolean"
                          },
                          "matchLabels": {
                            "description": "MatchLabels ensures an object with matching labels is selected.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "policy": {
                            "description": "Policies for selection.",
                            "type": "object",
                            "properties": {
                              "resolution": {
                                "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                                "type": "string",
                                "default": "Required",
                                "enum": [
                                  "Required",
                                  "Optional"
                                ]
                              },
                              "resolve": {
                                "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                                "type": "string",
                                "enum": [
                                  "Always",
                                  "IfNotPresent"
                                ]
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "targetGroupInfo": {
                  "description": "The (Application/Network Load Balancer) target group to use in a deployment. Conflicts with elb_info and target_group_pair_info.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "The name of the target group that instances in the original environment are deregistered from, and instances in the replacement environment registered with. For in-place deployments, the name of the target group that instances are deregistered from, so they are not serving traffic during a deployment, and then re-registered with after the deployment completes.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "targetGroupPairInfo": {
                  "description": "The (Application/Network Load Balancer) target group pair to use in a deployment. Conflicts with elb_info and target_group_info.",
                  "type": "object",
                  "properties": {
                    "prodTrafficRoute": {
                      "description": "Configuration block for the production traffic route (documented below).",
                      "type": "object",
                      "properties": {
                        "listenerArns": {
                          "description": "List of Amazon Resource Names (ARNs) of the load balancer listeners.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "x-kubernetes-list-type": "set"
                        },
                        "listenerArnsRefs": {
                          "description": "References to LBListener in elbv2 to populate listenerArns.",
                          "type": "array",
                          "items": {
                            "description": "A Reference to a named object.",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "description": "Name of the referenced object.",
                                "type": "string"
                              },
                              "policy": {
                                "description": "Policies for referencing.",
                                "type": "object",
                                "properties": {
                                  "resolution": {
                                    "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                                    "type": "string",
                                    "default": "Required",
                                    "enum": [
                                      "Required",
                                      "Optional"
                                    ]
                                  },
                                  "resolve": {
                                    "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                                    "type": "string",
                                    "enum": [
                                      "Always",
                                      "IfNotPresent"
                                    ]
                                  }
                                },
                                "additionalProperties": false
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "listenerArnsSelector": {
                          "description": "Selector for a list of LBListener in elbv2 to populate listenerArns.",
                          "type": "object",
                          "properties": {
                            "matchControllerRef": {
                              "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                              "type": "boolean"
                            },
                            "matchLabels": {
                              "description": "MatchLabels ensures an object with matching labels is selected.",
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              }
                            },
                            "policy": {
                              "description": "Policies for selection.",
                              "type": "object",
                              "properties": {
                                "resolution": {
                                  "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                                  "type": "string",
                                  "default": "Required",
                                  "enum": [
                                    "Required",
                                    "Optional"
                                  ]
                                },
                                "resolve": {
                                  "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                                  "type": "string",
                                  "enum": [
                                    "Always",
                                    "IfNotPresent"
                                  ]
                                }
                              },
                              "additionalProperties": false
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    },
                    "targetGroup": {
                      "description": "Configuration blocks for a target group within a target group pair (documented below).",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "The name of the target group that instances in the original environment are deregistered from, and instances in the replacement environment registered with. For in-place deployments, the name of the target group that instances are deregistered from, so they are not serving traffic during a deployment, and then re-registered with after the deployment completes.",
                            "type": "string"
                          },
                          "nameRef": {
                            "description": "Reference to a LBTargetGroup in elbv2 to populate name.",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "description": "Name of the referenced object.",
                                "type": "string"
                              },
                              "policy": {
                                "description": "Policies for referencing.",
                                "type": "object",
                                "properties": {
                                  "resolution": {
                                    "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                                    "type": "string",
                                    "default": "Required",
                                    "enum": [
                                      "Required",
                                      "Optional"
                                    ]
                                  },
                                  "resolve": {
                                    "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                                    "type": "string",
                                    "enum": [
                                      "Always",
                                      "IfNotPresent"
                                    ]
                                  }
                                },
                                "additionalProperties": false
                              }
                            },
                            "additionalProperties": false
                          },
                          "nameSelector": {
                            "description": "Selector for a LBTargetGroup in elbv2 to populate name.",
                            "type": "object",
                            "properties": {
                              "matchControllerRef": {
                                "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                                "type": "boolean"
                              },
                              "matchLabels": {
                                "description": "MatchLabels ensures an object with matching labels is selected.",
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              },
                              "policy": {
                                "description": "Policies for selection.",
                                "type": "object",
                                "properties": {
                                  "resolution": {
                                    "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                                    "type": "string",
                                    "default": "Required",
                                    "enum": [
                                      "Required",
                                      "Optional"
                                    ]
                                  },
                                  "resolve": {
                                    "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                                    "type": "string",
                                    "enum": [
                                      "Always",
                                      "IfNotPresent"
                                    ]
                                  }
                                },
                                "additionalProperties": false
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "testTrafficRoute": {
                      "description": "Configuration block for the test traffic route (documented below).",
                      "type": "object",
                      "properties": {
                        "listenerArns": {
                          "description": "List of Amazon Resource Names (ARNs) of the load balancer listeners.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "x-kubernetes-list-type": "set"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "onPremisesInstanceTagFilter": {
              "description": "On premise tag filters associated with the group. See the AWS docs for details.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "key": {
                    "description": "The key of the tag filter.",
                    "type": "string"
                  },
                  "type": {
                    "description": "The type of the tag filter, either KEY_ONLY, VALUE_ONLY, or KEY_AND_VALUE.",
                    "type": "string"
                  },
                  "value": {
                    "description": "The value of the tag filter.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "outdatedInstancesStrategy": {
              "description": "Configuration block of Indicates what happens when new Amazon EC2 instances are launched mid-deployment and do not receive the deployed application revision. Valid values are UPDATE and IGNORE. Defaults to UPDATE.",
              "type": "string"
            },
            "serviceRoleArn": {
              "description": "The service role ARN that allows deployments.",
              "type": "string"
            },
            "serviceRoleArnRef": {
              "description": "Reference to a Role in iam to populate serviceRoleArn.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "serviceRoleArnSelector": {
              "description": "Selector for a Role in iam to populate serviceRoleArn.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "tags": {
              "description": "Key-value map of resource tags.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "terminationHookEnabled": {
              "description": "Indicates whether the deployment group was configured to have CodeDeploy install a termination hook into an Auto Scaling group.",
              "type": "boolean"
            },
            "triggerConfiguration": {
              "description": "Configuration block(s) of the triggers for the deployment group (documented below).",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "triggerEvents": {
                    "description": "The event type or types for which notifications are triggered. Some values that are supported: DeploymentStart, DeploymentSuccess, DeploymentFailure, DeploymentStop, DeploymentRollback, InstanceStart, InstanceSuccess, InstanceFailure.  See the CodeDeploy documentation for all possible values.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "x-kubernetes-list-type": "set"
                  },
                  "triggerName": {
                    "description": "The name of the notification trigger.",
                    "type": "string"
                  },
                  "triggerTargetArn": {
                    "description": "The ARN of the SNS topic through which notifications are sent.",
                    "type": "string"
                  },
                  "triggerTargetArnRef": {
                    "description": "Reference to a Topic in sns to populate triggerTargetArn.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  },
                  "triggerTargetArnSelector": {
                    "description": "Selector for a Topic in sns to populate triggerTargetArn.",
                    "type": "object",
                    "properties": {
                      "matchControllerRef": {
                        "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                        "type": "boolean"
                      },
                      "matchLabels": {
                        "description": "MatchLabels ensures an object with matching labels is selected.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "policy": {
                        "description": "Policies for selection.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "additionalProperties": false
        },
        "managementPolicies": {
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out\nthrough a Crossplane feature flag.\nManagementPolicies specify the array of actions Crossplane is allowed to\ntake on the managed and external resources.\nThis field is planned to replace the DeletionPolicy field in a future\nrelease. Currently, both could be set independently and non-default\nvalues would be honored if the feature flag is enabled. If both are\ncustom, the DeletionPolicy field will be ignored.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223\nand this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers\ncan take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to\ncreate, observe, update, and delete this managed resource should be\nconfigured.",
          "type": "object",
          "default": {
            "name": "default"
          },
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "type": "object",
              "properties": {
                "resolution": {
                  "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                  "type": "string",
                  "default": "Required",
                  "enum": [
                    "Required",
                    "Optional"
                  ]
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                  "type": "string",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a\nSecret to which any connection details for this managed resource should\nbe written. Connection details frequently include the endpoint, username,\nand password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name",
            "namespace"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "DeploymentGroupStatus defines the observed state of DeploymentGroup.",
      "type": "object",
      "properties": {
        "atProvider": {
          "type": "object",
          "properties": {
            "alarmConfiguration": {
              "description": "Configuration block of alarms associated with the deployment group (documented below).",
              "type": "object",
              "properties": {
                "alarms": {
                  "description": "A list of alarms configured for the deployment group.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "x-kubernetes-list-type": "set"
                },
                "enabled": {
                  "description": "Indicates whether the alarm configuration is enabled. This option is useful when you want to temporarily deactivate alarm monitoring for a deployment group without having to add the same alarms again later.",
                  "type": "boolean"
                },
                "ignorePollAlarmFailure": {
                  "description": "Indicates whether a deployment should continue if information about the current state of alarms cannot be retrieved from CloudWatch. The default value is false.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "appName": {
              "description": "The name of the application.",
              "type": "string"
            },
            "arn": {
              "description": "The ARN of the CodeDeploy deployment group.",
              "type": "string"
            },
            "autoRollbackConfiguration": {
              "description": "Configuration block of the automatic rollback configuration associated with the deployment group (documented below).",
              "type": "object",
              "properties": {
                "enabled": {
                  "description": "Indicates whether the alarm configuration is enabled. This option is useful when you want to temporarily deactivate alarm monitoring for a deployment group without having to add the same alarms again later.",
                  "type": "boolean"
                },
                "events": {
                  "description": "The event type or types that trigger a rollback. Supported types are DEPLOYMENT_FAILURE, DEPLOYMENT_STOP_ON_ALARM and DEPLOYMENT_STOP_ON_REQUEST.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "x-kubernetes-list-type": "set"
                }
              },
              "additionalProperties": false
            },
            "autoscalingGroups": {
              "description": "Autoscaling groups associated with the deployment group.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-kubernetes-list-type": "set"
            },
            "blueGreenDeploymentConfig": {
              "description": "Configuration block of the blue/green deployment options for a deployment group (documented below).",
              "type": "object",
              "properties": {
                "deploymentReadyOption": {
                  "description": "Information about the action to take when newly provisioned instances are ready to receive traffic in a blue/green deployment (documented below).",
                  "type": "object",
                  "properties": {
                    "actionOnTimeout": {
                      "description": "When to reroute traffic from an original environment to a replacement environment in a blue/green deployment.",
                      "type": "string"
                    },
                    "waitTimeInMinutes": {
                      "description": "The number of minutes to wait before the status of a blue/green deployment changed to Stopped if rerouting is not started manually. Applies only to the STOP_DEPLOYMENT option for action_on_timeout.",
                      "type": "number"
                    }
                  },
                  "additionalProperties": false
                },
                "greenFleetProvisioningOption": {
                  "description": "Information about how instances are provisioned for a replacement environment in a blue/green deployment (documented below).",
                  "type": "object",
                  "properties": {
                    "action": {
                      "description": "The method used to add instances to a replacement environment.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "terminateBlueInstancesOnDeploymentSuccess": {
                  "description": "Information about whether to terminate instances in the original fleet during a blue/green deployment (documented below).",
                  "type": "object",
                  "properties": {
                    "action": {
                      "description": "The method used to add instances to a replacement environment.",
                      "type": "string"
                    },
                    "terminationWaitTimeInMinutes": {
                      "description": "The number of minutes to wait after a successful blue/green deployment before terminating instances from the original environment.",
                      "type": "number"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "computePlatform": {
              "description": "The destination platform type for the deployment.",
              "type": "string"
            },
            "deploymentConfigName": {
              "description": "The name of the group's deployment config. The default is \"CodeDeployDefault.OneAtATime\".",
              "type": "string"
            },
            "deploymentGroupId": {
              "description": "The ID of the CodeDeploy deployment group.",
              "type": "string"
            },
            "deploymentStyle": {
              "description": "Configuration block of the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer (documented below).",
              "type": "object",
              "properties": {
                "deploymentOption": {
                  "description": "Indicates whether to route deployment traffic behind a load balancer. Valid Values are WITH_TRAFFIC_CONTROL or WITHOUT_TRAFFIC_CONTROL. Default is WITHOUT_TRAFFIC_CONTROL.",
                  "type": "string"
                },
                "deploymentType": {
                  "description": "Indicates whether to run an in-place deployment or a blue/green deployment. Valid Values are IN_PLACE or BLUE_GREEN. Default is IN_PLACE.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "ec2TagFilter": {
              "description": "Tag filters associated with the deployment group. See the AWS docs for details.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "key": {
                    "description": "The key of the tag filter.",
                    "type": "string"
                  },
                  "type": {
                    "description": "The type of the tag filter, either KEY_ONLY, VALUE_ONLY, or KEY_AND_VALUE.",
                    "type": "string"
                  },
                  "value": {
                    "description": "The value of the tag filter.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "ec2TagSet": {
              "description": "Configuration block(s) of Tag filters associated with the deployment group, which are also referred to as tag groups (documented below). See the AWS docs for details.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "ec2TagFilter": {
                    "description": "Tag filters associated with the deployment group. See the AWS docs for details.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "description": "The key of the tag filter.",
                          "type": "string"
                        },
                        "type": {
                          "description": "The type of the tag filter, either KEY_ONLY, VALUE_ONLY, or KEY_AND_VALUE.",
                          "type": "string"
                        },
                        "value": {
                          "description": "The value of the tag filter.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "ecsService": {
              "description": "Configuration block(s) of the ECS services for a deployment group (documented below).",
              "type": "object",
              "properties": {
                "clusterName": {
                  "description": "The name of the ECS cluster.",
                  "type": "string"
                },
                "serviceName": {
                  "description": "The name of the ECS service.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "id": {
              "description": "Application name and deployment group name.",
              "type": "string"
            },
            "loadBalancerInfo": {
              "description": "Single configuration block of the load balancer to use in a blue/green deployment (documented below).",
              "type": "object",
              "properties": {
                "elbInfo": {
                  "description": "The Classic Elastic Load Balancer to use in a deployment. Conflicts with target_group_info and target_group_pair_info.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "The name of the target group that instances in the original environment are deregistered from, and instances in the replacement environment registered with. For in-place deployments, the name of the target group that instances are deregistered from, so they are not serving traffic during a deployment, and then re-registered with after the deployment completes.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "targetGroupInfo": {
                  "description": "The (Application/Network Load Balancer) target group to use in a deployment. Conflicts with elb_info and target_group_pair_info.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "The name of the target group that instances in the original environment are deregistered from, and instances in the replacement environment registered with. For in-place deployments, the name of the target group that instances are deregistered from, so they are not serving traffic during a deployment, and then re-registered with after the deployment completes.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "targetGroupPairInfo": {
                  "description": "The (Application/Network Load Balancer) target group pair to use in a deployment. Conflicts with elb_info and target_group_info.",
                  "type": "object",
                  "properties": {
                    "prodTrafficRoute": {
                      "description": "Configuration block for the production traffic route (documented below).",
                      "type": "object",
                      "properties": {
                        "listenerArns": {
                          "description": "List of Amazon Resource Names (ARNs) of the load balancer listeners.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "x-kubernetes-list-type": "set"
                        }
                      },
                      "additionalProperties": false
                    },
                    "targetGroup": {
                      "description": "Configuration blocks for a target group within a target group pair (documented below).",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "The name of the target group that instances in the original environment are deregistered from, and instances in the replacement environment registered with. For in-place deployments, the name of the target group that instances are deregistered from, so they are not serving traffic during a deployment, and then re-registered with after the deployment completes.",
                            "type": "string"
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "testTrafficRoute": {
                      "description": "Configuration block for the test traffic route (documented below).",
                      "type": "object",
                      "properties": {
                        "listenerArns": {
                          "description": "List of Amazon Resource Names (ARNs) of the load balancer listeners.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "x-kubernetes-list-type": "set"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "onPremisesInstanceTagFilter": {
              "description": "On premise tag filters associated with the group. See the AWS docs for details.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "key": {
                    "description": "The key of the tag filter.",
                    "type": "string"
                  },
                  "type": {
                    "description": "The type of the tag filter, either KEY_ONLY, VALUE_ONLY, or KEY_AND_VALUE.",
                    "type": "string"
                  },
                  "value": {
                    "description": "The value of the tag filter.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "outdatedInstancesStrategy": {
              "description": "Configuration block of Indicates what happens when new Amazon EC2 instances are launched mid-deployment and do not receive the deployed application revision. Valid values are UPDATE and IGNORE. Defaults to UPDATE.",
              "type": "string"
            },
            "region": {
              "description": "Region where this resource will be managed. Defaults to the Region set in the provider configuration.\nRegion is the region you'd like your resource to be created in.",
              "type": "string"
            },
            "serviceRoleArn": {
              "description": "The service role ARN that allows deployments.",
              "type": "string"
            },
            "tags": {
              "description": "Key-value map of resource tags.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "tagsAll": {
              "description": "A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "terminationHookEnabled": {
              "description": "Indicates whether the deployment group was configured to have CodeDeploy install a termination hook into an Auto Scaling group.",
              "type": "boolean"
            },
            "triggerConfiguration": {
              "description": "Configuration block(s) of the triggers for the deployment group (documented below).",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "triggerEvents": {
                    "description": "The event type or types for which notifications are triggered. Some values that are supported: DeploymentStart, DeploymentSuccess, DeploymentFailure, DeploymentStop, DeploymentRollback, InstanceStart, InstanceSuccess, InstanceFailure.  See the CodeDeploy documentation for all possible values.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "x-kubernetes-list-type": "set"
                  },
                  "triggerName": {
                    "description": "The name of the notification trigger.",
                    "type": "string"
                  },
                  "triggerTargetArn": {
                    "description": "The ARN of the SNS topic through which notifications are sent.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "type": "array",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one\nstatus to another.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from\none status to another, if any.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to\na resource at any point in time.",
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest metadata.generation\nwhich resulted in either a ready state, or stalled due to error\nit can not recover from without human intervention.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    }
  }
}
