{
  "description": "Test is the Schema for the Tests API. Provides a Datadog synthetics test resource. This can be used to create and manage Datadog synthetics test.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "TestSpec defines the desired state of Test",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "deletionPolicy": {
          "description": "DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either \"Delete\" or \"Orphan\" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "type": "string",
          "default": "Delete",
          "enum": [
            "Orphan",
            "Delete"
          ]
        },
        "forProvider": {
          "type": "object",
          "properties": {
            "apiStep": {
              "description": "(Block List) Steps for multistep api tests (see below for nested schema) Steps for multistep api tests",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "allowFailure": {
                    "description": "(Boolean) Determines whether or not to continue with test if this step fails. Determines whether or not to continue with test if this step fails.",
                    "type": "boolean"
                  },
                  "assertion": {
                    "description": "(Block List) Assertions used for the test. Multiple assertion blocks are allowed with the structure below. (see below for nested schema) Assertions used for the test. Multiple `assertion` blocks are allowed with the structure below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "operator": {
                          "description": "(String) Assertion operator. Note Only some combinations of type and operator are valid (please refer to Datadog documentation). Assertion operator. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)).",
                          "type": "string"
                        },
                        "property": {
                          "description": "(String) If assertion type is header, this is the header name. If assertion type is `header`, this is the header name.",
                          "type": "string"
                        },
                        "target": {
                          "description": "(String) Expected value. Depends on the assertion type, refer to Datadog documentation for details. Expected value. Depends on the assertion type, refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test) for details.",
                          "type": "string"
                        },
                        "targetjsonpath": {
                          "description": "(Block List, Max: 1) Expected structure if operator is validatesJSONPath. Exactly one nested block is allowed with the structure below. (see below for nested schema) Expected structure if `operator` is `validatesJSONPath`. Exactly one nested block is allowed with the structure below.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "jsonpath": {
                                "description": "(String) The JSON path to assert. The JSON path to assert.",
                                "type": "string"
                              },
                              "operator": {
                                "description": "(String) Assertion operator. Note Only some combinations of type and operator are valid (please refer to Datadog documentation). The specific operator to use on the path.",
                                "type": "string"
                              },
                              "targetvalue": {
                                "description": "(String) Expected matching value. Expected matching value.",
                                "type": "string"
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "targetxpath": {
                          "description": "(Block List, Max: 1) Expected structure if operator is validatesXPath. Exactly one nested block is allowed with the structure below. (see below for nested schema) Expected structure if `operator` is `validatesXPath`. Exactly one nested block is allowed with the structure below.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "operator": {
                                "description": "(String) Assertion operator. Note Only some combinations of type and operator are valid (please refer to Datadog documentation). The specific operator to use on the path.",
                                "type": "string"
                              },
                              "targetvalue": {
                                "description": "(String) Expected matching value. Expected matching value.",
                                "type": "string"
                              },
                              "xpath": {
                                "description": "(String) The xpath to assert. The xpath to assert.",
                                "type": "string"
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "timingsScope": {
                          "description": "(String) Timings scope for response time assertions. Valid values are all, withoutDNS. Timings scope for response time assertions. Valid values are `all`, `withoutDNS`.",
                          "type": "string"
                        },
                        "type": {
                          "description": "(String) Synthetics test type. Valid values are api, browser. Type of assertion. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)). Valid values are `body`, `header`, `statusCode`, `certificate`, `responseTime`, `property`, `recordEvery`, `recordSome`, `tlsVersion`, `minTlsVersion`, `latency`, `packetLossPercentage`, `packetsReceived`, `networkHop`, `receivedMessage`, `grpcHealthcheckStatus`, `grpcMetadata`, `grpcProto`, `connection`.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "extractedValue": {
                    "description": "(Block List) Values to parse and save as variables from the response. (see below for nested schema) Values to parse and save as variables from the response.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "field": {
                          "description": "(String) When type is http_header, name of the header to use to extract the value. When type is `http_header`, name of the header to use to extract the value.",
                          "type": "string"
                        },
                        "name": {
                          "description": "(String) Name of Datadog synthetics test.",
                          "type": "string"
                        },
                        "parser": {
                          "description": "(Block List, Min: 1, Max: 1) (see below for nested schema)",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "type": {
                                "description": "(String) Synthetics test type. Valid values are api, browser. Type of parser for a Synthetics global variable from a synthetics test. Valid values are `raw`, `json_path`, `regex`, `x_path`.",
                                "type": "string"
                              },
                              "value": {
                                "description": "(String) Regex or JSON path used for the parser. Not used with type raw. Regex or JSON path used for the parser. Not used with type `raw`.",
                                "type": "string"
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "secure": {
                          "description": "(Boolean) Determines whether or not the extracted value will be obfuscated. Determines whether or not the extracted value will be obfuscated.",
                          "type": "boolean"
                        },
                        "type": {
                          "description": "(String) Synthetics test type. Valid values are api, browser. Property of the Synthetics Test Response to use for the variable. Valid values are `http_body`, `http_header`, `local_variable`.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "isCritical": {
                    "description": "(Boolean) Determines whether or not to consider the entire test as failed if this step fails. Can be used only if allow_failure is true. Determines whether or not to consider the entire test as failed if this step fails. Can be used only if `allow_failure` is `true`.",
                    "type": "boolean"
                  },
                  "name": {
                    "description": "(String) Name of Datadog synthetics test. The name of the step.",
                    "type": "string"
                  },
                  "requestBasicauth": {
                    "description": "(Block List, Max: 1) The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below. (see below for nested schema) The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "accessKeySecretRef": {
                          "description": "(String, Sensitive) Access key for SIGV4 authentication. Access key for `SIGV4` authentication.",
                          "type": "object",
                          "required": [
                            "key",
                            "name",
                            "namespace"
                          ],
                          "properties": {
                            "key": {
                              "description": "The key to select.",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the secret.",
                              "type": "string"
                            },
                            "namespace": {
                              "description": "Namespace of the secret.",
                              "type": "string"
                            }
                          },
                          "additionalProperties": false
                        },
                        "accessTokenUrl": {
                          "description": "client or oauth-rop authentication. Access token url for `oauth-client` or `oauth-rop` authentication.",
                          "type": "string"
                        },
                        "audience": {
                          "description": "client or oauth-rop authentication. Defaults to \"\". Audience for `oauth-client` or `oauth-rop` authentication. Defaults to `\"\"`.",
                          "type": "string"
                        },
                        "clientId": {
                          "description": "client or oauth-rop authentication. Client ID for `oauth-client` or `oauth-rop` authentication.",
                          "type": "string"
                        },
                        "clientSecretSecretRef": {
                          "description": "client or oauth-rop authentication. Client secret for `oauth-client` or `oauth-rop` authentication.",
                          "type": "object",
                          "required": [
                            "key",
                            "name",
                            "namespace"
                          ],
                          "properties": {
                            "key": {
                              "description": "The key to select.",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the secret.",
                              "type": "string"
                            },
                            "namespace": {
                              "description": "Namespace of the secret.",
                              "type": "string"
                            }
                          },
                          "additionalProperties": false
                        },
                        "domain": {
                          "description": "(String) Domain for ntlm authentication. Domain for `ntlm` authentication.",
                          "type": "string"
                        },
                        "passwordSecretRef": {
                          "description": "(String, Sensitive) Password for authentication. Password for authentication.",
                          "type": "object",
                          "required": [
                            "key",
                            "name",
                            "namespace"
                          ],
                          "properties": {
                            "key": {
                              "description": "The key to select.",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the secret.",
                              "type": "string"
                            },
                            "namespace": {
                              "description": "Namespace of the secret.",
                              "type": "string"
                            }
                          },
                          "additionalProperties": false
                        },
                        "region": {
                          "description": "(String) Region for SIGV4 authentication. Region for `SIGV4` authentication.",
                          "type": "string"
                        },
                        "resource": {
                          "description": "client or oauth-rop authentication. Defaults to \"\". Resource for `oauth-client` or `oauth-rop` authentication. Defaults to `\"\"`.",
                          "type": "string"
                        },
                        "scope": {
                          "description": "client or oauth-rop authentication. Defaults to \"\". Scope for `oauth-client` or `oauth-rop` authentication. Defaults to `\"\"`.",
                          "type": "string"
                        },
                        "secretKeySecretRef": {
                          "description": "(String, Sensitive) Secret key for SIGV4 authentication. Secret key for `SIGV4` authentication.",
                          "type": "object",
                          "required": [
                            "key",
                            "name",
                            "namespace"
                          ],
                          "properties": {
                            "key": {
                              "description": "The key to select.",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the secret.",
                              "type": "string"
                            },
                            "namespace": {
                              "description": "Namespace of the secret.",
                              "type": "string"
                            }
                          },
                          "additionalProperties": false
                        },
                        "serviceName": {
                          "description": "(String) Service name for SIGV4 authentication. Service name for `SIGV4` authentication.",
                          "type": "string"
                        },
                        "sessionToken": {
                          "description": "(String) Session token for SIGV4 authentication. Session token for `SIGV4` authentication.",
                          "type": "string"
                        },
                        "tokenApiAuthentication": {
                          "description": "client or oauth-rop authentication. Valid values are header, body. Token API Authentication for `oauth-client` or `oauth-rop` authentication. Valid values are `header`, `body`.",
                          "type": "string"
                        },
                        "type": {
                          "description": "(String) Synthetics test type. Valid values are api, browser. Type of basic authentication to use when performing the test. Defaults to `\"web\"`.",
                          "type": "string"
                        },
                        "username": {
                          "description": "(String) Username for authentication. Username for authentication.",
                          "type": "string"
                        },
                        "workstation": {
                          "description": "(String) Workstation for ntlm authentication. Workstation for `ntlm` authentication.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "requestClientCertificate": {
                    "description": "(Block List, Max: 1) Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below. (see below for nested schema) Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "cert": {
                          "description": "(Block List, Min: 1, Max: 1) (see below for nested schema)",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "contentSecretRef"
                            ],
                            "properties": {
                              "contentSecretRef": {
                                "description": "(String, Sensitive) Content of the certificate. Content of the certificate.",
                                "type": "object",
                                "required": [
                                  "key",
                                  "name",
                                  "namespace"
                                ],
                                "properties": {
                                  "key": {
                                    "description": "The key to select.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the secret.",
                                    "type": "string"
                                  },
                                  "namespace": {
                                    "description": "Namespace of the secret.",
                                    "type": "string"
                                  }
                                },
                                "additionalProperties": false
                              },
                              "filename": {
                                "description": "(String) File name for the certificate. File name for the certificate.",
                                "type": "string"
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "key": {
                          "description": "(Block List, Min: 1, Max: 1) (see below for nested schema)",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "contentSecretRef"
                            ],
                            "properties": {
                              "contentSecretRef": {
                                "description": "(String, Sensitive) Content of the certificate. Content of the certificate.",
                                "type": "object",
                                "required": [
                                  "key",
                                  "name",
                                  "namespace"
                                ],
                                "properties": {
                                  "key": {
                                    "description": "The key to select.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the secret.",
                                    "type": "string"
                                  },
                                  "namespace": {
                                    "description": "Namespace of the secret.",
                                    "type": "string"
                                  }
                                },
                                "additionalProperties": false
                              },
                              "filename": {
                                "description": "(String) File name for the certificate. File name for the certificate.",
                                "type": "string"
                              }
                            },
                            "additionalProperties": false
                          }
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "requestDefinition": {
                    "description": "(Block List, Max: 1) Required if type = \"api\". The synthetics test request. (see below for nested schema) The request for the api step.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "allowInsecure": {
                          "description": "(Boolean) Allows loading insecure content for an HTTP request in an API test or in a multistep API test step. Allows loading insecure content for an HTTP request in an API test or in a multistep API test step.",
                          "type": "boolean"
                        },
                        "body": {
                          "description": "(String) The request body. The request body.",
                          "type": "string"
                        },
                        "bodyType": {
                          "description": "www-form-urlencoded, graphql. Type of the request body. Valid values are `text/plain`, `application/json`, `text/xml`, `text/html`, `application/x-www-form-urlencoded`, `graphql`.",
                          "type": "string"
                        },
                        "callType": {
                          "description": "(String) The type of gRPC call to perform. Valid values are healthcheck, unary. The type of gRPC call to perform. Valid values are `healthcheck`, `unary`.",
                          "type": "string"
                        },
                        "certificateDomains": {
                          "description": "(List of String) By default, the client certificate is applied on the domain of the starting URL for browser tests. If you want your client certificate to be applied on other domains instead, add them in certificate_domains. By default, the client certificate is applied on the domain of the starting URL for browser tests. If you want your client certificate to be applied on other domains instead, add them in `certificate_domains`.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "dnsServer": {
                          "description": "(String) DNS server to use for DNS tests (subtype = \"dns\"). DNS server to use for DNS tests (`subtype = \"dns\"`).",
                          "type": "string"
                        },
                        "dnsServerPort": {
                          "description": "(Number) DNS server port to use for DNS tests. DNS server port to use for DNS tests.",
                          "type": "number"
                        },
                        "followRedirects": {
                          "description": "(Boolean) Determines whether or not the API HTTP test should follow redirects. Determines whether or not the API HTTP test should follow redirects.",
                          "type": "boolean"
                        },
                        "host": {
                          "description": "(String) Host name to perform the test with. Host name to perform the test with.",
                          "type": "string"
                        },
                        "message": {
                          "description": "(String) A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by using the same @username notation as events. Defaults to \"\". For UDP and websocket tests, message to send with the request.",
                          "type": "string"
                        },
                        "method": {
                          "description": "(String) Either the HTTP method/verb to use or a gRPC method available on the service set in the service field. Required if subtype is HTTP or if subtype is grpc and callType is unary. Either the HTTP method/verb to use or a gRPC method available on the service set in the `service` field. Required if `subtype` is `HTTP` or if `subtype` is `grpc` and `callType` is `unary`.",
                          "type": "string"
                        },
                        "noSavingResponseBody": {
                          "description": "(Boolean) Determines whether or not to save the response body. Determines whether or not to save the response body.",
                          "type": "boolean"
                        },
                        "numberOfPackets": {
                          "description": "(Number) Number of pings to use per test for ICMP tests (subtype = \"icmp\") between 0 and 10. Number of pings to use per test for ICMP tests (`subtype = \"icmp\"`) between 0 and 10.",
                          "type": "number"
                        },
                        "persistCookies": {
                          "description": "(Boolean) Persist cookies across redirects. Persist cookies across redirects.",
                          "type": "boolean"
                        },
                        "plainProtoFile": {
                          "description": "(String) The content of a proto file as a string. The content of a proto file as a string.",
                          "type": "string"
                        },
                        "port": {
                          "description": "(Number) Port to use when performing the test. Port to use when performing the test.",
                          "type": "number"
                        },
                        "protoJsonDescriptor": {
                          "description": "(String, Deprecated) A protobuf JSON descriptor. Deprecated. Use plain_proto_file instead. A protobuf JSON descriptor. **Deprecated.** Use `plain_proto_file` instead.",
                          "type": "string"
                        },
                        "servername": {
                          "description": "(String) For SSL tests, it specifies on which server you want to initiate the TLS handshake, allowing the server to present one of multiple possible certificates on the same IP address and TCP port number. For SSL tests, it specifies on which server you want to initiate the TLS handshake, allowing the server to present one of multiple possible certificates on the same IP address and TCP port number.",
                          "type": "string"
                        },
                        "service": {
                          "description": "(String) The gRPC service on which you want to perform the gRPC call. The gRPC service on which you want to perform the gRPC call.",
                          "type": "string"
                        },
                        "shouldTrackHops": {
                          "description": "(Boolean) This will turn on a traceroute probe to discover all gateways along the path to the host destination. For ICMP tests (subtype = \"icmp\"). This will turn on a traceroute probe to discover all gateways along the path to the host destination. For ICMP tests (`subtype = \"icmp\"`).",
                          "type": "boolean"
                        },
                        "timeout": {
                          "description": "(Number) Timeout in seconds for the test. Defaults to 60. Timeout in seconds for the test. Defaults to `60`.",
                          "type": "number"
                        },
                        "url": {
                          "description": "(String) The URL to send the request to. The URL to send the request to.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "requestHeaders": {
                    "description": "(Map of String) Header name and value map. Header name and value map.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "x-kubernetes-map-type": "granular"
                  },
                  "requestProxy": {
                    "description": "(Block List, Max: 1) The proxy to perform the test. (see below for nested schema) The proxy to perform the test.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "headers": {
                          "description": "(Map of String) Header name and value map. Header name and value map.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          },
                          "x-kubernetes-map-type": "granular"
                        },
                        "url": {
                          "description": "(String) The URL to send the request to. URL of the proxy to perform the test.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "requestQuery": {
                    "description": "(Map of String) Query arguments name and value map. Query arguments name and value map.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "x-kubernetes-map-type": "granular"
                  },
                  "retry": {
                    "description": "(Block List, Max: 1) (see below for nested schema)",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "count": {
                          "description": "(Number) Number of retries needed to consider a location as failed before sending a notification alert. Defaults to 0. Number of retries needed to consider a location as failed before sending a notification alert. Defaults to `0`.",
                          "type": "number"
                        },
                        "interval": {
                          "description": "(Number) Interval between a failed test and the next retry in milliseconds. Defaults to 300. Interval between a failed test and the next retry in milliseconds. Defaults to `300`.",
                          "type": "number"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "subtype": {
                    "description": "(String) The subtype of the Synthetic API test. Defaults to http. Valid values are http, ssl, tcp, dns, multi, icmp, udp, websocket, grpc. The subtype of the Synthetic multistep API test step. Valid values are `http`, `grpc`. Defaults to `\"http\"`.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "assertion": {
              "description": "(Block List) Assertions used for the test. Multiple assertion blocks are allowed with the structure below. (see below for nested schema) Assertions used for the test. Multiple `assertion` blocks are allowed with the structure below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "operator": {
                    "description": "(String) Assertion operator. Note Only some combinations of type and operator are valid (please refer to Datadog documentation). Assertion operator. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)).",
                    "type": "string"
                  },
                  "property": {
                    "description": "(String) If assertion type is header, this is the header name. If assertion type is `header`, this is the header name.",
                    "type": "string"
                  },
                  "target": {
                    "description": "(String) Expected value. Depends on the assertion type, refer to Datadog documentation for details. Expected value. Depends on the assertion type, refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test) for details.",
                    "type": "string"
                  },
                  "targetjsonpath": {
                    "description": "(Block List, Max: 1) Expected structure if operator is validatesJSONPath. Exactly one nested block is allowed with the structure below. (see below for nested schema) Expected structure if `operator` is `validatesJSONPath`. Exactly one nested block is allowed with the structure below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "jsonpath": {
                          "description": "(String) The JSON path to assert. The JSON path to assert.",
                          "type": "string"
                        },
                        "operator": {
                          "description": "(String) Assertion operator. Note Only some combinations of type and operator are valid (please refer to Datadog documentation). The specific operator to use on the path.",
                          "type": "string"
                        },
                        "targetvalue": {
                          "description": "(String) Expected matching value. Expected matching value.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "targetxpath": {
                    "description": "(Block List, Max: 1) Expected structure if operator is validatesXPath. Exactly one nested block is allowed with the structure below. (see below for nested schema) Expected structure if `operator` is `validatesXPath`. Exactly one nested block is allowed with the structure below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "operator": {
                          "description": "(String) Assertion operator. Note Only some combinations of type and operator are valid (please refer to Datadog documentation). The specific operator to use on the path.",
                          "type": "string"
                        },
                        "targetvalue": {
                          "description": "(String) Expected matching value. Expected matching value.",
                          "type": "string"
                        },
                        "xpath": {
                          "description": "(String) The xpath to assert. The xpath to assert.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "timingsScope": {
                    "description": "(String) Timings scope for response time assertions. Valid values are all, withoutDNS. Timings scope for response time assertions. Valid values are `all`, `withoutDNS`.",
                    "type": "string"
                  },
                  "type": {
                    "description": "(String) Synthetics test type. Valid values are api, browser. Type of assertion. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)). Valid values are `body`, `header`, `statusCode`, `certificate`, `responseTime`, `property`, `recordEvery`, `recordSome`, `tlsVersion`, `minTlsVersion`, `latency`, `packetLossPercentage`, `packetsReceived`, `networkHop`, `receivedMessage`, `grpcHealthcheckStatus`, `grpcMetadata`, `grpcProto`, `connection`.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "browserStep": {
              "description": "(Block List) Steps for browser tests. (see below for nested schema) Steps for browser tests.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "allowFailure": {
                    "description": "(Boolean) Determines whether or not to continue with test if this step fails. Determines if the step should be allowed to fail.",
                    "type": "boolean"
                  },
                  "forceElementUpdate": {
                    "description": "(Boolean) Force update of the \"element\" parameter for the step Force update of the \"element\" parameter for the step",
                    "type": "boolean"
                  },
                  "isCritical": {
                    "description": "(Boolean) Determines whether or not to consider the entire test as failed if this step fails. Can be used only if allow_failure is true. Determines whether or not to consider the entire test as failed if this step fails. Can be used only if `allow_failure` is `true`.",
                    "type": "boolean"
                  },
                  "name": {
                    "description": "(String) Name of Datadog synthetics test. Name of the step.",
                    "type": "string"
                  },
                  "noScreenshot": {
                    "description": "(Boolean) Prevents saving screenshots of the step. Prevents saving screenshots of the step.",
                    "type": "boolean"
                  },
                  "params": {
                    "description": "(Block List, Min: 1, Max: 1) Parameters for the step. (see below for nested schema) Parameters for the step.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "attribute": {
                          "description": "(String) Name of the attribute to use for an \"assert attribute\" step. Name of the attribute to use for an \"assert attribute\" step.",
                          "type": "string"
                        },
                        "check": {
                          "description": "(String) Check type to use for an assertion step. Valid values are equals, notEquals, contains, notContains, startsWith, notStartsWith, greater, lower, greaterEquals, lowerEquals, matchRegex, between, isEmpty, notIsEmpty. Check type to use for an assertion step. Valid values are `equals`, `notEquals`, `contains`, `notContains`, `startsWith`, `notStartsWith`, `greater`, `lower`, `greaterEquals`, `lowerEquals`, `matchRegex`, `between`, `isEmpty`, `notIsEmpty`.",
                          "type": "string"
                        },
                        "clickType": {
                          "description": "(String) Type of click to use for a \"click\" step. Type of click to use for a \"click\" step.",
                          "type": "string"
                        },
                        "code": {
                          "description": "(String) Javascript code to use for the step. Javascript code to use for the step.",
                          "type": "string"
                        },
                        "delay": {
                          "description": "(Number) Delay between each key stroke for a \"type test\" step. Delay between each key stroke for a \"type test\" step.",
                          "type": "number"
                        },
                        "element": {
                          "description": "(String) Element to use for the step, json encoded string. Element to use for the step, json encoded string.",
                          "type": "string"
                        },
                        "elementUserLocator": {
                          "description": "(Block List, Max: 1) Custom user selector to use for the step. (see below for nested schema) Custom user selector to use for the step.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "failTestOnCannotLocate": {
                                "description": "(Boolean) Defaults to false. Defaults to `false`.",
                                "type": "boolean"
                              },
                              "value": {
                                "description": "(String) Regex or JSON path used for the parser. Not used with type raw.",
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "description": "(String) Synthetics test type. Valid values are api, browser. Defaults to `\"css\"`.",
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "(String) Regex or JSON path used for the parser. Not used with type raw.",
                                      "type": "string"
                                    }
                                  },
                                  "additionalProperties": false
                                }
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "email": {
                          "description": "(String) Details of the email for an \"assert email\" step. Details of the email for an \"assert email\" step.",
                          "type": "string"
                        },
                        "file": {
                          "description": "(String) JSON encoded string used for an \"assert download\" step. Refer to the examples for a usage example showing the schema. JSON encoded string used for an \"assert download\" step. Refer to the examples for a usage example showing the schema.",
                          "type": "string"
                        },
                        "files": {
                          "description": "(String) Details of the files for an \"upload files\" step, json encoded string. Details of the files for an \"upload files\" step, json encoded string.",
                          "type": "string"
                        },
                        "modifiers": {
                          "description": "(List of String) Modifier to use for a \"press key\" step. Modifier to use for a \"press key\" step.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "playingTabId": {
                          "description": "(String) ID of the tab to play the subtest. ID of the tab to play the subtest.",
                          "type": "string"
                        },
                        "request": {
                          "description": "(String) Request for an API step. Request for an API step.",
                          "type": "string"
                        },
                        "subtestPublicId": {
                          "description": "(String) ID of the Synthetics test to use as subtest. ID of the Synthetics test to use as subtest.",
                          "type": "string"
                        },
                        "value": {
                          "description": "(String) Regex or JSON path used for the parser. Not used with type raw. Value of the step.",
                          "type": "string"
                        },
                        "variable": {
                          "description": "(Block List, Max: 1) Details of the variable to extract. (see below for nested schema) Details of the variable to extract.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "example": {
                                "description": "(String) Example of the extracted variable. Defaults to \"\". Example of the extracted variable. Defaults to `\"\"`.",
                                "type": "string"
                              },
                              "name": {
                                "description": "(String) Name of Datadog synthetics test. Name of the extracted variable.",
                                "type": "string"
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "withClick": {
                          "description": "(Boolean) For \"file upload\" steps. For \"file upload\" steps.",
                          "type": "boolean"
                        },
                        "x": {
                          "description": "(Number) X coordinates for a \"scroll step\". X coordinates for a \"scroll step\".",
                          "type": "number"
                        },
                        "y": {
                          "description": "(Number) Y coordinates for a \"scroll step\". Y coordinates for a \"scroll step\".",
                          "type": "number"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "timeout": {
                    "description": "(Number) Timeout in seconds for the test. Defaults to 60. Used to override the default timeout of a step.",
                    "type": "number"
                  },
                  "type": {
                    "description": "(String) Synthetics test type. Valid values are api, browser. Type of the step. Valid values are `assertCurrentUrl`, `assertElementAttribute`, `assertElementContent`, `assertElementPresent`, `assertEmail`, `assertFileDownload`, `assertFromJavascript`, `assertPageContains`, `assertPageLacks`, `click`, `extractFromJavascript`, `extractVariable`, `goToEmailLink`, `goToUrl`, `goToUrlAndMeasureTti`, `hover`, `playSubTest`, `pressKey`, `refresh`, `runApiTest`, `scroll`, `selectOption`, `typeText`, `uploadFiles`, `wait`.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "browserVariable": {
              "description": "(Block List) Variables used for a browser test steps. Multiple variable blocks are allowed with the structure below. (see below for nested schema) Variables used for a browser test steps. Multiple `variable` blocks are allowed with the structure below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "example": {
                    "description": "(String) Example of the extracted variable. Defaults to \"\". Example for the variable. Defaults to `\"\"`.",
                    "type": "string"
                  },
                  "id": {
                    "description": "(String) The ID of this resource. ID of the global variable to use. This is actually only used (and required) in the case of using a variable of type `global`.",
                    "type": "string"
                  },
                  "name": {
                    "description": "(String) Name of Datadog synthetics test. Name of the variable.",
                    "type": "string"
                  },
                  "pattern": {
                    "description": "(String) Pattern of the variable. Defaults to \"\". Pattern of the variable. Defaults to `\"\"`.",
                    "type": "string"
                  },
                  "secure": {
                    "description": "(Boolean) Determines whether or not the extracted value will be obfuscated. Determines whether or not the browser test variable is obfuscated. Can only be used with a browser variable of type `text`",
                    "type": "boolean"
                  },
                  "type": {
                    "description": "(String) Synthetics test type. Valid values are api, browser. Type of browser test variable. Valid values are `element`, `email`, `global`, `javascript`, `text`.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "configVariable": {
              "description": "(Block List) Variables used for the test configuration. Multiple config_variable blocks are allowed with the structure below. (see below for nested schema) Variables used for the test configuration. Multiple `config_variable` blocks are allowed with the structure below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "example": {
                    "description": "(String) Example of the extracted variable. Defaults to \"\". Example for the variable. This value is not returned by the api when `secure = true`.",
                    "type": "string"
                  },
                  "id": {
                    "description": "(String) The ID of this resource. When type = `global`, ID of the global variable to use.",
                    "type": "string"
                  },
                  "name": {
                    "description": "(String) Name of Datadog synthetics test. Name of the variable.",
                    "type": "string"
                  },
                  "pattern": {
                    "description": "(String) Pattern of the variable. Defaults to \"\". Pattern of the variable. This value is not returned by the api when `secure = true`.",
                    "type": "string"
                  },
                  "secure": {
                    "description": "(Boolean) Determines whether or not the extracted value will be obfuscated. Whether the value of this variable will be obfuscated in test results. Defaults to `false`.",
                    "type": "boolean"
                  },
                  "type": {
                    "description": "(String) Synthetics test type. Valid values are api, browser. Type of test configuration variable. Valid values are `global`, `text`.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "deviceIds": {
              "description": "(List of String) Required if type = \"browser\". Array with the different device IDs used to run the test. Valid values are laptop_large, tablet, mobile_small, chrome.laptop_large, chrome.tablet, chrome.mobile_small, firefox.laptop_large, firefox.tablet, firefox.mobile_small, edge.laptop_large, edge.tablet, edge.mobile_small. Required if `type = \"browser\"`. Array with the different device IDs used to run the test. Valid values are `laptop_large`, `tablet`, `mobile_small`, `chrome.laptop_large`, `chrome.tablet`, `chrome.mobile_small`, `firefox.laptop_large`, `firefox.tablet`, `firefox.mobile_small`, `edge.laptop_large`, `edge.tablet`, `edge.mobile_small`.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "locations": {
              "description": "(Set of String) Array of locations used to run the test. Refer to the Datadog Synthetics location data source to retrieve the list of locations. Array of locations used to run the test. Refer to [the Datadog Synthetics location data source](https://registry.io/providers/DataDog/datadog/latest/docs/data-sources/synthetics_locations) to retrieve the list of locations.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-kubernetes-list-type": "set"
            },
            "message": {
              "description": "(String) A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by using the same @username notation as events. Defaults to \"\". A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by using the same `@username` notation as events. Defaults to `\"\"`.",
              "type": "string"
            },
            "name": {
              "description": "(String) Name of Datadog synthetics test. Name of Datadog synthetics test.",
              "type": "string"
            },
            "optionsList": {
              "description": "(Block List, Max: 1) (see below for nested schema)",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "acceptSelfSigned": {
                    "description": "(Boolean) For SSL test, whether or not the test should allow self signed certificates. For SSL test, whether or not the test should allow self signed certificates.",
                    "type": "boolean"
                  },
                  "allowInsecure": {
                    "description": "(Boolean) Allows loading insecure content for an HTTP request in an API test or in a multistep API test step. Allows loading insecure content for an HTTP request in an API test or in a multistep API test step.",
                    "type": "boolean"
                  },
                  "checkCertificateRevocation": {
                    "description": "(Boolean) For SSL test, whether or not the test should fail on revoked certificate in stapled OCSP. For SSL test, whether or not the test should fail on revoked certificate in stapled OCSP.",
                    "type": "boolean"
                  },
                  "ci": {
                    "description": "(Block List, Max: 1) CI/CD options for a Synthetic test. (see below for nested schema) CI/CD options for a Synthetic test.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "executionRule": {
                          "description": "(String) Execution rule for a Synthetics test. Valid values are blocking, non_blocking, skipped. Execution rule for a Synthetics test. Valid values are `blocking`, `non_blocking`, `skipped`.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "disableCors": {
                    "description": "Origin Resource Sharing for browser tests. Disable Cross-Origin Resource Sharing for browser tests.",
                    "type": "boolean"
                  },
                  "disableCsp": {
                    "description": "(Boolean) Disable Content Security Policy for browser tests. Disable Content Security Policy for browser tests.",
                    "type": "boolean"
                  },
                  "followRedirects": {
                    "description": "(Boolean) Determines whether or not the API HTTP test should follow redirects. Determines whether or not the API HTTP test should follow redirects.",
                    "type": "boolean"
                  },
                  "httpVersion": {
                    "description": "(String) HTTP version to use for a Synthetics API test. Valid values are http1, http2, any. HTTP version to use for a Synthetics API test. Valid values are `http1`, `http2`, `any`.",
                    "type": "string"
                  },
                  "ignoreServerCertificateError": {
                    "description": "(Boolean) Ignore server certificate error for browser tests. Ignore server certificate error for browser tests.",
                    "type": "boolean"
                  },
                  "initialNavigationTimeout": {
                    "description": "(Number) Timeout before declaring the initial step as failed (in seconds) for browser tests. Timeout before declaring the initial step as failed (in seconds) for browser tests.",
                    "type": "number"
                  },
                  "minFailureDuration": {
                    "description": "(Number) Minimum amount of time in failure required to trigger an alert (in seconds). Default is 0. Minimum amount of time in failure required to trigger an alert (in seconds). Default is `0`.",
                    "type": "number"
                  },
                  "minLocationFailed": {
                    "description": "(Number) Minimum number of locations in failure required to trigger an alert. Defaults to 1. Minimum number of locations in failure required to trigger an alert. Defaults to `1`.",
                    "type": "number"
                  },
                  "monitorName": {
                    "description": "(String) The monitor name is used for the alert title as well as for all monitor dashboard widgets and SLOs. The monitor name is used for the alert title as well as for all monitor dashboard widgets and SLOs.",
                    "type": "string"
                  },
                  "monitorOptions": {
                    "description": "(Block List, Max: 1) (see below for nested schema)",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "renotifyInterval": {
                          "description": "(Number) Specify a renotification frequency in minutes. Values available by default are 0, 10, 20, 30, 40, 50, 60, 90, 120, 180, 240, 300, 360, 720, 1440. Defaults to 0. Specify a renotification frequency in minutes. Values available by default are `0`, `10`, `20`, `30`, `40`, `50`, `60`, `90`, `120`, `180`, `240`, `300`, `360`, `720`, `1440`. Defaults to `0`.",
                          "type": "number"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "monitorPriority": {
                    "description": "(Number)",
                    "type": "number"
                  },
                  "noScreenshot": {
                    "description": "(Boolean) Prevents saving screenshots of the step. Prevents saving screenshots of the steps.",
                    "type": "boolean"
                  },
                  "restrictedRoles": {
                    "description": "(Set of String) A list of role identifiers pulled from the Roles API to restrict read and write access. A list of role identifiers pulled from the Roles API to restrict read and write access.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "x-kubernetes-list-type": "set"
                  },
                  "retry": {
                    "description": "(Block List, Max: 1) (see below for nested schema)",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "count": {
                          "description": "(Number) Number of retries needed to consider a location as failed before sending a notification alert. Defaults to 0. Number of retries needed to consider a location as failed before sending a notification alert. Defaults to `0`.",
                          "type": "number"
                        },
                        "interval": {
                          "description": "(Number) Interval between a failed test and the next retry in milliseconds. Defaults to 300. Interval between a failed test and the next retry in milliseconds. Defaults to `300`.",
                          "type": "number"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "rumSettings": {
                    "description": "(Block List, Max: 1) The RUM data collection settings for the Synthetic browser test. (see below for nested schema) The RUM data collection settings for the Synthetic browser test.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "scheduling": {
                    "description": "(Block List, Max: 1) Object containing timeframes and timezone used for advanced scheduling. (see below for nested schema) Object containing timeframes and timezone used for advanced scheduling.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "timeframes": {
                          "description": "(Block Set, Min: 1) Array containing objects describing the scheduling pattern to apply to each day. (see below for nested schema) Array containing objects describing the scheduling pattern to apply to each day.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "day": {
                                "description": "(Number) Number representing the day of the week Number representing the day of the week",
                                "type": "number"
                              },
                              "from": {
                                "description": "(String) The hour of the day on which scheduling starts. The hour of the day on which scheduling starts.",
                                "type": "string"
                              },
                              "to": {
                                "description": "(String) The hour of the day on which scheduling ends. The hour of the day on which scheduling ends.",
                                "type": "string"
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "timezone": {
                          "description": "(String) Timezone in which the timeframe is based. Timezone in which the timeframe is based.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "tickEvery": {
                    "description": "(Number) How often the test should run (in seconds). How often the test should run (in seconds).",
                    "type": "number"
                  }
                },
                "additionalProperties": false
              }
            },
            "requestBasicauth": {
              "description": "(Block List, Max: 1) The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below. (see below for nested schema) The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "accessKeySecretRef": {
                    "description": "(String, Sensitive) Access key for SIGV4 authentication. Access key for `SIGV4` authentication.",
                    "type": "object",
                    "required": [
                      "key",
                      "name",
                      "namespace"
                    ],
                    "properties": {
                      "key": {
                        "description": "The key to select.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the secret.",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace of the secret.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "accessTokenUrl": {
                    "description": "client or oauth-rop authentication. Access token url for `oauth-client` or `oauth-rop` authentication.",
                    "type": "string"
                  },
                  "audience": {
                    "description": "client or oauth-rop authentication. Defaults to \"\". Audience for `oauth-client` or `oauth-rop` authentication. Defaults to `\"\"`.",
                    "type": "string"
                  },
                  "clientId": {
                    "description": "client or oauth-rop authentication. Client ID for `oauth-client` or `oauth-rop` authentication.",
                    "type": "string"
                  },
                  "clientSecretSecretRef": {
                    "description": "client or oauth-rop authentication. Client secret for `oauth-client` or `oauth-rop` authentication.",
                    "type": "object",
                    "required": [
                      "key",
                      "name",
                      "namespace"
                    ],
                    "properties": {
                      "key": {
                        "description": "The key to select.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the secret.",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace of the secret.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "domain": {
                    "description": "(String) Domain for ntlm authentication. Domain for `ntlm` authentication.",
                    "type": "string"
                  },
                  "passwordSecretRef": {
                    "description": "(String, Sensitive) Password for authentication. Password for authentication.",
                    "type": "object",
                    "required": [
                      "key",
                      "name",
                      "namespace"
                    ],
                    "properties": {
                      "key": {
                        "description": "The key to select.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the secret.",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace of the secret.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "region": {
                    "description": "(String) Region for SIGV4 authentication. Region for `SIGV4` authentication.",
                    "type": "string"
                  },
                  "resource": {
                    "description": "client or oauth-rop authentication. Defaults to \"\". Resource for `oauth-client` or `oauth-rop` authentication. Defaults to `\"\"`.",
                    "type": "string"
                  },
                  "scope": {
                    "description": "client or oauth-rop authentication. Defaults to \"\". Scope for `oauth-client` or `oauth-rop` authentication. Defaults to `\"\"`.",
                    "type": "string"
                  },
                  "secretKeySecretRef": {
                    "description": "(String, Sensitive) Secret key for SIGV4 authentication. Secret key for `SIGV4` authentication.",
                    "type": "object",
                    "required": [
                      "key",
                      "name",
                      "namespace"
                    ],
                    "properties": {
                      "key": {
                        "description": "The key to select.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the secret.",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace of the secret.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "serviceName": {
                    "description": "(String) Service name for SIGV4 authentication. Service name for `SIGV4` authentication.",
                    "type": "string"
                  },
                  "sessionToken": {
                    "description": "(String) Session token for SIGV4 authentication. Session token for `SIGV4` authentication.",
                    "type": "string"
                  },
                  "tokenApiAuthentication": {
                    "description": "client or oauth-rop authentication. Valid values are header, body. Token API Authentication for `oauth-client` or `oauth-rop` authentication. Valid values are `header`, `body`.",
                    "type": "string"
                  },
                  "type": {
                    "description": "(String) Synthetics test type. Valid values are api, browser. Type of basic authentication to use when performing the test. Defaults to `\"web\"`.",
                    "type": "string"
                  },
                  "username": {
                    "description": "(String) Username for authentication. Username for authentication.",
                    "type": "string"
                  },
                  "workstation": {
                    "description": "(String) Workstation for ntlm authentication. Workstation for `ntlm` authentication.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "requestClientCertificate": {
              "description": "(Block List, Max: 1) Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below. (see below for nested schema) Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "cert": {
                    "description": "(Block List, Min: 1, Max: 1) (see below for nested schema)",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "contentSecretRef"
                      ],
                      "properties": {
                        "contentSecretRef": {
                          "description": "(String, Sensitive) Content of the certificate. Content of the certificate.",
                          "type": "object",
                          "required": [
                            "key",
                            "name",
                            "namespace"
                          ],
                          "properties": {
                            "key": {
                              "description": "The key to select.",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the secret.",
                              "type": "string"
                            },
                            "namespace": {
                              "description": "Namespace of the secret.",
                              "type": "string"
                            }
                          },
                          "additionalProperties": false
                        },
                        "filename": {
                          "description": "(String) File name for the certificate. File name for the certificate.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "key": {
                    "description": "(Block List, Min: 1, Max: 1) (see below for nested schema)",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "contentSecretRef"
                      ],
                      "properties": {
                        "contentSecretRef": {
                          "description": "(String, Sensitive) Content of the certificate. Content of the certificate.",
                          "type": "object",
                          "required": [
                            "key",
                            "name",
                            "namespace"
                          ],
                          "properties": {
                            "key": {
                              "description": "The key to select.",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the secret.",
                              "type": "string"
                            },
                            "namespace": {
                              "description": "Namespace of the secret.",
                              "type": "string"
                            }
                          },
                          "additionalProperties": false
                        },
                        "filename": {
                          "description": "(String) File name for the certificate. File name for the certificate.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "requestDefinition": {
              "description": "(Block List, Max: 1) Required if type = \"api\". The synthetics test request. (see below for nested schema) Required if `type = \"api\"`. The synthetics test request.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "body": {
                    "description": "(String) The request body. The request body.",
                    "type": "string"
                  },
                  "bodyType": {
                    "description": "www-form-urlencoded, graphql. Type of the request body. Valid values are `text/plain`, `application/json`, `text/xml`, `text/html`, `application/x-www-form-urlencoded`, `graphql`.",
                    "type": "string"
                  },
                  "callType": {
                    "description": "(String) The type of gRPC call to perform. Valid values are healthcheck, unary. The type of gRPC call to perform. Valid values are `healthcheck`, `unary`.",
                    "type": "string"
                  },
                  "certificateDomains": {
                    "description": "(List of String) By default, the client certificate is applied on the domain of the starting URL for browser tests. If you want your client certificate to be applied on other domains instead, add them in certificate_domains. By default, the client certificate is applied on the domain of the starting URL for browser tests. If you want your client certificate to be applied on other domains instead, add them in `certificate_domains`.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "dnsServer": {
                    "description": "(String) DNS server to use for DNS tests (subtype = \"dns\"). DNS server to use for DNS tests (`subtype = \"dns\"`).",
                    "type": "string"
                  },
                  "dnsServerPort": {
                    "description": "(Number) DNS server port to use for DNS tests. DNS server port to use for DNS tests.",
                    "type": "number"
                  },
                  "host": {
                    "description": "(String) Host name to perform the test with. Host name to perform the test with.",
                    "type": "string"
                  },
                  "message": {
                    "description": "(String) A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by using the same @username notation as events. Defaults to \"\". For UDP and websocket tests, message to send with the request.",
                    "type": "string"
                  },
                  "method": {
                    "description": "(String) Either the HTTP method/verb to use or a gRPC method available on the service set in the service field. Required if subtype is HTTP or if subtype is grpc and callType is unary. Either the HTTP method/verb to use or a gRPC method available on the service set in the `service` field. Required if `subtype` is `HTTP` or if `subtype` is `grpc` and `callType` is `unary`.",
                    "type": "string"
                  },
                  "noSavingResponseBody": {
                    "description": "(Boolean) Determines whether or not to save the response body. Determines whether or not to save the response body.",
                    "type": "boolean"
                  },
                  "numberOfPackets": {
                    "description": "(Number) Number of pings to use per test for ICMP tests (subtype = \"icmp\") between 0 and 10. Number of pings to use per test for ICMP tests (`subtype = \"icmp\"`) between 0 and 10.",
                    "type": "number"
                  },
                  "persistCookies": {
                    "description": "(Boolean) Persist cookies across redirects. Persist cookies across redirects.",
                    "type": "boolean"
                  },
                  "plainProtoFile": {
                    "description": "(String) The content of a proto file as a string. The content of a proto file as a string.",
                    "type": "string"
                  },
                  "port": {
                    "description": "(Number) Port to use when performing the test. Port to use when performing the test.",
                    "type": "number"
                  },
                  "protoJsonDescriptor": {
                    "description": "(String, Deprecated) A protobuf JSON descriptor. Deprecated. Use plain_proto_file instead. A protobuf JSON descriptor. **Deprecated.** Use `plain_proto_file` instead.",
                    "type": "string"
                  },
                  "servername": {
                    "description": "(String) For SSL tests, it specifies on which server you want to initiate the TLS handshake, allowing the server to present one of multiple possible certificates on the same IP address and TCP port number. For SSL tests, it specifies on which server you want to initiate the TLS handshake, allowing the server to present one of multiple possible certificates on the same IP address and TCP port number.",
                    "type": "string"
                  },
                  "service": {
                    "description": "(String) The gRPC service on which you want to perform the gRPC call. The gRPC service on which you want to perform the gRPC call.",
                    "type": "string"
                  },
                  "shouldTrackHops": {
                    "description": "(Boolean) This will turn on a traceroute probe to discover all gateways along the path to the host destination. For ICMP tests (subtype = \"icmp\"). This will turn on a traceroute probe to discover all gateways along the path to the host destination. For ICMP tests (`subtype = \"icmp\"`).",
                    "type": "boolean"
                  },
                  "timeout": {
                    "description": "(Number) Timeout in seconds for the test. Defaults to 60. Timeout in seconds for the test. Defaults to `60`.",
                    "type": "number"
                  },
                  "url": {
                    "description": "(String) The URL to send the request to. The URL to send the request to.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "requestHeaders": {
              "description": "(Map of String) Header name and value map. Header name and value map.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "requestMetadata": {
              "description": "(Map of String) Metadata to include when performing the gRPC test. Metadata to include when performing the gRPC test.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "requestProxy": {
              "description": "(Block List, Max: 1) The proxy to perform the test. (see below for nested schema) The proxy to perform the test.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "headers": {
                    "description": "(Map of String) Header name and value map. Header name and value map.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "x-kubernetes-map-type": "granular"
                  },
                  "url": {
                    "description": "(String) The URL to send the request to. URL of the proxy to perform the test.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "requestQuery": {
              "description": "(Map of String) Query arguments name and value map. Query arguments name and value map.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "setCookie": {
              "description": "Cookie syntax. Cookies to be used for a browser test request, using the [Set-Cookie](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie) syntax.",
              "type": "string"
            },
            "status": {
              "description": "(String) Define whether you want to start (live) or pause (paused) a Synthetic test. Valid values are live, paused. Define whether you want to start (`live`) or pause (`paused`) a Synthetic test. Valid values are `live`, `paused`.",
              "type": "string"
            },
            "subtype": {
              "description": "(String) The subtype of the Synthetic API test. Defaults to http. Valid values are http, ssl, tcp, dns, multi, icmp, udp, websocket, grpc. The subtype of the Synthetic API test. Defaults to `http`. Valid values are `http`, `ssl`, `tcp`, `dns`, `multi`, `icmp`, `udp`, `websocket`, `grpc`.",
              "type": "string"
            },
            "tags": {
              "description": "(List of String) A list of tags to associate with your synthetics test. This can help you categorize and filter tests in the manage synthetics page of the UI. Default is an empty list ([]). A list of tags to associate with your synthetics test. This can help you categorize and filter tests in the manage synthetics page of the UI. Default is an empty list (`[]`).",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "type": {
              "description": "(String) Synthetics test type. Valid values are api, browser. Synthetics test type. Valid values are `api`, `browser`.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored unless the Management Policies feature flag is disabled. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.",
          "type": "object",
          "properties": {
            "apiStep": {
              "description": "(Block List) Steps for multistep api tests (see below for nested schema) Steps for multistep api tests",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "allowFailure": {
                    "description": "(Boolean) Determines whether or not to continue with test if this step fails. Determines whether or not to continue with test if this step fails.",
                    "type": "boolean"
                  },
                  "assertion": {
                    "description": "(Block List) Assertions used for the test. Multiple assertion blocks are allowed with the structure below. (see below for nested schema) Assertions used for the test. Multiple `assertion` blocks are allowed with the structure below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "operator": {
                          "description": "(String) Assertion operator. Note Only some combinations of type and operator are valid (please refer to Datadog documentation). Assertion operator. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)).",
                          "type": "string"
                        },
                        "property": {
                          "description": "(String) If assertion type is header, this is the header name. If assertion type is `header`, this is the header name.",
                          "type": "string"
                        },
                        "target": {
                          "description": "(String) Expected value. Depends on the assertion type, refer to Datadog documentation for details. Expected value. Depends on the assertion type, refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test) for details.",
                          "type": "string"
                        },
                        "targetjsonpath": {
                          "description": "(Block List, Max: 1) Expected structure if operator is validatesJSONPath. Exactly one nested block is allowed with the structure below. (see below for nested schema) Expected structure if `operator` is `validatesJSONPath`. Exactly one nested block is allowed with the structure below.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "jsonpath": {
                                "description": "(String) The JSON path to assert. The JSON path to assert.",
                                "type": "string"
                              },
                              "operator": {
                                "description": "(String) Assertion operator. Note Only some combinations of type and operator are valid (please refer to Datadog documentation). The specific operator to use on the path.",
                                "type": "string"
                              },
                              "targetvalue": {
                                "description": "(String) Expected matching value. Expected matching value.",
                                "type": "string"
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "targetxpath": {
                          "description": "(Block List, Max: 1) Expected structure if operator is validatesXPath. Exactly one nested block is allowed with the structure below. (see below for nested schema) Expected structure if `operator` is `validatesXPath`. Exactly one nested block is allowed with the structure below.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "operator": {
                                "description": "(String) Assertion operator. Note Only some combinations of type and operator are valid (please refer to Datadog documentation). The specific operator to use on the path.",
                                "type": "string"
                              },
                              "targetvalue": {
                                "description": "(String) Expected matching value. Expected matching value.",
                                "type": "string"
                              },
                              "xpath": {
                                "description": "(String) The xpath to assert. The xpath to assert.",
                                "type": "string"
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "timingsScope": {
                          "description": "(String) Timings scope for response time assertions. Valid values are all, withoutDNS. Timings scope for response time assertions. Valid values are `all`, `withoutDNS`.",
                          "type": "string"
                        },
                        "type": {
                          "description": "(String) Synthetics test type. Valid values are api, browser. Type of assertion. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)). Valid values are `body`, `header`, `statusCode`, `certificate`, `responseTime`, `property`, `recordEvery`, `recordSome`, `tlsVersion`, `minTlsVersion`, `latency`, `packetLossPercentage`, `packetsReceived`, `networkHop`, `receivedMessage`, `grpcHealthcheckStatus`, `grpcMetadata`, `grpcProto`, `connection`.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "extractedValue": {
                    "description": "(Block List) Values to parse and save as variables from the response. (see below for nested schema) Values to parse and save as variables from the response.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "field": {
                          "description": "(String) When type is http_header, name of the header to use to extract the value. When type is `http_header`, name of the header to use to extract the value.",
                          "type": "string"
                        },
                        "name": {
                          "description": "(String) Name of Datadog synthetics test.",
                          "type": "string"
                        },
                        "parser": {
                          "description": "(Block List, Min: 1, Max: 1) (see below for nested schema)",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "type": {
                                "description": "(String) Synthetics test type. Valid values are api, browser. Type of parser for a Synthetics global variable from a synthetics test. Valid values are `raw`, `json_path`, `regex`, `x_path`.",
                                "type": "string"
                              },
                              "value": {
                                "description": "(String) Regex or JSON path used for the parser. Not used with type raw. Regex or JSON path used for the parser. Not used with type `raw`.",
                                "type": "string"
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "secure": {
                          "description": "(Boolean) Determines whether or not the extracted value will be obfuscated. Determines whether or not the extracted value will be obfuscated.",
                          "type": "boolean"
                        },
                        "type": {
                          "description": "(String) Synthetics test type. Valid values are api, browser. Property of the Synthetics Test Response to use for the variable. Valid values are `http_body`, `http_header`, `local_variable`.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "isCritical": {
                    "description": "(Boolean) Determines whether or not to consider the entire test as failed if this step fails. Can be used only if allow_failure is true. Determines whether or not to consider the entire test as failed if this step fails. Can be used only if `allow_failure` is `true`.",
                    "type": "boolean"
                  },
                  "name": {
                    "description": "(String) Name of Datadog synthetics test. The name of the step.",
                    "type": "string"
                  },
                  "requestBasicauth": {
                    "description": "(Block List, Max: 1) The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below. (see below for nested schema) The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "accessTokenUrl": {
                          "description": "client or oauth-rop authentication. Access token url for `oauth-client` or `oauth-rop` authentication.",
                          "type": "string"
                        },
                        "audience": {
                          "description": "client or oauth-rop authentication. Defaults to \"\". Audience for `oauth-client` or `oauth-rop` authentication. Defaults to `\"\"`.",
                          "type": "string"
                        },
                        "clientId": {
                          "description": "client or oauth-rop authentication. Client ID for `oauth-client` or `oauth-rop` authentication.",
                          "type": "string"
                        },
                        "domain": {
                          "description": "(String) Domain for ntlm authentication. Domain for `ntlm` authentication.",
                          "type": "string"
                        },
                        "region": {
                          "description": "(String) Region for SIGV4 authentication. Region for `SIGV4` authentication.",
                          "type": "string"
                        },
                        "resource": {
                          "description": "client or oauth-rop authentication. Defaults to \"\". Resource for `oauth-client` or `oauth-rop` authentication. Defaults to `\"\"`.",
                          "type": "string"
                        },
                        "scope": {
                          "description": "client or oauth-rop authentication. Defaults to \"\". Scope for `oauth-client` or `oauth-rop` authentication. Defaults to `\"\"`.",
                          "type": "string"
                        },
                        "serviceName": {
                          "description": "(String) Service name for SIGV4 authentication. Service name for `SIGV4` authentication.",
                          "type": "string"
                        },
                        "sessionToken": {
                          "description": "(String) Session token for SIGV4 authentication. Session token for `SIGV4` authentication.",
                          "type": "string"
                        },
                        "tokenApiAuthentication": {
                          "description": "client or oauth-rop authentication. Valid values are header, body. Token API Authentication for `oauth-client` or `oauth-rop` authentication. Valid values are `header`, `body`.",
                          "type": "string"
                        },
                        "type": {
                          "description": "(String) Synthetics test type. Valid values are api, browser. Type of basic authentication to use when performing the test. Defaults to `\"web\"`.",
                          "type": "string"
                        },
                        "username": {
                          "description": "(String) Username for authentication. Username for authentication.",
                          "type": "string"
                        },
                        "workstation": {
                          "description": "(String) Workstation for ntlm authentication. Workstation for `ntlm` authentication.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "requestClientCertificate": {
                    "description": "(Block List, Max: 1) Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below. (see below for nested schema) Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "cert": {
                          "description": "(Block List, Min: 1, Max: 1) (see below for nested schema)",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "filename": {
                                "description": "(String) File name for the certificate. File name for the certificate.",
                                "type": "string"
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "key": {
                          "description": "(Block List, Min: 1, Max: 1) (see below for nested schema)",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "filename": {
                                "description": "(String) File name for the certificate. File name for the certificate.",
                                "type": "string"
                              }
                            },
                            "additionalProperties": false
                          }
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "requestDefinition": {
                    "description": "(Block List, Max: 1) Required if type = \"api\". The synthetics test request. (see below for nested schema) The request for the api step.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "allowInsecure": {
                          "description": "(Boolean) Allows loading insecure content for an HTTP request in an API test or in a multistep API test step. Allows loading insecure content for an HTTP request in an API test or in a multistep API test step.",
                          "type": "boolean"
                        },
                        "body": {
                          "description": "(String) The request body. The request body.",
                          "type": "string"
                        },
                        "bodyType": {
                          "description": "www-form-urlencoded, graphql. Type of the request body. Valid values are `text/plain`, `application/json`, `text/xml`, `text/html`, `application/x-www-form-urlencoded`, `graphql`.",
                          "type": "string"
                        },
                        "callType": {
                          "description": "(String) The type of gRPC call to perform. Valid values are healthcheck, unary. The type of gRPC call to perform. Valid values are `healthcheck`, `unary`.",
                          "type": "string"
                        },
                        "certificateDomains": {
                          "description": "(List of String) By default, the client certificate is applied on the domain of the starting URL for browser tests. If you want your client certificate to be applied on other domains instead, add them in certificate_domains. By default, the client certificate is applied on the domain of the starting URL for browser tests. If you want your client certificate to be applied on other domains instead, add them in `certificate_domains`.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "dnsServer": {
                          "description": "(String) DNS server to use for DNS tests (subtype = \"dns\"). DNS server to use for DNS tests (`subtype = \"dns\"`).",
                          "type": "string"
                        },
                        "dnsServerPort": {
                          "description": "(Number) DNS server port to use for DNS tests. DNS server port to use for DNS tests.",
                          "type": "number"
                        },
                        "followRedirects": {
                          "description": "(Boolean) Determines whether or not the API HTTP test should follow redirects. Determines whether or not the API HTTP test should follow redirects.",
                          "type": "boolean"
                        },
                        "host": {
                          "description": "(String) Host name to perform the test with. Host name to perform the test with.",
                          "type": "string"
                        },
                        "message": {
                          "description": "(String) A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by using the same @username notation as events. Defaults to \"\". For UDP and websocket tests, message to send with the request.",
                          "type": "string"
                        },
                        "method": {
                          "description": "(String) Either the HTTP method/verb to use or a gRPC method available on the service set in the service field. Required if subtype is HTTP or if subtype is grpc and callType is unary. Either the HTTP method/verb to use or a gRPC method available on the service set in the `service` field. Required if `subtype` is `HTTP` or if `subtype` is `grpc` and `callType` is `unary`.",
                          "type": "string"
                        },
                        "noSavingResponseBody": {
                          "description": "(Boolean) Determines whether or not to save the response body. Determines whether or not to save the response body.",
                          "type": "boolean"
                        },
                        "numberOfPackets": {
                          "description": "(Number) Number of pings to use per test for ICMP tests (subtype = \"icmp\") between 0 and 10. Number of pings to use per test for ICMP tests (`subtype = \"icmp\"`) between 0 and 10.",
                          "type": "number"
                        },
                        "persistCookies": {
                          "description": "(Boolean) Persist cookies across redirects. Persist cookies across redirects.",
                          "type": "boolean"
                        },
                        "plainProtoFile": {
                          "description": "(String) The content of a proto file as a string. The content of a proto file as a string.",
                          "type": "string"
                        },
                        "port": {
                          "description": "(Number) Port to use when performing the test. Port to use when performing the test.",
                          "type": "number"
                        },
                        "protoJsonDescriptor": {
                          "description": "(String, Deprecated) A protobuf JSON descriptor. Deprecated. Use plain_proto_file instead. A protobuf JSON descriptor. **Deprecated.** Use `plain_proto_file` instead.",
                          "type": "string"
                        },
                        "servername": {
                          "description": "(String) For SSL tests, it specifies on which server you want to initiate the TLS handshake, allowing the server to present one of multiple possible certificates on the same IP address and TCP port number. For SSL tests, it specifies on which server you want to initiate the TLS handshake, allowing the server to present one of multiple possible certificates on the same IP address and TCP port number.",
                          "type": "string"
                        },
                        "service": {
                          "description": "(String) The gRPC service on which you want to perform the gRPC call. The gRPC service on which you want to perform the gRPC call.",
                          "type": "string"
                        },
                        "shouldTrackHops": {
                          "description": "(Boolean) This will turn on a traceroute probe to discover all gateways along the path to the host destination. For ICMP tests (subtype = \"icmp\"). This will turn on a traceroute probe to discover all gateways along the path to the host destination. For ICMP tests (`subtype = \"icmp\"`).",
                          "type": "boolean"
                        },
                        "timeout": {
                          "description": "(Number) Timeout in seconds for the test. Defaults to 60. Timeout in seconds for the test. Defaults to `60`.",
                          "type": "number"
                        },
                        "url": {
                          "description": "(String) The URL to send the request to. The URL to send the request to.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "requestHeaders": {
                    "description": "(Map of String) Header name and value map. Header name and value map.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "x-kubernetes-map-type": "granular"
                  },
                  "requestProxy": {
                    "description": "(Block List, Max: 1) The proxy to perform the test. (see below for nested schema) The proxy to perform the test.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "headers": {
                          "description": "(Map of String) Header name and value map. Header name and value map.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          },
                          "x-kubernetes-map-type": "granular"
                        },
                        "url": {
                          "description": "(String) The URL to send the request to. URL of the proxy to perform the test.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "requestQuery": {
                    "description": "(Map of String) Query arguments name and value map. Query arguments name and value map.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "x-kubernetes-map-type": "granular"
                  },
                  "retry": {
                    "description": "(Block List, Max: 1) (see below for nested schema)",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "count": {
                          "description": "(Number) Number of retries needed to consider a location as failed before sending a notification alert. Defaults to 0. Number of retries needed to consider a location as failed before sending a notification alert. Defaults to `0`.",
                          "type": "number"
                        },
                        "interval": {
                          "description": "(Number) Interval between a failed test and the next retry in milliseconds. Defaults to 300. Interval between a failed test and the next retry in milliseconds. Defaults to `300`.",
                          "type": "number"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "subtype": {
                    "description": "(String) The subtype of the Synthetic API test. Defaults to http. Valid values are http, ssl, tcp, dns, multi, icmp, udp, websocket, grpc. The subtype of the Synthetic multistep API test step. Valid values are `http`, `grpc`. Defaults to `\"http\"`.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "assertion": {
              "description": "(Block List) Assertions used for the test. Multiple assertion blocks are allowed with the structure below. (see below for nested schema) Assertions used for the test. Multiple `assertion` blocks are allowed with the structure below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "operator": {
                    "description": "(String) Assertion operator. Note Only some combinations of type and operator are valid (please refer to Datadog documentation). Assertion operator. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)).",
                    "type": "string"
                  },
                  "property": {
                    "description": "(String) If assertion type is header, this is the header name. If assertion type is `header`, this is the header name.",
                    "type": "string"
                  },
                  "target": {
                    "description": "(String) Expected value. Depends on the assertion type, refer to Datadog documentation for details. Expected value. Depends on the assertion type, refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test) for details.",
                    "type": "string"
                  },
                  "targetjsonpath": {
                    "description": "(Block List, Max: 1) Expected structure if operator is validatesJSONPath. Exactly one nested block is allowed with the structure below. (see below for nested schema) Expected structure if `operator` is `validatesJSONPath`. Exactly one nested block is allowed with the structure below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "jsonpath": {
                          "description": "(String) The JSON path to assert. The JSON path to assert.",
                          "type": "string"
                        },
                        "operator": {
                          "description": "(String) Assertion operator. Note Only some combinations of type and operator are valid (please refer to Datadog documentation). The specific operator to use on the path.",
                          "type": "string"
                        },
                        "targetvalue": {
                          "description": "(String) Expected matching value. Expected matching value.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "targetxpath": {
                    "description": "(Block List, Max: 1) Expected structure if operator is validatesXPath. Exactly one nested block is allowed with the structure below. (see below for nested schema) Expected structure if `operator` is `validatesXPath`. Exactly one nested block is allowed with the structure below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "operator": {
                          "description": "(String) Assertion operator. Note Only some combinations of type and operator are valid (please refer to Datadog documentation). The specific operator to use on the path.",
                          "type": "string"
                        },
                        "targetvalue": {
                          "description": "(String) Expected matching value. Expected matching value.",
                          "type": "string"
                        },
                        "xpath": {
                          "description": "(String) The xpath to assert. The xpath to assert.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "timingsScope": {
                    "description": "(String) Timings scope for response time assertions. Valid values are all, withoutDNS. Timings scope for response time assertions. Valid values are `all`, `withoutDNS`.",
                    "type": "string"
                  },
                  "type": {
                    "description": "(String) Synthetics test type. Valid values are api, browser. Type of assertion. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)). Valid values are `body`, `header`, `statusCode`, `certificate`, `responseTime`, `property`, `recordEvery`, `recordSome`, `tlsVersion`, `minTlsVersion`, `latency`, `packetLossPercentage`, `packetsReceived`, `networkHop`, `receivedMessage`, `grpcHealthcheckStatus`, `grpcMetadata`, `grpcProto`, `connection`.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "browserStep": {
              "description": "(Block List) Steps for browser tests. (see below for nested schema) Steps for browser tests.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "allowFailure": {
                    "description": "(Boolean) Determines whether or not to continue with test if this step fails. Determines if the step should be allowed to fail.",
                    "type": "boolean"
                  },
                  "forceElementUpdate": {
                    "description": "(Boolean) Force update of the \"element\" parameter for the step Force update of the \"element\" parameter for the step",
                    "type": "boolean"
                  },
                  "isCritical": {
                    "description": "(Boolean) Determines whether or not to consider the entire test as failed if this step fails. Can be used only if allow_failure is true. Determines whether or not to consider the entire test as failed if this step fails. Can be used only if `allow_failure` is `true`.",
                    "type": "boolean"
                  },
                  "name": {
                    "description": "(String) Name of Datadog synthetics test. Name of the step.",
                    "type": "string"
                  },
                  "noScreenshot": {
                    "description": "(Boolean) Prevents saving screenshots of the step. Prevents saving screenshots of the step.",
                    "type": "boolean"
                  },
                  "params": {
                    "description": "(Block List, Min: 1, Max: 1) Parameters for the step. (see below for nested schema) Parameters for the step.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "attribute": {
                          "description": "(String) Name of the attribute to use for an \"assert attribute\" step. Name of the attribute to use for an \"assert attribute\" step.",
                          "type": "string"
                        },
                        "check": {
                          "description": "(String) Check type to use for an assertion step. Valid values are equals, notEquals, contains, notContains, startsWith, notStartsWith, greater, lower, greaterEquals, lowerEquals, matchRegex, between, isEmpty, notIsEmpty. Check type to use for an assertion step. Valid values are `equals`, `notEquals`, `contains`, `notContains`, `startsWith`, `notStartsWith`, `greater`, `lower`, `greaterEquals`, `lowerEquals`, `matchRegex`, `between`, `isEmpty`, `notIsEmpty`.",
                          "type": "string"
                        },
                        "clickType": {
                          "description": "(String) Type of click to use for a \"click\" step. Type of click to use for a \"click\" step.",
                          "type": "string"
                        },
                        "code": {
                          "description": "(String) Javascript code to use for the step. Javascript code to use for the step.",
                          "type": "string"
                        },
                        "delay": {
                          "description": "(Number) Delay between each key stroke for a \"type test\" step. Delay between each key stroke for a \"type test\" step.",
                          "type": "number"
                        },
                        "element": {
                          "description": "(String) Element to use for the step, json encoded string. Element to use for the step, json encoded string.",
                          "type": "string"
                        },
                        "elementUserLocator": {
                          "description": "(Block List, Max: 1) Custom user selector to use for the step. (see below for nested schema) Custom user selector to use for the step.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "failTestOnCannotLocate": {
                                "description": "(Boolean) Defaults to false. Defaults to `false`.",
                                "type": "boolean"
                              },
                              "value": {
                                "description": "(String) Regex or JSON path used for the parser. Not used with type raw.",
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "description": "(String) Synthetics test type. Valid values are api, browser. Defaults to `\"css\"`.",
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "(String) Regex or JSON path used for the parser. Not used with type raw.",
                                      "type": "string"
                                    }
                                  },
                                  "additionalProperties": false
                                }
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "email": {
                          "description": "(String) Details of the email for an \"assert email\" step. Details of the email for an \"assert email\" step.",
                          "type": "string"
                        },
                        "file": {
                          "description": "(String) JSON encoded string used for an \"assert download\" step. Refer to the examples for a usage example showing the schema. JSON encoded string used for an \"assert download\" step. Refer to the examples for a usage example showing the schema.",
                          "type": "string"
                        },
                        "files": {
                          "description": "(String) Details of the files for an \"upload files\" step, json encoded string. Details of the files for an \"upload files\" step, json encoded string.",
                          "type": "string"
                        },
                        "modifiers": {
                          "description": "(List of String) Modifier to use for a \"press key\" step. Modifier to use for a \"press key\" step.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "playingTabId": {
                          "description": "(String) ID of the tab to play the subtest. ID of the tab to play the subtest.",
                          "type": "string"
                        },
                        "request": {
                          "description": "(String) Request for an API step. Request for an API step.",
                          "type": "string"
                        },
                        "subtestPublicId": {
                          "description": "(String) ID of the Synthetics test to use as subtest. ID of the Synthetics test to use as subtest.",
                          "type": "string"
                        },
                        "value": {
                          "description": "(String) Regex or JSON path used for the parser. Not used with type raw. Value of the step.",
                          "type": "string"
                        },
                        "variable": {
                          "description": "(Block List, Max: 1) Details of the variable to extract. (see below for nested schema) Details of the variable to extract.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "example": {
                                "description": "(String) Example of the extracted variable. Defaults to \"\". Example of the extracted variable. Defaults to `\"\"`.",
                                "type": "string"
                              },
                              "name": {
                                "description": "(String) Name of Datadog synthetics test. Name of the extracted variable.",
                                "type": "string"
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "withClick": {
                          "description": "(Boolean) For \"file upload\" steps. For \"file upload\" steps.",
                          "type": "boolean"
                        },
                        "x": {
                          "description": "(Number) X coordinates for a \"scroll step\". X coordinates for a \"scroll step\".",
                          "type": "number"
                        },
                        "y": {
                          "description": "(Number) Y coordinates for a \"scroll step\". Y coordinates for a \"scroll step\".",
                          "type": "number"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "timeout": {
                    "description": "(Number) Timeout in seconds for the test. Defaults to 60. Used to override the default timeout of a step.",
                    "type": "number"
                  },
                  "type": {
                    "description": "(String) Synthetics test type. Valid values are api, browser. Type of the step. Valid values are `assertCurrentUrl`, `assertElementAttribute`, `assertElementContent`, `assertElementPresent`, `assertEmail`, `assertFileDownload`, `assertFromJavascript`, `assertPageContains`, `assertPageLacks`, `click`, `extractFromJavascript`, `extractVariable`, `goToEmailLink`, `goToUrl`, `goToUrlAndMeasureTti`, `hover`, `playSubTest`, `pressKey`, `refresh`, `runApiTest`, `scroll`, `selectOption`, `typeText`, `uploadFiles`, `wait`.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "browserVariable": {
              "description": "(Block List) Variables used for a browser test steps. Multiple variable blocks are allowed with the structure below. (see below for nested schema) Variables used for a browser test steps. Multiple `variable` blocks are allowed with the structure below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "example": {
                    "description": "(String) Example of the extracted variable. Defaults to \"\". Example for the variable. Defaults to `\"\"`.",
                    "type": "string"
                  },
                  "id": {
                    "description": "(String) The ID of this resource. ID of the global variable to use. This is actually only used (and required) in the case of using a variable of type `global`.",
                    "type": "string"
                  },
                  "name": {
                    "description": "(String) Name of Datadog synthetics test. Name of the variable.",
                    "type": "string"
                  },
                  "pattern": {
                    "description": "(String) Pattern of the variable. Defaults to \"\". Pattern of the variable. Defaults to `\"\"`.",
                    "type": "string"
                  },
                  "secure": {
                    "description": "(Boolean) Determines whether or not the extracted value will be obfuscated. Determines whether or not the browser test variable is obfuscated. Can only be used with a browser variable of type `text`",
                    "type": "boolean"
                  },
                  "type": {
                    "description": "(String) Synthetics test type. Valid values are api, browser. Type of browser test variable. Valid values are `element`, `email`, `global`, `javascript`, `text`.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "configVariable": {
              "description": "(Block List) Variables used for the test configuration. Multiple config_variable blocks are allowed with the structure below. (see below for nested schema) Variables used for the test configuration. Multiple `config_variable` blocks are allowed with the structure below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "example": {
                    "description": "(String) Example of the extracted variable. Defaults to \"\". Example for the variable. This value is not returned by the api when `secure = true`.",
                    "type": "string"
                  },
                  "id": {
                    "description": "(String) The ID of this resource. When type = `global`, ID of the global variable to use.",
                    "type": "string"
                  },
                  "name": {
                    "description": "(String) Name of Datadog synthetics test. Name of the variable.",
                    "type": "string"
                  },
                  "pattern": {
                    "description": "(String) Pattern of the variable. Defaults to \"\". Pattern of the variable. This value is not returned by the api when `secure = true`.",
                    "type": "string"
                  },
                  "secure": {
                    "description": "(Boolean) Determines whether or not the extracted value will be obfuscated. Whether the value of this variable will be obfuscated in test results. Defaults to `false`.",
                    "type": "boolean"
                  },
                  "type": {
                    "description": "(String) Synthetics test type. Valid values are api, browser. Type of test configuration variable. Valid values are `global`, `text`.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "deviceIds": {
              "description": "(List of String) Required if type = \"browser\". Array with the different device IDs used to run the test. Valid values are laptop_large, tablet, mobile_small, chrome.laptop_large, chrome.tablet, chrome.mobile_small, firefox.laptop_large, firefox.tablet, firefox.mobile_small, edge.laptop_large, edge.tablet, edge.mobile_small. Required if `type = \"browser\"`. Array with the different device IDs used to run the test. Valid values are `laptop_large`, `tablet`, `mobile_small`, `chrome.laptop_large`, `chrome.tablet`, `chrome.mobile_small`, `firefox.laptop_large`, `firefox.tablet`, `firefox.mobile_small`, `edge.laptop_large`, `edge.tablet`, `edge.mobile_small`.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "locations": {
              "description": "(Set of String) Array of locations used to run the test. Refer to the Datadog Synthetics location data source to retrieve the list of locations. Array of locations used to run the test. Refer to [the Datadog Synthetics location data source](https://registry.io/providers/DataDog/datadog/latest/docs/data-sources/synthetics_locations) to retrieve the list of locations.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-kubernetes-list-type": "set"
            },
            "message": {
              "description": "(String) A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by using the same @username notation as events. Defaults to \"\". A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by using the same `@username` notation as events. Defaults to `\"\"`.",
              "type": "string"
            },
            "name": {
              "description": "(String) Name of Datadog synthetics test. Name of Datadog synthetics test.",
              "type": "string"
            },
            "optionsList": {
              "description": "(Block List, Max: 1) (see below for nested schema)",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "acceptSelfSigned": {
                    "description": "(Boolean) For SSL test, whether or not the test should allow self signed certificates. For SSL test, whether or not the test should allow self signed certificates.",
                    "type": "boolean"
                  },
                  "allowInsecure": {
                    "description": "(Boolean) Allows loading insecure content for an HTTP request in an API test or in a multistep API test step. Allows loading insecure content for an HTTP request in an API test or in a multistep API test step.",
                    "type": "boolean"
                  },
                  "checkCertificateRevocation": {
                    "description": "(Boolean) For SSL test, whether or not the test should fail on revoked certificate in stapled OCSP. For SSL test, whether or not the test should fail on revoked certificate in stapled OCSP.",
                    "type": "boolean"
                  },
                  "ci": {
                    "description": "(Block List, Max: 1) CI/CD options for a Synthetic test. (see below for nested schema) CI/CD options for a Synthetic test.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "executionRule": {
                          "description": "(String) Execution rule for a Synthetics test. Valid values are blocking, non_blocking, skipped. Execution rule for a Synthetics test. Valid values are `blocking`, `non_blocking`, `skipped`.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "disableCors": {
                    "description": "Origin Resource Sharing for browser tests. Disable Cross-Origin Resource Sharing for browser tests.",
                    "type": "boolean"
                  },
                  "disableCsp": {
                    "description": "(Boolean) Disable Content Security Policy for browser tests. Disable Content Security Policy for browser tests.",
                    "type": "boolean"
                  },
                  "followRedirects": {
                    "description": "(Boolean) Determines whether or not the API HTTP test should follow redirects. Determines whether or not the API HTTP test should follow redirects.",
                    "type": "boolean"
                  },
                  "httpVersion": {
                    "description": "(String) HTTP version to use for a Synthetics API test. Valid values are http1, http2, any. HTTP version to use for a Synthetics API test. Valid values are `http1`, `http2`, `any`.",
                    "type": "string"
                  },
                  "ignoreServerCertificateError": {
                    "description": "(Boolean) Ignore server certificate error for browser tests. Ignore server certificate error for browser tests.",
                    "type": "boolean"
                  },
                  "initialNavigationTimeout": {
                    "description": "(Number) Timeout before declaring the initial step as failed (in seconds) for browser tests. Timeout before declaring the initial step as failed (in seconds) for browser tests.",
                    "type": "number"
                  },
                  "minFailureDuration": {
                    "description": "(Number) Minimum amount of time in failure required to trigger an alert (in seconds). Default is 0. Minimum amount of time in failure required to trigger an alert (in seconds). Default is `0`.",
                    "type": "number"
                  },
                  "minLocationFailed": {
                    "description": "(Number) Minimum number of locations in failure required to trigger an alert. Defaults to 1. Minimum number of locations in failure required to trigger an alert. Defaults to `1`.",
                    "type": "number"
                  },
                  "monitorName": {
                    "description": "(String) The monitor name is used for the alert title as well as for all monitor dashboard widgets and SLOs. The monitor name is used for the alert title as well as for all monitor dashboard widgets and SLOs.",
                    "type": "string"
                  },
                  "monitorOptions": {
                    "description": "(Block List, Max: 1) (see below for nested schema)",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "renotifyInterval": {
                          "description": "(Number) Specify a renotification frequency in minutes. Values available by default are 0, 10, 20, 30, 40, 50, 60, 90, 120, 180, 240, 300, 360, 720, 1440. Defaults to 0. Specify a renotification frequency in minutes. Values available by default are `0`, `10`, `20`, `30`, `40`, `50`, `60`, `90`, `120`, `180`, `240`, `300`, `360`, `720`, `1440`. Defaults to `0`.",
                          "type": "number"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "monitorPriority": {
                    "description": "(Number)",
                    "type": "number"
                  },
                  "noScreenshot": {
                    "description": "(Boolean) Prevents saving screenshots of the step. Prevents saving screenshots of the steps.",
                    "type": "boolean"
                  },
                  "restrictedRoles": {
                    "description": "(Set of String) A list of role identifiers pulled from the Roles API to restrict read and write access. A list of role identifiers pulled from the Roles API to restrict read and write access.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "x-kubernetes-list-type": "set"
                  },
                  "retry": {
                    "description": "(Block List, Max: 1) (see below for nested schema)",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "count": {
                          "description": "(Number) Number of retries needed to consider a location as failed before sending a notification alert. Defaults to 0. Number of retries needed to consider a location as failed before sending a notification alert. Defaults to `0`.",
                          "type": "number"
                        },
                        "interval": {
                          "description": "(Number) Interval between a failed test and the next retry in milliseconds. Defaults to 300. Interval between a failed test and the next retry in milliseconds. Defaults to `300`.",
                          "type": "number"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "rumSettings": {
                    "description": "(Block List, Max: 1) The RUM data collection settings for the Synthetic browser test. (see below for nested schema) The RUM data collection settings for the Synthetic browser test.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "scheduling": {
                    "description": "(Block List, Max: 1) Object containing timeframes and timezone used for advanced scheduling. (see below for nested schema) Object containing timeframes and timezone used for advanced scheduling.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "timeframes": {
                          "description": "(Block Set, Min: 1) Array containing objects describing the scheduling pattern to apply to each day. (see below for nested schema) Array containing objects describing the scheduling pattern to apply to each day.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "day": {
                                "description": "(Number) Number representing the day of the week Number representing the day of the week",
                                "type": "number"
                              },
                              "from": {
                                "description": "(String) The hour of the day on which scheduling starts. The hour of the day on which scheduling starts.",
                                "type": "string"
                              },
                              "to": {
                                "description": "(String) The hour of the day on which scheduling ends. The hour of the day on which scheduling ends.",
                                "type": "string"
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "timezone": {
                          "description": "(String) Timezone in which the timeframe is based. Timezone in which the timeframe is based.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "tickEvery": {
                    "description": "(Number) How often the test should run (in seconds). How often the test should run (in seconds).",
                    "type": "number"
                  }
                },
                "additionalProperties": false
              }
            },
            "requestBasicauth": {
              "description": "(Block List, Max: 1) The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below. (see below for nested schema) The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "accessTokenUrl": {
                    "description": "client or oauth-rop authentication. Access token url for `oauth-client` or `oauth-rop` authentication.",
                    "type": "string"
                  },
                  "audience": {
                    "description": "client or oauth-rop authentication. Defaults to \"\". Audience for `oauth-client` or `oauth-rop` authentication. Defaults to `\"\"`.",
                    "type": "string"
                  },
                  "clientId": {
                    "description": "client or oauth-rop authentication. Client ID for `oauth-client` or `oauth-rop` authentication.",
                    "type": "string"
                  },
                  "domain": {
                    "description": "(String) Domain for ntlm authentication. Domain for `ntlm` authentication.",
                    "type": "string"
                  },
                  "region": {
                    "description": "(String) Region for SIGV4 authentication. Region for `SIGV4` authentication.",
                    "type": "string"
                  },
                  "resource": {
                    "description": "client or oauth-rop authentication. Defaults to \"\". Resource for `oauth-client` or `oauth-rop` authentication. Defaults to `\"\"`.",
                    "type": "string"
                  },
                  "scope": {
                    "description": "client or oauth-rop authentication. Defaults to \"\". Scope for `oauth-client` or `oauth-rop` authentication. Defaults to `\"\"`.",
                    "type": "string"
                  },
                  "serviceName": {
                    "description": "(String) Service name for SIGV4 authentication. Service name for `SIGV4` authentication.",
                    "type": "string"
                  },
                  "sessionToken": {
                    "description": "(String) Session token for SIGV4 authentication. Session token for `SIGV4` authentication.",
                    "type": "string"
                  },
                  "tokenApiAuthentication": {
                    "description": "client or oauth-rop authentication. Valid values are header, body. Token API Authentication for `oauth-client` or `oauth-rop` authentication. Valid values are `header`, `body`.",
                    "type": "string"
                  },
                  "type": {
                    "description": "(String) Synthetics test type. Valid values are api, browser. Type of basic authentication to use when performing the test. Defaults to `\"web\"`.",
                    "type": "string"
                  },
                  "username": {
                    "description": "(String) Username for authentication. Username for authentication.",
                    "type": "string"
                  },
                  "workstation": {
                    "description": "(String) Workstation for ntlm authentication. Workstation for `ntlm` authentication.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "requestClientCertificate": {
              "description": "(Block List, Max: 1) Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below. (see below for nested schema) Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "cert": {
                    "description": "(Block List, Min: 1, Max: 1) (see below for nested schema)",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "filename": {
                          "description": "(String) File name for the certificate. File name for the certificate.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "key": {
                    "description": "(Block List, Min: 1, Max: 1) (see below for nested schema)",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "filename": {
                          "description": "(String) File name for the certificate. File name for the certificate.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "requestDefinition": {
              "description": "(Block List, Max: 1) Required if type = \"api\". The synthetics test request. (see below for nested schema) Required if `type = \"api\"`. The synthetics test request.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "body": {
                    "description": "(String) The request body. The request body.",
                    "type": "string"
                  },
                  "bodyType": {
                    "description": "www-form-urlencoded, graphql. Type of the request body. Valid values are `text/plain`, `application/json`, `text/xml`, `text/html`, `application/x-www-form-urlencoded`, `graphql`.",
                    "type": "string"
                  },
                  "callType": {
                    "description": "(String) The type of gRPC call to perform. Valid values are healthcheck, unary. The type of gRPC call to perform. Valid values are `healthcheck`, `unary`.",
                    "type": "string"
                  },
                  "certificateDomains": {
                    "description": "(List of String) By default, the client certificate is applied on the domain of the starting URL for browser tests. If you want your client certificate to be applied on other domains instead, add them in certificate_domains. By default, the client certificate is applied on the domain of the starting URL for browser tests. If you want your client certificate to be applied on other domains instead, add them in `certificate_domains`.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "dnsServer": {
                    "description": "(String) DNS server to use for DNS tests (subtype = \"dns\"). DNS server to use for DNS tests (`subtype = \"dns\"`).",
                    "type": "string"
                  },
                  "dnsServerPort": {
                    "description": "(Number) DNS server port to use for DNS tests. DNS server port to use for DNS tests.",
                    "type": "number"
                  },
                  "host": {
                    "description": "(String) Host name to perform the test with. Host name to perform the test with.",
                    "type": "string"
                  },
                  "message": {
                    "description": "(String) A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by using the same @username notation as events. Defaults to \"\". For UDP and websocket tests, message to send with the request.",
                    "type": "string"
                  },
                  "method": {
                    "description": "(String) Either the HTTP method/verb to use or a gRPC method available on the service set in the service field. Required if subtype is HTTP or if subtype is grpc and callType is unary. Either the HTTP method/verb to use or a gRPC method available on the service set in the `service` field. Required if `subtype` is `HTTP` or if `subtype` is `grpc` and `callType` is `unary`.",
                    "type": "string"
                  },
                  "noSavingResponseBody": {
                    "description": "(Boolean) Determines whether or not to save the response body. Determines whether or not to save the response body.",
                    "type": "boolean"
                  },
                  "numberOfPackets": {
                    "description": "(Number) Number of pings to use per test for ICMP tests (subtype = \"icmp\") between 0 and 10. Number of pings to use per test for ICMP tests (`subtype = \"icmp\"`) between 0 and 10.",
                    "type": "number"
                  },
                  "persistCookies": {
                    "description": "(Boolean) Persist cookies across redirects. Persist cookies across redirects.",
                    "type": "boolean"
                  },
                  "plainProtoFile": {
                    "description": "(String) The content of a proto file as a string. The content of a proto file as a string.",
                    "type": "string"
                  },
                  "port": {
                    "description": "(Number) Port to use when performing the test. Port to use when performing the test.",
                    "type": "number"
                  },
                  "protoJsonDescriptor": {
                    "description": "(String, Deprecated) A protobuf JSON descriptor. Deprecated. Use plain_proto_file instead. A protobuf JSON descriptor. **Deprecated.** Use `plain_proto_file` instead.",
                    "type": "string"
                  },
                  "servername": {
                    "description": "(String) For SSL tests, it specifies on which server you want to initiate the TLS handshake, allowing the server to present one of multiple possible certificates on the same IP address and TCP port number. For SSL tests, it specifies on which server you want to initiate the TLS handshake, allowing the server to present one of multiple possible certificates on the same IP address and TCP port number.",
                    "type": "string"
                  },
                  "service": {
                    "description": "(String) The gRPC service on which you want to perform the gRPC call. The gRPC service on which you want to perform the gRPC call.",
                    "type": "string"
                  },
                  "shouldTrackHops": {
                    "description": "(Boolean) This will turn on a traceroute probe to discover all gateways along the path to the host destination. For ICMP tests (subtype = \"icmp\"). This will turn on a traceroute probe to discover all gateways along the path to the host destination. For ICMP tests (`subtype = \"icmp\"`).",
                    "type": "boolean"
                  },
                  "timeout": {
                    "description": "(Number) Timeout in seconds for the test. Defaults to 60. Timeout in seconds for the test. Defaults to `60`.",
                    "type": "number"
                  },
                  "url": {
                    "description": "(String) The URL to send the request to. The URL to send the request to.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "requestHeaders": {
              "description": "(Map of String) Header name and value map. Header name and value map.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "requestMetadata": {
              "description": "(Map of String) Metadata to include when performing the gRPC test. Metadata to include when performing the gRPC test.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "requestProxy": {
              "description": "(Block List, Max: 1) The proxy to perform the test. (see below for nested schema) The proxy to perform the test.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "headers": {
                    "description": "(Map of String) Header name and value map. Header name and value map.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "x-kubernetes-map-type": "granular"
                  },
                  "url": {
                    "description": "(String) The URL to send the request to. URL of the proxy to perform the test.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "requestQuery": {
              "description": "(Map of String) Query arguments name and value map. Query arguments name and value map.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "setCookie": {
              "description": "Cookie syntax. Cookies to be used for a browser test request, using the [Set-Cookie](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie) syntax.",
              "type": "string"
            },
            "status": {
              "description": "(String) Define whether you want to start (live) or pause (paused) a Synthetic test. Valid values are live, paused. Define whether you want to start (`live`) or pause (`paused`) a Synthetic test. Valid values are `live`, `paused`.",
              "type": "string"
            },
            "subtype": {
              "description": "(String) The subtype of the Synthetic API test. Defaults to http. Valid values are http, ssl, tcp, dns, multi, icmp, udp, websocket, grpc. The subtype of the Synthetic API test. Defaults to `http`. Valid values are `http`, `ssl`, `tcp`, `dns`, `multi`, `icmp`, `udp`, `websocket`, `grpc`.",
              "type": "string"
            },
            "tags": {
              "description": "(List of String) A list of tags to associate with your synthetics test. This can help you categorize and filter tests in the manage synthetics page of the UI. Default is an empty list ([]). A list of tags to associate with your synthetics test. This can help you categorize and filter tests in the manage synthetics page of the UI. Default is an empty list (`[]`).",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "type": {
              "description": "(String) Synthetics test type. Valid values are api, browser. Synthetics test type. Valid values are `api`, `browser`.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "managementPolicies": {
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out through a Crossplane feature flag. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers can take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.",
          "type": "object",
          "default": {
            "name": "default"
          },
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "type": "object",
              "properties": {
                "resolution": {
                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                  "type": "string",
                  "default": "Required",
                  "enum": [
                    "Required",
                    "Optional"
                  ]
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                  "type": "string",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "publishConnectionDetailsTo": {
          "description": "PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "configRef": {
              "description": "SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.",
              "type": "object",
              "default": {
                "name": "default"
              },
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "metadata": {
              "description": "Metadata is the metadata for connection secret.",
              "type": "object",
              "properties": {
                "annotations": {
                  "description": "Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.annotations\". - It is up to Secret Store implementation for others store types.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "labels": {
                  "description": "Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.labels\". - It is up to Secret Store implementation for others store types.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "type": {
                  "description": "Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "name": {
              "description": "Name is the name of the connection secret.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.",
          "type": "object",
          "required": [
            "name",
            "namespace"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false,
      "x-kubernetes-validations": [
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.locations) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.locations))",
          "message": "spec.forProvider.locations is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.name))",
          "message": "spec.forProvider.name is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.status) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.status))",
          "message": "spec.forProvider.status is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.type))",
          "message": "spec.forProvider.type is a required parameter"
        }
      ]
    },
    "status": {
      "description": "TestStatus defines the observed state of Test.",
      "type": "object",
      "properties": {
        "atProvider": {
          "type": "object",
          "properties": {
            "apiStep": {
              "description": "(Block List) Steps for multistep api tests (see below for nested schema) Steps for multistep api tests",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "allowFailure": {
                    "description": "(Boolean) Determines whether or not to continue with test if this step fails. Determines whether or not to continue with test if this step fails.",
                    "type": "boolean"
                  },
                  "assertion": {
                    "description": "(Block List) Assertions used for the test. Multiple assertion blocks are allowed with the structure below. (see below for nested schema) Assertions used for the test. Multiple `assertion` blocks are allowed with the structure below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "operator": {
                          "description": "(String) Assertion operator. Note Only some combinations of type and operator are valid (please refer to Datadog documentation). Assertion operator. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)).",
                          "type": "string"
                        },
                        "property": {
                          "description": "(String) If assertion type is header, this is the header name. If assertion type is `header`, this is the header name.",
                          "type": "string"
                        },
                        "target": {
                          "description": "(String) Expected value. Depends on the assertion type, refer to Datadog documentation for details. Expected value. Depends on the assertion type, refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test) for details.",
                          "type": "string"
                        },
                        "targetjsonpath": {
                          "description": "(Block List, Max: 1) Expected structure if operator is validatesJSONPath. Exactly one nested block is allowed with the structure below. (see below for nested schema) Expected structure if `operator` is `validatesJSONPath`. Exactly one nested block is allowed with the structure below.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "jsonpath": {
                                "description": "(String) The JSON path to assert. The JSON path to assert.",
                                "type": "string"
                              },
                              "operator": {
                                "description": "(String) Assertion operator. Note Only some combinations of type and operator are valid (please refer to Datadog documentation). The specific operator to use on the path.",
                                "type": "string"
                              },
                              "targetvalue": {
                                "description": "(String) Expected matching value. Expected matching value.",
                                "type": "string"
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "targetxpath": {
                          "description": "(Block List, Max: 1) Expected structure if operator is validatesXPath. Exactly one nested block is allowed with the structure below. (see below for nested schema) Expected structure if `operator` is `validatesXPath`. Exactly one nested block is allowed with the structure below.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "operator": {
                                "description": "(String) Assertion operator. Note Only some combinations of type and operator are valid (please refer to Datadog documentation). The specific operator to use on the path.",
                                "type": "string"
                              },
                              "targetvalue": {
                                "description": "(String) Expected matching value. Expected matching value.",
                                "type": "string"
                              },
                              "xpath": {
                                "description": "(String) The xpath to assert. The xpath to assert.",
                                "type": "string"
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "timingsScope": {
                          "description": "(String) Timings scope for response time assertions. Valid values are all, withoutDNS. Timings scope for response time assertions. Valid values are `all`, `withoutDNS`.",
                          "type": "string"
                        },
                        "type": {
                          "description": "(String) Synthetics test type. Valid values are api, browser. Type of assertion. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)). Valid values are `body`, `header`, `statusCode`, `certificate`, `responseTime`, `property`, `recordEvery`, `recordSome`, `tlsVersion`, `minTlsVersion`, `latency`, `packetLossPercentage`, `packetsReceived`, `networkHop`, `receivedMessage`, `grpcHealthcheckStatus`, `grpcMetadata`, `grpcProto`, `connection`.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "extractedValue": {
                    "description": "(Block List) Values to parse and save as variables from the response. (see below for nested schema) Values to parse and save as variables from the response.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "field": {
                          "description": "(String) When type is http_header, name of the header to use to extract the value. When type is `http_header`, name of the header to use to extract the value.",
                          "type": "string"
                        },
                        "name": {
                          "description": "(String) Name of Datadog synthetics test.",
                          "type": "string"
                        },
                        "parser": {
                          "description": "(Block List, Min: 1, Max: 1) (see below for nested schema)",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "type": {
                                "description": "(String) Synthetics test type. Valid values are api, browser. Type of parser for a Synthetics global variable from a synthetics test. Valid values are `raw`, `json_path`, `regex`, `x_path`.",
                                "type": "string"
                              },
                              "value": {
                                "description": "(String) Regex or JSON path used for the parser. Not used with type raw. Regex or JSON path used for the parser. Not used with type `raw`.",
                                "type": "string"
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "secure": {
                          "description": "(Boolean) Determines whether or not the extracted value will be obfuscated. Determines whether or not the extracted value will be obfuscated.",
                          "type": "boolean"
                        },
                        "type": {
                          "description": "(String) Synthetics test type. Valid values are api, browser. Property of the Synthetics Test Response to use for the variable. Valid values are `http_body`, `http_header`, `local_variable`.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "isCritical": {
                    "description": "(Boolean) Determines whether or not to consider the entire test as failed if this step fails. Can be used only if allow_failure is true. Determines whether or not to consider the entire test as failed if this step fails. Can be used only if `allow_failure` is `true`.",
                    "type": "boolean"
                  },
                  "name": {
                    "description": "(String) Name of Datadog synthetics test. The name of the step.",
                    "type": "string"
                  },
                  "requestBasicauth": {
                    "description": "(Block List, Max: 1) The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below. (see below for nested schema) The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "accessTokenUrl": {
                          "description": "client or oauth-rop authentication. Access token url for `oauth-client` or `oauth-rop` authentication.",
                          "type": "string"
                        },
                        "audience": {
                          "description": "client or oauth-rop authentication. Defaults to \"\". Audience for `oauth-client` or `oauth-rop` authentication. Defaults to `\"\"`.",
                          "type": "string"
                        },
                        "clientId": {
                          "description": "client or oauth-rop authentication. Client ID for `oauth-client` or `oauth-rop` authentication.",
                          "type": "string"
                        },
                        "domain": {
                          "description": "(String) Domain for ntlm authentication. Domain for `ntlm` authentication.",
                          "type": "string"
                        },
                        "region": {
                          "description": "(String) Region for SIGV4 authentication. Region for `SIGV4` authentication.",
                          "type": "string"
                        },
                        "resource": {
                          "description": "client or oauth-rop authentication. Defaults to \"\". Resource for `oauth-client` or `oauth-rop` authentication. Defaults to `\"\"`.",
                          "type": "string"
                        },
                        "scope": {
                          "description": "client or oauth-rop authentication. Defaults to \"\". Scope for `oauth-client` or `oauth-rop` authentication. Defaults to `\"\"`.",
                          "type": "string"
                        },
                        "serviceName": {
                          "description": "(String) Service name for SIGV4 authentication. Service name for `SIGV4` authentication.",
                          "type": "string"
                        },
                        "sessionToken": {
                          "description": "(String) Session token for SIGV4 authentication. Session token for `SIGV4` authentication.",
                          "type": "string"
                        },
                        "tokenApiAuthentication": {
                          "description": "client or oauth-rop authentication. Valid values are header, body. Token API Authentication for `oauth-client` or `oauth-rop` authentication. Valid values are `header`, `body`.",
                          "type": "string"
                        },
                        "type": {
                          "description": "(String) Synthetics test type. Valid values are api, browser. Type of basic authentication to use when performing the test. Defaults to `\"web\"`.",
                          "type": "string"
                        },
                        "username": {
                          "description": "(String) Username for authentication. Username for authentication.",
                          "type": "string"
                        },
                        "workstation": {
                          "description": "(String) Workstation for ntlm authentication. Workstation for `ntlm` authentication.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "requestClientCertificate": {
                    "description": "(Block List, Max: 1) Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below. (see below for nested schema) Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "cert": {
                          "description": "(Block List, Min: 1, Max: 1) (see below for nested schema)",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "filename": {
                                "description": "(String) File name for the certificate. File name for the certificate.",
                                "type": "string"
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "key": {
                          "description": "(Block List, Min: 1, Max: 1) (see below for nested schema)",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "filename": {
                                "description": "(String) File name for the certificate. File name for the certificate.",
                                "type": "string"
                              }
                            },
                            "additionalProperties": false
                          }
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "requestDefinition": {
                    "description": "(Block List, Max: 1) Required if type = \"api\". The synthetics test request. (see below for nested schema) The request for the api step.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "allowInsecure": {
                          "description": "(Boolean) Allows loading insecure content for an HTTP request in an API test or in a multistep API test step. Allows loading insecure content for an HTTP request in an API test or in a multistep API test step.",
                          "type": "boolean"
                        },
                        "body": {
                          "description": "(String) The request body. The request body.",
                          "type": "string"
                        },
                        "bodyType": {
                          "description": "www-form-urlencoded, graphql. Type of the request body. Valid values are `text/plain`, `application/json`, `text/xml`, `text/html`, `application/x-www-form-urlencoded`, `graphql`.",
                          "type": "string"
                        },
                        "callType": {
                          "description": "(String) The type of gRPC call to perform. Valid values are healthcheck, unary. The type of gRPC call to perform. Valid values are `healthcheck`, `unary`.",
                          "type": "string"
                        },
                        "certificateDomains": {
                          "description": "(List of String) By default, the client certificate is applied on the domain of the starting URL for browser tests. If you want your client certificate to be applied on other domains instead, add them in certificate_domains. By default, the client certificate is applied on the domain of the starting URL for browser tests. If you want your client certificate to be applied on other domains instead, add them in `certificate_domains`.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "dnsServer": {
                          "description": "(String) DNS server to use for DNS tests (subtype = \"dns\"). DNS server to use for DNS tests (`subtype = \"dns\"`).",
                          "type": "string"
                        },
                        "dnsServerPort": {
                          "description": "(Number) DNS server port to use for DNS tests. DNS server port to use for DNS tests.",
                          "type": "number"
                        },
                        "followRedirects": {
                          "description": "(Boolean) Determines whether or not the API HTTP test should follow redirects. Determines whether or not the API HTTP test should follow redirects.",
                          "type": "boolean"
                        },
                        "host": {
                          "description": "(String) Host name to perform the test with. Host name to perform the test with.",
                          "type": "string"
                        },
                        "message": {
                          "description": "(String) A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by using the same @username notation as events. Defaults to \"\". For UDP and websocket tests, message to send with the request.",
                          "type": "string"
                        },
                        "method": {
                          "description": "(String) Either the HTTP method/verb to use or a gRPC method available on the service set in the service field. Required if subtype is HTTP or if subtype is grpc and callType is unary. Either the HTTP method/verb to use or a gRPC method available on the service set in the `service` field. Required if `subtype` is `HTTP` or if `subtype` is `grpc` and `callType` is `unary`.",
                          "type": "string"
                        },
                        "noSavingResponseBody": {
                          "description": "(Boolean) Determines whether or not to save the response body. Determines whether or not to save the response body.",
                          "type": "boolean"
                        },
                        "numberOfPackets": {
                          "description": "(Number) Number of pings to use per test for ICMP tests (subtype = \"icmp\") between 0 and 10. Number of pings to use per test for ICMP tests (`subtype = \"icmp\"`) between 0 and 10.",
                          "type": "number"
                        },
                        "persistCookies": {
                          "description": "(Boolean) Persist cookies across redirects. Persist cookies across redirects.",
                          "type": "boolean"
                        },
                        "plainProtoFile": {
                          "description": "(String) The content of a proto file as a string. The content of a proto file as a string.",
                          "type": "string"
                        },
                        "port": {
                          "description": "(Number) Port to use when performing the test. Port to use when performing the test.",
                          "type": "number"
                        },
                        "protoJsonDescriptor": {
                          "description": "(String, Deprecated) A protobuf JSON descriptor. Deprecated. Use plain_proto_file instead. A protobuf JSON descriptor. **Deprecated.** Use `plain_proto_file` instead.",
                          "type": "string"
                        },
                        "servername": {
                          "description": "(String) For SSL tests, it specifies on which server you want to initiate the TLS handshake, allowing the server to present one of multiple possible certificates on the same IP address and TCP port number. For SSL tests, it specifies on which server you want to initiate the TLS handshake, allowing the server to present one of multiple possible certificates on the same IP address and TCP port number.",
                          "type": "string"
                        },
                        "service": {
                          "description": "(String) The gRPC service on which you want to perform the gRPC call. The gRPC service on which you want to perform the gRPC call.",
                          "type": "string"
                        },
                        "shouldTrackHops": {
                          "description": "(Boolean) This will turn on a traceroute probe to discover all gateways along the path to the host destination. For ICMP tests (subtype = \"icmp\"). This will turn on a traceroute probe to discover all gateways along the path to the host destination. For ICMP tests (`subtype = \"icmp\"`).",
                          "type": "boolean"
                        },
                        "timeout": {
                          "description": "(Number) Timeout in seconds for the test. Defaults to 60. Timeout in seconds for the test. Defaults to `60`.",
                          "type": "number"
                        },
                        "url": {
                          "description": "(String) The URL to send the request to. The URL to send the request to.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "requestHeaders": {
                    "description": "(Map of String) Header name and value map. Header name and value map.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "x-kubernetes-map-type": "granular"
                  },
                  "requestProxy": {
                    "description": "(Block List, Max: 1) The proxy to perform the test. (see below for nested schema) The proxy to perform the test.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "headers": {
                          "description": "(Map of String) Header name and value map. Header name and value map.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          },
                          "x-kubernetes-map-type": "granular"
                        },
                        "url": {
                          "description": "(String) The URL to send the request to. URL of the proxy to perform the test.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "requestQuery": {
                    "description": "(Map of String) Query arguments name and value map. Query arguments name and value map.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "x-kubernetes-map-type": "granular"
                  },
                  "retry": {
                    "description": "(Block List, Max: 1) (see below for nested schema)",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "count": {
                          "description": "(Number) Number of retries needed to consider a location as failed before sending a notification alert. Defaults to 0. Number of retries needed to consider a location as failed before sending a notification alert. Defaults to `0`.",
                          "type": "number"
                        },
                        "interval": {
                          "description": "(Number) Interval between a failed test and the next retry in milliseconds. Defaults to 300. Interval between a failed test and the next retry in milliseconds. Defaults to `300`.",
                          "type": "number"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "subtype": {
                    "description": "(String) The subtype of the Synthetic API test. Defaults to http. Valid values are http, ssl, tcp, dns, multi, icmp, udp, websocket, grpc. The subtype of the Synthetic multistep API test step. Valid values are `http`, `grpc`. Defaults to `\"http\"`.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "assertion": {
              "description": "(Block List) Assertions used for the test. Multiple assertion blocks are allowed with the structure below. (see below for nested schema) Assertions used for the test. Multiple `assertion` blocks are allowed with the structure below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "operator": {
                    "description": "(String) Assertion operator. Note Only some combinations of type and operator are valid (please refer to Datadog documentation). Assertion operator. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)).",
                    "type": "string"
                  },
                  "property": {
                    "description": "(String) If assertion type is header, this is the header name. If assertion type is `header`, this is the header name.",
                    "type": "string"
                  },
                  "target": {
                    "description": "(String) Expected value. Depends on the assertion type, refer to Datadog documentation for details. Expected value. Depends on the assertion type, refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test) for details.",
                    "type": "string"
                  },
                  "targetjsonpath": {
                    "description": "(Block List, Max: 1) Expected structure if operator is validatesJSONPath. Exactly one nested block is allowed with the structure below. (see below for nested schema) Expected structure if `operator` is `validatesJSONPath`. Exactly one nested block is allowed with the structure below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "jsonpath": {
                          "description": "(String) The JSON path to assert. The JSON path to assert.",
                          "type": "string"
                        },
                        "operator": {
                          "description": "(String) Assertion operator. Note Only some combinations of type and operator are valid (please refer to Datadog documentation). The specific operator to use on the path.",
                          "type": "string"
                        },
                        "targetvalue": {
                          "description": "(String) Expected matching value. Expected matching value.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "targetxpath": {
                    "description": "(Block List, Max: 1) Expected structure if operator is validatesXPath. Exactly one nested block is allowed with the structure below. (see below for nested schema) Expected structure if `operator` is `validatesXPath`. Exactly one nested block is allowed with the structure below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "operator": {
                          "description": "(String) Assertion operator. Note Only some combinations of type and operator are valid (please refer to Datadog documentation). The specific operator to use on the path.",
                          "type": "string"
                        },
                        "targetvalue": {
                          "description": "(String) Expected matching value. Expected matching value.",
                          "type": "string"
                        },
                        "xpath": {
                          "description": "(String) The xpath to assert. The xpath to assert.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "timingsScope": {
                    "description": "(String) Timings scope for response time assertions. Valid values are all, withoutDNS. Timings scope for response time assertions. Valid values are `all`, `withoutDNS`.",
                    "type": "string"
                  },
                  "type": {
                    "description": "(String) Synthetics test type. Valid values are api, browser. Type of assertion. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)). Valid values are `body`, `header`, `statusCode`, `certificate`, `responseTime`, `property`, `recordEvery`, `recordSome`, `tlsVersion`, `minTlsVersion`, `latency`, `packetLossPercentage`, `packetsReceived`, `networkHop`, `receivedMessage`, `grpcHealthcheckStatus`, `grpcMetadata`, `grpcProto`, `connection`.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "browserStep": {
              "description": "(Block List) Steps for browser tests. (see below for nested schema) Steps for browser tests.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "allowFailure": {
                    "description": "(Boolean) Determines whether or not to continue with test if this step fails. Determines if the step should be allowed to fail.",
                    "type": "boolean"
                  },
                  "forceElementUpdate": {
                    "description": "(Boolean) Force update of the \"element\" parameter for the step Force update of the \"element\" parameter for the step",
                    "type": "boolean"
                  },
                  "isCritical": {
                    "description": "(Boolean) Determines whether or not to consider the entire test as failed if this step fails. Can be used only if allow_failure is true. Determines whether or not to consider the entire test as failed if this step fails. Can be used only if `allow_failure` is `true`.",
                    "type": "boolean"
                  },
                  "name": {
                    "description": "(String) Name of Datadog synthetics test. Name of the step.",
                    "type": "string"
                  },
                  "noScreenshot": {
                    "description": "(Boolean) Prevents saving screenshots of the step. Prevents saving screenshots of the step.",
                    "type": "boolean"
                  },
                  "params": {
                    "description": "(Block List, Min: 1, Max: 1) Parameters for the step. (see below for nested schema) Parameters for the step.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "attribute": {
                          "description": "(String) Name of the attribute to use for an \"assert attribute\" step. Name of the attribute to use for an \"assert attribute\" step.",
                          "type": "string"
                        },
                        "check": {
                          "description": "(String) Check type to use for an assertion step. Valid values are equals, notEquals, contains, notContains, startsWith, notStartsWith, greater, lower, greaterEquals, lowerEquals, matchRegex, between, isEmpty, notIsEmpty. Check type to use for an assertion step. Valid values are `equals`, `notEquals`, `contains`, `notContains`, `startsWith`, `notStartsWith`, `greater`, `lower`, `greaterEquals`, `lowerEquals`, `matchRegex`, `between`, `isEmpty`, `notIsEmpty`.",
                          "type": "string"
                        },
                        "clickType": {
                          "description": "(String) Type of click to use for a \"click\" step. Type of click to use for a \"click\" step.",
                          "type": "string"
                        },
                        "code": {
                          "description": "(String) Javascript code to use for the step. Javascript code to use for the step.",
                          "type": "string"
                        },
                        "delay": {
                          "description": "(Number) Delay between each key stroke for a \"type test\" step. Delay between each key stroke for a \"type test\" step.",
                          "type": "number"
                        },
                        "element": {
                          "description": "(String) Element to use for the step, json encoded string. Element to use for the step, json encoded string.",
                          "type": "string"
                        },
                        "elementUserLocator": {
                          "description": "(Block List, Max: 1) Custom user selector to use for the step. (see below for nested schema) Custom user selector to use for the step.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "failTestOnCannotLocate": {
                                "description": "(Boolean) Defaults to false. Defaults to `false`.",
                                "type": "boolean"
                              },
                              "value": {
                                "description": "(String) Regex or JSON path used for the parser. Not used with type raw.",
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "description": "(String) Synthetics test type. Valid values are api, browser. Defaults to `\"css\"`.",
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "(String) Regex or JSON path used for the parser. Not used with type raw.",
                                      "type": "string"
                                    }
                                  },
                                  "additionalProperties": false
                                }
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "email": {
                          "description": "(String) Details of the email for an \"assert email\" step. Details of the email for an \"assert email\" step.",
                          "type": "string"
                        },
                        "file": {
                          "description": "(String) JSON encoded string used for an \"assert download\" step. Refer to the examples for a usage example showing the schema. JSON encoded string used for an \"assert download\" step. Refer to the examples for a usage example showing the schema.",
                          "type": "string"
                        },
                        "files": {
                          "description": "(String) Details of the files for an \"upload files\" step, json encoded string. Details of the files for an \"upload files\" step, json encoded string.",
                          "type": "string"
                        },
                        "modifiers": {
                          "description": "(List of String) Modifier to use for a \"press key\" step. Modifier to use for a \"press key\" step.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "playingTabId": {
                          "description": "(String) ID of the tab to play the subtest. ID of the tab to play the subtest.",
                          "type": "string"
                        },
                        "request": {
                          "description": "(String) Request for an API step. Request for an API step.",
                          "type": "string"
                        },
                        "subtestPublicId": {
                          "description": "(String) ID of the Synthetics test to use as subtest. ID of the Synthetics test to use as subtest.",
                          "type": "string"
                        },
                        "value": {
                          "description": "(String) Regex or JSON path used for the parser. Not used with type raw. Value of the step.",
                          "type": "string"
                        },
                        "variable": {
                          "description": "(Block List, Max: 1) Details of the variable to extract. (see below for nested schema) Details of the variable to extract.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "example": {
                                "description": "(String) Example of the extracted variable. Defaults to \"\". Example of the extracted variable. Defaults to `\"\"`.",
                                "type": "string"
                              },
                              "name": {
                                "description": "(String) Name of Datadog synthetics test. Name of the extracted variable.",
                                "type": "string"
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "withClick": {
                          "description": "(Boolean) For \"file upload\" steps. For \"file upload\" steps.",
                          "type": "boolean"
                        },
                        "x": {
                          "description": "(Number) X coordinates for a \"scroll step\". X coordinates for a \"scroll step\".",
                          "type": "number"
                        },
                        "y": {
                          "description": "(Number) Y coordinates for a \"scroll step\". Y coordinates for a \"scroll step\".",
                          "type": "number"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "timeout": {
                    "description": "(Number) Timeout in seconds for the test. Defaults to 60. Used to override the default timeout of a step.",
                    "type": "number"
                  },
                  "type": {
                    "description": "(String) Synthetics test type. Valid values are api, browser. Type of the step. Valid values are `assertCurrentUrl`, `assertElementAttribute`, `assertElementContent`, `assertElementPresent`, `assertEmail`, `assertFileDownload`, `assertFromJavascript`, `assertPageContains`, `assertPageLacks`, `click`, `extractFromJavascript`, `extractVariable`, `goToEmailLink`, `goToUrl`, `goToUrlAndMeasureTti`, `hover`, `playSubTest`, `pressKey`, `refresh`, `runApiTest`, `scroll`, `selectOption`, `typeText`, `uploadFiles`, `wait`.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "browserVariable": {
              "description": "(Block List) Variables used for a browser test steps. Multiple variable blocks are allowed with the structure below. (see below for nested schema) Variables used for a browser test steps. Multiple `variable` blocks are allowed with the structure below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "example": {
                    "description": "(String) Example of the extracted variable. Defaults to \"\". Example for the variable. Defaults to `\"\"`.",
                    "type": "string"
                  },
                  "id": {
                    "description": "(String) The ID of this resource. ID of the global variable to use. This is actually only used (and required) in the case of using a variable of type `global`.",
                    "type": "string"
                  },
                  "name": {
                    "description": "(String) Name of Datadog synthetics test. Name of the variable.",
                    "type": "string"
                  },
                  "pattern": {
                    "description": "(String) Pattern of the variable. Defaults to \"\". Pattern of the variable. Defaults to `\"\"`.",
                    "type": "string"
                  },
                  "secure": {
                    "description": "(Boolean) Determines whether or not the extracted value will be obfuscated. Determines whether or not the browser test variable is obfuscated. Can only be used with a browser variable of type `text`",
                    "type": "boolean"
                  },
                  "type": {
                    "description": "(String) Synthetics test type. Valid values are api, browser. Type of browser test variable. Valid values are `element`, `email`, `global`, `javascript`, `text`.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "configVariable": {
              "description": "(Block List) Variables used for the test configuration. Multiple config_variable blocks are allowed with the structure below. (see below for nested schema) Variables used for the test configuration. Multiple `config_variable` blocks are allowed with the structure below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "example": {
                    "description": "(String) Example of the extracted variable. Defaults to \"\". Example for the variable. This value is not returned by the api when `secure = true`.",
                    "type": "string"
                  },
                  "id": {
                    "description": "(String) The ID of this resource. When type = `global`, ID of the global variable to use.",
                    "type": "string"
                  },
                  "name": {
                    "description": "(String) Name of Datadog synthetics test. Name of the variable.",
                    "type": "string"
                  },
                  "pattern": {
                    "description": "(String) Pattern of the variable. Defaults to \"\". Pattern of the variable. This value is not returned by the api when `secure = true`.",
                    "type": "string"
                  },
                  "secure": {
                    "description": "(Boolean) Determines whether or not the extracted value will be obfuscated. Whether the value of this variable will be obfuscated in test results. Defaults to `false`.",
                    "type": "boolean"
                  },
                  "type": {
                    "description": "(String) Synthetics test type. Valid values are api, browser. Type of test configuration variable. Valid values are `global`, `text`.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "deviceIds": {
              "description": "(List of String) Required if type = \"browser\". Array with the different device IDs used to run the test. Valid values are laptop_large, tablet, mobile_small, chrome.laptop_large, chrome.tablet, chrome.mobile_small, firefox.laptop_large, firefox.tablet, firefox.mobile_small, edge.laptop_large, edge.tablet, edge.mobile_small. Required if `type = \"browser\"`. Array with the different device IDs used to run the test. Valid values are `laptop_large`, `tablet`, `mobile_small`, `chrome.laptop_large`, `chrome.tablet`, `chrome.mobile_small`, `firefox.laptop_large`, `firefox.tablet`, `firefox.mobile_small`, `edge.laptop_large`, `edge.tablet`, `edge.mobile_small`.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "id": {
              "description": "(String) The ID of this resource.",
              "type": "string"
            },
            "locations": {
              "description": "(Set of String) Array of locations used to run the test. Refer to the Datadog Synthetics location data source to retrieve the list of locations. Array of locations used to run the test. Refer to [the Datadog Synthetics location data source](https://registry.io/providers/DataDog/datadog/latest/docs/data-sources/synthetics_locations) to retrieve the list of locations.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-kubernetes-list-type": "set"
            },
            "message": {
              "description": "(String) A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by using the same @username notation as events. Defaults to \"\". A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by using the same `@username` notation as events. Defaults to `\"\"`.",
              "type": "string"
            },
            "monitorId": {
              "description": "(Number) ID of the monitor associated with the Datadog synthetics test. ID of the monitor associated with the Datadog synthetics test.",
              "type": "number"
            },
            "name": {
              "description": "(String) Name of Datadog synthetics test. Name of Datadog synthetics test.",
              "type": "string"
            },
            "optionsList": {
              "description": "(Block List, Max: 1) (see below for nested schema)",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "acceptSelfSigned": {
                    "description": "(Boolean) For SSL test, whether or not the test should allow self signed certificates. For SSL test, whether or not the test should allow self signed certificates.",
                    "type": "boolean"
                  },
                  "allowInsecure": {
                    "description": "(Boolean) Allows loading insecure content for an HTTP request in an API test or in a multistep API test step. Allows loading insecure content for an HTTP request in an API test or in a multistep API test step.",
                    "type": "boolean"
                  },
                  "checkCertificateRevocation": {
                    "description": "(Boolean) For SSL test, whether or not the test should fail on revoked certificate in stapled OCSP. For SSL test, whether or not the test should fail on revoked certificate in stapled OCSP.",
                    "type": "boolean"
                  },
                  "ci": {
                    "description": "(Block List, Max: 1) CI/CD options for a Synthetic test. (see below for nested schema) CI/CD options for a Synthetic test.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "executionRule": {
                          "description": "(String) Execution rule for a Synthetics test. Valid values are blocking, non_blocking, skipped. Execution rule for a Synthetics test. Valid values are `blocking`, `non_blocking`, `skipped`.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "disableCors": {
                    "description": "Origin Resource Sharing for browser tests. Disable Cross-Origin Resource Sharing for browser tests.",
                    "type": "boolean"
                  },
                  "disableCsp": {
                    "description": "(Boolean) Disable Content Security Policy for browser tests. Disable Content Security Policy for browser tests.",
                    "type": "boolean"
                  },
                  "followRedirects": {
                    "description": "(Boolean) Determines whether or not the API HTTP test should follow redirects. Determines whether or not the API HTTP test should follow redirects.",
                    "type": "boolean"
                  },
                  "httpVersion": {
                    "description": "(String) HTTP version to use for a Synthetics API test. Valid values are http1, http2, any. HTTP version to use for a Synthetics API test. Valid values are `http1`, `http2`, `any`.",
                    "type": "string"
                  },
                  "ignoreServerCertificateError": {
                    "description": "(Boolean) Ignore server certificate error for browser tests. Ignore server certificate error for browser tests.",
                    "type": "boolean"
                  },
                  "initialNavigationTimeout": {
                    "description": "(Number) Timeout before declaring the initial step as failed (in seconds) for browser tests. Timeout before declaring the initial step as failed (in seconds) for browser tests.",
                    "type": "number"
                  },
                  "minFailureDuration": {
                    "description": "(Number) Minimum amount of time in failure required to trigger an alert (in seconds). Default is 0. Minimum amount of time in failure required to trigger an alert (in seconds). Default is `0`.",
                    "type": "number"
                  },
                  "minLocationFailed": {
                    "description": "(Number) Minimum number of locations in failure required to trigger an alert. Defaults to 1. Minimum number of locations in failure required to trigger an alert. Defaults to `1`.",
                    "type": "number"
                  },
                  "monitorName": {
                    "description": "(String) The monitor name is used for the alert title as well as for all monitor dashboard widgets and SLOs. The monitor name is used for the alert title as well as for all monitor dashboard widgets and SLOs.",
                    "type": "string"
                  },
                  "monitorOptions": {
                    "description": "(Block List, Max: 1) (see below for nested schema)",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "renotifyInterval": {
                          "description": "(Number) Specify a renotification frequency in minutes. Values available by default are 0, 10, 20, 30, 40, 50, 60, 90, 120, 180, 240, 300, 360, 720, 1440. Defaults to 0. Specify a renotification frequency in minutes. Values available by default are `0`, `10`, `20`, `30`, `40`, `50`, `60`, `90`, `120`, `180`, `240`, `300`, `360`, `720`, `1440`. Defaults to `0`.",
                          "type": "number"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "monitorPriority": {
                    "description": "(Number)",
                    "type": "number"
                  },
                  "noScreenshot": {
                    "description": "(Boolean) Prevents saving screenshots of the step. Prevents saving screenshots of the steps.",
                    "type": "boolean"
                  },
                  "restrictedRoles": {
                    "description": "(Set of String) A list of role identifiers pulled from the Roles API to restrict read and write access. A list of role identifiers pulled from the Roles API to restrict read and write access.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "x-kubernetes-list-type": "set"
                  },
                  "retry": {
                    "description": "(Block List, Max: 1) (see below for nested schema)",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "count": {
                          "description": "(Number) Number of retries needed to consider a location as failed before sending a notification alert. Defaults to 0. Number of retries needed to consider a location as failed before sending a notification alert. Defaults to `0`.",
                          "type": "number"
                        },
                        "interval": {
                          "description": "(Number) Interval between a failed test and the next retry in milliseconds. Defaults to 300. Interval between a failed test and the next retry in milliseconds. Defaults to `300`.",
                          "type": "number"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "rumSettings": {
                    "description": "(Block List, Max: 1) The RUM data collection settings for the Synthetic browser test. (see below for nested schema) The RUM data collection settings for the Synthetic browser test.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "scheduling": {
                    "description": "(Block List, Max: 1) Object containing timeframes and timezone used for advanced scheduling. (see below for nested schema) Object containing timeframes and timezone used for advanced scheduling.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "timeframes": {
                          "description": "(Block Set, Min: 1) Array containing objects describing the scheduling pattern to apply to each day. (see below for nested schema) Array containing objects describing the scheduling pattern to apply to each day.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "day": {
                                "description": "(Number) Number representing the day of the week Number representing the day of the week",
                                "type": "number"
                              },
                              "from": {
                                "description": "(String) The hour of the day on which scheduling starts. The hour of the day on which scheduling starts.",
                                "type": "string"
                              },
                              "to": {
                                "description": "(String) The hour of the day on which scheduling ends. The hour of the day on which scheduling ends.",
                                "type": "string"
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "timezone": {
                          "description": "(String) Timezone in which the timeframe is based. Timezone in which the timeframe is based.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "tickEvery": {
                    "description": "(Number) How often the test should run (in seconds). How often the test should run (in seconds).",
                    "type": "number"
                  }
                },
                "additionalProperties": false
              }
            },
            "requestBasicauth": {
              "description": "(Block List, Max: 1) The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below. (see below for nested schema) The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "accessTokenUrl": {
                    "description": "client or oauth-rop authentication. Access token url for `oauth-client` or `oauth-rop` authentication.",
                    "type": "string"
                  },
                  "audience": {
                    "description": "client or oauth-rop authentication. Defaults to \"\". Audience for `oauth-client` or `oauth-rop` authentication. Defaults to `\"\"`.",
                    "type": "string"
                  },
                  "clientId": {
                    "description": "client or oauth-rop authentication. Client ID for `oauth-client` or `oauth-rop` authentication.",
                    "type": "string"
                  },
                  "domain": {
                    "description": "(String) Domain for ntlm authentication. Domain for `ntlm` authentication.",
                    "type": "string"
                  },
                  "region": {
                    "description": "(String) Region for SIGV4 authentication. Region for `SIGV4` authentication.",
                    "type": "string"
                  },
                  "resource": {
                    "description": "client or oauth-rop authentication. Defaults to \"\". Resource for `oauth-client` or `oauth-rop` authentication. Defaults to `\"\"`.",
                    "type": "string"
                  },
                  "scope": {
                    "description": "client or oauth-rop authentication. Defaults to \"\". Scope for `oauth-client` or `oauth-rop` authentication. Defaults to `\"\"`.",
                    "type": "string"
                  },
                  "serviceName": {
                    "description": "(String) Service name for SIGV4 authentication. Service name for `SIGV4` authentication.",
                    "type": "string"
                  },
                  "sessionToken": {
                    "description": "(String) Session token for SIGV4 authentication. Session token for `SIGV4` authentication.",
                    "type": "string"
                  },
                  "tokenApiAuthentication": {
                    "description": "client or oauth-rop authentication. Valid values are header, body. Token API Authentication for `oauth-client` or `oauth-rop` authentication. Valid values are `header`, `body`.",
                    "type": "string"
                  },
                  "type": {
                    "description": "(String) Synthetics test type. Valid values are api, browser. Type of basic authentication to use when performing the test. Defaults to `\"web\"`.",
                    "type": "string"
                  },
                  "username": {
                    "description": "(String) Username for authentication. Username for authentication.",
                    "type": "string"
                  },
                  "workstation": {
                    "description": "(String) Workstation for ntlm authentication. Workstation for `ntlm` authentication.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "requestClientCertificate": {
              "description": "(Block List, Max: 1) Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below. (see below for nested schema) Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "cert": {
                    "description": "(Block List, Min: 1, Max: 1) (see below for nested schema)",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "filename": {
                          "description": "(String) File name for the certificate. File name for the certificate.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "key": {
                    "description": "(Block List, Min: 1, Max: 1) (see below for nested schema)",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "filename": {
                          "description": "(String) File name for the certificate. File name for the certificate.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "requestDefinition": {
              "description": "(Block List, Max: 1) Required if type = \"api\". The synthetics test request. (see below for nested schema) Required if `type = \"api\"`. The synthetics test request.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "body": {
                    "description": "(String) The request body. The request body.",
                    "type": "string"
                  },
                  "bodyType": {
                    "description": "www-form-urlencoded, graphql. Type of the request body. Valid values are `text/plain`, `application/json`, `text/xml`, `text/html`, `application/x-www-form-urlencoded`, `graphql`.",
                    "type": "string"
                  },
                  "callType": {
                    "description": "(String) The type of gRPC call to perform. Valid values are healthcheck, unary. The type of gRPC call to perform. Valid values are `healthcheck`, `unary`.",
                    "type": "string"
                  },
                  "certificateDomains": {
                    "description": "(List of String) By default, the client certificate is applied on the domain of the starting URL for browser tests. If you want your client certificate to be applied on other domains instead, add them in certificate_domains. By default, the client certificate is applied on the domain of the starting URL for browser tests. If you want your client certificate to be applied on other domains instead, add them in `certificate_domains`.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "dnsServer": {
                    "description": "(String) DNS server to use for DNS tests (subtype = \"dns\"). DNS server to use for DNS tests (`subtype = \"dns\"`).",
                    "type": "string"
                  },
                  "dnsServerPort": {
                    "description": "(Number) DNS server port to use for DNS tests. DNS server port to use for DNS tests.",
                    "type": "number"
                  },
                  "host": {
                    "description": "(String) Host name to perform the test with. Host name to perform the test with.",
                    "type": "string"
                  },
                  "message": {
                    "description": "(String) A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by using the same @username notation as events. Defaults to \"\". For UDP and websocket tests, message to send with the request.",
                    "type": "string"
                  },
                  "method": {
                    "description": "(String) Either the HTTP method/verb to use or a gRPC method available on the service set in the service field. Required if subtype is HTTP or if subtype is grpc and callType is unary. Either the HTTP method/verb to use or a gRPC method available on the service set in the `service` field. Required if `subtype` is `HTTP` or if `subtype` is `grpc` and `callType` is `unary`.",
                    "type": "string"
                  },
                  "noSavingResponseBody": {
                    "description": "(Boolean) Determines whether or not to save the response body. Determines whether or not to save the response body.",
                    "type": "boolean"
                  },
                  "numberOfPackets": {
                    "description": "(Number) Number of pings to use per test for ICMP tests (subtype = \"icmp\") between 0 and 10. Number of pings to use per test for ICMP tests (`subtype = \"icmp\"`) between 0 and 10.",
                    "type": "number"
                  },
                  "persistCookies": {
                    "description": "(Boolean) Persist cookies across redirects. Persist cookies across redirects.",
                    "type": "boolean"
                  },
                  "plainProtoFile": {
                    "description": "(String) The content of a proto file as a string. The content of a proto file as a string.",
                    "type": "string"
                  },
                  "port": {
                    "description": "(Number) Port to use when performing the test. Port to use when performing the test.",
                    "type": "number"
                  },
                  "protoJsonDescriptor": {
                    "description": "(String, Deprecated) A protobuf JSON descriptor. Deprecated. Use plain_proto_file instead. A protobuf JSON descriptor. **Deprecated.** Use `plain_proto_file` instead.",
                    "type": "string"
                  },
                  "servername": {
                    "description": "(String) For SSL tests, it specifies on which server you want to initiate the TLS handshake, allowing the server to present one of multiple possible certificates on the same IP address and TCP port number. For SSL tests, it specifies on which server you want to initiate the TLS handshake, allowing the server to present one of multiple possible certificates on the same IP address and TCP port number.",
                    "type": "string"
                  },
                  "service": {
                    "description": "(String) The gRPC service on which you want to perform the gRPC call. The gRPC service on which you want to perform the gRPC call.",
                    "type": "string"
                  },
                  "shouldTrackHops": {
                    "description": "(Boolean) This will turn on a traceroute probe to discover all gateways along the path to the host destination. For ICMP tests (subtype = \"icmp\"). This will turn on a traceroute probe to discover all gateways along the path to the host destination. For ICMP tests (`subtype = \"icmp\"`).",
                    "type": "boolean"
                  },
                  "timeout": {
                    "description": "(Number) Timeout in seconds for the test. Defaults to 60. Timeout in seconds for the test. Defaults to `60`.",
                    "type": "number"
                  },
                  "url": {
                    "description": "(String) The URL to send the request to. The URL to send the request to.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "requestHeaders": {
              "description": "(Map of String) Header name and value map. Header name and value map.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "requestMetadata": {
              "description": "(Map of String) Metadata to include when performing the gRPC test. Metadata to include when performing the gRPC test.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "requestProxy": {
              "description": "(Block List, Max: 1) The proxy to perform the test. (see below for nested schema) The proxy to perform the test.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "headers": {
                    "description": "(Map of String) Header name and value map. Header name and value map.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "x-kubernetes-map-type": "granular"
                  },
                  "url": {
                    "description": "(String) The URL to send the request to. URL of the proxy to perform the test.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "requestQuery": {
              "description": "(Map of String) Query arguments name and value map. Query arguments name and value map.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "setCookie": {
              "description": "Cookie syntax. Cookies to be used for a browser test request, using the [Set-Cookie](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie) syntax.",
              "type": "string"
            },
            "status": {
              "description": "(String) Define whether you want to start (live) or pause (paused) a Synthetic test. Valid values are live, paused. Define whether you want to start (`live`) or pause (`paused`) a Synthetic test. Valid values are `live`, `paused`.",
              "type": "string"
            },
            "subtype": {
              "description": "(String) The subtype of the Synthetic API test. Defaults to http. Valid values are http, ssl, tcp, dns, multi, icmp, udp, websocket, grpc. The subtype of the Synthetic API test. Defaults to `http`. Valid values are `http`, `ssl`, `tcp`, `dns`, `multi`, `icmp`, `udp`, `websocket`, `grpc`.",
              "type": "string"
            },
            "tags": {
              "description": "(List of String) A list of tags to associate with your synthetics test. This can help you categorize and filter tests in the manage synthetics page of the UI. Default is an empty list ([]). A list of tags to associate with your synthetics test. This can help you categorize and filter tests in the manage synthetics page of the UI. Default is an empty list (`[]`).",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "type": {
              "description": "(String) Synthetics test type. Valid values are api, browser. Synthetics test type. Valid values are `api`, `browser`.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "type": "array",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one status to another.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from one status to another, if any.",
                "type": "string"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to a resource at any point in time.",
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        }
      },
      "additionalProperties": false
    }
  }
}
