{
  "description": "HelmReleaseProxy is the Schema for the helmreleaseproxies API.",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "HelmReleaseProxySpec defines the desired state of HelmReleaseProxy.",
      "type": "object",
      "required": [
        "chartName",
        "clusterRef",
        "repoURL"
      ],
      "properties": {
        "chartName": {
          "description": "ChartName is the name of the Helm chart in the repository.\ne.g. chart-path oci://repo-url/chart-name as chartName: chart-name and https://repo-url/chart-name as chartName: chart-name",
          "type": "string"
        },
        "clusterRef": {
          "description": "ClusterRef is a reference to the Cluster to install the Helm release on.",
          "type": "object",
          "properties": {
            "apiVersion": {
              "description": "API version of the referent.",
              "type": "string"
            },
            "fieldPath": {
              "description": "If referring to a piece of an object instead of an entire object, this string\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\nFor example, if the object reference is to a container within a pod, this would take on a value like:\n\"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered\nthe event) or if no container name is specified \"spec.containers[2]\" (container with\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\nreferencing a part of an object.",
              "type": "string"
            },
            "kind": {
              "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type": "string"
            },
            "name": {
              "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
              "type": "string"
            },
            "resourceVersion": {
              "description": "Specific resourceVersion to which this reference is made, if any.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
              "type": "string"
            },
            "uid": {
              "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
              "type": "string"
            }
          },
          "additionalProperties": false,
          "x-kubernetes-map-type": "atomic"
        },
        "credentials": {
          "description": "Credentials is a reference to an object containing the OCI credentials. If it is not specified, no credentials will be used.",
          "type": "object",
          "required": [
            "key",
            "secret"
          ],
          "properties": {
            "key": {
              "description": "Key is the key in the Secret containing the OCI credentials.",
              "type": "string"
            },
            "secret": {
              "description": "Secret is a reference to a Secret containing the OCI credentials.",
              "type": "object",
              "properties": {
                "name": {
                  "description": "name is unique within a namespace to reference a secret resource.",
                  "type": "string"
                },
                "namespace": {
                  "description": "namespace defines the space within which the secret name must be unique.",
                  "type": "string"
                }
              },
              "additionalProperties": false,
              "x-kubernetes-map-type": "atomic"
            }
          },
          "additionalProperties": false
        },
        "namespace": {
          "description": "ReleaseNamespace is the namespace the Helm release will be installed on the referenced\nCluster. If it is not specified, it will be set to the default namespace.",
          "type": "string"
        },
        "options": {
          "description": "Options represents the helm setting options which can be used to control behaviour of helm operations(Install, Upgrade, Delete, etc)\nvia options like wait, skipCrds, timeout, waitForJobs, etc.",
          "type": "object",
          "properties": {
            "atomic": {
              "description": "Atomic indicates the installation/upgrade process to delete the installation or rollback on failure.\nIf 'Atomic' is set, wait will be enabled automatically during helm install/upgrade operation.",
              "type": "boolean"
            },
            "dependencyUpdate": {
              "description": "DependencyUpdate indicates the Helm install/upgrade action to get missing dependencies.",
              "type": "boolean"
            },
            "disableHooks": {
              "description": "DisableHooks prevents hooks from running during the Helm install action.",
              "type": "boolean"
            },
            "disableOpenAPIValidation": {
              "description": "DisableOpenAPIValidation controls whether OpenAPI validation is enforced.",
              "type": "boolean"
            },
            "enableClientCache": {
              "description": "EnableClientCache is a flag to enable Helm client cache. If it is not specified, it will be set to true.",
              "type": "boolean",
              "default": false
            },
            "install": {
              "description": "Install represents CLI flags passed to Helm install operation which can be used to control\nbehaviour of helm Install operations via options like wait, skipCrds, timeout, waitForJobs, etc.",
              "type": "object",
              "properties": {
                "createNamespace": {
                  "description": "CreateNamespace indicates the Helm install/upgrade action to create the\nHelmChartProxySpec.ReleaseNamespace if it does not exist yet.\nOn uninstall, the namespace will not be garbage collected.\nIf it is not specified by user, will be set to default 'true'.",
                  "type": "boolean",
                  "default": true
                },
                "includeCRDs": {
                  "description": "IncludeCRDs determines whether CRDs stored as a part of helm templates directory should be installed.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "options": {
              "description": "SubNotes determines whether sub-notes should be rendered in the chart.",
              "type": "boolean"
            },
            "skipCRDs": {
              "description": "SkipCRDs controls whether CRDs should be installed during install/upgrade operation.\nBy default, CRDs are installed if not already present.\nIf set, no CRDs will be installed.",
              "type": "boolean"
            },
            "timeout": {
              "description": "Timeout is the time to wait for any individual Kubernetes operation (like\nresource creation, Jobs for hooks, etc.) during the performance of a Helm install action.\nDefaults to '10 min'.",
              "type": "string"
            },
            "uninstall": {
              "description": "Uninstall represents CLI flags passed to Helm uninstall operation which can be used to control\nbehaviour of helm Uninstall operation via options like wait, timeout, etc.",
              "type": "object",
              "properties": {
                "description": {
                  "description": "Description represents human readable information to be shown on release uninstall.",
                  "type": "string"
                },
                "keepHistory": {
                  "description": "KeepHistory defines whether historical revisions of a release should be saved.\nIf it's set, helm uninstall operation will not delete the history of the release.\nThe helm storage backend (secret, configmap, etc) will be retained in the cluster.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "upgrade": {
              "description": "Upgrade represents CLI flags passed to Helm upgrade operation which can be used to control\nbehaviour of helm Upgrade operations via options like wait, skipCrds, timeout, waitForJobs, etc.",
              "type": "object",
              "properties": {
                "cleanupOnFail": {
                  "description": "CleanupOnFail indicates the upgrade action to delete newly-created resources on a failed update operation.",
                  "type": "boolean"
                },
                "force": {
                  "description": "Force indicates to ignore certain warnings and perform the helm release upgrade anyway.\nThis should be used with caution.",
                  "type": "boolean"
                },
                "maxHistory": {
                  "description": "MaxHistory limits the maximum number of revisions saved per release (default is 10).",
                  "type": "integer",
                  "default": 10
                },
                "recreate": {
                  "description": "Recreate will (if true) recreate pods after a rollback.",
                  "type": "boolean"
                },
                "resetThenReuseValues": {
                  "description": "ResetThenReuseValues will reset the values to the chart's built-ins then merge with user's last supplied values.",
                  "type": "boolean"
                },
                "resetValues": {
                  "description": "ResetValues will reset the values to the chart's built-ins rather than merging with existing.",
                  "type": "boolean"
                },
                "reuseValues": {
                  "description": "ReuseValues will re-use the user's last supplied values.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "wait": {
              "description": "Wait enables the waiting for resources to be ready after a Helm install/upgrade has been performed.",
              "type": "boolean"
            },
            "waitForJobs": {
              "description": "WaitForJobs enables waiting for jobs to complete after a Helm install/upgrade has been performed.",
              "type": "boolean"
            }
          },
          "additionalProperties": false
        },
        "reconcileStrategy": {
          "description": "ReconcileStrategy indicates whether a Helm chart should be continuously installed, updated, and uninstalled on the Cluster,\nor if it should be reconciled until it is successfully installed on the Cluster and not otherwise updated or uninstalled.\nIf not specified, the default behavior will be to reconcile continuously. This field is immutable.\nPossible values are `Continuous`, `InstallOnce`, or unset.",
          "type": "string",
          "enum": [
            "",
            "InstallOnce",
            "Continuous"
          ]
        },
        "releaseName": {
          "description": "ReleaseName is the release name of the installed Helm chart. If it is not specified, a name will be generated.",
          "type": "string"
        },
        "repoURL": {
          "description": "RepoURL is the URL of the Helm chart repository.\ne.g. chart-path oci://repo-url/chart-name as repoURL: oci://repo-url and https://repo-url/chart-name as repoURL: https://repo-url",
          "type": "string"
        },
        "tlsConfig": {
          "description": "TLSConfig contains the TLS configuration for the HelmReleaseProxy.",
          "type": "object",
          "properties": {
            "caSecret": {
              "description": "Secret is a reference to a Secret containing the TLS CA certificate at the key ca.crt.",
              "type": "object",
              "properties": {
                "name": {
                  "description": "name is unique within a namespace to reference a secret resource.",
                  "type": "string"
                },
                "namespace": {
                  "description": "namespace defines the space within which the secret name must be unique.",
                  "type": "string"
                }
              },
              "additionalProperties": false,
              "x-kubernetes-map-type": "atomic"
            },
            "insecureSkipTLSVerify": {
              "description": "InsecureSkipTLSVerify controls whether the Helm client should verify the server's certificate.",
              "type": "boolean"
            }
          },
          "additionalProperties": false
        },
        "values": {
          "description": "Values is an inline YAML representing the values for the Helm chart. This YAML is the result of the rendered\nGo templating with the values from the referenced workload Cluster.",
          "type": "string"
        },
        "version": {
          "description": "Version is the version of the Helm chart. If it is not specified, the chart will use\nand be kept up to date with the latest version.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "HelmReleaseProxyStatus defines the observed state of HelmReleaseProxy.",
      "type": "object",
      "properties": {
        "conditions": {
          "description": "Conditions defines current state of the HelmReleaseProxy.",
          "type": "array",
          "items": {
            "description": "Condition defines an observation of a Cluster API resource operational state.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "Last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed. If that is not known, then using the time when\nthe API field changed is acceptable.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "A human readable message indicating details about the transition.\nThis field may be empty.",
                "type": "string"
              },
              "reason": {
                "description": "The reason for the condition's last transition in CamelCase.\nThe specific API may choose whether or not this field is considered a guaranteed API.\nThis field may be empty.",
                "type": "string"
              },
              "severity": {
                "description": "severity provides an explicit classification of Reason code, so the users or machines can immediately\nunderstand the current situation and act accordingly.\nThe Severity field MUST be set only when Status=False.",
                "type": "string"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "type": "string"
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase.\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions\ncan be useful (see .node.status.conditions), the ability to deconflict is important.",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest generation observed by the controller.",
          "type": "integer",
          "format": "int64"
        },
        "revision": {
          "description": "Revision is the current revision of the Helm release.",
          "type": "integer"
        },
        "status": {
          "description": "Status is the current status of the Helm release.",
          "type": "string"
        }
      },
      "additionalProperties": false
    }
  }
}
