{
  "description": "IntegrationKit defines a container image and additional configuration needed to run an `Integration`.\nAn `IntegrationKit` is a generic image generally built from the requirements of an `Integration`, but agnostic to it,\nin order to be reused by any other `Integration` which has the same required set of capabilities. An `IntegrationKit`\nmay be used for other kits as a base container layer, when the `incremental` build option is enabled.",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "the desired configuration",
      "type": "object",
      "properties": {
        "capabilities": {
          "description": "features offered by the IntegrationKit",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "configuration": {
          "description": "Deprecated:\nUse camel trait (camel.properties) to manage properties\nUse mount trait (mount.configs) to manage configs\nUse mount trait (mount.resources) to manage resources\nUse mount trait (mount.volumes) to manage volumes\nconfiguration used by the kit",
          "type": "array",
          "items": {
            "description": "ConfigurationSpec represents a generic configuration specification.",
            "type": "object",
            "required": [
              "type",
              "value"
            ],
            "properties": {
              "type": {
                "description": "represents the type of configuration, ie: property, configmap, secret, ...",
                "type": "string"
              },
              "value": {
                "description": "the value to assign to the configuration (syntax may vary depending on the `Type`)",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "dependencies": {
          "description": "a list of Camel dependencies used by this kit",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "image": {
          "description": "the container image as identified in the container registry",
          "type": "string"
        },
        "profile": {
          "description": "the profile which is expected by this kit",
          "type": "string"
        },
        "repositories": {
          "description": "Maven repositories that can be used by the kit",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "sources": {
          "description": "the sources to add at build time",
          "type": "array",
          "items": {
            "description": "SourceSpec defines the configuration for one or more routes to be executed in a certain Camel DSL language.",
            "type": "object",
            "properties": {
              "compression": {
                "description": "if the content is compressed (base64 encrypted)",
                "type": "boolean"
              },
              "content": {
                "description": "the source code (plain text)",
                "type": "string"
              },
              "contentKey": {
                "description": "the confimap key holding the source content",
                "type": "string"
              },
              "contentRef": {
                "description": "the confimap reference holding the source content",
                "type": "string"
              },
              "contentType": {
                "description": "the content type (tipically text or binary)",
                "type": "string"
              },
              "from-kamelet": {
                "description": "True if the spec is generated from a Kamelet",
                "type": "boolean"
              },
              "interceptors": {
                "description": "Interceptors are optional identifiers the org.apache.camel.k.RoutesLoader\nuses to pre/post process sources\nDeprecated: no longer in use.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "language": {
                "description": "specify which is the language (Camel DSL) used to interpret this source code",
                "type": "string"
              },
              "loader": {
                "description": "Loader is an optional id of the org.apache.camel.k.RoutesLoader that will\ninterpret this source at runtime",
                "type": "string"
              },
              "name": {
                "description": "the name of the specification",
                "type": "string"
              },
              "path": {
                "description": "the path where the file is stored",
                "type": "string"
              },
              "property-names": {
                "description": "List of property names defined in the source (e.g. if type is \"template\")",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "rawContent": {
                "description": "the source code (binary)",
                "type": "string",
                "format": "byte"
              },
              "type": {
                "description": "Type defines the kind of source described by this object",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "traits": {
          "description": "traits that the kit will execute",
          "type": "object",
          "properties": {
            "addons": {
              "description": "The collection of addon trait configurations",
              "type": "object",
              "additionalProperties": {
                "description": "AddonTrait represents the configuration of an addon trait.",
                "type": "object",
                "x-kubernetes-preserve-unknown-fields": true
              }
            },
            "builder": {
              "description": "The builder trait is internally used to determine the best strategy to build and configure IntegrationKits.",
              "type": "object",
              "properties": {
                "annotations": {
                  "description": "When using `pod` strategy, annotation to use for the builder pod.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "baseImage": {
                  "description": "Specify a base image. In order to have the application working properly it must be a container image which has a Java JDK\ninstalled and ready to use on path (ie `/usr/bin/java`).",
                  "type": "string"
                },
                "configuration": {
                  "description": "Legacy trait configuration parameters.\nDeprecated: for backward compatibility.",
                  "type": "object",
                  "x-kubernetes-preserve-unknown-fields": true
                },
                "enabled": {
                  "description": "Deprecated: no longer in use.",
                  "type": "boolean"
                },
                "incrementalImageBuild": {
                  "description": "Use the incremental image build option, to reuse existing containers (default `true`)",
                  "type": "boolean"
                },
                "limitCPU": {
                  "description": "When using `pod` strategy, the maximum amount of CPU required by the pod builder.\nDeprecated: use TasksRequestCPU instead with task name `builder`.",
                  "type": "string"
                },
                "limitMemory": {
                  "description": "When using `pod` strategy, the maximum amount of memory required by the pod builder.\nDeprecated: use TasksRequestCPU instead with task name `builder`.",
                  "type": "string"
                },
                "mavenProfiles": {
                  "description": "A list of references pointing to configmaps/secrets that contains a maven profile.\nThis configmap/secret is a resource of the IntegrationKit created, therefore it needs to be present in the namespace where the operator is going to create the IntegrationKit.\nThe content of the maven profile is expected to be a text containing a valid maven profile starting with `\u003cprofile\u003e` and ending with `\u003c/profile\u003e` that will be integrated as an inline profile in the POM.\nSyntax: [configmap|secret]:name[/key], where name represents the resource name, key optionally represents the resource key to be filtered (default key value = profile.xml).",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "nodeSelector": {
                  "description": "Defines a set of nodes the builder pod is eligible to be scheduled on, based on labels on the node.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "orderStrategy": {
                  "description": "The build order strategy to use, either `dependencies`, `fifo` or `sequential` (default is the platform default)",
                  "type": "string",
                  "enum": [
                    "dependencies",
                    "fifo",
                    "sequential"
                  ]
                },
                "platforms": {
                  "description": "The list of manifest platforms to use to build a container image (default `linux/amd64`).",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "properties": {
                  "description": "A list of properties to be provided to the build task",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "requestCPU": {
                  "description": "When using `pod` strategy, the minimum amount of CPU required by the pod builder.\nDeprecated: use TasksRequestCPU instead with task name `builder`.",
                  "type": "string"
                },
                "requestMemory": {
                  "description": "When using `pod` strategy, the minimum amount of memory required by the pod builder.\nDeprecated: use TasksRequestCPU instead with task name `builder`.",
                  "type": "string"
                },
                "strategy": {
                  "description": "The strategy to use, either `pod` or `routine` (default `routine`)",
                  "type": "string",
                  "enum": [
                    "pod",
                    "routine"
                  ]
                },
                "tasks": {
                  "description": "A list of tasks to be executed (available only when using `pod` strategy) with format `\u003cname\u003e;\u003ccontainer-image\u003e;\u003ccontainer-command\u003e`.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "tasksFilter": {
                  "description": "A list of tasks sorted by the order of execution in a csv format, ie, `\u003ctaskName1\u003e,\u003ctaskName2\u003e,...`.\nMind that you must include also the operator tasks (`builder`, `quarkus-native`, `package`, `jib`, `s2i`)\nif you need to execute them. Useful only with `pod` strategy.",
                  "type": "string"
                },
                "tasksLimitCPU": {
                  "description": "A list of limit cpu configuration for the specific task with format `\u003ctask-name\u003e:\u003climit-cpu-conf\u003e`.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "tasksLimitMemory": {
                  "description": "A list of limit memory configuration for the specific task with format `\u003ctask-name\u003e:\u003climit-memory-conf\u003e`.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "tasksRequestCPU": {
                  "description": "A list of request cpu configuration for the specific task with format `\u003ctask-name\u003e:\u003crequest-cpu-conf\u003e`.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "tasksRequestMemory": {
                  "description": "A list of request memory configuration for the specific task with format `\u003ctask-name\u003e:\u003crequest-memory-conf\u003e`.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "verbose": {
                  "description": "Enable verbose logging on build components that support it (e.g. Kaniko build pod).\nDeprecated no longer in use",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "camel": {
              "description": "The Camel trait sets up Camel configuration.",
              "type": "object",
              "properties": {
                "configuration": {
                  "description": "Legacy trait configuration parameters.\nDeprecated: for backward compatibility.",
                  "type": "object",
                  "x-kubernetes-preserve-unknown-fields": true
                },
                "enabled": {
                  "description": "Deprecated: no longer in use.",
                  "type": "boolean"
                },
                "properties": {
                  "description": "A list of properties to be provided to the Integration runtime",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "runtimeProvider": {
                  "description": "The runtime provider to use for the integration. (Default, Camel K Runtime).",
                  "type": "string",
                  "enum": [
                    "quarkus",
                    "plain-quarkus"
                  ]
                },
                "runtimeVersion": {
                  "description": "The runtime version to use for the integration. It overrides the default version set in the Integration Platform.\nYou can use a fixed version (for example \"3.2.3\") or a semantic version (for example \"3.x\") which will try to resolve\nto the best matching Catalog existing on the cluster (Default, the one provided by the operator version).",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "quarkus": {
              "description": "The Quarkus trait configures the Quarkus runtime.\nIt's enabled by default.\nNOTE: Compiling to a native executable, requires at least 4GiB of memory, so the Pod running the native build must have enough memory available.",
              "type": "object",
              "properties": {
                "buildMode": {
                  "description": "The Quarkus mode to run: either `jvm` or `native` (default `jvm`).\nIn case both `jvm` and `native` are specified, two `IntegrationKit` resources are created,\nwith the `native` kit having precedence over the `jvm` one once ready.",
                  "type": "array",
                  "items": {
                    "description": "QuarkusMode is the type of Quarkus build packaging.",
                    "type": "string",
                    "enum": [
                      "jvm",
                      "native"
                    ]
                  }
                },
                "configuration": {
                  "description": "Legacy trait configuration parameters.\nDeprecated: for backward compatibility.",
                  "type": "object",
                  "x-kubernetes-preserve-unknown-fields": true
                },
                "enabled": {
                  "description": "Deprecated: no longer in use.",
                  "type": "boolean"
                },
                "nativeBaseImage": {
                  "description": "The base image to use when running a native build (default `quay.io/quarkus/quarkus-micro-image:2.0`)",
                  "type": "string"
                },
                "nativeBuilderImage": {
                  "description": "The image containing the tooling required for a native build (by default it will use the one provided in the runtime catalog)",
                  "type": "string"
                },
                "packageTypes": {
                  "description": "The Quarkus package types, `fast-jar` or `native` (default `fast-jar`).\nIn case both `fast-jar` and `native` are specified, two `IntegrationKit` resources are created,\nwith the native kit having precedence over the `fast-jar` one once ready.\nThe order influences the resolution of the current kit for the integration.\nThe kit corresponding to the first package type will be assigned to the\nintegration in case no existing kit that matches the integration exists.\nDeprecated: use `build-mode` instead.",
                  "type": "array",
                  "items": {
                    "description": "QuarkusPackageType is the type of Quarkus build packaging.\nDeprecated: use `QuarkusMode` instead.",
                    "type": "string",
                    "enum": [
                      "fast-jar",
                      "native"
                    ]
                  }
                }
              },
              "additionalProperties": false
            },
            "registry": {
              "description": "The Registry trait sets up Maven to use the Image registry as a Maven repository (support removed since version 2.5.0).\nDeprecated: use jvm trait or read documentation.",
              "type": "object",
              "properties": {
                "configuration": {
                  "description": "Legacy trait configuration parameters.\nDeprecated: for backward compatibility.",
                  "type": "object",
                  "x-kubernetes-preserve-unknown-fields": true
                },
                "enabled": {
                  "description": "Can be used to enable or disable a trait. All traits share this common property.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "the actual status",
      "type": "object",
      "properties": {
        "artifacts": {
          "description": "list of artifacts used by the kit",
          "type": "array",
          "items": {
            "description": "Artifact represents a materialized artifact (a jar dependency or in general a file used by the build).",
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "checksum": {
                "description": "a checksum (SHA1) of the content",
                "type": "string"
              },
              "id": {
                "description": "the identification (GAV for maven dependencies or file name for other file types)",
                "type": "string"
              },
              "location": {
                "description": "where it is located in the builder `Pod`",
                "type": "string"
              },
              "target": {
                "description": "the expected location in the runtime",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "baseImage": {
          "description": "base image used by the kit (could be another IntegrationKit)",
          "type": "string"
        },
        "catalog": {
          "description": "the catalog used to build/operate the IntegrationKit.",
          "type": "object",
          "properties": {
            "provider": {
              "description": "RuntimeProvider is the provider chosen for the runtime.",
              "type": "string"
            },
            "version": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "conditions": {
          "description": "a list of conditions which happened for the events related the kit",
          "type": "array",
          "items": {
            "description": "IntegrationKitCondition describes the state of a resource at a certain point.",
            "type": "object",
            "required": [
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "Last time the condition transitioned from one status to another.",
                "type": "string",
                "format": "date-time"
              },
              "lastUpdateTime": {
                "description": "The last time this condition was updated.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "A human-readable message indicating details about the transition.",
                "type": "string"
              },
              "reason": {
                "description": "The reason for the condition's last transition.",
                "type": "string"
              },
              "status": {
                "description": "Status of the condition, one of True, False, Unknown.",
                "type": "string"
              },
              "type": {
                "description": "Type of integration condition.",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "digest": {
          "description": "actual image digest of the kit",
          "type": "string"
        },
        "failure": {
          "description": "failure reason (if any)",
          "type": "object",
          "required": [
            "reason",
            "recovery",
            "time"
          ],
          "properties": {
            "reason": {
              "description": "a short text specifying the reason",
              "type": "string"
            },
            "recovery": {
              "description": "the recovery attempted for this failure",
              "type": "object",
              "required": [
                "attempt",
                "attemptMax"
              ],
              "properties": {
                "attempt": {
                  "description": "attempt number",
                  "type": "integer"
                },
                "attemptMax": {
                  "description": "maximum number of attempts",
                  "type": "integer"
                },
                "attemptTime": {
                  "description": "time of the attempt execution",
                  "type": "string",
                  "format": "date-time"
                }
              },
              "additionalProperties": false
            },
            "time": {
              "description": "the time when the failure has happened",
              "type": "string",
              "format": "date-time"
            }
          },
          "additionalProperties": false
        },
        "image": {
          "description": "actual image name of the kit",
          "type": "string"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the most recent generation observed for this IntegrationKit.",
          "type": "integer",
          "format": "int64"
        },
        "phase": {
          "description": "phase of the kit",
          "type": "string"
        },
        "platform": {
          "description": "the platform for which this kit was configured",
          "type": "string"
        },
        "rootImage": {
          "description": "root image used by the kit (the first image from which the incremental image has started, typically a JDK/JRE base image)",
          "type": "string"
        },
        "runtimeProvider": {
          "description": "the runtime provider for which this kit was configured",
          "type": "string"
        },
        "runtimeVersion": {
          "description": "the runtime version for which this kit was configured",
          "type": "string"
        },
        "version": {
          "description": "the Camel K operator version for which this kit was configured",
          "type": "string"
        }
      },
      "additionalProperties": false
    }
  }
}
