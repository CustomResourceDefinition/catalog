{
  "description": "Workspace is the Schema for the Workspaces API. Manages a Synapse Workspace.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "WorkspaceSpec defines the desired state of Workspace",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "deletionPolicy": {
          "description": "DeletionPolicy specifies what will happen to the underlying external\nwhen this managed resource is deleted - either \"Delete\" or \"Orphan\" the\nexternal resource.\nThis field is planned to be deprecated in favor of the ManagementPolicies\nfield in a future release. Currently, both could be set independently and\nnon-default values would be honored if the feature flag is enabled.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "type": "string",
          "default": "Delete",
          "enum": [
            "Orphan",
            "Delete"
          ]
        },
        "forProvider": {
          "type": "object",
          "properties": {
            "azureDevopsRepo": {
              "description": "An azure_devops_repo block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "accountName": {
                    "description": "Specifies the Azure DevOps account name.",
                    "type": "string"
                  },
                  "branchName": {
                    "description": "Specifies the collaboration branch of the repository to get code from.",
                    "type": "string"
                  },
                  "lastCommitId": {
                    "description": "The last commit ID.",
                    "type": "string"
                  },
                  "projectName": {
                    "description": "Specifies the name of the Azure DevOps project.",
                    "type": "string"
                  },
                  "repositoryName": {
                    "description": "Specifies the name of the git repository.",
                    "type": "string"
                  },
                  "rootFolder": {
                    "description": "Specifies the root folder within the repository. Set to / for the top level.",
                    "type": "string"
                  },
                  "tenantId": {
                    "description": "the ID of the tenant for the Azure DevOps account.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "azureadAuthenticationOnly": {
              "description": "Is Azure Active Directory Authentication the only way to authenticate with resources inside this synapse Workspace. Defaults to false.",
              "type": "boolean"
            },
            "computeSubnetId": {
              "description": "Subnet ID used for computes in workspace Changing this forces a new resource to be created.",
              "type": "string"
            },
            "computeSubnetIdRef": {
              "description": "Reference to a Subnet in network to populate computeSubnetId.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "computeSubnetIdSelector": {
              "description": "Selector for a Subnet in network to populate computeSubnetId.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "customerManagedKey": {
              "description": "A customer_managed_key block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "keyName": {
                    "description": "An identifier for the key. Name needs to match the name of the key used with the azurerm_synapse_workspace_key resource. Defaults to \"cmk\" if not specified.",
                    "type": "string"
                  },
                  "keyVersionlessId": {
                    "description": "The Azure Key Vault Key Versionless ID to be used as the Customer Managed Key (CMK) for double encryption (e.g. https://example-keyvault.vault.azure.net/type/cmk/).",
                    "type": "string"
                  },
                  "keyVersionlessIdRef": {
                    "description": "Reference to a Key in keyvault to populate keyVersionlessId.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  },
                  "keyVersionlessIdSelector": {
                    "description": "Selector for a Key in keyvault to populate keyVersionlessId.",
                    "type": "object",
                    "properties": {
                      "matchControllerRef": {
                        "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                        "type": "boolean"
                      },
                      "matchLabels": {
                        "description": "MatchLabels ensures an object with matching labels is selected.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "policy": {
                        "description": "Policies for selection.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  },
                  "userAssignedIdentityId": {
                    "description": "The User Assigned Identity ID to be used for accessing the Customer Managed Key for encryption.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "dataExfiltrationProtectionEnabled": {
              "description": "Is data exfiltration protection enabled in this workspace? If set to true, managed_virtual_network_enabled must also be set to true. Changing this forces a new resource to be created.",
              "type": "boolean"
            },
            "githubRepo": {
              "description": "A github_repo block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "accountName": {
                    "description": "Specifies the GitHub account name.",
                    "type": "string"
                  },
                  "branchName": {
                    "description": "Specifies the collaboration branch of the repository to get code from.",
                    "type": "string"
                  },
                  "gitUrl": {
                    "description": "Specifies the GitHub Enterprise host name. For example: https://github.mydomain.com.",
                    "type": "string"
                  },
                  "lastCommitId": {
                    "description": "The last commit ID.",
                    "type": "string"
                  },
                  "repositoryName": {
                    "description": "Specifies the name of the git repository.",
                    "type": "string"
                  },
                  "rootFolder": {
                    "description": "Specifies the root folder within the repository. Set to / for the top level.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "identity": {
              "description": "An identity block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "identityIds": {
                    "description": "Specifies a list of User Assigned Managed Identity IDs to be assigned to this Synapse Workspace.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "x-kubernetes-list-type": "set"
                  },
                  "type": {
                    "description": "Specifies the type of Managed Service Identity that should be associated with this Synapse Workspace. Possible values are SystemAssigned, UserAssigned and SystemAssigned, UserAssigned (to enable both).",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "linkingAllowedForAadTenantIds": {
              "description": "Allowed AAD Tenant Ids For Linking.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "location": {
              "description": "Specifies the Azure Region where the synapse Workspace should exist. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "managedResourceGroupName": {
              "description": "Workspace managed resource group. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "managedResourceGroupNameRef": {
              "description": "Reference to a ResourceGroup in azure to populate managedResourceGroupName.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "managedResourceGroupNameSelector": {
              "description": "Selector for a ResourceGroup in azure to populate managedResourceGroupName.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "managedVirtualNetworkEnabled": {
              "description": "Is Virtual Network enabled for all computes in this workspace? Changing this forces a new resource to be created.",
              "type": "boolean"
            },
            "publicNetworkAccessEnabled": {
              "description": "Whether public network access is allowed for the Cognitive Account. Defaults to true.",
              "type": "boolean"
            },
            "purviewId": {
              "description": "The ID of purview account.",
              "type": "string"
            },
            "resourceGroupName": {
              "description": "Specifies the name of the Resource Group where the synapse Workspace should exist. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "resourceGroupNameRef": {
              "description": "Reference to a ResourceGroup in azure to populate resourceGroupName.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "resourceGroupNameSelector": {
              "description": "Selector for a ResourceGroup in azure to populate resourceGroupName.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "sqlAdministratorLogin": {
              "description": "Specifies The login name of the SQL administrator. Changing this forces a new resource to be created. If this is not provided customer_managed_key must be provided.",
              "type": "string"
            },
            "sqlAdministratorLoginPasswordSecretRef": {
              "description": "The Password associated with the sql_administrator_login for the SQL administrator. If this is not provided customer_managed_key must be provided.",
              "type": "object",
              "required": [
                "key",
                "name",
                "namespace"
              ],
              "properties": {
                "key": {
                  "description": "The key to select.",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the secret.",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the secret.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "sqlIdentityControlEnabled": {
              "description": "Are pipelines (running as workspace's system assigned identity) allowed to access SQL pools?",
              "type": "boolean"
            },
            "storageDataLakeGen2FilesystemId": {
              "description": "Specifies the ID of storage data lake gen2 filesystem resource. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "storageDataLakeGen2FilesystemIdRef": {
              "description": "Reference to a DataLakeGen2FileSystem in storage to populate storageDataLakeGen2FilesystemId.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "storageDataLakeGen2FilesystemIdSelector": {
              "description": "Selector for a DataLakeGen2FileSystem in storage to populate storageDataLakeGen2FilesystemId.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "tags": {
              "description": "A mapping of tags which should be assigned to the Synapse Workspace.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            }
          },
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored\nunless the Management Policies feature flag is disabled.\nInitProvider holds the same fields as ForProvider, with the exception\nof Identifier and other resource reference fields. The fields that are\nin InitProvider are merged into ForProvider when the resource is created.\nThe same fields are also added to the terraform ignore_changes hook, to\navoid updating them after creation. This is useful for fields that are\nrequired on creation, but we do not desire to update them after creation,\nfor example because of an external controller is managing them, like an\nautoscaler.",
          "type": "object",
          "properties": {
            "azureDevopsRepo": {
              "description": "An azure_devops_repo block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "accountName": {
                    "description": "Specifies the Azure DevOps account name.",
                    "type": "string"
                  },
                  "branchName": {
                    "description": "Specifies the collaboration branch of the repository to get code from.",
                    "type": "string"
                  },
                  "lastCommitId": {
                    "description": "The last commit ID.",
                    "type": "string"
                  },
                  "projectName": {
                    "description": "Specifies the name of the Azure DevOps project.",
                    "type": "string"
                  },
                  "repositoryName": {
                    "description": "Specifies the name of the git repository.",
                    "type": "string"
                  },
                  "rootFolder": {
                    "description": "Specifies the root folder within the repository. Set to / for the top level.",
                    "type": "string"
                  },
                  "tenantId": {
                    "description": "the ID of the tenant for the Azure DevOps account.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "azureadAuthenticationOnly": {
              "description": "Is Azure Active Directory Authentication the only way to authenticate with resources inside this synapse Workspace. Defaults to false.",
              "type": "boolean"
            },
            "computeSubnetId": {
              "description": "Subnet ID used for computes in workspace Changing this forces a new resource to be created.",
              "type": "string"
            },
            "computeSubnetIdRef": {
              "description": "Reference to a Subnet in network to populate computeSubnetId.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "computeSubnetIdSelector": {
              "description": "Selector for a Subnet in network to populate computeSubnetId.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "customerManagedKey": {
              "description": "A customer_managed_key block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "keyName": {
                    "description": "An identifier for the key. Name needs to match the name of the key used with the azurerm_synapse_workspace_key resource. Defaults to \"cmk\" if not specified.",
                    "type": "string"
                  },
                  "keyVersionlessId": {
                    "description": "The Azure Key Vault Key Versionless ID to be used as the Customer Managed Key (CMK) for double encryption (e.g. https://example-keyvault.vault.azure.net/type/cmk/).",
                    "type": "string"
                  },
                  "keyVersionlessIdRef": {
                    "description": "Reference to a Key in keyvault to populate keyVersionlessId.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  },
                  "keyVersionlessIdSelector": {
                    "description": "Selector for a Key in keyvault to populate keyVersionlessId.",
                    "type": "object",
                    "properties": {
                      "matchControllerRef": {
                        "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                        "type": "boolean"
                      },
                      "matchLabels": {
                        "description": "MatchLabels ensures an object with matching labels is selected.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "policy": {
                        "description": "Policies for selection.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  },
                  "userAssignedIdentityId": {
                    "description": "The User Assigned Identity ID to be used for accessing the Customer Managed Key for encryption.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "dataExfiltrationProtectionEnabled": {
              "description": "Is data exfiltration protection enabled in this workspace? If set to true, managed_virtual_network_enabled must also be set to true. Changing this forces a new resource to be created.",
              "type": "boolean"
            },
            "githubRepo": {
              "description": "A github_repo block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "accountName": {
                    "description": "Specifies the GitHub account name.",
                    "type": "string"
                  },
                  "branchName": {
                    "description": "Specifies the collaboration branch of the repository to get code from.",
                    "type": "string"
                  },
                  "gitUrl": {
                    "description": "Specifies the GitHub Enterprise host name. For example: https://github.mydomain.com.",
                    "type": "string"
                  },
                  "lastCommitId": {
                    "description": "The last commit ID.",
                    "type": "string"
                  },
                  "repositoryName": {
                    "description": "Specifies the name of the git repository.",
                    "type": "string"
                  },
                  "rootFolder": {
                    "description": "Specifies the root folder within the repository. Set to / for the top level.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "identity": {
              "description": "An identity block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "identityIds": {
                    "description": "Specifies a list of User Assigned Managed Identity IDs to be assigned to this Synapse Workspace.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "x-kubernetes-list-type": "set"
                  },
                  "type": {
                    "description": "Specifies the type of Managed Service Identity that should be associated with this Synapse Workspace. Possible values are SystemAssigned, UserAssigned and SystemAssigned, UserAssigned (to enable both).",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "linkingAllowedForAadTenantIds": {
              "description": "Allowed AAD Tenant Ids For Linking.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "location": {
              "description": "Specifies the Azure Region where the synapse Workspace should exist. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "managedResourceGroupName": {
              "description": "Workspace managed resource group. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "managedResourceGroupNameRef": {
              "description": "Reference to a ResourceGroup in azure to populate managedResourceGroupName.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "managedResourceGroupNameSelector": {
              "description": "Selector for a ResourceGroup in azure to populate managedResourceGroupName.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "managedVirtualNetworkEnabled": {
              "description": "Is Virtual Network enabled for all computes in this workspace? Changing this forces a new resource to be created.",
              "type": "boolean"
            },
            "publicNetworkAccessEnabled": {
              "description": "Whether public network access is allowed for the Cognitive Account. Defaults to true.",
              "type": "boolean"
            },
            "purviewId": {
              "description": "The ID of purview account.",
              "type": "string"
            },
            "sqlAdministratorLogin": {
              "description": "Specifies The login name of the SQL administrator. Changing this forces a new resource to be created. If this is not provided customer_managed_key must be provided.",
              "type": "string"
            },
            "sqlAdministratorLoginPasswordSecretRef": {
              "description": "The Password associated with the sql_administrator_login for the SQL administrator. If this is not provided customer_managed_key must be provided.",
              "type": "object",
              "required": [
                "key",
                "name",
                "namespace"
              ],
              "properties": {
                "key": {
                  "description": "The key to select.",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the secret.",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the secret.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "sqlIdentityControlEnabled": {
              "description": "Are pipelines (running as workspace's system assigned identity) allowed to access SQL pools?",
              "type": "boolean"
            },
            "storageDataLakeGen2FilesystemId": {
              "description": "Specifies the ID of storage data lake gen2 filesystem resource. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "storageDataLakeGen2FilesystemIdRef": {
              "description": "Reference to a DataLakeGen2FileSystem in storage to populate storageDataLakeGen2FilesystemId.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "storageDataLakeGen2FilesystemIdSelector": {
              "description": "Selector for a DataLakeGen2FileSystem in storage to populate storageDataLakeGen2FilesystemId.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "tags": {
              "description": "A mapping of tags which should be assigned to the Synapse Workspace.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            }
          },
          "additionalProperties": false
        },
        "managementPolicies": {
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out\nthrough a Crossplane feature flag.\nManagementPolicies specify the array of actions Crossplane is allowed to\ntake on the managed and external resources.\nThis field is planned to replace the DeletionPolicy field in a future\nrelease. Currently, both could be set independently and non-default\nvalues would be honored if the feature flag is enabled. If both are\ncustom, the DeletionPolicy field will be ignored.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223\nand this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers\ncan take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to\ncreate, observe, update, and delete this managed resource should be\nconfigured.",
          "type": "object",
          "default": {
            "name": "default"
          },
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "type": "object",
              "properties": {
                "resolution": {
                  "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                  "type": "string",
                  "default": "Required",
                  "enum": [
                    "Required",
                    "Optional"
                  ]
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                  "type": "string",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a\nSecret to which any connection details for this managed resource should\nbe written. Connection details frequently include the endpoint, username,\nand password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name",
            "namespace"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false,
      "x-kubernetes-validations": [
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.location))",
          "message": "spec.forProvider.location is a required parameter"
        }
      ]
    },
    "status": {
      "description": "WorkspaceStatus defines the observed state of Workspace.",
      "type": "object",
      "properties": {
        "atProvider": {
          "type": "object",
          "properties": {
            "azureDevopsRepo": {
              "description": "An azure_devops_repo block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "accountName": {
                    "description": "Specifies the Azure DevOps account name.",
                    "type": "string"
                  },
                  "branchName": {
                    "description": "Specifies the collaboration branch of the repository to get code from.",
                    "type": "string"
                  },
                  "lastCommitId": {
                    "description": "The last commit ID.",
                    "type": "string"
                  },
                  "projectName": {
                    "description": "Specifies the name of the Azure DevOps project.",
                    "type": "string"
                  },
                  "repositoryName": {
                    "description": "Specifies the name of the git repository.",
                    "type": "string"
                  },
                  "rootFolder": {
                    "description": "Specifies the root folder within the repository. Set to / for the top level.",
                    "type": "string"
                  },
                  "tenantId": {
                    "description": "the ID of the tenant for the Azure DevOps account.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "azureadAuthenticationOnly": {
              "description": "Is Azure Active Directory Authentication the only way to authenticate with resources inside this synapse Workspace. Defaults to false.",
              "type": "boolean"
            },
            "computeSubnetId": {
              "description": "Subnet ID used for computes in workspace Changing this forces a new resource to be created.",
              "type": "string"
            },
            "connectivityEndpoints": {
              "description": "A map of Connectivity endpoints for this Synapse Workspace. Possible key values are dev, sql, sqlOnDemand, and web.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "customerManagedKey": {
              "description": "A customer_managed_key block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "keyName": {
                    "description": "An identifier for the key. Name needs to match the name of the key used with the azurerm_synapse_workspace_key resource. Defaults to \"cmk\" if not specified.",
                    "type": "string"
                  },
                  "keyVersionlessId": {
                    "description": "The Azure Key Vault Key Versionless ID to be used as the Customer Managed Key (CMK) for double encryption (e.g. https://example-keyvault.vault.azure.net/type/cmk/).",
                    "type": "string"
                  },
                  "userAssignedIdentityId": {
                    "description": "The User Assigned Identity ID to be used for accessing the Customer Managed Key for encryption.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "dataExfiltrationProtectionEnabled": {
              "description": "Is data exfiltration protection enabled in this workspace? If set to true, managed_virtual_network_enabled must also be set to true. Changing this forces a new resource to be created.",
              "type": "boolean"
            },
            "githubRepo": {
              "description": "A github_repo block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "accountName": {
                    "description": "Specifies the GitHub account name.",
                    "type": "string"
                  },
                  "branchName": {
                    "description": "Specifies the collaboration branch of the repository to get code from.",
                    "type": "string"
                  },
                  "gitUrl": {
                    "description": "Specifies the GitHub Enterprise host name. For example: https://github.mydomain.com.",
                    "type": "string"
                  },
                  "lastCommitId": {
                    "description": "The last commit ID.",
                    "type": "string"
                  },
                  "repositoryName": {
                    "description": "Specifies the name of the git repository.",
                    "type": "string"
                  },
                  "rootFolder": {
                    "description": "Specifies the root folder within the repository. Set to / for the top level.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "id": {
              "description": "The ID of the synapse Workspace.",
              "type": "string"
            },
            "identity": {
              "description": "An identity block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "identityIds": {
                    "description": "Specifies a list of User Assigned Managed Identity IDs to be assigned to this Synapse Workspace.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "x-kubernetes-list-type": "set"
                  },
                  "principalId": {
                    "description": "The Principal ID for the Service Principal associated with the Managed Service Identity of this Synapse Workspace.",
                    "type": "string"
                  },
                  "tenantId": {
                    "description": "The Tenant ID for the Service Principal associated with the Managed Service Identity of this Synapse Workspace.",
                    "type": "string"
                  },
                  "type": {
                    "description": "Specifies the type of Managed Service Identity that should be associated with this Synapse Workspace. Possible values are SystemAssigned, UserAssigned and SystemAssigned, UserAssigned (to enable both).",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "linkingAllowedForAadTenantIds": {
              "description": "Allowed AAD Tenant Ids For Linking.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "location": {
              "description": "Specifies the Azure Region where the synapse Workspace should exist. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "managedResourceGroupName": {
              "description": "Workspace managed resource group. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "managedVirtualNetworkEnabled": {
              "description": "Is Virtual Network enabled for all computes in this workspace? Changing this forces a new resource to be created.",
              "type": "boolean"
            },
            "publicNetworkAccessEnabled": {
              "description": "Whether public network access is allowed for the Cognitive Account. Defaults to true.",
              "type": "boolean"
            },
            "purviewId": {
              "description": "The ID of purview account.",
              "type": "string"
            },
            "resourceGroupName": {
              "description": "Specifies the name of the Resource Group where the synapse Workspace should exist. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "sqlAdministratorLogin": {
              "description": "Specifies The login name of the SQL administrator. Changing this forces a new resource to be created. If this is not provided customer_managed_key must be provided.",
              "type": "string"
            },
            "sqlIdentityControlEnabled": {
              "description": "Are pipelines (running as workspace's system assigned identity) allowed to access SQL pools?",
              "type": "boolean"
            },
            "storageDataLakeGen2FilesystemId": {
              "description": "Specifies the ID of storage data lake gen2 filesystem resource. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "tags": {
              "description": "A mapping of tags which should be assigned to the Synapse Workspace.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            }
          },
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "type": "array",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one\nstatus to another.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from\none status to another, if any.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to\na resource at any point in time.",
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest metadata.generation\nwhich resulted in either a ready state, or stalled due to error\nit can not recover from without human intervention.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    }
  }
}
