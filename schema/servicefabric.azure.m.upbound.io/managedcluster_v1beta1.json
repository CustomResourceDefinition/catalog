{
  "description": "ManagedCluster is the Schema for the ManagedClusters API. Manages a Resource Group.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "ManagedClusterSpec defines the desired state of ManagedCluster",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "forProvider": {
          "type": "object",
          "properties": {
            "authentication": {
              "description": "Controls how connections to the cluster are authenticated. A authentication block as defined below.",
              "type": "object",
              "properties": {
                "activeDirectory": {
                  "description": "A active_directory block as defined above.",
                  "type": "object",
                  "properties": {
                    "clientApplicationId": {
                      "description": "The ID of the Client Application.",
                      "type": "string"
                    },
                    "clusterApplicationId": {
                      "description": "The ID of the Cluster Application.",
                      "type": "string"
                    },
                    "tenantId": {
                      "description": "The ID of the Tenant.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "certificate": {
                  "description": "One or more certificate blocks as defined below.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "commonName": {
                        "description": "The certificate's CN.",
                        "type": "string"
                      },
                      "thumbprint": {
                        "description": "The thumbprint of the certificate.",
                        "type": "string"
                      },
                      "type": {
                        "description": "The type of the certificate. Can be AdminClient or ReadOnlyClient.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                }
              },
              "additionalProperties": false
            },
            "backupServiceEnabled": {
              "description": "If true, backup service is enabled.",
              "type": "boolean"
            },
            "clientConnectionPort": {
              "description": "Port to use when connecting to the cluster.",
              "type": "number"
            },
            "customFabricSetting": {
              "description": "One or more custom_fabric_setting blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "parameter": {
                    "description": "Parameter name.",
                    "type": "string"
                  },
                  "section": {
                    "description": "Section name.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Parameter value.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "dnsName": {
              "description": "Hostname for the cluster. If unset the cluster's name will be used..",
              "type": "string"
            },
            "dnsServiceEnabled": {
              "description": "If true, DNS service is enabled.",
              "type": "boolean"
            },
            "httpGatewayPort": {
              "description": "Port that should be used by the Service Fabric Explorer to visualize applications and cluster status.",
              "type": "number"
            },
            "lbRule": {
              "description": "One or more lb_rule blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "backendPort": {
                    "description": "LB Backend port.",
                    "type": "number"
                  },
                  "frontendPort": {
                    "description": "LB Frontend port.",
                    "type": "number"
                  },
                  "probeProtocol": {
                    "description": "Protocol for the probe. Can be one of tcp, udp, http, or https.",
                    "type": "string"
                  },
                  "probeRequestPath": {
                    "description": "Path for the probe to check, when probe protocol is set to http.",
                    "type": "string"
                  },
                  "protocol": {
                    "description": "The transport protocol used in this rule. Can be one of tcp or udp.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "location": {
              "description": "The Azure Region where the Resource Group should exist. Changing this forces a new Resource Group to be created.",
              "type": "string"
            },
            "nodeType": {
              "description": "One or more node_type blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "applicationPortRange": {
                    "description": "Sets the port range available for applications. Format is \u003cfrom_port\u003e-\u003cto_port\u003e, for example 10000-20000.",
                    "type": "string"
                  },
                  "capacities": {
                    "description": "Specifies a list of key/value pairs used to set capacity tags for this node type.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "x-kubernetes-map-type": "granular"
                  },
                  "dataDiskSizeGb": {
                    "description": "The size of the data disk in gigabytes..",
                    "type": "number"
                  },
                  "dataDiskType": {
                    "description": "The type of the disk to use for storing data. It can be one of Premium_LRS, Standard_LRS, or StandardSSD_LRS. Defaults to Standard_LRS.",
                    "type": "string"
                  },
                  "ephemeralPortRange": {
                    "description": "Sets the port range available for the OS. Format is \u003cfrom_port\u003e-\u003cto_port\u003e, for example 10000-20000. There has to be at least 255 ports available and cannot overlap with application_port_range..",
                    "type": "string"
                  },
                  "multiplePlacementGroupsEnabled": {
                    "description": "If set the node type can be composed of multiple placement groups.",
                    "type": "boolean"
                  },
                  "name": {
                    "description": "The name which should be used for this node type.",
                    "type": "string"
                  },
                  "placementProperties": {
                    "description": "Specifies a list of placement tags that can be used to indicate where services should run..",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "x-kubernetes-map-type": "granular"
                  },
                  "primary": {
                    "description": "If set to true, system services will run on this node type. Only one node type should be marked as primary. Primary node type cannot be deleted or changed once they're created.",
                    "type": "boolean"
                  },
                  "stateless": {
                    "description": "If set to true, only stateless workloads can run on this node type.",
                    "type": "boolean"
                  },
                  "vmImageOffer": {
                    "description": "The offer type of the marketplace image cluster VMs will use.",
                    "type": "string"
                  },
                  "vmImagePublisher": {
                    "description": "The publisher of the marketplace image cluster VMs will use.",
                    "type": "string"
                  },
                  "vmImageSku": {
                    "description": "The SKU of the marketplace image cluster VMs will use.",
                    "type": "string"
                  },
                  "vmImageVersion": {
                    "description": "The version of the marketplace image cluster VMs will use.",
                    "type": "string"
                  },
                  "vmInstanceCount": {
                    "description": "The number of instances this node type will launch.",
                    "type": "number"
                  },
                  "vmSecrets": {
                    "description": "One or more vm_secrets blocks as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "certificates": {
                          "description": "One or more certificates blocks as defined above.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "store": {
                                "description": "The certificate store on the Virtual Machine to which the certificate should be added.",
                                "type": "string"
                              },
                              "url": {
                                "description": "The URL of a certificate that has been uploaded to Key Vault as a secret",
                                "type": "string"
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "vaultId": {
                          "description": "The ID of the Vault that contain the certificates.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "vmSize": {
                    "description": "The size of the instances in this node type.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "passwordSecretRef": {
              "description": "Administrator password for the VMs that will be created as part of this cluster.",
              "type": "object",
              "required": [
                "key",
                "name"
              ],
              "properties": {
                "key": {
                  "type": "string"
                },
                "name": {
                  "description": "Name of the secret.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "resourceGroupName": {
              "description": "The name of the Resource Group where the Resource Group should exist. Changing this forces a new Resource Group to be created.",
              "type": "string"
            },
            "resourceGroupNameRef": {
              "description": "Reference to a ResourceGroup in azure to populate resourceGroupName.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referenced object",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "resourceGroupNameSelector": {
              "description": "Selector for a ResourceGroup in azure to populate resourceGroupName.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "namespace": {
                  "description": "Namespace for the selector",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "sku": {
              "description": "SKU for this cluster. Changing this forces a new resource to be created. Default is Basic, allowed values are either Basic or Standard.",
              "type": "string"
            },
            "subnetId": {
              "description": "The resource ID of the Subnet. Changing this forces a new Resource Group to be created.",
              "type": "string"
            },
            "subnetIdRef": {
              "description": "Reference to a Subnet in network to populate subnetId.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referenced object",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "subnetIdSelector": {
              "description": "Selector for a Subnet in network to populate subnetId.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "namespace": {
                  "description": "Namespace for the selector",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "tags": {
              "description": "A mapping of tags which should be assigned to the Resource Group.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "upgradeWave": {
              "description": "Upgrade wave for the fabric runtime. Default is Wave0, allowed value must be one of Wave0, Wave1, or Wave2.",
              "type": "string"
            },
            "username": {
              "description": "Administrator password for the VMs that will be created as part of this cluster.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored\nunless the Management Policies feature flag is disabled.\nInitProvider holds the same fields as ForProvider, with the exception\nof Identifier and other resource reference fields. The fields that are\nin InitProvider are merged into ForProvider when the resource is created.\nThe same fields are also added to the terraform ignore_changes hook, to\navoid updating them after creation. This is useful for fields that are\nrequired on creation, but we do not desire to update them after creation,\nfor example because of an external controller is managing them, like an\nautoscaler.",
          "type": "object",
          "properties": {
            "authentication": {
              "description": "Controls how connections to the cluster are authenticated. A authentication block as defined below.",
              "type": "object",
              "properties": {
                "activeDirectory": {
                  "description": "A active_directory block as defined above.",
                  "type": "object",
                  "properties": {
                    "clientApplicationId": {
                      "description": "The ID of the Client Application.",
                      "type": "string"
                    },
                    "clusterApplicationId": {
                      "description": "The ID of the Cluster Application.",
                      "type": "string"
                    },
                    "tenantId": {
                      "description": "The ID of the Tenant.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "certificate": {
                  "description": "One or more certificate blocks as defined below.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "commonName": {
                        "description": "The certificate's CN.",
                        "type": "string"
                      },
                      "thumbprint": {
                        "description": "The thumbprint of the certificate.",
                        "type": "string"
                      },
                      "type": {
                        "description": "The type of the certificate. Can be AdminClient or ReadOnlyClient.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                }
              },
              "additionalProperties": false
            },
            "backupServiceEnabled": {
              "description": "If true, backup service is enabled.",
              "type": "boolean"
            },
            "clientConnectionPort": {
              "description": "Port to use when connecting to the cluster.",
              "type": "number"
            },
            "customFabricSetting": {
              "description": "One or more custom_fabric_setting blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "parameter": {
                    "description": "Parameter name.",
                    "type": "string"
                  },
                  "section": {
                    "description": "Section name.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Parameter value.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "dnsName": {
              "description": "Hostname for the cluster. If unset the cluster's name will be used..",
              "type": "string"
            },
            "dnsServiceEnabled": {
              "description": "If true, DNS service is enabled.",
              "type": "boolean"
            },
            "httpGatewayPort": {
              "description": "Port that should be used by the Service Fabric Explorer to visualize applications and cluster status.",
              "type": "number"
            },
            "lbRule": {
              "description": "One or more lb_rule blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "backendPort": {
                    "description": "LB Backend port.",
                    "type": "number"
                  },
                  "frontendPort": {
                    "description": "LB Frontend port.",
                    "type": "number"
                  },
                  "probeProtocol": {
                    "description": "Protocol for the probe. Can be one of tcp, udp, http, or https.",
                    "type": "string"
                  },
                  "probeRequestPath": {
                    "description": "Path for the probe to check, when probe protocol is set to http.",
                    "type": "string"
                  },
                  "protocol": {
                    "description": "The transport protocol used in this rule. Can be one of tcp or udp.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "location": {
              "description": "The Azure Region where the Resource Group should exist. Changing this forces a new Resource Group to be created.",
              "type": "string"
            },
            "nodeType": {
              "description": "One or more node_type blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "applicationPortRange": {
                    "description": "Sets the port range available for applications. Format is \u003cfrom_port\u003e-\u003cto_port\u003e, for example 10000-20000.",
                    "type": "string"
                  },
                  "capacities": {
                    "description": "Specifies a list of key/value pairs used to set capacity tags for this node type.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "x-kubernetes-map-type": "granular"
                  },
                  "dataDiskSizeGb": {
                    "description": "The size of the data disk in gigabytes..",
                    "type": "number"
                  },
                  "dataDiskType": {
                    "description": "The type of the disk to use for storing data. It can be one of Premium_LRS, Standard_LRS, or StandardSSD_LRS. Defaults to Standard_LRS.",
                    "type": "string"
                  },
                  "ephemeralPortRange": {
                    "description": "Sets the port range available for the OS. Format is \u003cfrom_port\u003e-\u003cto_port\u003e, for example 10000-20000. There has to be at least 255 ports available and cannot overlap with application_port_range..",
                    "type": "string"
                  },
                  "multiplePlacementGroupsEnabled": {
                    "description": "If set the node type can be composed of multiple placement groups.",
                    "type": "boolean"
                  },
                  "name": {
                    "description": "The name which should be used for this node type.",
                    "type": "string"
                  },
                  "placementProperties": {
                    "description": "Specifies a list of placement tags that can be used to indicate where services should run..",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "x-kubernetes-map-type": "granular"
                  },
                  "primary": {
                    "description": "If set to true, system services will run on this node type. Only one node type should be marked as primary. Primary node type cannot be deleted or changed once they're created.",
                    "type": "boolean"
                  },
                  "stateless": {
                    "description": "If set to true, only stateless workloads can run on this node type.",
                    "type": "boolean"
                  },
                  "vmImageOffer": {
                    "description": "The offer type of the marketplace image cluster VMs will use.",
                    "type": "string"
                  },
                  "vmImagePublisher": {
                    "description": "The publisher of the marketplace image cluster VMs will use.",
                    "type": "string"
                  },
                  "vmImageSku": {
                    "description": "The SKU of the marketplace image cluster VMs will use.",
                    "type": "string"
                  },
                  "vmImageVersion": {
                    "description": "The version of the marketplace image cluster VMs will use.",
                    "type": "string"
                  },
                  "vmInstanceCount": {
                    "description": "The number of instances this node type will launch.",
                    "type": "number"
                  },
                  "vmSecrets": {
                    "description": "One or more vm_secrets blocks as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "certificates": {
                          "description": "One or more certificates blocks as defined above.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "store": {
                                "description": "The certificate store on the Virtual Machine to which the certificate should be added.",
                                "type": "string"
                              },
                              "url": {
                                "description": "The URL of a certificate that has been uploaded to Key Vault as a secret",
                                "type": "string"
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "vaultId": {
                          "description": "The ID of the Vault that contain the certificates.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "vmSize": {
                    "description": "The size of the instances in this node type.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "passwordSecretRef": {
              "description": "Administrator password for the VMs that will be created as part of this cluster.",
              "type": "object",
              "required": [
                "key",
                "name"
              ],
              "properties": {
                "key": {
                  "type": "string"
                },
                "name": {
                  "description": "Name of the secret.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "sku": {
              "description": "SKU for this cluster. Changing this forces a new resource to be created. Default is Basic, allowed values are either Basic or Standard.",
              "type": "string"
            },
            "subnetId": {
              "description": "The resource ID of the Subnet. Changing this forces a new Resource Group to be created.",
              "type": "string"
            },
            "subnetIdRef": {
              "description": "Reference to a Subnet in network to populate subnetId.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referenced object",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "subnetIdSelector": {
              "description": "Selector for a Subnet in network to populate subnetId.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "namespace": {
                  "description": "Namespace for the selector",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "tags": {
              "description": "A mapping of tags which should be assigned to the Resource Group.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "upgradeWave": {
              "description": "Upgrade wave for the fabric runtime. Default is Wave0, allowed value must be one of Wave0, Wave1, or Wave2.",
              "type": "string"
            },
            "username": {
              "description": "Administrator password for the VMs that will be created as part of this cluster.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "managementPolicies": {
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out\nthrough a Crossplane feature flag.\nManagementPolicies specify the array of actions Crossplane is allowed to\ntake on the managed and external resources.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223\nand this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers\ncan take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to\ncreate, observe, update, and delete this managed resource should be\nconfigured.",
          "type": "object",
          "default": {
            "kind": "ClusterProviderConfig",
            "name": "default"
          },
          "required": [
            "kind",
            "name"
          ],
          "properties": {
            "kind": {
              "description": "Kind of the referenced object.",
              "type": "string"
            },
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a\nSecret to which any connection details for this managed resource should\nbe written. Connection details frequently include the endpoint, username,\nand password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false,
      "x-kubernetes-validations": [
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.clientConnectionPort) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.clientConnectionPort))",
          "message": "spec.forProvider.clientConnectionPort is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.httpGatewayPort) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.httpGatewayPort))",
          "message": "spec.forProvider.httpGatewayPort is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.lbRule) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.lbRule))",
          "message": "spec.forProvider.lbRule is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.location))",
          "message": "spec.forProvider.location is a required parameter"
        }
      ]
    },
    "status": {
      "description": "ManagedClusterStatus defines the observed state of ManagedCluster.",
      "type": "object",
      "properties": {
        "atProvider": {
          "type": "object",
          "properties": {
            "authentication": {
              "description": "Controls how connections to the cluster are authenticated. A authentication block as defined below.",
              "type": "object",
              "properties": {
                "activeDirectory": {
                  "description": "A active_directory block as defined above.",
                  "type": "object",
                  "properties": {
                    "clientApplicationId": {
                      "description": "The ID of the Client Application.",
                      "type": "string"
                    },
                    "clusterApplicationId": {
                      "description": "The ID of the Cluster Application.",
                      "type": "string"
                    },
                    "tenantId": {
                      "description": "The ID of the Tenant.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "certificate": {
                  "description": "One or more certificate blocks as defined below.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "commonName": {
                        "description": "The certificate's CN.",
                        "type": "string"
                      },
                      "thumbprint": {
                        "description": "The thumbprint of the certificate.",
                        "type": "string"
                      },
                      "type": {
                        "description": "The type of the certificate. Can be AdminClient or ReadOnlyClient.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                }
              },
              "additionalProperties": false
            },
            "backupServiceEnabled": {
              "description": "If true, backup service is enabled.",
              "type": "boolean"
            },
            "clientConnectionPort": {
              "description": "Port to use when connecting to the cluster.",
              "type": "number"
            },
            "customFabricSetting": {
              "description": "One or more custom_fabric_setting blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "parameter": {
                    "description": "Parameter name.",
                    "type": "string"
                  },
                  "section": {
                    "description": "Section name.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Parameter value.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "dnsName": {
              "description": "Hostname for the cluster. If unset the cluster's name will be used..",
              "type": "string"
            },
            "dnsServiceEnabled": {
              "description": "If true, DNS service is enabled.",
              "type": "boolean"
            },
            "httpGatewayPort": {
              "description": "Port that should be used by the Service Fabric Explorer to visualize applications and cluster status.",
              "type": "number"
            },
            "id": {
              "description": "The ID of the Resource Group.",
              "type": "string"
            },
            "lbRule": {
              "description": "One or more lb_rule blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "backendPort": {
                    "description": "LB Backend port.",
                    "type": "number"
                  },
                  "frontendPort": {
                    "description": "LB Frontend port.",
                    "type": "number"
                  },
                  "probeProtocol": {
                    "description": "Protocol for the probe. Can be one of tcp, udp, http, or https.",
                    "type": "string"
                  },
                  "probeRequestPath": {
                    "description": "Path for the probe to check, when probe protocol is set to http.",
                    "type": "string"
                  },
                  "protocol": {
                    "description": "The transport protocol used in this rule. Can be one of tcp or udp.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "location": {
              "description": "The Azure Region where the Resource Group should exist. Changing this forces a new Resource Group to be created.",
              "type": "string"
            },
            "nodeType": {
              "description": "One or more node_type blocks as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "applicationPortRange": {
                    "description": "Sets the port range available for applications. Format is \u003cfrom_port\u003e-\u003cto_port\u003e, for example 10000-20000.",
                    "type": "string"
                  },
                  "capacities": {
                    "description": "Specifies a list of key/value pairs used to set capacity tags for this node type.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "x-kubernetes-map-type": "granular"
                  },
                  "dataDiskSizeGb": {
                    "description": "The size of the data disk in gigabytes..",
                    "type": "number"
                  },
                  "dataDiskType": {
                    "description": "The type of the disk to use for storing data. It can be one of Premium_LRS, Standard_LRS, or StandardSSD_LRS. Defaults to Standard_LRS.",
                    "type": "string"
                  },
                  "ephemeralPortRange": {
                    "description": "Sets the port range available for the OS. Format is \u003cfrom_port\u003e-\u003cto_port\u003e, for example 10000-20000. There has to be at least 255 ports available and cannot overlap with application_port_range..",
                    "type": "string"
                  },
                  "id": {
                    "description": "The ID of the Resource Group.",
                    "type": "string"
                  },
                  "multiplePlacementGroupsEnabled": {
                    "description": "If set the node type can be composed of multiple placement groups.",
                    "type": "boolean"
                  },
                  "name": {
                    "description": "The name which should be used for this node type.",
                    "type": "string"
                  },
                  "placementProperties": {
                    "description": "Specifies a list of placement tags that can be used to indicate where services should run..",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "x-kubernetes-map-type": "granular"
                  },
                  "primary": {
                    "description": "If set to true, system services will run on this node type. Only one node type should be marked as primary. Primary node type cannot be deleted or changed once they're created.",
                    "type": "boolean"
                  },
                  "stateless": {
                    "description": "If set to true, only stateless workloads can run on this node type.",
                    "type": "boolean"
                  },
                  "vmImageOffer": {
                    "description": "The offer type of the marketplace image cluster VMs will use.",
                    "type": "string"
                  },
                  "vmImagePublisher": {
                    "description": "The publisher of the marketplace image cluster VMs will use.",
                    "type": "string"
                  },
                  "vmImageSku": {
                    "description": "The SKU of the marketplace image cluster VMs will use.",
                    "type": "string"
                  },
                  "vmImageVersion": {
                    "description": "The version of the marketplace image cluster VMs will use.",
                    "type": "string"
                  },
                  "vmInstanceCount": {
                    "description": "The number of instances this node type will launch.",
                    "type": "number"
                  },
                  "vmSecrets": {
                    "description": "One or more vm_secrets blocks as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "certificates": {
                          "description": "One or more certificates blocks as defined above.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "store": {
                                "description": "The certificate store on the Virtual Machine to which the certificate should be added.",
                                "type": "string"
                              },
                              "url": {
                                "description": "The URL of a certificate that has been uploaded to Key Vault as a secret",
                                "type": "string"
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "vaultId": {
                          "description": "The ID of the Vault that contain the certificates.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "vmSize": {
                    "description": "The size of the instances in this node type.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "resourceGroupName": {
              "description": "The name of the Resource Group where the Resource Group should exist. Changing this forces a new Resource Group to be created.",
              "type": "string"
            },
            "sku": {
              "description": "SKU for this cluster. Changing this forces a new resource to be created. Default is Basic, allowed values are either Basic or Standard.",
              "type": "string"
            },
            "subnetId": {
              "description": "The resource ID of the Subnet. Changing this forces a new Resource Group to be created.",
              "type": "string"
            },
            "tags": {
              "description": "A mapping of tags which should be assigned to the Resource Group.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "upgradeWave": {
              "description": "Upgrade wave for the fabric runtime. Default is Wave0, allowed value must be one of Wave0, Wave1, or Wave2.",
              "type": "string"
            },
            "username": {
              "description": "Administrator password for the VMs that will be created as part of this cluster.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "type": "array",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one\nstatus to another.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from\none status to another, if any.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to\na resource at any point in time.",
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest metadata.generation\nwhich resulted in either a ready state, or stalled due to error\nit can not recover from without human intervention.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    }
  }
}
