{
  "description": "VaultSecret is the Schema for the vaultsecrets API",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "VaultSecretSpec defines the desired state of VaultSecret",
      "type": "object",
      "properties": {
        "output": {
          "description": "TemplatizedK8sSecret is the formatted K8s Secret created by templating from the Vault KV secrets.",
          "type": "object",
          "properties": {
            "annotations": {
              "description": "Annotations are annotations to add to the final K8s Secret.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "labels": {
              "description": "Labels are labels to add to the final K8s Secret.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "name": {
              "description": "Name is the K8s Secret name to output to.",
              "type": "string"
            },
            "stringData": {
              "description": "StringData is the K8s Secret stringData and allows specifying non-binary secret data in string form with go templating support\nto transform the Vault KV secrets into a formatted K8s Secret.\nThe Sprig template library and Helm functions (like toYaml) are supported.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "type": {
              "description": "Type is the K8s Secret type to output to.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "refreshPeriod": {
          "description": "RefreshPeriod if specified, the operator will refresh the secret with the given frequency.\nThis takes precedence over any vault secret lease duration and can be used to force a refresh.",
          "type": "string"
        },
        "refreshThreshold": {
          "description": "RefreshThreshold if specified, will instruct the operator to refresh when a percentage of the lease duration is met when there is no RefreshPeriod specified.\nThis is particularly useful for controlling when dynamic secrets should be refreshed before the lease duration is exceeded.\nThe default is 90, meaning the secret would refresh after 90% of the time has passed from the vault secret's lease duration.",
          "type": "integer",
          "default": 90
        },
        "vaultSecretDefinitions": {
          "description": "VaultSecretDefinitions are the secrets in Vault.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "authentication": {
                "description": "Authentication is the kube auth configuraiton to be used to execute this request",
                "type": "object",
                "properties": {
                  "namespace": {
                    "description": "Namespace is the Vault namespace to be used in all the operations withing this connection/authentication. Only available in Vault Enterprise.",
                    "type": "string"
                  },
                  "path": {
                    "description": "Path is the path of the role used for this kube auth authentication. The operator will try to authenticate at {[namespace/]}auth/{spec.path}",
                    "type": "string",
                    "default": "kubernetes",
                    "pattern": "^(?:/?[\\w;:@\u0026=\\$-\\.\\+]*)+/?"
                  },
                  "role": {
                    "description": "Role the role to be used during authentication",
                    "type": "string"
                  },
                  "serviceAccount": {
                    "description": "ServiceAccount is the service account used for the kube auth authentication",
                    "type": "object",
                    "default": {
                      "name": "default"
                    },
                    "properties": {
                      "name": {
                        "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false,
                    "x-kubernetes-map-type": "atomic"
                  }
                },
                "additionalProperties": false
              },
              "connection": {
                "description": "Connection represents the information needed to connect to Vault. This operator uses the standard Vault environment variables to connect to Vault. If you need to override those settings and for example connect to a different Vault instance, you can do with this section of the CR.",
                "type": "object",
                "properties": {
                  "address": {
                    "description": "Address Address of the Vault server expressed as a URL and port, for example: https://127.0.0.1:8200/",
                    "type": "string"
                  },
                  "maxRetries": {
                    "description": "MaxRetries Maximum number of retries when certain error codes are encountered. The default is 2, for three total attempts. Set this to 0 or less to disable retrying. Error codes that are retried are 412 (client consistency requirement not satisfied) and all 5xx except for 501 (not implemented).",
                    "type": "integer"
                  },
                  "tLSConfig": {
                    "type": "object",
                    "properties": {
                      "cacert": {
                        "description": "Cacert Path to a PEM-encoded CA certificate file on the local disk. This file is used to verify the Vault server's SSL certificate. This environment variable takes precedence over a cert passed via the secret.",
                        "type": "string"
                      },
                      "skipVerify": {
                        "description": "SkipVerify Do not verify Vault's presented certificate before communicating with it. Setting this variable is not recommended and voids Vault's security model.",
                        "type": "boolean"
                      },
                      "tlsSecret": {
                        "description": "TLSSecret namespace-local secret containing the tls material for the connection. the expected keys for the secret are: ca bundle -\u003e \"ca.crt\", certificate -\u003e \"tls.crt\", key -\u003e \"tls.key\"",
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                            "type": "string"
                          }
                        },
                        "additionalProperties": false,
                        "x-kubernetes-map-type": "atomic"
                      },
                      "tlsServerName": {
                        "description": "TLSServerName Name to use as the SNI host when connecting via TLS.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "timeOut": {
                    "description": "Timeout Timeout variable. The default value is 60s.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              },
              "name": {
                "description": "Name is an arbitrary, but unique, name for this KV Vault secret and referenced when templating.",
                "type": "string"
              },
              "path": {
                "description": "Path is the path of the secret.",
                "type": "string",
                "default": "kubernetes",
                "pattern": "^(?:/?[\\w;:@\u0026=\\$-\\.\\+]*)+/?"
              },
              "requestPayload": {
                "description": "RequestPayload for POST type of requests, this field contains the payload of the request. Not used for GET requests.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "requestType": {
                "description": "RequestType the type of request needed to retrieve a secret. Normally a GET, but some secret engnes require a POST.",
                "type": "string",
                "default": "GET",
                "enum": [
                  "GET",
                  "POST"
                ]
              }
            },
            "additionalProperties": false
          }
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "VaultSecretStatus defines the observed state of VaultSecret",
      "type": "object",
      "properties": {
        "conditions": {
          "type": "array",
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource.\n---\nThis struct is intended for direct use as an array at the field path .status.conditions.  For example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the observations of a foo's current state.\n\t    // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    // +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t    // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t    // other fields\n\t}",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                "type": "string",
                "maxLength": 32768
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64",
                "minimum": 0
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                "type": "string",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "type": "string",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ]
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase.\n---\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions can be\nuseful (see .node.status.conditions), the ability to deconflict is important.\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                "type": "string",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "lastVaultSecretUpdate": {
          "description": "LastVaultSecretUpdate the last time when this secret was updated from Vault",
          "type": "string",
          "format": "date-time"
        },
        "nextVaultSecretUpdate": {
          "description": "NextVaultSecretUpdate the next time when this secret will be synced with Vault. If nil, it will not be refreshed.",
          "type": "string",
          "format": "date-time"
        },
        "vaultSecretDefinitionsStatus": {
          "description": "VaultSecretDefinitionsStatus information used to determine if the secret should be rereconciled",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "lease_duration": {
                "description": "LeaseDuration is the time until the secret should be read in again, thus recreating the k8s Secret",
                "type": "integer"
              },
              "lease_id": {
                "description": "LeaseID is the id of a lease, this denotes the secret is dynamic",
                "type": "string"
              },
              "name": {
                "description": "Name is an arbitrary, but unique, name for this KV Vault secret and referenced when templating.",
                "type": "string"
              },
              "renewable": {
                "description": "Renewable informs if the lease is renewable for the dynamic secret",
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        }
      },
      "additionalProperties": false
    }
  }
}
