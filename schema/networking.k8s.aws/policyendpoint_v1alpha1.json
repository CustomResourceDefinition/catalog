{
  "description": "PolicyEndpoint is the Schema for the policyendpoints API",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "PolicyEndpointSpec defines the desired state of PolicyEndpoint",
      "type": "object",
      "required": [
        "policyRef"
      ],
      "properties": {
        "egress": {
          "description": "Egress is the list of egress rules containing resolved network addresses",
          "type": "array",
          "items": {
            "description": "EndpointInfo defines the network endpoint information for the policy ingress/egress",
            "type": "object",
            "required": [
              "cidr"
            ],
            "properties": {
              "cidr": {
                "description": "CIDR is the network address(s) of the endpoint",
                "type": "string"
              },
              "except": {
                "description": "Except is the exceptions to the CIDR ranges mentioned above.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "ports": {
                "description": "Ports is the list of ports",
                "type": "array",
                "items": {
                  "description": "Port contains information about the transport port/protocol",
                  "type": "object",
                  "properties": {
                    "endPort": {
                      "description": "Endport specifies the port range port to endPort\nport must be defined and an integer, endPort \u003e port",
                      "type": "integer",
                      "format": "int32"
                    },
                    "port": {
                      "description": "Port specifies the numerical port for the protocol. If empty applies to all ports",
                      "type": "integer",
                      "format": "int32"
                    },
                    "protocol": {
                      "description": "Protocol specifies the transport protocol, default TCP",
                      "type": "string",
                      "default": "TCP"
                    }
                  },
                  "additionalProperties": false
                }
              }
            },
            "additionalProperties": false
          }
        },
        "ingress": {
          "description": "Ingress is the list of ingress rules containing resolved network addresses",
          "type": "array",
          "items": {
            "description": "EndpointInfo defines the network endpoint information for the policy ingress/egress",
            "type": "object",
            "required": [
              "cidr"
            ],
            "properties": {
              "cidr": {
                "description": "CIDR is the network address(s) of the endpoint",
                "type": "string"
              },
              "except": {
                "description": "Except is the exceptions to the CIDR ranges mentioned above.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "ports": {
                "description": "Ports is the list of ports",
                "type": "array",
                "items": {
                  "description": "Port contains information about the transport port/protocol",
                  "type": "object",
                  "properties": {
                    "endPort": {
                      "description": "Endport specifies the port range port to endPort\nport must be defined and an integer, endPort \u003e port",
                      "type": "integer",
                      "format": "int32"
                    },
                    "port": {
                      "description": "Port specifies the numerical port for the protocol. If empty applies to all ports",
                      "type": "integer",
                      "format": "int32"
                    },
                    "protocol": {
                      "description": "Protocol specifies the transport protocol, default TCP",
                      "type": "string",
                      "default": "TCP"
                    }
                  },
                  "additionalProperties": false
                }
              }
            },
            "additionalProperties": false
          }
        },
        "podIsolation": {
          "description": "PodIsolation specifies whether the pod needs to be isolated for a\nparticular traffic direction Ingress or Egress, or both. If default isolation is not\nspecified, and there are no ingress/egress rules, then the pod is not isolated\nfrom the point of view of this policy. This follows the NetworkPolicy spec.PolicyTypes.",
          "type": "array",
          "items": {
            "description": "PolicyType string describes the NetworkPolicy type\nThis type is beta-level in 1.8",
            "type": "string"
          }
        },
        "podSelector": {
          "description": "PodSelector is the podSelector from the policy resource",
          "type": "object",
          "properties": {
            "matchExpressions": {
              "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
              "type": "array",
              "items": {
                "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                "type": "object",
                "required": [
                  "key",
                  "operator"
                ],
                "properties": {
                  "key": {
                    "description": "key is the label key that the selector applies to.",
                    "type": "string"
                  },
                  "operator": {
                    "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                    "type": "string"
                  },
                  "values": {
                    "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "x-kubernetes-list-type": "atomic"
                  }
                },
                "additionalProperties": false
              },
              "x-kubernetes-list-type": "atomic"
            },
            "matchLabels": {
              "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false,
          "x-kubernetes-map-type": "atomic"
        },
        "podSelectorEndpoints": {
          "description": "PodSelectorEndpoints contains information about the pods\nmatching the podSelector",
          "type": "array",
          "items": {
            "description": "PodEndpoint defines the summary information for the pods",
            "type": "object",
            "required": [
              "hostIP",
              "name",
              "namespace",
              "podIP"
            ],
            "properties": {
              "hostIP": {
                "description": "HostIP is the IP address of the host the pod is currently running on",
                "type": "string"
              },
              "name": {
                "description": "Name is the pod name",
                "type": "string"
              },
              "namespace": {
                "description": "Namespace is the pod namespace",
                "type": "string"
              },
              "podIP": {
                "description": "PodIP is the IP address of the pod",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "policyRef": {
          "description": "PolicyRef is a reference to the Kubernetes NetworkPolicy resource.",
          "type": "object",
          "required": [
            "name",
            "namespace"
          ],
          "properties": {
            "name": {
              "description": "Name is the name of the Policy",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace is the namespace of the Policy",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "PolicyEndpointStatus defines the observed state of PolicyEndpoint",
      "type": "object"
    }
  }
}
