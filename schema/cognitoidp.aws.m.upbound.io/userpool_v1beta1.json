{
  "description": "UserPool is the Schema for the UserPools API. Provides a Cognito User Pool resource.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "UserPoolSpec defines the desired state of UserPool",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "forProvider": {
          "type": "object",
          "required": [
            "region"
          ],
          "properties": {
            "accountRecoverySetting": {
              "description": "Configuration block to define which verified available method a user can use to recover their forgotten password. Detailed below.",
              "type": "object",
              "properties": {
                "recoveryMechanism": {
                  "description": "List of Account Recovery Options of the following structure:",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "Name of the user pool.",
                        "type": "string"
                      },
                      "priority": {
                        "description": "Positive integer specifying priority of a method with 1 being the highest priority.",
                        "type": "number"
                      }
                    },
                    "additionalProperties": false
                  }
                }
              },
              "additionalProperties": false
            },
            "adminCreateUserConfig": {
              "description": "Configuration block for creating a new user profile. Detailed below.",
              "type": "object",
              "properties": {
                "allowAdminCreateUserOnly": {
                  "description": "Set to True if only the administrator is allowed to create user profiles. Set to False if users can sign themselves up via an app.",
                  "type": "boolean"
                },
                "inviteMessageTemplate": {
                  "description": "Invite message template structure. Detailed below.",
                  "type": "object",
                  "properties": {
                    "emailMessage": {
                      "description": "Message template for email messages. Must contain {username} and {####} placeholders, for username and temporary password, respectively.",
                      "type": "string"
                    },
                    "emailSubject": {
                      "description": "Subject line for email messages.",
                      "type": "string"
                    },
                    "smsMessage": {
                      "description": "Message template for SMS messages. Must contain {username} and {####} placeholders, for username and temporary password, respectively.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "aliasAttributes": {
              "description": "Attributes supported as an alias for this user pool. Valid values: phone_number, email, or preferred_username. Conflicts with username_attributes.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-kubernetes-list-type": "set"
            },
            "autoVerifiedAttributes": {
              "description": "Attributes to be auto-verified. Valid values: email, phone_number.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-kubernetes-list-type": "set"
            },
            "deletionProtection": {
              "description": "When active, DeletionProtection prevents accidental deletion of your user pool. Before you can delete a user pool that you have protected against deletion, you must deactivate this feature. Valid values are ACTIVE and INACTIVE, Default value is INACTIVE.",
              "type": "string"
            },
            "deviceConfiguration": {
              "description": "Configuration block for the user pool's device tracking. Detailed below.",
              "type": "object",
              "properties": {
                "challengeRequiredOnNewDevice": {
                  "description": "Whether a challenge is required on a new device. Only applicable to a new device.",
                  "type": "boolean"
                },
                "deviceOnlyRememberedOnUserPrompt": {
                  "description": "Whether a device is only remembered on user prompt. false equates to \"Always\" remember, true is \"User Opt In,\" and not using a device_configuration block is \"No.\"",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "emailConfiguration": {
              "description": "Configuration block for configuring email. Detailed below.",
              "type": "object",
              "properties": {
                "configurationSet": {
                  "description": "Email configuration set name from SES.",
                  "type": "string"
                },
                "emailSendingAccount": {
                  "description": "Email delivery method to use. COGNITO_DEFAULT for the default email functionality built into Cognito or DEVELOPER to use your Amazon SES configuration. Required to be DEVELOPER if from_email_address is set.",
                  "type": "string"
                },
                "fromEmailAddress": {
                  "description": "Sender’s email address or sender’s display name with their email address (e.g., john@example.com, John Smith \u003cjohn@example.com\u003e or \\\"John Smith Ph.D.\\\" \u003cjohn@example.com\u003e). Escaped double quotes are required around display names that contain certain characters as specified in RFC 5322.",
                  "type": "string"
                },
                "replyToEmailAddress": {
                  "description": "REPLY-TO email address.",
                  "type": "string"
                },
                "sourceArn": {
                  "description": "ARN of the SES verified email identity to use. Required if email_sending_account is set to DEVELOPER.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "emailMfaConfiguration": {
              "description": "Configuration block for configuring email Multi-Factor Authentication (MFA); requires at least 2 account_recovery_setting entries; requires an email_configuration configuration block. Detailed below.",
              "type": "object",
              "properties": {
                "message": {
                  "description": "The template for the email messages that your user pool sends to users with codes for MFA and sign-in with email OTPs. The message must contain the {####} placeholder. In the message, Amazon Cognito replaces this placeholder with the code. If you don't provide this parameter, Amazon Cognito sends messages in the default format.",
                  "type": "string"
                },
                "subject": {
                  "description": "The subject of the email messages that your user pool sends to users with codes for MFA and email OTP sign-in.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "emailVerificationMessage": {
              "description": "String representing the email verification message. Conflicts with verification_message_template configuration block email_message argument.",
              "type": "string"
            },
            "emailVerificationSubject": {
              "description": "String representing the email verification subject. Conflicts with verification_message_template configuration block email_subject argument.",
              "type": "string"
            },
            "lambdaConfig": {
              "description": "Configuration block for the AWS Lambda triggers associated with the user pool. Detailed below.",
              "type": "object",
              "properties": {
                "createAuthChallenge": {
                  "description": "ARN of the lambda creating an authentication challenge.",
                  "type": "string"
                },
                "createAuthChallengeRef": {
                  "description": "Reference to a Function in lambda to populate createAuthChallenge.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name of the referenced object.",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace of the referenced object",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for referencing.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "createAuthChallengeSelector": {
                  "description": "Selector for a Function in lambda to populate createAuthChallenge.",
                  "type": "object",
                  "properties": {
                    "matchControllerRef": {
                      "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                      "type": "boolean"
                    },
                    "matchLabels": {
                      "description": "MatchLabels ensures an object with matching labels is selected.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "namespace": {
                      "description": "Namespace for the selector",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for selection.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "customEmailSender": {
                  "description": "A custom email sender AWS Lambda trigger. See custom_email_sender Below.",
                  "type": "object",
                  "properties": {
                    "lambdaArn": {
                      "description": "The Lambda Amazon Resource Name of the Lambda function that Amazon Cognito triggers to send email notifications to users.",
                      "type": "string"
                    },
                    "lambdaArnRef": {
                      "description": "Reference to a Function in lambda to populate lambdaArn.",
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "name": {
                          "description": "Name of the referenced object.",
                          "type": "string"
                        },
                        "namespace": {
                          "description": "Namespace of the referenced object",
                          "type": "string"
                        },
                        "policy": {
                          "description": "Policies for referencing.",
                          "type": "object",
                          "properties": {
                            "resolution": {
                              "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                              "type": "string",
                              "default": "Required",
                              "enum": [
                                "Required",
                                "Optional"
                              ]
                            },
                            "resolve": {
                              "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                              "type": "string",
                              "enum": [
                                "Always",
                                "IfNotPresent"
                              ]
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    },
                    "lambdaArnSelector": {
                      "description": "Selector for a Function in lambda to populate lambdaArn.",
                      "type": "object",
                      "properties": {
                        "matchControllerRef": {
                          "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                          "type": "boolean"
                        },
                        "matchLabels": {
                          "description": "MatchLabels ensures an object with matching labels is selected.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "namespace": {
                          "description": "Namespace for the selector",
                          "type": "string"
                        },
                        "policy": {
                          "description": "Policies for selection.",
                          "type": "object",
                          "properties": {
                            "resolution": {
                              "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                              "type": "string",
                              "default": "Required",
                              "enum": [
                                "Required",
                                "Optional"
                              ]
                            },
                            "resolve": {
                              "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                              "type": "string",
                              "enum": [
                                "Always",
                                "IfNotPresent"
                              ]
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    },
                    "lambdaVersion": {
                      "description": "The Lambda version represents the signature of the \"request\" attribute in the \"event\" information Amazon Cognito passes to your custom email Lambda function. The only supported value is V1_0.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "customMessage": {
                  "description": "Custom Message AWS Lambda trigger.",
                  "type": "string"
                },
                "customMessageRef": {
                  "description": "Reference to a Function in lambda to populate customMessage.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name of the referenced object.",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace of the referenced object",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for referencing.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "customMessageSelector": {
                  "description": "Selector for a Function in lambda to populate customMessage.",
                  "type": "object",
                  "properties": {
                    "matchControllerRef": {
                      "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                      "type": "boolean"
                    },
                    "matchLabels": {
                      "description": "MatchLabels ensures an object with matching labels is selected.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "namespace": {
                      "description": "Namespace for the selector",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for selection.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "customSmsSender": {
                  "description": "A custom SMS sender AWS Lambda trigger. See custom_sms_sender Below.",
                  "type": "object",
                  "properties": {
                    "lambdaArn": {
                      "description": "The Lambda Amazon Resource Name of the Lambda function that Amazon Cognito triggers to send SMS notifications to users.",
                      "type": "string"
                    },
                    "lambdaArnRef": {
                      "description": "Reference to a Function in lambda to populate lambdaArn.",
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "name": {
                          "description": "Name of the referenced object.",
                          "type": "string"
                        },
                        "namespace": {
                          "description": "Namespace of the referenced object",
                          "type": "string"
                        },
                        "policy": {
                          "description": "Policies for referencing.",
                          "type": "object",
                          "properties": {
                            "resolution": {
                              "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                              "type": "string",
                              "default": "Required",
                              "enum": [
                                "Required",
                                "Optional"
                              ]
                            },
                            "resolve": {
                              "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                              "type": "string",
                              "enum": [
                                "Always",
                                "IfNotPresent"
                              ]
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    },
                    "lambdaArnSelector": {
                      "description": "Selector for a Function in lambda to populate lambdaArn.",
                      "type": "object",
                      "properties": {
                        "matchControllerRef": {
                          "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                          "type": "boolean"
                        },
                        "matchLabels": {
                          "description": "MatchLabels ensures an object with matching labels is selected.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "namespace": {
                          "description": "Namespace for the selector",
                          "type": "string"
                        },
                        "policy": {
                          "description": "Policies for selection.",
                          "type": "object",
                          "properties": {
                            "resolution": {
                              "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                              "type": "string",
                              "default": "Required",
                              "enum": [
                                "Required",
                                "Optional"
                              ]
                            },
                            "resolve": {
                              "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                              "type": "string",
                              "enum": [
                                "Always",
                                "IfNotPresent"
                              ]
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    },
                    "lambdaVersion": {
                      "description": "The Lambda version represents the signature of the \"request\" attribute in the \"event\" information Amazon Cognito passes to your custom SMS Lambda function. The only supported value is V1_0.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "defineAuthChallenge": {
                  "description": "Defines the authentication challenge.",
                  "type": "string"
                },
                "defineAuthChallengeRef": {
                  "description": "Reference to a Function in lambda to populate defineAuthChallenge.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name of the referenced object.",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace of the referenced object",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for referencing.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "defineAuthChallengeSelector": {
                  "description": "Selector for a Function in lambda to populate defineAuthChallenge.",
                  "type": "object",
                  "properties": {
                    "matchControllerRef": {
                      "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                      "type": "boolean"
                    },
                    "matchLabels": {
                      "description": "MatchLabels ensures an object with matching labels is selected.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "namespace": {
                      "description": "Namespace for the selector",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for selection.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "kmsKeyId": {
                  "description": "The Amazon Resource Name of Key Management Service Customer master keys. Amazon Cognito uses the key to encrypt codes and temporary passwords sent to CustomEmailSender and CustomSMSSender.",
                  "type": "string"
                },
                "kmsKeyIdRef": {
                  "description": "Reference to a Key in kms to populate kmsKeyId.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name of the referenced object.",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace of the referenced object",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for referencing.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "kmsKeyIdSelector": {
                  "description": "Selector for a Key in kms to populate kmsKeyId.",
                  "type": "object",
                  "properties": {
                    "matchControllerRef": {
                      "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                      "type": "boolean"
                    },
                    "matchLabels": {
                      "description": "MatchLabels ensures an object with matching labels is selected.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "namespace": {
                      "description": "Namespace for the selector",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for selection.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "postAuthentication": {
                  "description": "Post-authentication AWS Lambda trigger.",
                  "type": "string"
                },
                "postAuthenticationRef": {
                  "description": "Reference to a Function in lambda to populate postAuthentication.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name of the referenced object.",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace of the referenced object",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for referencing.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "postAuthenticationSelector": {
                  "description": "Selector for a Function in lambda to populate postAuthentication.",
                  "type": "object",
                  "properties": {
                    "matchControllerRef": {
                      "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                      "type": "boolean"
                    },
                    "matchLabels": {
                      "description": "MatchLabels ensures an object with matching labels is selected.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "namespace": {
                      "description": "Namespace for the selector",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for selection.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "postConfirmation": {
                  "description": "Post-confirmation AWS Lambda trigger.",
                  "type": "string"
                },
                "postConfirmationRef": {
                  "description": "Reference to a Function in lambda to populate postConfirmation.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name of the referenced object.",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace of the referenced object",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for referencing.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "postConfirmationSelector": {
                  "description": "Selector for a Function in lambda to populate postConfirmation.",
                  "type": "object",
                  "properties": {
                    "matchControllerRef": {
                      "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                      "type": "boolean"
                    },
                    "matchLabels": {
                      "description": "MatchLabels ensures an object with matching labels is selected.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "namespace": {
                      "description": "Namespace for the selector",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for selection.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "preAuthentication": {
                  "description": "Pre-authentication AWS Lambda trigger.",
                  "type": "string"
                },
                "preAuthenticationRef": {
                  "description": "Reference to a Function in lambda to populate preAuthentication.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name of the referenced object.",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace of the referenced object",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for referencing.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "preAuthenticationSelector": {
                  "description": "Selector for a Function in lambda to populate preAuthentication.",
                  "type": "object",
                  "properties": {
                    "matchControllerRef": {
                      "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                      "type": "boolean"
                    },
                    "matchLabels": {
                      "description": "MatchLabels ensures an object with matching labels is selected.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "namespace": {
                      "description": "Namespace for the selector",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for selection.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "preSignUp": {
                  "description": "Pre-registration AWS Lambda trigger.",
                  "type": "string"
                },
                "preSignUpRef": {
                  "description": "Reference to a Function in lambda to populate preSignUp.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name of the referenced object.",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace of the referenced object",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for referencing.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "preSignUpSelector": {
                  "description": "Selector for a Function in lambda to populate preSignUp.",
                  "type": "object",
                  "properties": {
                    "matchControllerRef": {
                      "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                      "type": "boolean"
                    },
                    "matchLabels": {
                      "description": "MatchLabels ensures an object with matching labels is selected.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "namespace": {
                      "description": "Namespace for the selector",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for selection.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "preTokenGeneration": {
                  "description": "Allow to customize identity token claims before token generation. Set this parameter for legacy purposes; for new instances of pre token generation triggers, set the lambda_arn of pre_token_generation_config.",
                  "type": "string"
                },
                "preTokenGenerationConfig": {
                  "description": "Allow to customize access tokens. See pre_token_configuration_type",
                  "type": "object",
                  "properties": {
                    "lambdaArn": {
                      "description": "The Lambda Amazon Resource Name of the Lambda function that Amazon Cognito triggers to send SMS notifications to users.",
                      "type": "string"
                    },
                    "lambdaVersion": {
                      "description": "The Lambda version represents the signature of the \"version\" attribute in the \"event\" information Amazon Cognito passes to your pre Token Generation Lambda function. The supported values are V1_0, V2_0, V3_0.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "preTokenGenerationRef": {
                  "description": "Reference to a Function in lambda to populate preTokenGeneration.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name of the referenced object.",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace of the referenced object",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for referencing.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "preTokenGenerationSelector": {
                  "description": "Selector for a Function in lambda to populate preTokenGeneration.",
                  "type": "object",
                  "properties": {
                    "matchControllerRef": {
                      "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                      "type": "boolean"
                    },
                    "matchLabels": {
                      "description": "MatchLabels ensures an object with matching labels is selected.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "namespace": {
                      "description": "Namespace for the selector",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for selection.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "userMigration": {
                  "description": "User migration Lambda config type.",
                  "type": "string"
                },
                "userMigrationRef": {
                  "description": "Reference to a Function in lambda to populate userMigration.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name of the referenced object.",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace of the referenced object",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for referencing.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "userMigrationSelector": {
                  "description": "Selector for a Function in lambda to populate userMigration.",
                  "type": "object",
                  "properties": {
                    "matchControllerRef": {
                      "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                      "type": "boolean"
                    },
                    "matchLabels": {
                      "description": "MatchLabels ensures an object with matching labels is selected.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "namespace": {
                      "description": "Namespace for the selector",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for selection.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "verifyAuthChallengeResponse": {
                  "description": "Verifies the authentication challenge response.",
                  "type": "string"
                },
                "verifyAuthChallengeResponseRef": {
                  "description": "Reference to a Function in lambda to populate verifyAuthChallengeResponse.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name of the referenced object.",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace of the referenced object",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for referencing.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "verifyAuthChallengeResponseSelector": {
                  "description": "Selector for a Function in lambda to populate verifyAuthChallengeResponse.",
                  "type": "object",
                  "properties": {
                    "matchControllerRef": {
                      "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                      "type": "boolean"
                    },
                    "matchLabels": {
                      "description": "MatchLabels ensures an object with matching labels is selected.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "namespace": {
                      "description": "Namespace for the selector",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for selection.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "mfaConfiguration": {
              "description": "Multi-Factor Authentication (MFA) configuration for the User Pool. Defaults of OFF. Valid values are OFF (MFA Tokens are not required), ON (MFA is required for all users to sign in; requires at least one of sms_configuration or software_token_mfa_configuration to be configured), or OPTIONAL (MFA Will be required only for individual users who have MFA Enabled; requires at least one of sms_configuration or software_token_mfa_configuration to be configured).",
              "type": "string"
            },
            "name": {
              "description": "Name of the user pool.",
              "type": "string"
            },
            "passwordPolicy": {
              "description": "Configuration block for information about the user pool password policy. Detailed below.",
              "type": "object",
              "properties": {
                "minimumLength": {
                  "description": "Minimum length of the password policy that you have set.",
                  "type": "number"
                },
                "passwordHistorySize": {
                  "description": "Number of previous passwords that you want Amazon Cognito to restrict each user from reusing. Users can't set a password that matches any of number of previous passwords specified by this argument. A value of 0 means that password history is not enforced. Valid values are between 0 and 24.",
                  "type": "number"
                },
                "requireLowercase": {
                  "description": "Whether you have required users to use at least one lowercase letter in their password.",
                  "type": "boolean"
                },
                "requireNumbers": {
                  "description": "Whether you have required users to use at least one number in their password.",
                  "type": "boolean"
                },
                "requireSymbols": {
                  "description": "Whether you have required users to use at least one symbol in their password.",
                  "type": "boolean"
                },
                "requireUppercase": {
                  "description": "Whether you have required users to use at least one uppercase letter in their password.",
                  "type": "boolean"
                },
                "temporaryPasswordValidityDays": {
                  "description": "In the password policy you have set, refers to the number of days a temporary password is valid. If the user does not sign-in during this time, their password will need to be reset by an administrator.",
                  "type": "number"
                }
              },
              "additionalProperties": false
            },
            "region": {
              "description": "Region where this resource will be managed. Defaults to the Region set in the provider configuration.\nRegion is the region you'd like your resource to be created in.",
              "type": "string"
            },
            "schema": {
              "description": "Configuration block for the schema attributes of a user pool. Detailed below. Schema attributes from the standard attribute set only need to be specified if they are different from the default configuration. Attributes can be added, but not modified or removed. Maximum of 50 attributes.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "attributeDataType": {
                    "description": "Attribute data type. Must be one of Boolean, Number, String, DateTime.",
                    "type": "string"
                  },
                  "developerOnlyAttribute": {
                    "description": "Whether the attribute type is developer only.",
                    "type": "boolean"
                  },
                  "mutable": {
                    "description": "Whether the attribute can be changed once it has been created.",
                    "type": "boolean"
                  },
                  "name": {
                    "description": "Name of the user pool.",
                    "type": "string"
                  },
                  "numberAttributeConstraints": {
                    "description": "Configuration block for the constraints for an attribute of the number type. Detailed below.",
                    "type": "object",
                    "properties": {
                      "maxValue": {
                        "description": "Maximum value of an attribute that is of the number data type.",
                        "type": "string"
                      },
                      "minValue": {
                        "description": "Minimum value of an attribute that is of the number data type.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "required": {
                    "description": "Whether a user pool attribute is required. If the attribute is required and the user does not provide a value, registration or sign-in will fail.",
                    "type": "boolean"
                  },
                  "stringAttributeConstraints": {
                    "description": "Constraints for an attribute of the string type. Detailed below.",
                    "type": "object",
                    "properties": {
                      "maxLength": {
                        "description": "Maximum length of an attribute value of the string type.",
                        "type": "string"
                      },
                      "minLength": {
                        "description": "Minimum length of an attribute value of the string type.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              }
            },
            "signInPolicy": {
              "description": "Configuration block for information about the user pool sign in policy. Detailed below.",
              "type": "object",
              "properties": {
                "allowedFirstAuthFactors": {
                  "description": "The sign in methods your user pool supports as the first factor. This is a list of strings, allowed values are PASSWORD, EMAIL_OTP, SMS_OTP, and WEB_AUTHN.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "x-kubernetes-list-type": "set"
                }
              },
              "additionalProperties": false
            },
            "smsAuthenticationMessage": {
              "description": "String representing the SMS authentication message. The Message must contain the {####} placeholder, which will be replaced with the code.",
              "type": "string"
            },
            "smsConfiguration": {
              "description": "Configuration block for Short Message Service (SMS) settings. Detailed below. These settings apply to SMS user verification and SMS Multi-Factor Authentication (MFA). Due to Cognito API restrictions, the SMS configuration cannot be removed without recreating the Cognito User Pool. For user data safety, this resource will ignore the removal of this configuration by disabling drift detection. To force resource recreation after this configuration has been applied, see the taint command.",
              "type": "object",
              "properties": {
                "externalId": {
                  "description": "External ID used in IAM role trust relationships. For more information about using external IDs, see How to Use an External ID When Granting Access to Your AWS Resources to a Third Party.",
                  "type": "string"
                },
                "snsCallerArn": {
                  "description": "ARN of the Amazon SNS caller. This is usually the IAM role that you've given Cognito permission to assume.",
                  "type": "string"
                },
                "snsCallerArnRef": {
                  "description": "Reference to a Role in iam to populate snsCallerArn.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name of the referenced object.",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace of the referenced object",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for referencing.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "snsCallerArnSelector": {
                  "description": "Selector for a Role in iam to populate snsCallerArn.",
                  "type": "object",
                  "properties": {
                    "matchControllerRef": {
                      "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                      "type": "boolean"
                    },
                    "matchLabels": {
                      "description": "MatchLabels ensures an object with matching labels is selected.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "namespace": {
                      "description": "Namespace for the selector",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for selection.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "snsRegion": {
                  "description": "The AWS Region to use with Amazon SNS integration. You can choose the same Region as your user pool, or a supported Legacy Amazon SNS alternate Region. Amazon Cognito resources in the Asia Pacific (Seoul) AWS Region must use your Amazon SNS configuration in the Asia Pacific (Tokyo) Region. For more information, see SMS message settings for Amazon Cognito user pools.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "smsVerificationMessage": {
              "description": "String representing the SMS verification message. Conflicts with verification_message_template configuration block sms_message argument.",
              "type": "string"
            },
            "softwareTokenMfaConfiguration": {
              "description": "Configuration block for software token Mult-Factor Authentication (MFA) settings. Detailed below.",
              "type": "object",
              "properties": {
                "enabled": {
                  "description": "Boolean whether to enable software token Multi-Factor (MFA) tokens, such as Time-based One-Time Password (TOTP). To disable software token MFA When sms_configuration is not present, the mfa_configuration argument must be set to OFF and the software_token_mfa_configuration configuration block must be fully removed.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "tags": {
              "description": "Key-value map of resource tags.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "userAttributeUpdateSettings": {
              "description": "Configuration block for user attribute update settings. Detailed below.",
              "type": "object",
              "properties": {
                "attributesRequireVerificationBeforeUpdate": {
                  "description": "A list of attributes requiring verification before update. If set, the provided value(s) must also be set in auto_verified_attributes. Valid values: email, phone_number.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "x-kubernetes-list-type": "set"
                }
              },
              "additionalProperties": false
            },
            "userPoolAddOns": {
              "description": "Configuration block for user pool add-ons to enable user pool advanced security mode features. Detailed below.",
              "type": "object",
              "properties": {
                "advancedSecurityAdditionalFlows": {
                  "description": "A block to specify the threat protection configuration options for additional authentication types in your user pool, including custom authentication. Detailed below.",
                  "type": "object",
                  "properties": {
                    "customAuthMode": {
                      "description": "Mode of threat protection operation in custom authentication. Valid values are AUDIT or ENFORCED. The default value is AUDIT.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "advancedSecurityMode": {
                  "description": "Mode for advanced security, must be one of OFF, AUDIT or ENFORCED.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "userPoolTier": {
              "description": "The user pool feature plan, or tier. Valid values: LITE, ESSENTIALS, PLUS.",
              "type": "string"
            },
            "usernameAttributes": {
              "description": "Whether email addresses or phone numbers can be specified as usernames when a user signs up. Conflicts with alias_attributes.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-kubernetes-list-type": "set"
            },
            "usernameConfiguration": {
              "description": "Configuration block for username configuration. Detailed below.",
              "type": "object",
              "properties": {
                "caseSensitive": {
                  "description": "Whether username case sensitivity will be applied for all users in the user pool through Cognito APIs.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "verificationMessageTemplate": {
              "description": "Configuration block for verification message templates. Detailed below.",
              "type": "object",
              "properties": {
                "defaultEmailOption": {
                  "description": "Default email option. Must be either CONFIRM_WITH_CODE or CONFIRM_WITH_LINK. Defaults to CONFIRM_WITH_CODE.",
                  "type": "string"
                },
                "emailMessage": {
                  "description": "Email message template. Must contain the {####} placeholder. Conflicts with email_verification_message argument.",
                  "type": "string"
                },
                "emailMessageByLink": {
                  "description": "Email message template for sending a confirmation link to the user, it must contain the {##Click Here##} placeholder.",
                  "type": "string"
                },
                "emailSubject": {
                  "description": "Subject line for the email message template. Conflicts with email_verification_subject argument.",
                  "type": "string"
                },
                "emailSubjectByLink": {
                  "description": "Subject line for the email message template for sending a confirmation link to the user.",
                  "type": "string"
                },
                "smsMessage": {
                  "description": "SMS message template. Must contain the {####} placeholder. Conflicts with sms_verification_message argument.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "webAuthnConfiguration": {
              "description": "Configuration block for web authn configuration. Detailed below.",
              "type": "object",
              "properties": {
                "relyingPartyId": {
                  "description": "The authentication domain that passkeys providers use as a relying party.",
                  "type": "string"
                },
                "userVerification": {
                  "description": "If your user pool should require a passkey. Must be one of required or preferred.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored\nunless the Management Policies feature flag is disabled.\nInitProvider holds the same fields as ForProvider, with the exception\nof Identifier and other resource reference fields. The fields that are\nin InitProvider are merged into ForProvider when the resource is created.\nThe same fields are also added to the terraform ignore_changes hook, to\navoid updating them after creation. This is useful for fields that are\nrequired on creation, but we do not desire to update them after creation,\nfor example because of an external controller is managing them, like an\nautoscaler.",
          "type": "object",
          "properties": {
            "accountRecoverySetting": {
              "description": "Configuration block to define which verified available method a user can use to recover their forgotten password. Detailed below.",
              "type": "object",
              "properties": {
                "recoveryMechanism": {
                  "description": "List of Account Recovery Options of the following structure:",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "Name of the user pool.",
                        "type": "string"
                      },
                      "priority": {
                        "description": "Positive integer specifying priority of a method with 1 being the highest priority.",
                        "type": "number"
                      }
                    },
                    "additionalProperties": false
                  }
                }
              },
              "additionalProperties": false
            },
            "adminCreateUserConfig": {
              "description": "Configuration block for creating a new user profile. Detailed below.",
              "type": "object",
              "properties": {
                "allowAdminCreateUserOnly": {
                  "description": "Set to True if only the administrator is allowed to create user profiles. Set to False if users can sign themselves up via an app.",
                  "type": "boolean"
                },
                "inviteMessageTemplate": {
                  "description": "Invite message template structure. Detailed below.",
                  "type": "object",
                  "properties": {
                    "emailMessage": {
                      "description": "Message template for email messages. Must contain {username} and {####} placeholders, for username and temporary password, respectively.",
                      "type": "string"
                    },
                    "emailSubject": {
                      "description": "Subject line for email messages.",
                      "type": "string"
                    },
                    "smsMessage": {
                      "description": "Message template for SMS messages. Must contain {username} and {####} placeholders, for username and temporary password, respectively.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "aliasAttributes": {
              "description": "Attributes supported as an alias for this user pool. Valid values: phone_number, email, or preferred_username. Conflicts with username_attributes.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-kubernetes-list-type": "set"
            },
            "autoVerifiedAttributes": {
              "description": "Attributes to be auto-verified. Valid values: email, phone_number.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-kubernetes-list-type": "set"
            },
            "deletionProtection": {
              "description": "When active, DeletionProtection prevents accidental deletion of your user pool. Before you can delete a user pool that you have protected against deletion, you must deactivate this feature. Valid values are ACTIVE and INACTIVE, Default value is INACTIVE.",
              "type": "string"
            },
            "deviceConfiguration": {
              "description": "Configuration block for the user pool's device tracking. Detailed below.",
              "type": "object",
              "properties": {
                "challengeRequiredOnNewDevice": {
                  "description": "Whether a challenge is required on a new device. Only applicable to a new device.",
                  "type": "boolean"
                },
                "deviceOnlyRememberedOnUserPrompt": {
                  "description": "Whether a device is only remembered on user prompt. false equates to \"Always\" remember, true is \"User Opt In,\" and not using a device_configuration block is \"No.\"",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "emailConfiguration": {
              "description": "Configuration block for configuring email. Detailed below.",
              "type": "object",
              "properties": {
                "configurationSet": {
                  "description": "Email configuration set name from SES.",
                  "type": "string"
                },
                "emailSendingAccount": {
                  "description": "Email delivery method to use. COGNITO_DEFAULT for the default email functionality built into Cognito or DEVELOPER to use your Amazon SES configuration. Required to be DEVELOPER if from_email_address is set.",
                  "type": "string"
                },
                "fromEmailAddress": {
                  "description": "Sender’s email address or sender’s display name with their email address (e.g., john@example.com, John Smith \u003cjohn@example.com\u003e or \\\"John Smith Ph.D.\\\" \u003cjohn@example.com\u003e). Escaped double quotes are required around display names that contain certain characters as specified in RFC 5322.",
                  "type": "string"
                },
                "replyToEmailAddress": {
                  "description": "REPLY-TO email address.",
                  "type": "string"
                },
                "sourceArn": {
                  "description": "ARN of the SES verified email identity to use. Required if email_sending_account is set to DEVELOPER.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "emailMfaConfiguration": {
              "description": "Configuration block for configuring email Multi-Factor Authentication (MFA); requires at least 2 account_recovery_setting entries; requires an email_configuration configuration block. Detailed below.",
              "type": "object",
              "properties": {
                "message": {
                  "description": "The template for the email messages that your user pool sends to users with codes for MFA and sign-in with email OTPs. The message must contain the {####} placeholder. In the message, Amazon Cognito replaces this placeholder with the code. If you don't provide this parameter, Amazon Cognito sends messages in the default format.",
                  "type": "string"
                },
                "subject": {
                  "description": "The subject of the email messages that your user pool sends to users with codes for MFA and email OTP sign-in.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "emailVerificationMessage": {
              "description": "String representing the email verification message. Conflicts with verification_message_template configuration block email_message argument.",
              "type": "string"
            },
            "emailVerificationSubject": {
              "description": "String representing the email verification subject. Conflicts with verification_message_template configuration block email_subject argument.",
              "type": "string"
            },
            "lambdaConfig": {
              "description": "Configuration block for the AWS Lambda triggers associated with the user pool. Detailed below.",
              "type": "object",
              "properties": {
                "createAuthChallenge": {
                  "description": "ARN of the lambda creating an authentication challenge.",
                  "type": "string"
                },
                "createAuthChallengeRef": {
                  "description": "Reference to a Function in lambda to populate createAuthChallenge.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name of the referenced object.",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace of the referenced object",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for referencing.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "createAuthChallengeSelector": {
                  "description": "Selector for a Function in lambda to populate createAuthChallenge.",
                  "type": "object",
                  "properties": {
                    "matchControllerRef": {
                      "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                      "type": "boolean"
                    },
                    "matchLabels": {
                      "description": "MatchLabels ensures an object with matching labels is selected.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "namespace": {
                      "description": "Namespace for the selector",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for selection.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "customEmailSender": {
                  "description": "A custom email sender AWS Lambda trigger. See custom_email_sender Below.",
                  "type": "object",
                  "properties": {
                    "lambdaArn": {
                      "description": "The Lambda Amazon Resource Name of the Lambda function that Amazon Cognito triggers to send email notifications to users.",
                      "type": "string"
                    },
                    "lambdaArnRef": {
                      "description": "Reference to a Function in lambda to populate lambdaArn.",
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "name": {
                          "description": "Name of the referenced object.",
                          "type": "string"
                        },
                        "namespace": {
                          "description": "Namespace of the referenced object",
                          "type": "string"
                        },
                        "policy": {
                          "description": "Policies for referencing.",
                          "type": "object",
                          "properties": {
                            "resolution": {
                              "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                              "type": "string",
                              "default": "Required",
                              "enum": [
                                "Required",
                                "Optional"
                              ]
                            },
                            "resolve": {
                              "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                              "type": "string",
                              "enum": [
                                "Always",
                                "IfNotPresent"
                              ]
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    },
                    "lambdaArnSelector": {
                      "description": "Selector for a Function in lambda to populate lambdaArn.",
                      "type": "object",
                      "properties": {
                        "matchControllerRef": {
                          "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                          "type": "boolean"
                        },
                        "matchLabels": {
                          "description": "MatchLabels ensures an object with matching labels is selected.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "namespace": {
                          "description": "Namespace for the selector",
                          "type": "string"
                        },
                        "policy": {
                          "description": "Policies for selection.",
                          "type": "object",
                          "properties": {
                            "resolution": {
                              "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                              "type": "string",
                              "default": "Required",
                              "enum": [
                                "Required",
                                "Optional"
                              ]
                            },
                            "resolve": {
                              "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                              "type": "string",
                              "enum": [
                                "Always",
                                "IfNotPresent"
                              ]
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    },
                    "lambdaVersion": {
                      "description": "The Lambda version represents the signature of the \"request\" attribute in the \"event\" information Amazon Cognito passes to your custom email Lambda function. The only supported value is V1_0.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "customMessage": {
                  "description": "Custom Message AWS Lambda trigger.",
                  "type": "string"
                },
                "customMessageRef": {
                  "description": "Reference to a Function in lambda to populate customMessage.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name of the referenced object.",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace of the referenced object",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for referencing.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "customMessageSelector": {
                  "description": "Selector for a Function in lambda to populate customMessage.",
                  "type": "object",
                  "properties": {
                    "matchControllerRef": {
                      "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                      "type": "boolean"
                    },
                    "matchLabels": {
                      "description": "MatchLabels ensures an object with matching labels is selected.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "namespace": {
                      "description": "Namespace for the selector",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for selection.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "customSmsSender": {
                  "description": "A custom SMS sender AWS Lambda trigger. See custom_sms_sender Below.",
                  "type": "object",
                  "properties": {
                    "lambdaArn": {
                      "description": "The Lambda Amazon Resource Name of the Lambda function that Amazon Cognito triggers to send SMS notifications to users.",
                      "type": "string"
                    },
                    "lambdaArnRef": {
                      "description": "Reference to a Function in lambda to populate lambdaArn.",
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "name": {
                          "description": "Name of the referenced object.",
                          "type": "string"
                        },
                        "namespace": {
                          "description": "Namespace of the referenced object",
                          "type": "string"
                        },
                        "policy": {
                          "description": "Policies for referencing.",
                          "type": "object",
                          "properties": {
                            "resolution": {
                              "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                              "type": "string",
                              "default": "Required",
                              "enum": [
                                "Required",
                                "Optional"
                              ]
                            },
                            "resolve": {
                              "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                              "type": "string",
                              "enum": [
                                "Always",
                                "IfNotPresent"
                              ]
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    },
                    "lambdaArnSelector": {
                      "description": "Selector for a Function in lambda to populate lambdaArn.",
                      "type": "object",
                      "properties": {
                        "matchControllerRef": {
                          "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                          "type": "boolean"
                        },
                        "matchLabels": {
                          "description": "MatchLabels ensures an object with matching labels is selected.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "namespace": {
                          "description": "Namespace for the selector",
                          "type": "string"
                        },
                        "policy": {
                          "description": "Policies for selection.",
                          "type": "object",
                          "properties": {
                            "resolution": {
                              "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                              "type": "string",
                              "default": "Required",
                              "enum": [
                                "Required",
                                "Optional"
                              ]
                            },
                            "resolve": {
                              "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                              "type": "string",
                              "enum": [
                                "Always",
                                "IfNotPresent"
                              ]
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    },
                    "lambdaVersion": {
                      "description": "The Lambda version represents the signature of the \"request\" attribute in the \"event\" information Amazon Cognito passes to your custom SMS Lambda function. The only supported value is V1_0.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "defineAuthChallenge": {
                  "description": "Defines the authentication challenge.",
                  "type": "string"
                },
                "defineAuthChallengeRef": {
                  "description": "Reference to a Function in lambda to populate defineAuthChallenge.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name of the referenced object.",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace of the referenced object",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for referencing.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "defineAuthChallengeSelector": {
                  "description": "Selector for a Function in lambda to populate defineAuthChallenge.",
                  "type": "object",
                  "properties": {
                    "matchControllerRef": {
                      "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                      "type": "boolean"
                    },
                    "matchLabels": {
                      "description": "MatchLabels ensures an object with matching labels is selected.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "namespace": {
                      "description": "Namespace for the selector",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for selection.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "kmsKeyId": {
                  "description": "The Amazon Resource Name of Key Management Service Customer master keys. Amazon Cognito uses the key to encrypt codes and temporary passwords sent to CustomEmailSender and CustomSMSSender.",
                  "type": "string"
                },
                "kmsKeyIdRef": {
                  "description": "Reference to a Key in kms to populate kmsKeyId.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name of the referenced object.",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace of the referenced object",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for referencing.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "kmsKeyIdSelector": {
                  "description": "Selector for a Key in kms to populate kmsKeyId.",
                  "type": "object",
                  "properties": {
                    "matchControllerRef": {
                      "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                      "type": "boolean"
                    },
                    "matchLabels": {
                      "description": "MatchLabels ensures an object with matching labels is selected.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "namespace": {
                      "description": "Namespace for the selector",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for selection.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "postAuthentication": {
                  "description": "Post-authentication AWS Lambda trigger.",
                  "type": "string"
                },
                "postAuthenticationRef": {
                  "description": "Reference to a Function in lambda to populate postAuthentication.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name of the referenced object.",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace of the referenced object",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for referencing.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "postAuthenticationSelector": {
                  "description": "Selector for a Function in lambda to populate postAuthentication.",
                  "type": "object",
                  "properties": {
                    "matchControllerRef": {
                      "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                      "type": "boolean"
                    },
                    "matchLabels": {
                      "description": "MatchLabels ensures an object with matching labels is selected.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "namespace": {
                      "description": "Namespace for the selector",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for selection.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "postConfirmation": {
                  "description": "Post-confirmation AWS Lambda trigger.",
                  "type": "string"
                },
                "postConfirmationRef": {
                  "description": "Reference to a Function in lambda to populate postConfirmation.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name of the referenced object.",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace of the referenced object",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for referencing.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "postConfirmationSelector": {
                  "description": "Selector for a Function in lambda to populate postConfirmation.",
                  "type": "object",
                  "properties": {
                    "matchControllerRef": {
                      "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                      "type": "boolean"
                    },
                    "matchLabels": {
                      "description": "MatchLabels ensures an object with matching labels is selected.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "namespace": {
                      "description": "Namespace for the selector",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for selection.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "preAuthentication": {
                  "description": "Pre-authentication AWS Lambda trigger.",
                  "type": "string"
                },
                "preAuthenticationRef": {
                  "description": "Reference to a Function in lambda to populate preAuthentication.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name of the referenced object.",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace of the referenced object",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for referencing.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "preAuthenticationSelector": {
                  "description": "Selector for a Function in lambda to populate preAuthentication.",
                  "type": "object",
                  "properties": {
                    "matchControllerRef": {
                      "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                      "type": "boolean"
                    },
                    "matchLabels": {
                      "description": "MatchLabels ensures an object with matching labels is selected.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "namespace": {
                      "description": "Namespace for the selector",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for selection.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "preSignUp": {
                  "description": "Pre-registration AWS Lambda trigger.",
                  "type": "string"
                },
                "preSignUpRef": {
                  "description": "Reference to a Function in lambda to populate preSignUp.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name of the referenced object.",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace of the referenced object",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for referencing.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "preSignUpSelector": {
                  "description": "Selector for a Function in lambda to populate preSignUp.",
                  "type": "object",
                  "properties": {
                    "matchControllerRef": {
                      "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                      "type": "boolean"
                    },
                    "matchLabels": {
                      "description": "MatchLabels ensures an object with matching labels is selected.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "namespace": {
                      "description": "Namespace for the selector",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for selection.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "preTokenGeneration": {
                  "description": "Allow to customize identity token claims before token generation. Set this parameter for legacy purposes; for new instances of pre token generation triggers, set the lambda_arn of pre_token_generation_config.",
                  "type": "string"
                },
                "preTokenGenerationConfig": {
                  "description": "Allow to customize access tokens. See pre_token_configuration_type",
                  "type": "object",
                  "properties": {
                    "lambdaArn": {
                      "description": "The Lambda Amazon Resource Name of the Lambda function that Amazon Cognito triggers to send SMS notifications to users.",
                      "type": "string"
                    },
                    "lambdaVersion": {
                      "description": "The Lambda version represents the signature of the \"version\" attribute in the \"event\" information Amazon Cognito passes to your pre Token Generation Lambda function. The supported values are V1_0, V2_0, V3_0.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "preTokenGenerationRef": {
                  "description": "Reference to a Function in lambda to populate preTokenGeneration.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name of the referenced object.",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace of the referenced object",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for referencing.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "preTokenGenerationSelector": {
                  "description": "Selector for a Function in lambda to populate preTokenGeneration.",
                  "type": "object",
                  "properties": {
                    "matchControllerRef": {
                      "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                      "type": "boolean"
                    },
                    "matchLabels": {
                      "description": "MatchLabels ensures an object with matching labels is selected.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "namespace": {
                      "description": "Namespace for the selector",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for selection.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "userMigration": {
                  "description": "User migration Lambda config type.",
                  "type": "string"
                },
                "userMigrationRef": {
                  "description": "Reference to a Function in lambda to populate userMigration.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name of the referenced object.",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace of the referenced object",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for referencing.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "userMigrationSelector": {
                  "description": "Selector for a Function in lambda to populate userMigration.",
                  "type": "object",
                  "properties": {
                    "matchControllerRef": {
                      "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                      "type": "boolean"
                    },
                    "matchLabels": {
                      "description": "MatchLabels ensures an object with matching labels is selected.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "namespace": {
                      "description": "Namespace for the selector",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for selection.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "verifyAuthChallengeResponse": {
                  "description": "Verifies the authentication challenge response.",
                  "type": "string"
                },
                "verifyAuthChallengeResponseRef": {
                  "description": "Reference to a Function in lambda to populate verifyAuthChallengeResponse.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name of the referenced object.",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace of the referenced object",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for referencing.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "verifyAuthChallengeResponseSelector": {
                  "description": "Selector for a Function in lambda to populate verifyAuthChallengeResponse.",
                  "type": "object",
                  "properties": {
                    "matchControllerRef": {
                      "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                      "type": "boolean"
                    },
                    "matchLabels": {
                      "description": "MatchLabels ensures an object with matching labels is selected.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "namespace": {
                      "description": "Namespace for the selector",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for selection.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "mfaConfiguration": {
              "description": "Multi-Factor Authentication (MFA) configuration for the User Pool. Defaults of OFF. Valid values are OFF (MFA Tokens are not required), ON (MFA is required for all users to sign in; requires at least one of sms_configuration or software_token_mfa_configuration to be configured), or OPTIONAL (MFA Will be required only for individual users who have MFA Enabled; requires at least one of sms_configuration or software_token_mfa_configuration to be configured).",
              "type": "string"
            },
            "name": {
              "description": "Name of the user pool.",
              "type": "string"
            },
            "passwordPolicy": {
              "description": "Configuration block for information about the user pool password policy. Detailed below.",
              "type": "object",
              "properties": {
                "minimumLength": {
                  "description": "Minimum length of the password policy that you have set.",
                  "type": "number"
                },
                "passwordHistorySize": {
                  "description": "Number of previous passwords that you want Amazon Cognito to restrict each user from reusing. Users can't set a password that matches any of number of previous passwords specified by this argument. A value of 0 means that password history is not enforced. Valid values are between 0 and 24.",
                  "type": "number"
                },
                "requireLowercase": {
                  "description": "Whether you have required users to use at least one lowercase letter in their password.",
                  "type": "boolean"
                },
                "requireNumbers": {
                  "description": "Whether you have required users to use at least one number in their password.",
                  "type": "boolean"
                },
                "requireSymbols": {
                  "description": "Whether you have required users to use at least one symbol in their password.",
                  "type": "boolean"
                },
                "requireUppercase": {
                  "description": "Whether you have required users to use at least one uppercase letter in their password.",
                  "type": "boolean"
                },
                "temporaryPasswordValidityDays": {
                  "description": "In the password policy you have set, refers to the number of days a temporary password is valid. If the user does not sign-in during this time, their password will need to be reset by an administrator.",
                  "type": "number"
                }
              },
              "additionalProperties": false
            },
            "schema": {
              "description": "Configuration block for the schema attributes of a user pool. Detailed below. Schema attributes from the standard attribute set only need to be specified if they are different from the default configuration. Attributes can be added, but not modified or removed. Maximum of 50 attributes.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "attributeDataType": {
                    "description": "Attribute data type. Must be one of Boolean, Number, String, DateTime.",
                    "type": "string"
                  },
                  "developerOnlyAttribute": {
                    "description": "Whether the attribute type is developer only.",
                    "type": "boolean"
                  },
                  "mutable": {
                    "description": "Whether the attribute can be changed once it has been created.",
                    "type": "boolean"
                  },
                  "name": {
                    "description": "Name of the user pool.",
                    "type": "string"
                  },
                  "numberAttributeConstraints": {
                    "description": "Configuration block for the constraints for an attribute of the number type. Detailed below.",
                    "type": "object",
                    "properties": {
                      "maxValue": {
                        "description": "Maximum value of an attribute that is of the number data type.",
                        "type": "string"
                      },
                      "minValue": {
                        "description": "Minimum value of an attribute that is of the number data type.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "required": {
                    "description": "Whether a user pool attribute is required. If the attribute is required and the user does not provide a value, registration or sign-in will fail.",
                    "type": "boolean"
                  },
                  "stringAttributeConstraints": {
                    "description": "Constraints for an attribute of the string type. Detailed below.",
                    "type": "object",
                    "properties": {
                      "maxLength": {
                        "description": "Maximum length of an attribute value of the string type.",
                        "type": "string"
                      },
                      "minLength": {
                        "description": "Minimum length of an attribute value of the string type.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              }
            },
            "signInPolicy": {
              "description": "Configuration block for information about the user pool sign in policy. Detailed below.",
              "type": "object",
              "properties": {
                "allowedFirstAuthFactors": {
                  "description": "The sign in methods your user pool supports as the first factor. This is a list of strings, allowed values are PASSWORD, EMAIL_OTP, SMS_OTP, and WEB_AUTHN.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "x-kubernetes-list-type": "set"
                }
              },
              "additionalProperties": false
            },
            "smsAuthenticationMessage": {
              "description": "String representing the SMS authentication message. The Message must contain the {####} placeholder, which will be replaced with the code.",
              "type": "string"
            },
            "smsConfiguration": {
              "description": "Configuration block for Short Message Service (SMS) settings. Detailed below. These settings apply to SMS user verification and SMS Multi-Factor Authentication (MFA). Due to Cognito API restrictions, the SMS configuration cannot be removed without recreating the Cognito User Pool. For user data safety, this resource will ignore the removal of this configuration by disabling drift detection. To force resource recreation after this configuration has been applied, see the taint command.",
              "type": "object",
              "properties": {
                "externalId": {
                  "description": "External ID used in IAM role trust relationships. For more information about using external IDs, see How to Use an External ID When Granting Access to Your AWS Resources to a Third Party.",
                  "type": "string"
                },
                "snsCallerArn": {
                  "description": "ARN of the Amazon SNS caller. This is usually the IAM role that you've given Cognito permission to assume.",
                  "type": "string"
                },
                "snsCallerArnRef": {
                  "description": "Reference to a Role in iam to populate snsCallerArn.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name of the referenced object.",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace of the referenced object",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for referencing.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "snsCallerArnSelector": {
                  "description": "Selector for a Role in iam to populate snsCallerArn.",
                  "type": "object",
                  "properties": {
                    "matchControllerRef": {
                      "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                      "type": "boolean"
                    },
                    "matchLabels": {
                      "description": "MatchLabels ensures an object with matching labels is selected.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "namespace": {
                      "description": "Namespace for the selector",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for selection.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "snsRegion": {
                  "description": "The AWS Region to use with Amazon SNS integration. You can choose the same Region as your user pool, or a supported Legacy Amazon SNS alternate Region. Amazon Cognito resources in the Asia Pacific (Seoul) AWS Region must use your Amazon SNS configuration in the Asia Pacific (Tokyo) Region. For more information, see SMS message settings for Amazon Cognito user pools.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "smsVerificationMessage": {
              "description": "String representing the SMS verification message. Conflicts with verification_message_template configuration block sms_message argument.",
              "type": "string"
            },
            "softwareTokenMfaConfiguration": {
              "description": "Configuration block for software token Mult-Factor Authentication (MFA) settings. Detailed below.",
              "type": "object",
              "properties": {
                "enabled": {
                  "description": "Boolean whether to enable software token Multi-Factor (MFA) tokens, such as Time-based One-Time Password (TOTP). To disable software token MFA When sms_configuration is not present, the mfa_configuration argument must be set to OFF and the software_token_mfa_configuration configuration block must be fully removed.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "tags": {
              "description": "Key-value map of resource tags.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "userAttributeUpdateSettings": {
              "description": "Configuration block for user attribute update settings. Detailed below.",
              "type": "object",
              "properties": {
                "attributesRequireVerificationBeforeUpdate": {
                  "description": "A list of attributes requiring verification before update. If set, the provided value(s) must also be set in auto_verified_attributes. Valid values: email, phone_number.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "x-kubernetes-list-type": "set"
                }
              },
              "additionalProperties": false
            },
            "userPoolAddOns": {
              "description": "Configuration block for user pool add-ons to enable user pool advanced security mode features. Detailed below.",
              "type": "object",
              "properties": {
                "advancedSecurityAdditionalFlows": {
                  "description": "A block to specify the threat protection configuration options for additional authentication types in your user pool, including custom authentication. Detailed below.",
                  "type": "object",
                  "properties": {
                    "customAuthMode": {
                      "description": "Mode of threat protection operation in custom authentication. Valid values are AUDIT or ENFORCED. The default value is AUDIT.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "advancedSecurityMode": {
                  "description": "Mode for advanced security, must be one of OFF, AUDIT or ENFORCED.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "userPoolTier": {
              "description": "The user pool feature plan, or tier. Valid values: LITE, ESSENTIALS, PLUS.",
              "type": "string"
            },
            "usernameAttributes": {
              "description": "Whether email addresses or phone numbers can be specified as usernames when a user signs up. Conflicts with alias_attributes.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-kubernetes-list-type": "set"
            },
            "usernameConfiguration": {
              "description": "Configuration block for username configuration. Detailed below.",
              "type": "object",
              "properties": {
                "caseSensitive": {
                  "description": "Whether username case sensitivity will be applied for all users in the user pool through Cognito APIs.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "verificationMessageTemplate": {
              "description": "Configuration block for verification message templates. Detailed below.",
              "type": "object",
              "properties": {
                "defaultEmailOption": {
                  "description": "Default email option. Must be either CONFIRM_WITH_CODE or CONFIRM_WITH_LINK. Defaults to CONFIRM_WITH_CODE.",
                  "type": "string"
                },
                "emailMessage": {
                  "description": "Email message template. Must contain the {####} placeholder. Conflicts with email_verification_message argument.",
                  "type": "string"
                },
                "emailMessageByLink": {
                  "description": "Email message template for sending a confirmation link to the user, it must contain the {##Click Here##} placeholder.",
                  "type": "string"
                },
                "emailSubject": {
                  "description": "Subject line for the email message template. Conflicts with email_verification_subject argument.",
                  "type": "string"
                },
                "emailSubjectByLink": {
                  "description": "Subject line for the email message template for sending a confirmation link to the user.",
                  "type": "string"
                },
                "smsMessage": {
                  "description": "SMS message template. Must contain the {####} placeholder. Conflicts with sms_verification_message argument.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "webAuthnConfiguration": {
              "description": "Configuration block for web authn configuration. Detailed below.",
              "type": "object",
              "properties": {
                "relyingPartyId": {
                  "description": "The authentication domain that passkeys providers use as a relying party.",
                  "type": "string"
                },
                "userVerification": {
                  "description": "If your user pool should require a passkey. Must be one of required or preferred.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "managementPolicies": {
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out\nthrough a Crossplane feature flag.\nManagementPolicies specify the array of actions Crossplane is allowed to\ntake on the managed and external resources.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223\nand this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers\ncan take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to\ncreate, observe, update, and delete this managed resource should be\nconfigured.",
          "type": "object",
          "default": {
            "kind": "ClusterProviderConfig",
            "name": "default"
          },
          "required": [
            "kind",
            "name"
          ],
          "properties": {
            "kind": {
              "description": "Kind of the referenced object.",
              "type": "string"
            },
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a\nSecret to which any connection details for this managed resource should\nbe written. Connection details frequently include the endpoint, username,\nand password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false,
      "x-kubernetes-validations": [
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.name))",
          "message": "spec.forProvider.name is a required parameter"
        }
      ]
    },
    "status": {
      "description": "UserPoolStatus defines the observed state of UserPool.",
      "type": "object",
      "properties": {
        "atProvider": {
          "type": "object",
          "properties": {
            "accountRecoverySetting": {
              "description": "Configuration block to define which verified available method a user can use to recover their forgotten password. Detailed below.",
              "type": "object",
              "properties": {
                "recoveryMechanism": {
                  "description": "List of Account Recovery Options of the following structure:",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "Name of the user pool.",
                        "type": "string"
                      },
                      "priority": {
                        "description": "Positive integer specifying priority of a method with 1 being the highest priority.",
                        "type": "number"
                      }
                    },
                    "additionalProperties": false
                  }
                }
              },
              "additionalProperties": false
            },
            "adminCreateUserConfig": {
              "description": "Configuration block for creating a new user profile. Detailed below.",
              "type": "object",
              "properties": {
                "allowAdminCreateUserOnly": {
                  "description": "Set to True if only the administrator is allowed to create user profiles. Set to False if users can sign themselves up via an app.",
                  "type": "boolean"
                },
                "inviteMessageTemplate": {
                  "description": "Invite message template structure. Detailed below.",
                  "type": "object",
                  "properties": {
                    "emailMessage": {
                      "description": "Message template for email messages. Must contain {username} and {####} placeholders, for username and temporary password, respectively.",
                      "type": "string"
                    },
                    "emailSubject": {
                      "description": "Subject line for email messages.",
                      "type": "string"
                    },
                    "smsMessage": {
                      "description": "Message template for SMS messages. Must contain {username} and {####} placeholders, for username and temporary password, respectively.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "aliasAttributes": {
              "description": "Attributes supported as an alias for this user pool. Valid values: phone_number, email, or preferred_username. Conflicts with username_attributes.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-kubernetes-list-type": "set"
            },
            "arn": {
              "description": "ARN of the user pool.",
              "type": "string"
            },
            "autoVerifiedAttributes": {
              "description": "Attributes to be auto-verified. Valid values: email, phone_number.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-kubernetes-list-type": "set"
            },
            "creationDate": {
              "description": "Date the user pool was created.",
              "type": "string"
            },
            "customDomain": {
              "description": "A custom domain name that you provide to Amazon Cognito. This parameter applies only if you use a custom domain to host the sign-up and sign-in pages for your application. For example: auth.example.com.",
              "type": "string"
            },
            "deletionProtection": {
              "description": "When active, DeletionProtection prevents accidental deletion of your user pool. Before you can delete a user pool that you have protected against deletion, you must deactivate this feature. Valid values are ACTIVE and INACTIVE, Default value is INACTIVE.",
              "type": "string"
            },
            "deviceConfiguration": {
              "description": "Configuration block for the user pool's device tracking. Detailed below.",
              "type": "object",
              "properties": {
                "challengeRequiredOnNewDevice": {
                  "description": "Whether a challenge is required on a new device. Only applicable to a new device.",
                  "type": "boolean"
                },
                "deviceOnlyRememberedOnUserPrompt": {
                  "description": "Whether a device is only remembered on user prompt. false equates to \"Always\" remember, true is \"User Opt In,\" and not using a device_configuration block is \"No.\"",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "domain": {
              "description": "Holds the domain prefix if the user pool has a domain associated with it.",
              "type": "string"
            },
            "emailConfiguration": {
              "description": "Configuration block for configuring email. Detailed below.",
              "type": "object",
              "properties": {
                "configurationSet": {
                  "description": "Email configuration set name from SES.",
                  "type": "string"
                },
                "emailSendingAccount": {
                  "description": "Email delivery method to use. COGNITO_DEFAULT for the default email functionality built into Cognito or DEVELOPER to use your Amazon SES configuration. Required to be DEVELOPER if from_email_address is set.",
                  "type": "string"
                },
                "fromEmailAddress": {
                  "description": "Sender’s email address or sender’s display name with their email address (e.g., john@example.com, John Smith \u003cjohn@example.com\u003e or \\\"John Smith Ph.D.\\\" \u003cjohn@example.com\u003e). Escaped double quotes are required around display names that contain certain characters as specified in RFC 5322.",
                  "type": "string"
                },
                "replyToEmailAddress": {
                  "description": "REPLY-TO email address.",
                  "type": "string"
                },
                "sourceArn": {
                  "description": "ARN of the SES verified email identity to use. Required if email_sending_account is set to DEVELOPER.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "emailMfaConfiguration": {
              "description": "Configuration block for configuring email Multi-Factor Authentication (MFA); requires at least 2 account_recovery_setting entries; requires an email_configuration configuration block. Detailed below.",
              "type": "object",
              "properties": {
                "message": {
                  "description": "The template for the email messages that your user pool sends to users with codes for MFA and sign-in with email OTPs. The message must contain the {####} placeholder. In the message, Amazon Cognito replaces this placeholder with the code. If you don't provide this parameter, Amazon Cognito sends messages in the default format.",
                  "type": "string"
                },
                "subject": {
                  "description": "The subject of the email messages that your user pool sends to users with codes for MFA and email OTP sign-in.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "emailVerificationMessage": {
              "description": "String representing the email verification message. Conflicts with verification_message_template configuration block email_message argument.",
              "type": "string"
            },
            "emailVerificationSubject": {
              "description": "String representing the email verification subject. Conflicts with verification_message_template configuration block email_subject argument.",
              "type": "string"
            },
            "endpoint": {
              "description": "Endpoint name of the user pool. Example format: cognito-idp.REGION.amazonaws.com/xxxx_yyyyy",
              "type": "string"
            },
            "estimatedNumberOfUsers": {
              "description": "A number estimating the size of the user pool.",
              "type": "number"
            },
            "id": {
              "description": "ID of the user pool.",
              "type": "string"
            },
            "lambdaConfig": {
              "description": "Configuration block for the AWS Lambda triggers associated with the user pool. Detailed below.",
              "type": "object",
              "properties": {
                "createAuthChallenge": {
                  "description": "ARN of the lambda creating an authentication challenge.",
                  "type": "string"
                },
                "customEmailSender": {
                  "description": "A custom email sender AWS Lambda trigger. See custom_email_sender Below.",
                  "type": "object",
                  "properties": {
                    "lambdaArn": {
                      "description": "The Lambda Amazon Resource Name of the Lambda function that Amazon Cognito triggers to send email notifications to users.",
                      "type": "string"
                    },
                    "lambdaVersion": {
                      "description": "The Lambda version represents the signature of the \"request\" attribute in the \"event\" information Amazon Cognito passes to your custom email Lambda function. The only supported value is V1_0.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "customMessage": {
                  "description": "Custom Message AWS Lambda trigger.",
                  "type": "string"
                },
                "customSmsSender": {
                  "description": "A custom SMS sender AWS Lambda trigger. See custom_sms_sender Below.",
                  "type": "object",
                  "properties": {
                    "lambdaArn": {
                      "description": "The Lambda Amazon Resource Name of the Lambda function that Amazon Cognito triggers to send SMS notifications to users.",
                      "type": "string"
                    },
                    "lambdaVersion": {
                      "description": "The Lambda version represents the signature of the \"request\" attribute in the \"event\" information Amazon Cognito passes to your custom SMS Lambda function. The only supported value is V1_0.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "defineAuthChallenge": {
                  "description": "Defines the authentication challenge.",
                  "type": "string"
                },
                "kmsKeyId": {
                  "description": "The Amazon Resource Name of Key Management Service Customer master keys. Amazon Cognito uses the key to encrypt codes and temporary passwords sent to CustomEmailSender and CustomSMSSender.",
                  "type": "string"
                },
                "postAuthentication": {
                  "description": "Post-authentication AWS Lambda trigger.",
                  "type": "string"
                },
                "postConfirmation": {
                  "description": "Post-confirmation AWS Lambda trigger.",
                  "type": "string"
                },
                "preAuthentication": {
                  "description": "Pre-authentication AWS Lambda trigger.",
                  "type": "string"
                },
                "preSignUp": {
                  "description": "Pre-registration AWS Lambda trigger.",
                  "type": "string"
                },
                "preTokenGeneration": {
                  "description": "Allow to customize identity token claims before token generation. Set this parameter for legacy purposes; for new instances of pre token generation triggers, set the lambda_arn of pre_token_generation_config.",
                  "type": "string"
                },
                "preTokenGenerationConfig": {
                  "description": "Allow to customize access tokens. See pre_token_configuration_type",
                  "type": "object",
                  "properties": {
                    "lambdaArn": {
                      "description": "The Lambda Amazon Resource Name of the Lambda function that Amazon Cognito triggers to send SMS notifications to users.",
                      "type": "string"
                    },
                    "lambdaVersion": {
                      "description": "The Lambda version represents the signature of the \"version\" attribute in the \"event\" information Amazon Cognito passes to your pre Token Generation Lambda function. The supported values are V1_0, V2_0, V3_0.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "userMigration": {
                  "description": "User migration Lambda config type.",
                  "type": "string"
                },
                "verifyAuthChallengeResponse": {
                  "description": "Verifies the authentication challenge response.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "lastModifiedDate": {
              "description": "Date the user pool was last modified.",
              "type": "string"
            },
            "mfaConfiguration": {
              "description": "Multi-Factor Authentication (MFA) configuration for the User Pool. Defaults of OFF. Valid values are OFF (MFA Tokens are not required), ON (MFA is required for all users to sign in; requires at least one of sms_configuration or software_token_mfa_configuration to be configured), or OPTIONAL (MFA Will be required only for individual users who have MFA Enabled; requires at least one of sms_configuration or software_token_mfa_configuration to be configured).",
              "type": "string"
            },
            "name": {
              "description": "Name of the user pool.",
              "type": "string"
            },
            "passwordPolicy": {
              "description": "Configuration block for information about the user pool password policy. Detailed below.",
              "type": "object",
              "properties": {
                "minimumLength": {
                  "description": "Minimum length of the password policy that you have set.",
                  "type": "number"
                },
                "passwordHistorySize": {
                  "description": "Number of previous passwords that you want Amazon Cognito to restrict each user from reusing. Users can't set a password that matches any of number of previous passwords specified by this argument. A value of 0 means that password history is not enforced. Valid values are between 0 and 24.",
                  "type": "number"
                },
                "requireLowercase": {
                  "description": "Whether you have required users to use at least one lowercase letter in their password.",
                  "type": "boolean"
                },
                "requireNumbers": {
                  "description": "Whether you have required users to use at least one number in their password.",
                  "type": "boolean"
                },
                "requireSymbols": {
                  "description": "Whether you have required users to use at least one symbol in their password.",
                  "type": "boolean"
                },
                "requireUppercase": {
                  "description": "Whether you have required users to use at least one uppercase letter in their password.",
                  "type": "boolean"
                },
                "temporaryPasswordValidityDays": {
                  "description": "In the password policy you have set, refers to the number of days a temporary password is valid. If the user does not sign-in during this time, their password will need to be reset by an administrator.",
                  "type": "number"
                }
              },
              "additionalProperties": false
            },
            "region": {
              "description": "Region where this resource will be managed. Defaults to the Region set in the provider configuration.\nRegion is the region you'd like your resource to be created in.",
              "type": "string"
            },
            "schema": {
              "description": "Configuration block for the schema attributes of a user pool. Detailed below. Schema attributes from the standard attribute set only need to be specified if they are different from the default configuration. Attributes can be added, but not modified or removed. Maximum of 50 attributes.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "attributeDataType": {
                    "description": "Attribute data type. Must be one of Boolean, Number, String, DateTime.",
                    "type": "string"
                  },
                  "developerOnlyAttribute": {
                    "description": "Whether the attribute type is developer only.",
                    "type": "boolean"
                  },
                  "mutable": {
                    "description": "Whether the attribute can be changed once it has been created.",
                    "type": "boolean"
                  },
                  "name": {
                    "description": "Name of the user pool.",
                    "type": "string"
                  },
                  "numberAttributeConstraints": {
                    "description": "Configuration block for the constraints for an attribute of the number type. Detailed below.",
                    "type": "object",
                    "properties": {
                      "maxValue": {
                        "description": "Maximum value of an attribute that is of the number data type.",
                        "type": "string"
                      },
                      "minValue": {
                        "description": "Minimum value of an attribute that is of the number data type.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "required": {
                    "description": "Whether a user pool attribute is required. If the attribute is required and the user does not provide a value, registration or sign-in will fail.",
                    "type": "boolean"
                  },
                  "stringAttributeConstraints": {
                    "description": "Constraints for an attribute of the string type. Detailed below.",
                    "type": "object",
                    "properties": {
                      "maxLength": {
                        "description": "Maximum length of an attribute value of the string type.",
                        "type": "string"
                      },
                      "minLength": {
                        "description": "Minimum length of an attribute value of the string type.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              }
            },
            "signInPolicy": {
              "description": "Configuration block for information about the user pool sign in policy. Detailed below.",
              "type": "object",
              "properties": {
                "allowedFirstAuthFactors": {
                  "description": "The sign in methods your user pool supports as the first factor. This is a list of strings, allowed values are PASSWORD, EMAIL_OTP, SMS_OTP, and WEB_AUTHN.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "x-kubernetes-list-type": "set"
                }
              },
              "additionalProperties": false
            },
            "smsAuthenticationMessage": {
              "description": "String representing the SMS authentication message. The Message must contain the {####} placeholder, which will be replaced with the code.",
              "type": "string"
            },
            "smsConfiguration": {
              "description": "Configuration block for Short Message Service (SMS) settings. Detailed below. These settings apply to SMS user verification and SMS Multi-Factor Authentication (MFA). Due to Cognito API restrictions, the SMS configuration cannot be removed without recreating the Cognito User Pool. For user data safety, this resource will ignore the removal of this configuration by disabling drift detection. To force resource recreation after this configuration has been applied, see the taint command.",
              "type": "object",
              "properties": {
                "externalId": {
                  "description": "External ID used in IAM role trust relationships. For more information about using external IDs, see How to Use an External ID When Granting Access to Your AWS Resources to a Third Party.",
                  "type": "string"
                },
                "snsCallerArn": {
                  "description": "ARN of the Amazon SNS caller. This is usually the IAM role that you've given Cognito permission to assume.",
                  "type": "string"
                },
                "snsRegion": {
                  "description": "The AWS Region to use with Amazon SNS integration. You can choose the same Region as your user pool, or a supported Legacy Amazon SNS alternate Region. Amazon Cognito resources in the Asia Pacific (Seoul) AWS Region must use your Amazon SNS configuration in the Asia Pacific (Tokyo) Region. For more information, see SMS message settings for Amazon Cognito user pools.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "smsVerificationMessage": {
              "description": "String representing the SMS verification message. Conflicts with verification_message_template configuration block sms_message argument.",
              "type": "string"
            },
            "softwareTokenMfaConfiguration": {
              "description": "Configuration block for software token Mult-Factor Authentication (MFA) settings. Detailed below.",
              "type": "object",
              "properties": {
                "enabled": {
                  "description": "Boolean whether to enable software token Multi-Factor (MFA) tokens, such as Time-based One-Time Password (TOTP). To disable software token MFA When sms_configuration is not present, the mfa_configuration argument must be set to OFF and the software_token_mfa_configuration configuration block must be fully removed.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "tags": {
              "description": "Key-value map of resource tags.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "tagsAll": {
              "description": "A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "userAttributeUpdateSettings": {
              "description": "Configuration block for user attribute update settings. Detailed below.",
              "type": "object",
              "properties": {
                "attributesRequireVerificationBeforeUpdate": {
                  "description": "A list of attributes requiring verification before update. If set, the provided value(s) must also be set in auto_verified_attributes. Valid values: email, phone_number.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "x-kubernetes-list-type": "set"
                }
              },
              "additionalProperties": false
            },
            "userPoolAddOns": {
              "description": "Configuration block for user pool add-ons to enable user pool advanced security mode features. Detailed below.",
              "type": "object",
              "properties": {
                "advancedSecurityAdditionalFlows": {
                  "description": "A block to specify the threat protection configuration options for additional authentication types in your user pool, including custom authentication. Detailed below.",
                  "type": "object",
                  "properties": {
                    "customAuthMode": {
                      "description": "Mode of threat protection operation in custom authentication. Valid values are AUDIT or ENFORCED. The default value is AUDIT.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "advancedSecurityMode": {
                  "description": "Mode for advanced security, must be one of OFF, AUDIT or ENFORCED.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "userPoolTier": {
              "description": "The user pool feature plan, or tier. Valid values: LITE, ESSENTIALS, PLUS.",
              "type": "string"
            },
            "usernameAttributes": {
              "description": "Whether email addresses or phone numbers can be specified as usernames when a user signs up. Conflicts with alias_attributes.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-kubernetes-list-type": "set"
            },
            "usernameConfiguration": {
              "description": "Configuration block for username configuration. Detailed below.",
              "type": "object",
              "properties": {
                "caseSensitive": {
                  "description": "Whether username case sensitivity will be applied for all users in the user pool through Cognito APIs.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "verificationMessageTemplate": {
              "description": "Configuration block for verification message templates. Detailed below.",
              "type": "object",
              "properties": {
                "defaultEmailOption": {
                  "description": "Default email option. Must be either CONFIRM_WITH_CODE or CONFIRM_WITH_LINK. Defaults to CONFIRM_WITH_CODE.",
                  "type": "string"
                },
                "emailMessage": {
                  "description": "Email message template. Must contain the {####} placeholder. Conflicts with email_verification_message argument.",
                  "type": "string"
                },
                "emailMessageByLink": {
                  "description": "Email message template for sending a confirmation link to the user, it must contain the {##Click Here##} placeholder.",
                  "type": "string"
                },
                "emailSubject": {
                  "description": "Subject line for the email message template. Conflicts with email_verification_subject argument.",
                  "type": "string"
                },
                "emailSubjectByLink": {
                  "description": "Subject line for the email message template for sending a confirmation link to the user.",
                  "type": "string"
                },
                "smsMessage": {
                  "description": "SMS message template. Must contain the {####} placeholder. Conflicts with sms_verification_message argument.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "webAuthnConfiguration": {
              "description": "Configuration block for web authn configuration. Detailed below.",
              "type": "object",
              "properties": {
                "relyingPartyId": {
                  "description": "The authentication domain that passkeys providers use as a relying party.",
                  "type": "string"
                },
                "userVerification": {
                  "description": "If your user pool should require a passkey. Must be one of required or preferred.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "type": "array",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one\nstatus to another.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from\none status to another, if any.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to\na resource at any point in time.",
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest metadata.generation\nwhich resulted in either a ready state, or stalled due to error\nit can not recover from without human intervention.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    }
  }
}
