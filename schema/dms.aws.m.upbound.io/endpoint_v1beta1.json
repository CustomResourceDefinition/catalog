{
  "description": "Endpoint is the Schema for the Endpoints API. Provides a DMS (Data Migration Service) endpoint resource.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "EndpointSpec defines the desired state of Endpoint",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "forProvider": {
          "type": "object",
          "required": [
            "region"
          ],
          "properties": {
            "certificateArn": {
              "description": "ARN for the certificate.",
              "type": "string"
            },
            "databaseName": {
              "description": "Name of the endpoint database.",
              "type": "string"
            },
            "elasticsearchSettings": {
              "description": "Configuration block for OpenSearch settings. See below.",
              "type": "object",
              "properties": {
                "endpointUri": {
                  "description": "Endpoint for the OpenSearch cluster.",
                  "type": "string"
                },
                "errorRetryDuration": {
                  "description": "Maximum number of seconds for which DMS retries failed API requests to the OpenSearch cluster. Default is 300.",
                  "type": "number"
                },
                "fullLoadErrorPercentage": {
                  "description": "Maximum percentage of records that can fail to be written before a full load operation stops. Default is 10.",
                  "type": "number"
                },
                "serviceAccessRoleArn": {
                  "description": "ARN of the IAM Role with permissions to write to the OpenSearch cluster.",
                  "type": "string"
                },
                "useNewMappingType": {
                  "description": "Enable to migrate documentation using the documentation type _doc. OpenSearch and an Elasticsearch clusters only support the _doc documentation type in versions 7.x and later. The default value is false.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "endpointType": {
              "description": "Type of endpoint. Valid values are source, target.",
              "type": "string"
            },
            "engineName": {
              "description": "Type of engine for the endpoint. Valid values are aurora, aurora-postgresql, aurora-serverless, aurora-postgresql-serverless,azuredb, azure-sql-managed-instance, babelfish, db2, db2-zos, docdb, dynamodb, elasticsearch, kafka, kinesis, mariadb, mongodb, mysql, opensearch, oracle, postgres, redshift,redshift-serverless, s3, sqlserver, neptune ,sybase. Please note that some of engine names are available only for target endpoint type (e.g. redshift).",
              "type": "string"
            },
            "extraConnectionAttributes": {
              "description": "Additional attributes associated with the connection. For available attributes for a source Endpoint, see Sources for data migration. For available attributes for a target Endpoint, see Targets for data migration.",
              "type": "string"
            },
            "kafkaSettings": {
              "description": "Configuration block for Kafka settings. See below.",
              "type": "object",
              "properties": {
                "broker": {
                  "description": "Kafka broker location. Specify in the form broker-hostname-or-ip:port.",
                  "type": "string"
                },
                "includeControlDetails": {
                  "description": "Shows detailed control information for table definition, column definition, and table and column changes in the Kafka message output. Default is false.",
                  "type": "boolean"
                },
                "includeNullAndEmpty": {
                  "description": "Include NULL and empty columns for records migrated to the endpoint. Default is false.",
                  "type": "boolean"
                },
                "includePartitionValue": {
                  "description": "Shows the partition value within the Kafka message output unless the partition type is schema-table-type. Default is false.",
                  "type": "boolean"
                },
                "includeTableAlterOperations": {
                  "description": "Includes any data definition language (DDL) operations that change the table in the control data, such as rename-table, drop-table, add-column, drop-column, and rename-column. Default is false.",
                  "type": "boolean"
                },
                "includeTransactionDetails": {
                  "description": "Provides detailed transaction information from the source database. This information includes a commit timestamp, a log position, and values for transaction_id, previous transaction_id, and transaction_record_id (the record offset within a transaction). Default is false.",
                  "type": "boolean"
                },
                "messageFormat": {
                  "description": "Output format for the records created on the endpoint. Message format is JSON (default) or JSON_UNFORMATTED (a single line with no tab).",
                  "type": "string"
                },
                "messageMaxBytes": {
                  "description": "Maximum size in bytes for records created on the endpoint Default is 1,000,000.",
                  "type": "number"
                },
                "noHexPrefix": {
                  "description": "Set this optional parameter to true to avoid adding a '0x' prefix to raw data in hexadecimal format. For example, by default, AWS DMS adds a '0x' prefix to the LOB column type in hexadecimal format moving from an Oracle source to a Kafka target. Use the no_hex_prefix endpoint setting to enable migration of RAW data type columns without adding the '0x' prefix.",
                  "type": "boolean"
                },
                "partitionIncludeSchemaTable": {
                  "description": "Prefixes schema and table names to partition values, when the partition type is primary-key-type. Doing this increases data distribution among Kafka partitions. For example, suppose that a SysBench schema has thousands of tables and each table has only limited range for a primary key. In this case, the same primary key is sent from thousands of tables to the same partition, which causes throttling. Default is false.",
                  "type": "boolean"
                },
                "saslMechanism": {
                  "description": "For SASL/SSL authentication, AWS DMS supports the scram-sha-512 mechanism by default. AWS DMS versions 3.5.0 and later also support the PLAIN mechanism. To use the PLAIN mechanism, set this parameter to plain.",
                  "type": "string"
                },
                "saslPasswordSecretRef": {
                  "description": "Secure password you created when you first set up your MSK cluster to validate a client identity and make an encrypted connection between server and client using SASL-SSL authentication.",
                  "type": "object",
                  "required": [
                    "key",
                    "name"
                  ],
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the secret.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "saslUsername": {
                  "description": "Secure user name you created when you first set up your MSK cluster to validate a client identity and make an encrypted connection between server and client using SASL-SSL authentication.",
                  "type": "string"
                },
                "securityProtocol": {
                  "description": "Set secure connection to a Kafka target endpoint using Transport Layer Security (TLS). Options include ssl-encryption, ssl-authentication, and sasl-ssl. sasl-ssl requires sasl_username and sasl_password.",
                  "type": "string"
                },
                "sslCaCertificateArn": {
                  "description": "ARN for the private certificate authority (CA) cert that AWS DMS uses to securely connect to your Kafka target endpoint.",
                  "type": "string"
                },
                "sslClientCertificateArn": {
                  "description": "ARN of the client certificate used to securely connect to a Kafka target endpoint.",
                  "type": "string"
                },
                "sslClientKeyArn": {
                  "description": "ARN for the client private key used to securely connect to a Kafka target endpoint.",
                  "type": "string"
                },
                "sslClientKeyPasswordSecretRef": {
                  "description": "Password for the client private key used to securely connect to a Kafka target endpoint.",
                  "type": "object",
                  "required": [
                    "key",
                    "name"
                  ],
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the secret.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "topic": {
                  "description": "Kafka topic for migration. Default is kafka-default-topic.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "kinesisSettings": {
              "description": "Configuration block for Kinesis settings. See below.",
              "type": "object",
              "properties": {
                "includeControlDetails": {
                  "description": "Shows detailed control information for table definition, column definition, and table and column changes in the Kinesis message output. Default is false.",
                  "type": "boolean"
                },
                "includeNullAndEmpty": {
                  "description": "Include NULL and empty columns in the target. Default is false.",
                  "type": "boolean"
                },
                "includePartitionValue": {
                  "description": "Shows the partition value within the Kinesis message output, unless the partition type is schema-table-type. Default is false.",
                  "type": "boolean"
                },
                "includeTableAlterOperations": {
                  "description": "Includes any data definition language (DDL) operations that change the table in the control data. Default is false.",
                  "type": "boolean"
                },
                "includeTransactionDetails": {
                  "description": "Provides detailed transaction information from the source database. Default is false.",
                  "type": "boolean"
                },
                "messageFormat": {
                  "description": "Output format for the records created. Default is json. Valid values are json and json-unformatted (a single line with no tab).",
                  "type": "string"
                },
                "partitionIncludeSchemaTable": {
                  "description": "Prefixes schema and table names to partition values, when the partition type is primary-key-type. Default is false.",
                  "type": "boolean"
                },
                "serviceAccessRoleArn": {
                  "description": "ARN of the IAM Role with permissions to write to the Kinesis data stream.",
                  "type": "string"
                },
                "streamArn": {
                  "description": "ARN of the Kinesis data stream.",
                  "type": "string"
                },
                "useLargeIntegerValue": {
                  "description": "Use up to 18 digit int instead of casting ints as doubles, available from AWS DMS version 3.5.4. Default is false.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "kmsKeyArn": {
              "description": "ARN for the KMS key that will be used to encrypt the connection parameters. If you do not specify a value for kms_key_arn, then AWS DMS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS region. When engine_name is redshift, kms_key_arn is the KMS Key for the Redshift target and the parameter redshift_settings.server_side_encryption_kms_key_id encrypts the S3 intermediate storage.",
              "type": "string"
            },
            "kmsKeyArnRef": {
              "description": "Reference to a Key in kms to populate kmsKeyArn.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referenced object",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "kmsKeyArnSelector": {
              "description": "Selector for a Key in kms to populate kmsKeyArn.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "namespace": {
                  "description": "Namespace for the selector",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "mongodbSettings": {
              "description": "Configuration block for MongoDB settings. See below.",
              "type": "object",
              "properties": {
                "authMechanism": {
                  "description": "Authentication mechanism to access the MongoDB source endpoint. Default is default.",
                  "type": "string"
                },
                "authSource": {
                  "description": "Authentication database name. Not used when auth_type is no. Default is admin.",
                  "type": "string"
                },
                "authType": {
                  "description": "Authentication type to access the MongoDB source endpoint. Default is password.",
                  "type": "string"
                },
                "docsToInvestigate": {
                  "description": "Number of documents to preview to determine the document organization. Use this setting when nesting_level is set to one. Default is 1000.",
                  "type": "string"
                },
                "extractDocId": {
                  "description": "Document ID. Use this setting when nesting_level is set to none. Default is false.",
                  "type": "string"
                },
                "nestingLevel": {
                  "description": "Specifies either document or table mode. Default is none. Valid values are one (table mode) and none (document mode).",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "oracleSettings": {
              "description": "Configuration block for Oracle settings. See below.",
              "type": "object",
              "properties": {
                "authenticationMethod": {
                  "description": "Authentication mechanism to access the Oracle source endpoint. Default is password. Valid values are password and kerberos.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "passwordSecretRef": {
              "description": "Password to be used to login to the endpoint database.",
              "type": "object",
              "required": [
                "key",
                "name"
              ],
              "properties": {
                "key": {
                  "type": "string"
                },
                "name": {
                  "description": "Name of the secret.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "pauseReplicationTasks": {
              "description": "Only tasks paused by the resource will be restarted after the modification completes. Default is false.",
              "type": "boolean"
            },
            "port": {
              "description": "Port used by the endpoint database.",
              "type": "number"
            },
            "postgresSettings": {
              "description": "Configuration block for Postgres settings. See below.",
              "type": "object",
              "properties": {
                "afterConnectScript": {
                  "description": "For use with change data capture (CDC) only, this attribute has AWS DMS bypass foreign keys and user triggers to reduce the time it takes to bulk load data.",
                  "type": "string"
                },
                "authenticationMethod": {
                  "description": "Specifies the authentication method. Valid values: password, iam.",
                  "type": "string"
                },
                "babelfishDatabaseName": {
                  "description": "The Babelfish for Aurora PostgreSQL database name for the endpoint.",
                  "type": "string"
                },
                "captureDdls": {
                  "description": "To capture DDL events, AWS DMS creates various artifacts in the PostgreSQL database when the task starts.",
                  "type": "boolean"
                },
                "databaseMode": {
                  "description": "Specifies the default behavior of the replication's handling of PostgreSQL- compatible endpoints that require some additional configuration, such as Babelfish endpoints.",
                  "type": "string"
                },
                "ddlArtifactsSchema": {
                  "description": "Sets the schema in which the operational DDL database artifacts are created. Default is public.",
                  "type": "string"
                },
                "executeTimeout": {
                  "description": "Sets the client statement timeout for the PostgreSQL instance, in seconds. Default value is 60.",
                  "type": "number"
                },
                "failTasksOnLobTruncation": {
                  "description": "When set to true, this value causes a task to fail if the actual size of a LOB column is greater than the specified LobMaxSize. Default is false.",
                  "type": "boolean"
                },
                "heartbeatEnable": {
                  "description": "The write-ahead log (WAL) heartbeat feature mimics a dummy transaction. By doing this, it prevents idle logical replication slots from holding onto old WAL logs, which can result in storage full situations on the source.",
                  "type": "boolean"
                },
                "heartbeatFrequency": {
                  "description": "Sets the WAL heartbeat frequency (in minutes). Default value is 5.",
                  "type": "number"
                },
                "heartbeatSchema": {
                  "description": "Sets the schema in which the heartbeat artifacts are created. Default value is public.",
                  "type": "string"
                },
                "mapBooleanAsBoolean": {
                  "description": "You can use PostgreSQL endpoint settings to map a boolean as a boolean from your PostgreSQL source to a Amazon Redshift target. Default value is false.",
                  "type": "boolean"
                },
                "mapJsonbAsClob": {
                  "description": "Optional When true, DMS migrates JSONB values as CLOB.",
                  "type": "boolean"
                },
                "mapLongVarcharAs": {
                  "description": "Optional When true, DMS migrates LONG values as VARCHAR.",
                  "type": "string"
                },
                "maxFileSize": {
                  "description": "Specifies the maximum size (in KB) of any .csv file used to transfer data to PostgreSQL. Default is 32,768 KB.",
                  "type": "number"
                },
                "pluginName": {
                  "description": "Specifies the plugin to use to create a replication slot. Valid values: pglogical, test_decoding.",
                  "type": "string"
                },
                "serviceAccessRoleArn": {
                  "description": "Specifies the IAM role to use to authenticate the connection.",
                  "type": "string"
                },
                "slotName": {
                  "description": "Sets the name of a previously created logical replication slot for a CDC load of the PostgreSQL source instance.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "redisSettings": {
              "type": "object",
              "properties": {
                "authPasswordSecretRef": {
                  "description": "The password provided with the auth-role and auth-token options of the AuthType setting for a Redis target endpoint.",
                  "type": "object",
                  "required": [
                    "key",
                    "name"
                  ],
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the secret.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "authType": {
                  "description": "Authentication type to access the MongoDB source endpoint. Default is password.",
                  "type": "string"
                },
                "authUserName": {
                  "description": "The username provided with the auth-role option of the AuthType setting for a Redis target endpoint.",
                  "type": "string"
                },
                "port": {
                  "description": "Port used by the endpoint database.",
                  "type": "number"
                },
                "serverName": {
                  "description": "Host name of the server.",
                  "type": "string"
                },
                "sslCaCertificateArn": {
                  "description": "The Amazon Resource Name (ARN) for the certificate authority (CA) that DMS uses to connect to your Redis target endpoint.",
                  "type": "string"
                },
                "sslSecurityProtocol": {
                  "description": "The plaintext option doesn't provide Transport Layer Security (TLS) encryption for traffic between endpoint and database. Options include plaintext, ssl-encryption. The default is ssl-encryption.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "redshiftSettings": {
              "description": "Configuration block for Redshift settings. See below.",
              "type": "object",
              "properties": {
                "bucketFolder": {
                  "description": "Custom S3 Bucket Object prefix for intermediate storage.",
                  "type": "string"
                },
                "bucketName": {
                  "description": "Custom S3 Bucket name for intermediate storage.",
                  "type": "string"
                },
                "encryptionMode": {
                  "description": "The server-side encryption mode that you want to encrypt your intermediate .csv object files copied to S3. Defaults to SSE_S3. Valid values are SSE_S3 and SSE_KMS.",
                  "type": "string"
                },
                "serverSideEncryptionKmsKeyId": {
                  "description": "ARN or Id of KMS Key to use when encryption_mode is SSE_KMS.",
                  "type": "string"
                },
                "serviceAccessRoleArn": {
                  "description": "Amazon Resource Name (ARN) of the IAM Role with permissions to read from or write to the S3 Bucket for intermediate storage.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "region": {
              "description": "Region where this resource will be managed. Defaults to the Region set in the provider configuration.\nRegion is the region you'd like your resource to be created in.",
              "type": "string"
            },
            "secretsManagerAccessRoleArn": {
              "description": "ARN of the IAM role that specifies AWS DMS as the trusted entity and has the required permissions to access the value in the Secrets Manager secret referred to by secrets_manager_arn. The role must allow the iam:PassRole action.",
              "type": "string"
            },
            "secretsManagerAccessRoleArnRef": {
              "description": "Reference to a Role in iam to populate secretsManagerAccessRoleArn.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referenced object",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "secretsManagerAccessRoleArnSelector": {
              "description": "Selector for a Role in iam to populate secretsManagerAccessRoleArn.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "namespace": {
                  "description": "Namespace for the selector",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "secretsManagerArn": {
              "description": "text values for username, password , server_name, and port. You can't specify both.",
              "type": "string"
            },
            "serverName": {
              "description": "Host name of the server.",
              "type": "string"
            },
            "serviceAccessRole": {
              "description": "ARN used by the service access IAM role for dynamodb endpoints.",
              "type": "string"
            },
            "serviceAccessRoleRef": {
              "description": "Reference to a Role in iam to populate serviceAccessRole.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referenced object",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "serviceAccessRoleSelector": {
              "description": "Selector for a Role in iam to populate serviceAccessRole.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "namespace": {
                  "description": "Namespace for the selector",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "sslMode": {
              "description": "SSL mode to use for the connection. Valid values are none, require, verify-ca, verify-full",
              "type": "string"
            },
            "tags": {
              "description": "Key-value map of resource tags.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "username": {
              "description": "User name to be used to login to the endpoint database.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored\nunless the Management Policies feature flag is disabled.\nInitProvider holds the same fields as ForProvider, with the exception\nof Identifier and other resource reference fields. The fields that are\nin InitProvider are merged into ForProvider when the resource is created.\nThe same fields are also added to the terraform ignore_changes hook, to\navoid updating them after creation. This is useful for fields that are\nrequired on creation, but we do not desire to update them after creation,\nfor example because of an external controller is managing them, like an\nautoscaler.",
          "type": "object",
          "properties": {
            "certificateArn": {
              "description": "ARN for the certificate.",
              "type": "string"
            },
            "databaseName": {
              "description": "Name of the endpoint database.",
              "type": "string"
            },
            "elasticsearchSettings": {
              "description": "Configuration block for OpenSearch settings. See below.",
              "type": "object",
              "properties": {
                "endpointUri": {
                  "description": "Endpoint for the OpenSearch cluster.",
                  "type": "string"
                },
                "errorRetryDuration": {
                  "description": "Maximum number of seconds for which DMS retries failed API requests to the OpenSearch cluster. Default is 300.",
                  "type": "number"
                },
                "fullLoadErrorPercentage": {
                  "description": "Maximum percentage of records that can fail to be written before a full load operation stops. Default is 10.",
                  "type": "number"
                },
                "serviceAccessRoleArn": {
                  "description": "ARN of the IAM Role with permissions to write to the OpenSearch cluster.",
                  "type": "string"
                },
                "useNewMappingType": {
                  "description": "Enable to migrate documentation using the documentation type _doc. OpenSearch and an Elasticsearch clusters only support the _doc documentation type in versions 7.x and later. The default value is false.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "endpointType": {
              "description": "Type of endpoint. Valid values are source, target.",
              "type": "string"
            },
            "engineName": {
              "description": "Type of engine for the endpoint. Valid values are aurora, aurora-postgresql, aurora-serverless, aurora-postgresql-serverless,azuredb, azure-sql-managed-instance, babelfish, db2, db2-zos, docdb, dynamodb, elasticsearch, kafka, kinesis, mariadb, mongodb, mysql, opensearch, oracle, postgres, redshift,redshift-serverless, s3, sqlserver, neptune ,sybase. Please note that some of engine names are available only for target endpoint type (e.g. redshift).",
              "type": "string"
            },
            "extraConnectionAttributes": {
              "description": "Additional attributes associated with the connection. For available attributes for a source Endpoint, see Sources for data migration. For available attributes for a target Endpoint, see Targets for data migration.",
              "type": "string"
            },
            "kafkaSettings": {
              "description": "Configuration block for Kafka settings. See below.",
              "type": "object",
              "properties": {
                "broker": {
                  "description": "Kafka broker location. Specify in the form broker-hostname-or-ip:port.",
                  "type": "string"
                },
                "includeControlDetails": {
                  "description": "Shows detailed control information for table definition, column definition, and table and column changes in the Kafka message output. Default is false.",
                  "type": "boolean"
                },
                "includeNullAndEmpty": {
                  "description": "Include NULL and empty columns for records migrated to the endpoint. Default is false.",
                  "type": "boolean"
                },
                "includePartitionValue": {
                  "description": "Shows the partition value within the Kafka message output unless the partition type is schema-table-type. Default is false.",
                  "type": "boolean"
                },
                "includeTableAlterOperations": {
                  "description": "Includes any data definition language (DDL) operations that change the table in the control data, such as rename-table, drop-table, add-column, drop-column, and rename-column. Default is false.",
                  "type": "boolean"
                },
                "includeTransactionDetails": {
                  "description": "Provides detailed transaction information from the source database. This information includes a commit timestamp, a log position, and values for transaction_id, previous transaction_id, and transaction_record_id (the record offset within a transaction). Default is false.",
                  "type": "boolean"
                },
                "messageFormat": {
                  "description": "Output format for the records created on the endpoint. Message format is JSON (default) or JSON_UNFORMATTED (a single line with no tab).",
                  "type": "string"
                },
                "messageMaxBytes": {
                  "description": "Maximum size in bytes for records created on the endpoint Default is 1,000,000.",
                  "type": "number"
                },
                "noHexPrefix": {
                  "description": "Set this optional parameter to true to avoid adding a '0x' prefix to raw data in hexadecimal format. For example, by default, AWS DMS adds a '0x' prefix to the LOB column type in hexadecimal format moving from an Oracle source to a Kafka target. Use the no_hex_prefix endpoint setting to enable migration of RAW data type columns without adding the '0x' prefix.",
                  "type": "boolean"
                },
                "partitionIncludeSchemaTable": {
                  "description": "Prefixes schema and table names to partition values, when the partition type is primary-key-type. Doing this increases data distribution among Kafka partitions. For example, suppose that a SysBench schema has thousands of tables and each table has only limited range for a primary key. In this case, the same primary key is sent from thousands of tables to the same partition, which causes throttling. Default is false.",
                  "type": "boolean"
                },
                "saslMechanism": {
                  "description": "For SASL/SSL authentication, AWS DMS supports the scram-sha-512 mechanism by default. AWS DMS versions 3.5.0 and later also support the PLAIN mechanism. To use the PLAIN mechanism, set this parameter to plain.",
                  "type": "string"
                },
                "saslPasswordSecretRef": {
                  "description": "Secure password you created when you first set up your MSK cluster to validate a client identity and make an encrypted connection between server and client using SASL-SSL authentication.",
                  "type": "object",
                  "required": [
                    "key",
                    "name"
                  ],
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the secret.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "saslUsername": {
                  "description": "Secure user name you created when you first set up your MSK cluster to validate a client identity and make an encrypted connection between server and client using SASL-SSL authentication.",
                  "type": "string"
                },
                "securityProtocol": {
                  "description": "Set secure connection to a Kafka target endpoint using Transport Layer Security (TLS). Options include ssl-encryption, ssl-authentication, and sasl-ssl. sasl-ssl requires sasl_username and sasl_password.",
                  "type": "string"
                },
                "sslCaCertificateArn": {
                  "description": "ARN for the private certificate authority (CA) cert that AWS DMS uses to securely connect to your Kafka target endpoint.",
                  "type": "string"
                },
                "sslClientCertificateArn": {
                  "description": "ARN of the client certificate used to securely connect to a Kafka target endpoint.",
                  "type": "string"
                },
                "sslClientKeyArn": {
                  "description": "ARN for the client private key used to securely connect to a Kafka target endpoint.",
                  "type": "string"
                },
                "sslClientKeyPasswordSecretRef": {
                  "description": "Password for the client private key used to securely connect to a Kafka target endpoint.",
                  "type": "object",
                  "required": [
                    "key",
                    "name"
                  ],
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the secret.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "topic": {
                  "description": "Kafka topic for migration. Default is kafka-default-topic.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "kinesisSettings": {
              "description": "Configuration block for Kinesis settings. See below.",
              "type": "object",
              "properties": {
                "includeControlDetails": {
                  "description": "Shows detailed control information for table definition, column definition, and table and column changes in the Kinesis message output. Default is false.",
                  "type": "boolean"
                },
                "includeNullAndEmpty": {
                  "description": "Include NULL and empty columns in the target. Default is false.",
                  "type": "boolean"
                },
                "includePartitionValue": {
                  "description": "Shows the partition value within the Kinesis message output, unless the partition type is schema-table-type. Default is false.",
                  "type": "boolean"
                },
                "includeTableAlterOperations": {
                  "description": "Includes any data definition language (DDL) operations that change the table in the control data. Default is false.",
                  "type": "boolean"
                },
                "includeTransactionDetails": {
                  "description": "Provides detailed transaction information from the source database. Default is false.",
                  "type": "boolean"
                },
                "messageFormat": {
                  "description": "Output format for the records created. Default is json. Valid values are json and json-unformatted (a single line with no tab).",
                  "type": "string"
                },
                "partitionIncludeSchemaTable": {
                  "description": "Prefixes schema and table names to partition values, when the partition type is primary-key-type. Default is false.",
                  "type": "boolean"
                },
                "serviceAccessRoleArn": {
                  "description": "ARN of the IAM Role with permissions to write to the Kinesis data stream.",
                  "type": "string"
                },
                "streamArn": {
                  "description": "ARN of the Kinesis data stream.",
                  "type": "string"
                },
                "useLargeIntegerValue": {
                  "description": "Use up to 18 digit int instead of casting ints as doubles, available from AWS DMS version 3.5.4. Default is false.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "kmsKeyArn": {
              "description": "ARN for the KMS key that will be used to encrypt the connection parameters. If you do not specify a value for kms_key_arn, then AWS DMS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS region. When engine_name is redshift, kms_key_arn is the KMS Key for the Redshift target and the parameter redshift_settings.server_side_encryption_kms_key_id encrypts the S3 intermediate storage.",
              "type": "string"
            },
            "kmsKeyArnRef": {
              "description": "Reference to a Key in kms to populate kmsKeyArn.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referenced object",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "kmsKeyArnSelector": {
              "description": "Selector for a Key in kms to populate kmsKeyArn.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "namespace": {
                  "description": "Namespace for the selector",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "mongodbSettings": {
              "description": "Configuration block for MongoDB settings. See below.",
              "type": "object",
              "properties": {
                "authMechanism": {
                  "description": "Authentication mechanism to access the MongoDB source endpoint. Default is default.",
                  "type": "string"
                },
                "authSource": {
                  "description": "Authentication database name. Not used when auth_type is no. Default is admin.",
                  "type": "string"
                },
                "authType": {
                  "description": "Authentication type to access the MongoDB source endpoint. Default is password.",
                  "type": "string"
                },
                "docsToInvestigate": {
                  "description": "Number of documents to preview to determine the document organization. Use this setting when nesting_level is set to one. Default is 1000.",
                  "type": "string"
                },
                "extractDocId": {
                  "description": "Document ID. Use this setting when nesting_level is set to none. Default is false.",
                  "type": "string"
                },
                "nestingLevel": {
                  "description": "Specifies either document or table mode. Default is none. Valid values are one (table mode) and none (document mode).",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "oracleSettings": {
              "description": "Configuration block for Oracle settings. See below.",
              "type": "object",
              "properties": {
                "authenticationMethod": {
                  "description": "Authentication mechanism to access the Oracle source endpoint. Default is password. Valid values are password and kerberos.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "passwordSecretRef": {
              "description": "Password to be used to login to the endpoint database.",
              "type": "object",
              "required": [
                "key",
                "name"
              ],
              "properties": {
                "key": {
                  "type": "string"
                },
                "name": {
                  "description": "Name of the secret.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "pauseReplicationTasks": {
              "description": "Only tasks paused by the resource will be restarted after the modification completes. Default is false.",
              "type": "boolean"
            },
            "port": {
              "description": "Port used by the endpoint database.",
              "type": "number"
            },
            "postgresSettings": {
              "description": "Configuration block for Postgres settings. See below.",
              "type": "object",
              "properties": {
                "afterConnectScript": {
                  "description": "For use with change data capture (CDC) only, this attribute has AWS DMS bypass foreign keys and user triggers to reduce the time it takes to bulk load data.",
                  "type": "string"
                },
                "authenticationMethod": {
                  "description": "Specifies the authentication method. Valid values: password, iam.",
                  "type": "string"
                },
                "babelfishDatabaseName": {
                  "description": "The Babelfish for Aurora PostgreSQL database name for the endpoint.",
                  "type": "string"
                },
                "captureDdls": {
                  "description": "To capture DDL events, AWS DMS creates various artifacts in the PostgreSQL database when the task starts.",
                  "type": "boolean"
                },
                "databaseMode": {
                  "description": "Specifies the default behavior of the replication's handling of PostgreSQL- compatible endpoints that require some additional configuration, such as Babelfish endpoints.",
                  "type": "string"
                },
                "ddlArtifactsSchema": {
                  "description": "Sets the schema in which the operational DDL database artifacts are created. Default is public.",
                  "type": "string"
                },
                "executeTimeout": {
                  "description": "Sets the client statement timeout for the PostgreSQL instance, in seconds. Default value is 60.",
                  "type": "number"
                },
                "failTasksOnLobTruncation": {
                  "description": "When set to true, this value causes a task to fail if the actual size of a LOB column is greater than the specified LobMaxSize. Default is false.",
                  "type": "boolean"
                },
                "heartbeatEnable": {
                  "description": "The write-ahead log (WAL) heartbeat feature mimics a dummy transaction. By doing this, it prevents idle logical replication slots from holding onto old WAL logs, which can result in storage full situations on the source.",
                  "type": "boolean"
                },
                "heartbeatFrequency": {
                  "description": "Sets the WAL heartbeat frequency (in minutes). Default value is 5.",
                  "type": "number"
                },
                "heartbeatSchema": {
                  "description": "Sets the schema in which the heartbeat artifacts are created. Default value is public.",
                  "type": "string"
                },
                "mapBooleanAsBoolean": {
                  "description": "You can use PostgreSQL endpoint settings to map a boolean as a boolean from your PostgreSQL source to a Amazon Redshift target. Default value is false.",
                  "type": "boolean"
                },
                "mapJsonbAsClob": {
                  "description": "Optional When true, DMS migrates JSONB values as CLOB.",
                  "type": "boolean"
                },
                "mapLongVarcharAs": {
                  "description": "Optional When true, DMS migrates LONG values as VARCHAR.",
                  "type": "string"
                },
                "maxFileSize": {
                  "description": "Specifies the maximum size (in KB) of any .csv file used to transfer data to PostgreSQL. Default is 32,768 KB.",
                  "type": "number"
                },
                "pluginName": {
                  "description": "Specifies the plugin to use to create a replication slot. Valid values: pglogical, test_decoding.",
                  "type": "string"
                },
                "serviceAccessRoleArn": {
                  "description": "Specifies the IAM role to use to authenticate the connection.",
                  "type": "string"
                },
                "slotName": {
                  "description": "Sets the name of a previously created logical replication slot for a CDC load of the PostgreSQL source instance.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "redisSettings": {
              "type": "object",
              "properties": {
                "authPasswordSecretRef": {
                  "description": "The password provided with the auth-role and auth-token options of the AuthType setting for a Redis target endpoint.",
                  "type": "object",
                  "required": [
                    "key",
                    "name"
                  ],
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the secret.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "authType": {
                  "description": "Authentication type to access the MongoDB source endpoint. Default is password.",
                  "type": "string"
                },
                "authUserName": {
                  "description": "The username provided with the auth-role option of the AuthType setting for a Redis target endpoint.",
                  "type": "string"
                },
                "port": {
                  "description": "Port used by the endpoint database.",
                  "type": "number"
                },
                "serverName": {
                  "description": "Host name of the server.",
                  "type": "string"
                },
                "sslCaCertificateArn": {
                  "description": "The Amazon Resource Name (ARN) for the certificate authority (CA) that DMS uses to connect to your Redis target endpoint.",
                  "type": "string"
                },
                "sslSecurityProtocol": {
                  "description": "The plaintext option doesn't provide Transport Layer Security (TLS) encryption for traffic between endpoint and database. Options include plaintext, ssl-encryption. The default is ssl-encryption.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "redshiftSettings": {
              "description": "Configuration block for Redshift settings. See below.",
              "type": "object",
              "properties": {
                "bucketFolder": {
                  "description": "Custom S3 Bucket Object prefix for intermediate storage.",
                  "type": "string"
                },
                "bucketName": {
                  "description": "Custom S3 Bucket name for intermediate storage.",
                  "type": "string"
                },
                "encryptionMode": {
                  "description": "The server-side encryption mode that you want to encrypt your intermediate .csv object files copied to S3. Defaults to SSE_S3. Valid values are SSE_S3 and SSE_KMS.",
                  "type": "string"
                },
                "serverSideEncryptionKmsKeyId": {
                  "description": "ARN or Id of KMS Key to use when encryption_mode is SSE_KMS.",
                  "type": "string"
                },
                "serviceAccessRoleArn": {
                  "description": "Amazon Resource Name (ARN) of the IAM Role with permissions to read from or write to the S3 Bucket for intermediate storage.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "secretsManagerAccessRoleArn": {
              "description": "ARN of the IAM role that specifies AWS DMS as the trusted entity and has the required permissions to access the value in the Secrets Manager secret referred to by secrets_manager_arn. The role must allow the iam:PassRole action.",
              "type": "string"
            },
            "secretsManagerAccessRoleArnRef": {
              "description": "Reference to a Role in iam to populate secretsManagerAccessRoleArn.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referenced object",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "secretsManagerAccessRoleArnSelector": {
              "description": "Selector for a Role in iam to populate secretsManagerAccessRoleArn.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "namespace": {
                  "description": "Namespace for the selector",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "secretsManagerArn": {
              "description": "text values for username, password , server_name, and port. You can't specify both.",
              "type": "string"
            },
            "serverName": {
              "description": "Host name of the server.",
              "type": "string"
            },
            "serviceAccessRole": {
              "description": "ARN used by the service access IAM role for dynamodb endpoints.",
              "type": "string"
            },
            "serviceAccessRoleRef": {
              "description": "Reference to a Role in iam to populate serviceAccessRole.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referenced object",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "serviceAccessRoleSelector": {
              "description": "Selector for a Role in iam to populate serviceAccessRole.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "namespace": {
                  "description": "Namespace for the selector",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "sslMode": {
              "description": "SSL mode to use for the connection. Valid values are none, require, verify-ca, verify-full",
              "type": "string"
            },
            "tags": {
              "description": "Key-value map of resource tags.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "username": {
              "description": "User name to be used to login to the endpoint database.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "managementPolicies": {
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out\nthrough a Crossplane feature flag.\nManagementPolicies specify the array of actions Crossplane is allowed to\ntake on the managed and external resources.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223\nand this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers\ncan take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to\ncreate, observe, update, and delete this managed resource should be\nconfigured.",
          "type": "object",
          "default": {
            "kind": "ClusterProviderConfig",
            "name": "default"
          },
          "required": [
            "kind",
            "name"
          ],
          "properties": {
            "kind": {
              "description": "Kind of the referenced object.",
              "type": "string"
            },
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a\nSecret to which any connection details for this managed resource should\nbe written. Connection details frequently include the endpoint, username,\nand password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false,
      "x-kubernetes-validations": [
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.endpointType) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.endpointType))",
          "message": "spec.forProvider.endpointType is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.engineName) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.engineName))",
          "message": "spec.forProvider.engineName is a required parameter"
        }
      ]
    },
    "status": {
      "description": "EndpointStatus defines the observed state of Endpoint.",
      "type": "object",
      "properties": {
        "atProvider": {
          "type": "object",
          "properties": {
            "certificateArn": {
              "description": "ARN for the certificate.",
              "type": "string"
            },
            "databaseName": {
              "description": "Name of the endpoint database.",
              "type": "string"
            },
            "elasticsearchSettings": {
              "description": "Configuration block for OpenSearch settings. See below.",
              "type": "object",
              "properties": {
                "endpointUri": {
                  "description": "Endpoint for the OpenSearch cluster.",
                  "type": "string"
                },
                "errorRetryDuration": {
                  "description": "Maximum number of seconds for which DMS retries failed API requests to the OpenSearch cluster. Default is 300.",
                  "type": "number"
                },
                "fullLoadErrorPercentage": {
                  "description": "Maximum percentage of records that can fail to be written before a full load operation stops. Default is 10.",
                  "type": "number"
                },
                "serviceAccessRoleArn": {
                  "description": "ARN of the IAM Role with permissions to write to the OpenSearch cluster.",
                  "type": "string"
                },
                "useNewMappingType": {
                  "description": "Enable to migrate documentation using the documentation type _doc. OpenSearch and an Elasticsearch clusters only support the _doc documentation type in versions 7.x and later. The default value is false.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "endpointArn": {
              "description": "ARN for the endpoint.",
              "type": "string"
            },
            "endpointType": {
              "description": "Type of endpoint. Valid values are source, target.",
              "type": "string"
            },
            "engineName": {
              "description": "Type of engine for the endpoint. Valid values are aurora, aurora-postgresql, aurora-serverless, aurora-postgresql-serverless,azuredb, azure-sql-managed-instance, babelfish, db2, db2-zos, docdb, dynamodb, elasticsearch, kafka, kinesis, mariadb, mongodb, mysql, opensearch, oracle, postgres, redshift,redshift-serverless, s3, sqlserver, neptune ,sybase. Please note that some of engine names are available only for target endpoint type (e.g. redshift).",
              "type": "string"
            },
            "extraConnectionAttributes": {
              "description": "Additional attributes associated with the connection. For available attributes for a source Endpoint, see Sources for data migration. For available attributes for a target Endpoint, see Targets for data migration.",
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "kafkaSettings": {
              "description": "Configuration block for Kafka settings. See below.",
              "type": "object",
              "properties": {
                "broker": {
                  "description": "Kafka broker location. Specify in the form broker-hostname-or-ip:port.",
                  "type": "string"
                },
                "includeControlDetails": {
                  "description": "Shows detailed control information for table definition, column definition, and table and column changes in the Kafka message output. Default is false.",
                  "type": "boolean"
                },
                "includeNullAndEmpty": {
                  "description": "Include NULL and empty columns for records migrated to the endpoint. Default is false.",
                  "type": "boolean"
                },
                "includePartitionValue": {
                  "description": "Shows the partition value within the Kafka message output unless the partition type is schema-table-type. Default is false.",
                  "type": "boolean"
                },
                "includeTableAlterOperations": {
                  "description": "Includes any data definition language (DDL) operations that change the table in the control data, such as rename-table, drop-table, add-column, drop-column, and rename-column. Default is false.",
                  "type": "boolean"
                },
                "includeTransactionDetails": {
                  "description": "Provides detailed transaction information from the source database. This information includes a commit timestamp, a log position, and values for transaction_id, previous transaction_id, and transaction_record_id (the record offset within a transaction). Default is false.",
                  "type": "boolean"
                },
                "messageFormat": {
                  "description": "Output format for the records created on the endpoint. Message format is JSON (default) or JSON_UNFORMATTED (a single line with no tab).",
                  "type": "string"
                },
                "messageMaxBytes": {
                  "description": "Maximum size in bytes for records created on the endpoint Default is 1,000,000.",
                  "type": "number"
                },
                "noHexPrefix": {
                  "description": "Set this optional parameter to true to avoid adding a '0x' prefix to raw data in hexadecimal format. For example, by default, AWS DMS adds a '0x' prefix to the LOB column type in hexadecimal format moving from an Oracle source to a Kafka target. Use the no_hex_prefix endpoint setting to enable migration of RAW data type columns without adding the '0x' prefix.",
                  "type": "boolean"
                },
                "partitionIncludeSchemaTable": {
                  "description": "Prefixes schema and table names to partition values, when the partition type is primary-key-type. Doing this increases data distribution among Kafka partitions. For example, suppose that a SysBench schema has thousands of tables and each table has only limited range for a primary key. In this case, the same primary key is sent from thousands of tables to the same partition, which causes throttling. Default is false.",
                  "type": "boolean"
                },
                "saslMechanism": {
                  "description": "For SASL/SSL authentication, AWS DMS supports the scram-sha-512 mechanism by default. AWS DMS versions 3.5.0 and later also support the PLAIN mechanism. To use the PLAIN mechanism, set this parameter to plain.",
                  "type": "string"
                },
                "saslUsername": {
                  "description": "Secure user name you created when you first set up your MSK cluster to validate a client identity and make an encrypted connection between server and client using SASL-SSL authentication.",
                  "type": "string"
                },
                "securityProtocol": {
                  "description": "Set secure connection to a Kafka target endpoint using Transport Layer Security (TLS). Options include ssl-encryption, ssl-authentication, and sasl-ssl. sasl-ssl requires sasl_username and sasl_password.",
                  "type": "string"
                },
                "sslCaCertificateArn": {
                  "description": "ARN for the private certificate authority (CA) cert that AWS DMS uses to securely connect to your Kafka target endpoint.",
                  "type": "string"
                },
                "sslClientCertificateArn": {
                  "description": "ARN of the client certificate used to securely connect to a Kafka target endpoint.",
                  "type": "string"
                },
                "sslClientKeyArn": {
                  "description": "ARN for the client private key used to securely connect to a Kafka target endpoint.",
                  "type": "string"
                },
                "topic": {
                  "description": "Kafka topic for migration. Default is kafka-default-topic.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "kinesisSettings": {
              "description": "Configuration block for Kinesis settings. See below.",
              "type": "object",
              "properties": {
                "includeControlDetails": {
                  "description": "Shows detailed control information for table definition, column definition, and table and column changes in the Kinesis message output. Default is false.",
                  "type": "boolean"
                },
                "includeNullAndEmpty": {
                  "description": "Include NULL and empty columns in the target. Default is false.",
                  "type": "boolean"
                },
                "includePartitionValue": {
                  "description": "Shows the partition value within the Kinesis message output, unless the partition type is schema-table-type. Default is false.",
                  "type": "boolean"
                },
                "includeTableAlterOperations": {
                  "description": "Includes any data definition language (DDL) operations that change the table in the control data. Default is false.",
                  "type": "boolean"
                },
                "includeTransactionDetails": {
                  "description": "Provides detailed transaction information from the source database. Default is false.",
                  "type": "boolean"
                },
                "messageFormat": {
                  "description": "Output format for the records created. Default is json. Valid values are json and json-unformatted (a single line with no tab).",
                  "type": "string"
                },
                "partitionIncludeSchemaTable": {
                  "description": "Prefixes schema and table names to partition values, when the partition type is primary-key-type. Default is false.",
                  "type": "boolean"
                },
                "serviceAccessRoleArn": {
                  "description": "ARN of the IAM Role with permissions to write to the Kinesis data stream.",
                  "type": "string"
                },
                "streamArn": {
                  "description": "ARN of the Kinesis data stream.",
                  "type": "string"
                },
                "useLargeIntegerValue": {
                  "description": "Use up to 18 digit int instead of casting ints as doubles, available from AWS DMS version 3.5.4. Default is false.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "kmsKeyArn": {
              "description": "ARN for the KMS key that will be used to encrypt the connection parameters. If you do not specify a value for kms_key_arn, then AWS DMS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS region. When engine_name is redshift, kms_key_arn is the KMS Key for the Redshift target and the parameter redshift_settings.server_side_encryption_kms_key_id encrypts the S3 intermediate storage.",
              "type": "string"
            },
            "mongodbSettings": {
              "description": "Configuration block for MongoDB settings. See below.",
              "type": "object",
              "properties": {
                "authMechanism": {
                  "description": "Authentication mechanism to access the MongoDB source endpoint. Default is default.",
                  "type": "string"
                },
                "authSource": {
                  "description": "Authentication database name. Not used when auth_type is no. Default is admin.",
                  "type": "string"
                },
                "authType": {
                  "description": "Authentication type to access the MongoDB source endpoint. Default is password.",
                  "type": "string"
                },
                "docsToInvestigate": {
                  "description": "Number of documents to preview to determine the document organization. Use this setting when nesting_level is set to one. Default is 1000.",
                  "type": "string"
                },
                "extractDocId": {
                  "description": "Document ID. Use this setting when nesting_level is set to none. Default is false.",
                  "type": "string"
                },
                "nestingLevel": {
                  "description": "Specifies either document or table mode. Default is none. Valid values are one (table mode) and none (document mode).",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "oracleSettings": {
              "description": "Configuration block for Oracle settings. See below.",
              "type": "object",
              "properties": {
                "authenticationMethod": {
                  "description": "Authentication mechanism to access the Oracle source endpoint. Default is password. Valid values are password and kerberos.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "pauseReplicationTasks": {
              "description": "Only tasks paused by the resource will be restarted after the modification completes. Default is false.",
              "type": "boolean"
            },
            "port": {
              "description": "Port used by the endpoint database.",
              "type": "number"
            },
            "postgresSettings": {
              "description": "Configuration block for Postgres settings. See below.",
              "type": "object",
              "properties": {
                "afterConnectScript": {
                  "description": "For use with change data capture (CDC) only, this attribute has AWS DMS bypass foreign keys and user triggers to reduce the time it takes to bulk load data.",
                  "type": "string"
                },
                "authenticationMethod": {
                  "description": "Specifies the authentication method. Valid values: password, iam.",
                  "type": "string"
                },
                "babelfishDatabaseName": {
                  "description": "The Babelfish for Aurora PostgreSQL database name for the endpoint.",
                  "type": "string"
                },
                "captureDdls": {
                  "description": "To capture DDL events, AWS DMS creates various artifacts in the PostgreSQL database when the task starts.",
                  "type": "boolean"
                },
                "databaseMode": {
                  "description": "Specifies the default behavior of the replication's handling of PostgreSQL- compatible endpoints that require some additional configuration, such as Babelfish endpoints.",
                  "type": "string"
                },
                "ddlArtifactsSchema": {
                  "description": "Sets the schema in which the operational DDL database artifacts are created. Default is public.",
                  "type": "string"
                },
                "executeTimeout": {
                  "description": "Sets the client statement timeout for the PostgreSQL instance, in seconds. Default value is 60.",
                  "type": "number"
                },
                "failTasksOnLobTruncation": {
                  "description": "When set to true, this value causes a task to fail if the actual size of a LOB column is greater than the specified LobMaxSize. Default is false.",
                  "type": "boolean"
                },
                "heartbeatEnable": {
                  "description": "The write-ahead log (WAL) heartbeat feature mimics a dummy transaction. By doing this, it prevents idle logical replication slots from holding onto old WAL logs, which can result in storage full situations on the source.",
                  "type": "boolean"
                },
                "heartbeatFrequency": {
                  "description": "Sets the WAL heartbeat frequency (in minutes). Default value is 5.",
                  "type": "number"
                },
                "heartbeatSchema": {
                  "description": "Sets the schema in which the heartbeat artifacts are created. Default value is public.",
                  "type": "string"
                },
                "mapBooleanAsBoolean": {
                  "description": "You can use PostgreSQL endpoint settings to map a boolean as a boolean from your PostgreSQL source to a Amazon Redshift target. Default value is false.",
                  "type": "boolean"
                },
                "mapJsonbAsClob": {
                  "description": "Optional When true, DMS migrates JSONB values as CLOB.",
                  "type": "boolean"
                },
                "mapLongVarcharAs": {
                  "description": "Optional When true, DMS migrates LONG values as VARCHAR.",
                  "type": "string"
                },
                "maxFileSize": {
                  "description": "Specifies the maximum size (in KB) of any .csv file used to transfer data to PostgreSQL. Default is 32,768 KB.",
                  "type": "number"
                },
                "pluginName": {
                  "description": "Specifies the plugin to use to create a replication slot. Valid values: pglogical, test_decoding.",
                  "type": "string"
                },
                "serviceAccessRoleArn": {
                  "description": "Specifies the IAM role to use to authenticate the connection.",
                  "type": "string"
                },
                "slotName": {
                  "description": "Sets the name of a previously created logical replication slot for a CDC load of the PostgreSQL source instance.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "redisSettings": {
              "type": "object",
              "properties": {
                "authType": {
                  "description": "Authentication type to access the MongoDB source endpoint. Default is password.",
                  "type": "string"
                },
                "authUserName": {
                  "description": "The username provided with the auth-role option of the AuthType setting for a Redis target endpoint.",
                  "type": "string"
                },
                "port": {
                  "description": "Port used by the endpoint database.",
                  "type": "number"
                },
                "serverName": {
                  "description": "Host name of the server.",
                  "type": "string"
                },
                "sslCaCertificateArn": {
                  "description": "The Amazon Resource Name (ARN) for the certificate authority (CA) that DMS uses to connect to your Redis target endpoint.",
                  "type": "string"
                },
                "sslSecurityProtocol": {
                  "description": "The plaintext option doesn't provide Transport Layer Security (TLS) encryption for traffic between endpoint and database. Options include plaintext, ssl-encryption. The default is ssl-encryption.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "redshiftSettings": {
              "description": "Configuration block for Redshift settings. See below.",
              "type": "object",
              "properties": {
                "bucketFolder": {
                  "description": "Custom S3 Bucket Object prefix for intermediate storage.",
                  "type": "string"
                },
                "bucketName": {
                  "description": "Custom S3 Bucket name for intermediate storage.",
                  "type": "string"
                },
                "encryptionMode": {
                  "description": "The server-side encryption mode that you want to encrypt your intermediate .csv object files copied to S3. Defaults to SSE_S3. Valid values are SSE_S3 and SSE_KMS.",
                  "type": "string"
                },
                "serverSideEncryptionKmsKeyId": {
                  "description": "ARN or Id of KMS Key to use when encryption_mode is SSE_KMS.",
                  "type": "string"
                },
                "serviceAccessRoleArn": {
                  "description": "Amazon Resource Name (ARN) of the IAM Role with permissions to read from or write to the S3 Bucket for intermediate storage.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "region": {
              "description": "Region where this resource will be managed. Defaults to the Region set in the provider configuration.\nRegion is the region you'd like your resource to be created in.",
              "type": "string"
            },
            "secretsManagerAccessRoleArn": {
              "description": "ARN of the IAM role that specifies AWS DMS as the trusted entity and has the required permissions to access the value in the Secrets Manager secret referred to by secrets_manager_arn. The role must allow the iam:PassRole action.",
              "type": "string"
            },
            "secretsManagerArn": {
              "description": "text values for username, password , server_name, and port. You can't specify both.",
              "type": "string"
            },
            "serverName": {
              "description": "Host name of the server.",
              "type": "string"
            },
            "serviceAccessRole": {
              "description": "ARN used by the service access IAM role for dynamodb endpoints.",
              "type": "string"
            },
            "sslMode": {
              "description": "SSL mode to use for the connection. Valid values are none, require, verify-ca, verify-full",
              "type": "string"
            },
            "tags": {
              "description": "Key-value map of resource tags.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "tagsAll": {
              "description": "Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "username": {
              "description": "User name to be used to login to the endpoint database.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "type": "array",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one\nstatus to another.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from\none status to another, if any.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to\na resource at any point in time.",
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest metadata.generation\nwhich resulted in either a ready state, or stalled due to error\nit can not recover from without human intervention.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    }
  }
}
