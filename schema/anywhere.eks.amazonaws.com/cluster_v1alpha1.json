{
  "description": "Cluster is the Schema for the clusters API.",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "ClusterSpec defines the desired state of Cluster.",
      "type": "object",
      "properties": {
        "bundlesRef": {
          "description": "BundlesRef contains a reference to the Bundles containing the desired dependencies for the cluster.\nDEPRECATED: Use EksaVersion instead.",
          "type": "object",
          "required": [
            "apiVersion",
            "name",
            "namespace"
          ],
          "properties": {
            "apiVersion": {
              "description": "APIVersion refers to the Bundles APIVersion",
              "type": "string"
            },
            "name": {
              "description": "Name refers to the name of the Bundles object in the cluster",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace refers to the Bundles's namespace",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "clusterNetwork": {
          "type": "object",
          "properties": {
            "cni": {
              "description": "Deprecated. Use CNIConfig",
              "type": "string"
            },
            "cniConfig": {
              "description": "CNIConfig specifies the CNI plugin to be installed in the cluster",
              "type": "object",
              "properties": {
                "cilium": {
                  "description": "CiliumConfig contains configuration specific to the Cilium CNI.",
                  "type": "object",
                  "properties": {
                    "cniExclusive": {
                      "description": "CNIExclusive controls whether Cilium should remove other CNI configuration files.\nWhen true (default), Cilium removes other CNI configs; when false, it leaves them alone.",
                      "type": "boolean"
                    },
                    "egressMasqueradeInterfaces": {
                      "description": "EgressMasquaradeInterfaces determines which network interfaces are used for masquerading. Accepted values are a valid interface name or interface prefix.",
                      "type": "string"
                    },
                    "ipv4NativeRoutingCIDR": {
                      "description": "IPv4NativeRoutingCIDR specifies the CIDR to use when RoutingMode is set to direct.\nWhen specified, Cilium assumes networking for this CIDR is preconfigured and\nhands traffic destined for that range to the Linux network stack without\napplying any SNAT.\nIf this is not set autoDirectNodeRoutes will be set to true",
                      "type": "string"
                    },
                    "ipv6NativeRoutingCIDR": {
                      "description": "IPv6NativeRoutingCIDR specifies the IPv6 CIDR to use when RoutingMode is set to direct.\nWhen specified, Cilium assumes networking for this CIDR is preconfigured and\nhands traffic destined for that range to the Linux network stack without\napplying any SNAT.\nIf this is not set autoDirectNodeRoutes will be set to true",
                      "type": "string"
                    },
                    "policyEnforcementMode": {
                      "description": "PolicyEnforcementMode determines communication allowed between pods. Accepted values are default, always, never.",
                      "type": "string"
                    },
                    "routingMode": {
                      "description": "RoutingMode indicates the routing tunnel mode to use for Cilium. Accepted values are overlay (geneve tunnel with overlay)\nor direct (tunneling disabled with direct routing)\nDefaults to overlay.",
                      "type": "string"
                    },
                    "skipUpgrade": {
                      "description": "SkipUpgrade indicicates that Cilium maintenance should be skipped during upgrades. This can\nbe used when operators wish to self manage the Cilium installation.",
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "kindnetd": {
                  "description": "KindnetdConfig contains configuration specific to the Kindnetd CNI.",
                  "type": "object"
                }
              },
              "additionalProperties": false
            },
            "dns": {
              "type": "object",
              "properties": {
                "resolvConf": {
                  "description": "ResolvConf refers to the DNS resolver configuration",
                  "type": "object",
                  "properties": {
                    "path": {
                      "description": "Path defines the path to the file that contains the DNS resolver configuration",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "nodes": {
              "type": "object",
              "properties": {
                "cidrMaskSize": {
                  "description": "CIDRMaskSize defines the mask size for node cidr in the cluster, default for ipv4 is 24. This is an optional field",
                  "type": "integer"
                }
              },
              "additionalProperties": false
            },
            "pods": {
              "description": "Comma-separated list of CIDR blocks to use for pod and service subnets.\nDefaults to 192.168.0.0/16 for pod subnet.",
              "type": "object",
              "properties": {
                "cidrBlocks": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "additionalProperties": false
            },
            "services": {
              "type": "object",
              "properties": {
                "cidrBlocks": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "controlPlaneConfiguration": {
          "type": "object",
          "properties": {
            "apiServerExtraArgs": {
              "description": "APIServerExtraArgs defines the flags to configure for the API server.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "certSans": {
              "description": "CertSANs is a slice of domain names or IPs to be added as Subject Name Alternatives of the\nKube API Servers Certificate.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "count": {
              "description": "Count defines the number of desired control plane nodes. Defaults to 1.",
              "type": "integer"
            },
            "endpoint": {
              "description": "Endpoint defines the host ip and port to use for the control plane.",
              "type": "object",
              "required": [
                "host"
              ],
              "properties": {
                "host": {
                  "description": "Host defines the ip that you want to use to connect to the control plane",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "kubeletConfiguration": {
              "description": "KubeletConfiguration is a struct that exposes the Kubelet settings for the user to set on control plane nodes.",
              "type": "object",
              "x-kubernetes-preserve-unknown-fields": true
            },
            "labels": {
              "description": "Labels define the labels to assign to the node",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "machineGroupRef": {
              "description": "MachineGroupRef defines the machine group configuration for the control plane.",
              "type": "object",
              "properties": {
                "kind": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "machineHealthCheck": {
              "description": "MachineHealthCheck is a control-plane level override for the timeouts and maxUnhealthy specified in the top-level MHC configuration. If not configured, the defaults in the top-level MHC configuration are used.",
              "type": "object",
              "properties": {
                "maxUnhealthy": {
                  "description": "MaxUnhealthy is used to configure the maximum number of unhealthy machines in machine health checks. This setting applies to both control plane and worker machines. If the number of unhealthy machines exceeds the limit set by maxUnhealthy, further remediation will not be performed. If not configured, the default value is set to \"100%\" for controlplane machines and \"40%\" for worker machines.",
                  "anyOf": [
                    {
                      "type": "integer"
                    },
                    {
                      "type": "string"
                    }
                  ],
                  "x-kubernetes-int-or-string": true
                },
                "nodeStartupTimeout": {
                  "description": "NodeStartupTimeout is used to configure the node startup timeout in machine health checks. It determines how long a MachineHealthCheck should wait for a Node to join the cluster, before considering a Machine unhealthy. If not configured, the default value is set to \"10m0s\" (10 minutes) for all providers. For Tinkerbell provider the default is \"20m0s\".",
                  "type": "string"
                },
                "unhealthyMachineTimeout": {
                  "description": "UnhealthyMachineTimeout is used to configure the unhealthy machine timeout in machine health checks. If any unhealthy conditions are met for the amount of time specified as the timeout, the machines are considered unhealthy. If not configured, the default value is set to \"5m0s\" (5 minutes).",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "skipLoadBalancerDeployment": {
              "description": "SkipLoadBalancerDeployment skip deploying control plane load balancer.\nMake sure your infrastructure can handle control plane load balancing when you set this field to true.",
              "type": "boolean"
            },
            "taints": {
              "description": "Taints define the set of taints to be applied on control plane nodes",
              "type": "array",
              "items": {
                "description": "The node this Taint is attached to has the \"effect\" on\nany pod that does not tolerate the Taint.",
                "type": "object",
                "required": [
                  "effect",
                  "key"
                ],
                "properties": {
                  "effect": {
                    "description": "Required. The effect of the taint on pods\nthat do not tolerate the taint.\nValid effects are NoSchedule, PreferNoSchedule and NoExecute.",
                    "type": "string"
                  },
                  "key": {
                    "description": "Required. The taint key to be applied to a node.",
                    "type": "string"
                  },
                  "timeAdded": {
                    "description": "TimeAdded represents the time at which the taint was added.\nIt is only written for NoExecute taints.",
                    "type": "string",
                    "format": "date-time"
                  },
                  "value": {
                    "description": "The taint value corresponding to the taint key.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "upgradeRolloutStrategy": {
              "description": "UpgradeRolloutStrategy determines the rollout strategy to use for rolling upgrades\nand related parameters/knobs",
              "type": "object",
              "properties": {
                "rollingUpdate": {
                  "description": "ControlPlaneRollingUpdateParams is API for rolling update strategy knobs.",
                  "type": "object",
                  "required": [
                    "maxSurge"
                  ],
                  "properties": {
                    "maxSurge": {
                      "type": "integer"
                    }
                  },
                  "additionalProperties": false
                },
                "type": {
                  "description": "UpgradeRolloutStrategyType defines the types of upgrade rollout strategies.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "datacenterRef": {
          "type": "object",
          "properties": {
            "kind": {
              "type": "string"
            },
            "name": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "eksaVersion": {
          "description": "EksaVersion is the semver identifying the release of eks-a used to populate the cluster components.",
          "type": "string"
        },
        "etcdEncryption": {
          "type": "array",
          "items": {
            "description": "EtcdEncryption defines the configuration for ETCD encryption.",
            "type": "object",
            "required": [
              "providers",
              "resources"
            ],
            "properties": {
              "providers": {
                "type": "array",
                "items": {
                  "description": "EtcdEncryptionProvider defines the configuration for ETCD encryption providers.\nCurrently only KMS provider is supported.",
                  "type": "object",
                  "required": [
                    "kms"
                  ],
                  "properties": {
                    "kms": {
                      "description": "KMS defines the configuration for KMS Encryption provider.",
                      "type": "object",
                      "required": [
                        "name",
                        "socketListenAddress"
                      ],
                      "properties": {
                        "cachesize": {
                          "description": "CacheSize defines the maximum number of encrypted objects to be cached in memory. The default value is 1000.\nYou can set this to a negative value to disable caching.",
                          "type": "integer",
                          "format": "int32"
                        },
                        "name": {
                          "description": "Name defines the name of KMS plugin to be used.",
                          "type": "string"
                        },
                        "socketListenAddress": {
                          "description": "SocketListenAddress defines a UNIX socket address that the KMS provider listens on.",
                          "type": "string"
                        },
                        "timeout": {
                          "description": "Timeout for kube-apiserver to wait for KMS plugin. Default is 3s.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                }
              },
              "resources": {
                "description": "Resources defines a list of objects and custom resources definitions that should be encrypted.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "externalEtcdConfiguration": {
          "description": "ExternalEtcdConfiguration defines the configuration options for using unstacked etcd topology.",
          "type": "object",
          "properties": {
            "count": {
              "type": "integer"
            },
            "machineGroupRef": {
              "description": "MachineGroupRef defines the machine group configuration for the etcd machines.",
              "type": "object",
              "properties": {
                "kind": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "gitOpsRef": {
          "type": "object",
          "properties": {
            "kind": {
              "type": "string"
            },
            "name": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "identityProviderRefs": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "kind": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "kubernetesVersion": {
          "type": "string"
        },
        "licenseToken": {
          "type": "string"
        },
        "machineHealthCheck": {
          "description": "MachineHealthCheck allows to configure timeouts for machine health checks. Machine Health Checks are responsible for remediating unhealthy Machines.\nConfiguring these values will decide how long to wait to remediate unhealthy machine or determine health of nodes' machines.",
          "type": "object",
          "properties": {
            "maxUnhealthy": {
              "description": "MaxUnhealthy is used to configure the maximum number of unhealthy machines in machine health checks. This setting applies to both control plane and worker machines. If the number of unhealthy machines exceeds the limit set by maxUnhealthy, further remediation will not be performed. If not configured, the default value is set to \"100%\" for controlplane machines and \"40%\" for worker machines.",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ],
              "x-kubernetes-int-or-string": true
            },
            "nodeStartupTimeout": {
              "description": "NodeStartupTimeout is used to configure the node startup timeout in machine health checks. It determines how long a MachineHealthCheck should wait for a Node to join the cluster, before considering a Machine unhealthy. If not configured, the default value is set to \"10m0s\" (10 minutes) for all providers. For Tinkerbell provider the default is \"20m0s\".",
              "type": "string"
            },
            "unhealthyMachineTimeout": {
              "description": "UnhealthyMachineTimeout is used to configure the unhealthy machine timeout in machine health checks. If any unhealthy conditions are met for the amount of time specified as the timeout, the machines are considered unhealthy. If not configured, the default value is set to \"5m0s\" (5 minutes).",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "managementCluster": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "packages": {
          "description": "PackageConfiguration for installing EKS Anywhere curated packages.",
          "type": "object",
          "properties": {
            "controller": {
              "description": "Controller package controller configuration",
              "type": "object",
              "properties": {
                "digest": {
                  "description": "Digest package controller digest",
                  "type": "string"
                },
                "disableWebhooks": {
                  "description": "DisableWebhooks on package controller",
                  "type": "boolean"
                },
                "env": {
                  "description": "Env of package controller in the format `key=value`",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "repository": {
                  "description": "Repository package controller repository",
                  "type": "string"
                },
                "resources": {
                  "description": "Resources of package controller",
                  "type": "object",
                  "properties": {
                    "limits": {
                      "description": "ImageResource resources for container image.",
                      "type": "object",
                      "properties": {
                        "cpu": {
                          "description": "CPU image cpu",
                          "type": "string"
                        },
                        "memory": {
                          "description": "Memory image memory",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    },
                    "requests": {
                      "description": "Requests for image resources",
                      "type": "object",
                      "properties": {
                        "cpu": {
                          "description": "CPU image cpu",
                          "type": "string"
                        },
                        "memory": {
                          "description": "Memory image memory",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "tag": {
                  "description": "Tag package controller tag",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "cronjob": {
              "description": "Cronjob for ecr token refresher",
              "type": "object",
              "properties": {
                "digest": {
                  "description": "Digest ecr token refresher digest",
                  "type": "string"
                },
                "disable": {
                  "description": "Disable on cron job",
                  "type": "boolean"
                },
                "repository": {
                  "description": "Repository ecr token refresher repository",
                  "type": "string"
                },
                "tag": {
                  "description": "Tag ecr token refresher tag",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "disable": {
              "description": "Disable package controller on cluster",
              "type": "boolean"
            }
          },
          "additionalProperties": false
        },
        "podIamConfig": {
          "type": "object",
          "required": [
            "serviceAccountIssuer"
          ],
          "properties": {
            "serviceAccountIssuer": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "proxyConfiguration": {
          "type": "object",
          "properties": {
            "httpProxy": {
              "type": "string"
            },
            "httpsProxy": {
              "type": "string"
            },
            "noProxy": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false
        },
        "registryMirrorConfiguration": {
          "description": "RegistryMirrorConfiguration defines the settings for image registry mirror.",
          "type": "object",
          "properties": {
            "authenticate": {
              "description": "Authenticate defines if registry requires authentication",
              "type": "boolean"
            },
            "caCertContent": {
              "description": "CACertContent defines the contents registry mirror CA certificate",
              "type": "string"
            },
            "endpoint": {
              "description": "Endpoint defines the registry mirror endpoint to use for pulling images",
              "type": "string"
            },
            "insecureSkipVerify": {
              "description": "InsecureSkipVerify skips the registry certificate verification.\nOnly use this solution for isolated testing or in a tightly controlled, air-gapped environment.",
              "type": "boolean"
            },
            "ociNamespaces": {
              "description": "OCINamespaces defines the mapping from an upstream registry to a local namespace where upstream\nartifacts are placed into",
              "type": "array",
              "items": {
                "description": "OCINamespace represents an entity in a local reigstry to group related images.",
                "type": "object",
                "required": [
                  "namespace",
                  "registry"
                ],
                "properties": {
                  "namespace": {
                    "description": "Namespace refers to the name of a namespace in the local registry",
                    "type": "string"
                  },
                  "registry": {
                    "description": "Registry refers to the name of the upstream registry",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "port": {
              "description": "Port defines the port exposed for registry mirror endpoint",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "workerNodeGroupConfigurations": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "autoscalingConfiguration": {
                "description": "AutoScalingConfiguration defines the auto scaling configuration",
                "type": "object",
                "properties": {
                  "maxCount": {
                    "description": "MaxCount defines the maximum number of nodes for the associated resource group.",
                    "type": "integer"
                  },
                  "minCount": {
                    "description": "MinCount defines the minimum number of nodes for the associated resource group.",
                    "type": "integer"
                  }
                },
                "additionalProperties": false
              },
              "count": {
                "description": "Count defines the number of desired worker nodes. Defaults to 1.",
                "type": "integer"
              },
              "failureDomains": {
                "description": "FailureDomains is the optional list of failure domains to distribute worker nodes across the infrastructure.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "kubeletConfiguration": {
                "description": "KubeletConfiguration is a struct that exposes the Kubelet settings for the user to set on worker nodes.",
                "type": "object",
                "x-kubernetes-preserve-unknown-fields": true
              },
              "kubernetesVersion": {
                "description": "KubernetesVersion defines the version for worker nodes. If not set, the top level spec kubernetesVersion will be used.",
                "type": "string"
              },
              "labels": {
                "description": "Labels define the labels to assign to the node",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "machineGroupRef": {
                "description": "MachineGroupRef defines the machine group configuration for the worker nodes.",
                "type": "object",
                "properties": {
                  "kind": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              },
              "machineHealthCheck": {
                "description": "MachineHealthCheck is a worker node level override for the timeouts and maxUnhealthy specified in the top-level MHC configuration. If not configured, the defaults in the top-level MHC configuration are used.",
                "type": "object",
                "properties": {
                  "maxUnhealthy": {
                    "description": "MaxUnhealthy is used to configure the maximum number of unhealthy machines in machine health checks. This setting applies to both control plane and worker machines. If the number of unhealthy machines exceeds the limit set by maxUnhealthy, further remediation will not be performed. If not configured, the default value is set to \"100%\" for controlplane machines and \"40%\" for worker machines.",
                    "anyOf": [
                      {
                        "type": "integer"
                      },
                      {
                        "type": "string"
                      }
                    ],
                    "x-kubernetes-int-or-string": true
                  },
                  "nodeStartupTimeout": {
                    "description": "NodeStartupTimeout is used to configure the node startup timeout in machine health checks. It determines how long a MachineHealthCheck should wait for a Node to join the cluster, before considering a Machine unhealthy. If not configured, the default value is set to \"10m0s\" (10 minutes) for all providers. For Tinkerbell provider the default is \"20m0s\".",
                    "type": "string"
                  },
                  "unhealthyMachineTimeout": {
                    "description": "UnhealthyMachineTimeout is used to configure the unhealthy machine timeout in machine health checks. If any unhealthy conditions are met for the amount of time specified as the timeout, the machines are considered unhealthy. If not configured, the default value is set to \"5m0s\" (5 minutes).",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              },
              "name": {
                "description": "Name refers to the name of the worker node group",
                "type": "string"
              },
              "taints": {
                "description": "Taints define the set of taints to be applied on worker nodes",
                "type": "array",
                "items": {
                  "description": "The node this Taint is attached to has the \"effect\" on\nany pod that does not tolerate the Taint.",
                  "type": "object",
                  "required": [
                    "effect",
                    "key"
                  ],
                  "properties": {
                    "effect": {
                      "description": "Required. The effect of the taint on pods\nthat do not tolerate the taint.\nValid effects are NoSchedule, PreferNoSchedule and NoExecute.",
                      "type": "string"
                    },
                    "key": {
                      "description": "Required. The taint key to be applied to a node.",
                      "type": "string"
                    },
                    "timeAdded": {
                      "description": "TimeAdded represents the time at which the taint was added.\nIt is only written for NoExecute taints.",
                      "type": "string",
                      "format": "date-time"
                    },
                    "value": {
                      "description": "The taint value corresponding to the taint key.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "upgradeRolloutStrategy": {
                "description": "UpgradeRolloutStrategy determines the rollout strategy to use for rolling upgrades\nand related parameters/knobs",
                "type": "object",
                "properties": {
                  "rollingUpdate": {
                    "description": "WorkerNodesRollingUpdateParams is API for rolling update strategy knobs.",
                    "type": "object",
                    "required": [
                      "maxSurge",
                      "maxUnavailable"
                    ],
                    "properties": {
                      "maxSurge": {
                        "type": "integer"
                      },
                      "maxUnavailable": {
                        "type": "integer"
                      }
                    },
                    "additionalProperties": false
                  },
                  "type": {
                    "description": "UpgradeRolloutStrategyType defines the types of upgrade rollout strategies.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "ClusterStatus defines the observed state of Cluster.",
      "type": "object",
      "properties": {
        "childrenReconciledGeneration": {
          "description": "ChildrenReconciledGeneration represents the sum of the .metadata.generation\nfor all the linked objects for the cluster, observed the last time the\ncluster was successfully reconciled.\nNOTE: This field was added for internal use and we do not provide guarantees\nto its behavior if changed externally. Its meaning and implementation are\nsubject to change in the future.",
          "type": "integer",
          "format": "int64"
        },
        "clusterCertificateInfo": {
          "description": "ClusterCertificateInfo contains information about all the control plane and external etcd certificates",
          "type": "array",
          "items": {
            "description": "ClusterCertificateInfo contains information about certificate expiration for cluster components.",
            "type": "object",
            "required": [
              "expiresInDays",
              "machine"
            ],
            "properties": {
              "expiresInDays": {
                "description": "ExpiresInDays defines the number of days until the certificate expires.",
                "type": "integer"
              },
              "machine": {
                "description": "Machine defines the machine name.",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "conditions": {
          "type": "array",
          "items": {
            "description": "Condition defines an observation of a Cluster API resource operational state.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "Last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed. If that is not known, then using the time when\nthe API field changed is acceptable.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "A human readable message indicating details about the transition.\nThis field may be empty.",
                "type": "string"
              },
              "reason": {
                "description": "The reason for the condition's last transition in CamelCase.\nThe specific API may choose whether or not this field is considered a guaranteed API.\nThis field may be empty.",
                "type": "string"
              },
              "severity": {
                "description": "severity provides an explicit classification of Reason code, so the users or machines can immediately\nunderstand the current situation and act accordingly.\nThe Severity field MUST be set only when Status=False.",
                "type": "string"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "type": "string"
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase.\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions\ncan be useful (see .node.status.conditions), the ability to deconflict is important.",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "eksdReleaseRef": {
          "description": "EksdReleaseRef defines the properties of the EKS-D object on the cluster",
          "type": "object",
          "required": [
            "apiVersion",
            "kind",
            "name",
            "namespace"
          ],
          "properties": {
            "apiVersion": {
              "description": "ApiVersion refers to the EKS-D API version",
              "type": "string"
            },
            "kind": {
              "description": "Kind refers to the Release kind for the EKS-D object",
              "type": "string"
            },
            "name": {
              "description": "Name refers to the name of the EKS-D object on the cluster",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace refers to the namespace for the EKS-D release resources",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "failureMessage": {
          "description": "Descriptive message about a fatal problem while reconciling a cluster",
          "type": "string"
        },
        "failureReason": {
          "description": "Machine readable value about a terminal problem while reconciling the cluster\nset at the same time as failureMessage",
          "type": "string"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest generation observed by the controller.",
          "type": "integer",
          "format": "int64"
        },
        "reconciledGeneration": {
          "description": "ReconciledGeneration represents the .metadata.generation the last time the\ncluster was successfully reconciled. It is the latest generation observed\nby the controller.\nNOTE: This field was added for internal use and we do not provide guarantees\nto its behavior if changed externally. Its meaning and implementation are\nsubject to change in the future.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    }
  }
}
