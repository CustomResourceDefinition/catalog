{
  "description": "NutanixMachineConfig is the Schema for the nutanix machine configs API",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "NutanixMachineConfigSpec defines the desired state of NutanixMachineConfig.",
      "type": "object",
      "required": [
        "cluster",
        "image",
        "memorySize",
        "osFamily",
        "subnet",
        "systemDiskSize",
        "vcpuSockets",
        "vcpusPerSocket"
      ],
      "properties": {
        "additionalCategories": {
          "description": "additionalCategories is a list of optional categories to be added to the VM.\nCategories must be created in Prism Central before they can be used.",
          "type": "array",
          "items": {
            "description": "NutanixCategoryIdentifier holds the identity of a Nutanix Prism Central category.",
            "type": "object",
            "required": [
              "key",
              "value"
            ],
            "properties": {
              "key": {
                "description": "key is the Key of the category in the Prism Central.",
                "type": "string"
              },
              "value": {
                "description": "value is the category value linked to the key in the Prism Central.",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "bootType": {
          "description": "BootType defines the boot type of the VM. Allowed values: legacy, uefi",
          "type": "string",
          "enum": [
            "legacy",
            "uefi"
          ]
        },
        "cluster": {
          "description": "cluster is to identify the cluster (the Prism Element under management\nof the Prism Central), in which the Machine's VM will be created.\nThe cluster identifier (uuid or name) can be obtained from the Prism Central console\nor using the prism_central API.",
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "name": {
              "description": "name is the resource name in the PC",
              "type": "string"
            },
            "type": {
              "description": "Type is the identifier type to use for this resource.",
              "type": "string",
              "enum": [
                "uuid",
                "name"
              ]
            },
            "uuid": {
              "description": "uuid is the UUID of the resource in the PC.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "gpus": {
          "description": "List of GPU devices that should be added to the VMs.",
          "type": "array",
          "items": {
            "description": "NutanixGPUIdentifier holds VM GPU device configuration.",
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "deviceID": {
                "description": "deviceID is the device ID of the GPU device.",
                "type": "integer",
                "format": "int64"
              },
              "name": {
                "description": "vendorID is the vendor ID of the GPU device.",
                "type": "string"
              },
              "type": {
                "description": "type is the type of the GPU device.",
                "type": "string",
                "enum": [
                  "deviceID",
                  "name"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "image": {
          "description": "image is to identify the OS image uploaded to the Prism Central (PC)\nThe image identifier (uuid or name) can be obtained from the Prism Central console\nor using the Prism Central API.\nIt must include the Kubernetes version(s). For example, a template used for\nKubernetes 1.27 could be ubuntu-2204-1.27.",
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "name": {
              "description": "name is the resource name in the PC",
              "type": "string"
            },
            "type": {
              "description": "Type is the identifier type to use for this resource.",
              "type": "string",
              "enum": [
                "uuid",
                "name"
              ]
            },
            "uuid": {
              "description": "uuid is the UUID of the resource in the PC.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "memorySize": {
          "description": "memorySize is the memory size (in Quantity format) of the VM\nThe minimum memorySize is 2Gi bytes",
          "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "type": "string"
            }
          ],
          "x-kubernetes-int-or-string": true
        },
        "osFamily": {
          "type": "string"
        },
        "project": {
          "description": "Project is an optional property that specifies the Prism Central project so that machine resources\ncan be linked to it. The project identifier (uuid or name) can be obtained from the Prism Central console\nor using the Prism Central API.",
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "name": {
              "description": "name is the resource name in the PC",
              "type": "string"
            },
            "type": {
              "description": "Type is the identifier type to use for this resource.",
              "type": "string",
              "enum": [
                "uuid",
                "name"
              ]
            },
            "uuid": {
              "description": "uuid is the UUID of the resource in the PC.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "subnet": {
          "description": "subnet is to identify the cluster's network subnet to use for the Machine's VM\nThe cluster identifier (uuid or name) can be obtained from the Prism Central console\nor using the Prism Central API.",
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "name": {
              "description": "name is the resource name in the PC",
              "type": "string"
            },
            "type": {
              "description": "Type is the identifier type to use for this resource.",
              "type": "string",
              "enum": [
                "uuid",
                "name"
              ]
            },
            "uuid": {
              "description": "uuid is the UUID of the resource in the PC.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "systemDiskSize": {
          "description": "systemDiskSize is size (in Quantity format) of the system disk of the VM\nThe minimum systemDiskSize is 20Gi bytes",
          "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "type": "string"
            }
          ],
          "x-kubernetes-int-or-string": true
        },
        "users": {
          "type": "array",
          "items": {
            "description": "UserConfiguration defines the configuration of the user to be added to the VM.",
            "type": "object",
            "required": [
              "name",
              "sshAuthorizedKeys"
            ],
            "properties": {
              "name": {
                "type": "string"
              },
              "sshAuthorizedKeys": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "vcpuSockets": {
          "description": "vcpuSockets is the number of vCPU sockets of the VM",
          "type": "integer",
          "format": "int32",
          "minimum": 1
        },
        "vcpusPerSocket": {
          "description": "vcpusPerSocket is the number of vCPUs per socket of the VM",
          "type": "integer",
          "format": "int32",
          "minimum": 1
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "NutanixMachineConfigStatus defines the observed state of NutanixMachineConfig.",
      "type": "object",
      "properties": {
        "addresses": {
          "description": "Addresses contains the Nutanix VM associated addresses.\nAddress type is one of Hostname, ExternalIP, InternalIP, ExternalDNS, InternalDNS",
          "type": "array",
          "items": {
            "description": "MachineAddress contains information for the node's address.",
            "type": "object",
            "required": [
              "address",
              "type"
            ],
            "properties": {
              "address": {
                "description": "The machine address.",
                "type": "string"
              },
              "type": {
                "description": "Machine address type, one of Hostname, ExternalIP, InternalIP, ExternalDNS or InternalDNS.",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "conditions": {
          "description": "Conditions defines current service state of the NutanixMachine.",
          "type": "array",
          "items": {
            "description": "Condition defines an observation of a Cluster API resource operational state.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "Last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed. If that is not known, then using the time when\nthe API field changed is acceptable.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "A human readable message indicating details about the transition.\nThis field may be empty.",
                "type": "string"
              },
              "reason": {
                "description": "The reason for the condition's last transition in CamelCase.\nThe specific API may choose whether or not this field is considered a guaranteed API.\nThis field may be empty.",
                "type": "string"
              },
              "severity": {
                "description": "severity provides an explicit classification of Reason code, so the users or machines can immediately\nunderstand the current situation and act accordingly.\nThe Severity field MUST be set only when Status=False.",
                "type": "string"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "type": "string"
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase.\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions\ncan be useful (see .node.status.conditions), the ability to deconflict is important.",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "nodeRef": {
          "description": "NodeRef is a reference to the corresponding workload cluster Node if it exists.",
          "type": "object",
          "properties": {
            "apiVersion": {
              "description": "API version of the referent.",
              "type": "string"
            },
            "fieldPath": {
              "description": "If referring to a piece of an object instead of an entire object, this string\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\nFor example, if the object reference is to a container within a pod, this would take on a value like:\n\"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered\nthe event) or if no container name is specified \"spec.containers[2]\" (container with\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\nreferencing a part of an object.",
              "type": "string"
            },
            "kind": {
              "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type": "string"
            },
            "name": {
              "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
              "type": "string"
            },
            "resourceVersion": {
              "description": "Specific resourceVersion to which this reference is made, if any.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
              "type": "string"
            },
            "uid": {
              "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
              "type": "string"
            }
          },
          "additionalProperties": false,
          "x-kubernetes-map-type": "atomic"
        },
        "ready": {
          "description": "Ready is true when the provider resource is ready.",
          "type": "boolean"
        },
        "vmUUID": {
          "description": "The Nutanix VM's UUID",
          "type": "string"
        }
      },
      "additionalProperties": false
    }
  }
}
