{
  "description": "VSphereMachineConfig is the Schema for the vspheremachineconfigs API.",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "VSphereMachineConfigSpec defines the desired state of VSphereMachineConfig.",
      "type": "object",
      "required": [
        "datastore",
        "folder",
        "memoryMiB",
        "numCPUs",
        "osFamily",
        "resourcePool"
      ],
      "properties": {
        "cloneMode": {
          "description": "CloneMode describes the clone mode to be used when cloning vSphere VMs.",
          "type": "string",
          "enum": [
            "fullClone",
            "linkedClone"
          ]
        },
        "datastore": {
          "type": "string"
        },
        "diskGiB": {
          "type": "integer"
        },
        "folder": {
          "type": "string"
        },
        "hostOSConfiguration": {
          "description": "HostOSConfiguration defines the configuration settings on the host OS.",
          "type": "object",
          "properties": {
            "bottlerocketConfiguration": {
              "description": "BottlerocketConfiguration defines the Bottlerocket configuration on the host OS.\nThese settings only take effect when the `osFamily` is bottlerocket.",
              "type": "object",
              "properties": {
                "boot": {
                  "description": "Boot defines the boot settings for bottlerocket.",
                  "type": "object",
                  "properties": {
                    "bootKernelParameters": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "additionalProperties": false
                },
                "kernel": {
                  "description": "Kernel defines the kernel settings for bottlerocket.",
                  "type": "object",
                  "properties": {
                    "sysctlSettings": {
                      "description": "SysctlSettings defines the kernel sysctl settings to set for bottlerocket nodes.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    }
                  },
                  "additionalProperties": false
                },
                "kubernetes": {
                  "description": "Kubernetes defines the Kubernetes settings on the host OS.",
                  "type": "object",
                  "properties": {
                    "allowedUnsafeSysctls": {
                      "description": "AllowedUnsafeSysctls defines the list of unsafe sysctls that can be set on a node.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "clusterDNSIPs": {
                      "description": "ClusterDNSIPs defines IP addresses of the DNS servers.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "clusterDomain": {
                      "description": "ClusterDomain defines the DNS domain for the cluster, allowing all Kubernetes-run containers\nto search this domain before the hostâ€™s search domains",
                      "type": "string"
                    },
                    "containerLogMaxFiles": {
                      "description": "ContainerLogMaxFiles specifies the maximum number of container log\nfiles that can be present for a container",
                      "type": "integer"
                    },
                    "containerLogMaxSize": {
                      "description": "ContainerLogMaxSize is a quantity defining the maximum size of\nthe container log file before it is rotated",
                      "type": "string"
                    },
                    "cpuCFSQuota": {
                      "description": "CPUCFSQuota enables CPU CFS quota enforcement for containers that specify CPU limits",
                      "type": "boolean"
                    },
                    "cpuManagerPolicy": {
                      "description": "CPUManagerPolicy is the name of the policy to use.",
                      "type": "string"
                    },
                    "cpuManagerPolicyOptions": {
                      "description": "CPUManagerPolicyOptions is a set of key=value which allows to set extra options to\nfine tune the behaviour of the cpu manager policies",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "cpuManagerReconcilePeriod": {
                      "description": "CPUManagerReconcilePeriod is the reconciliation period for the CPU Manager.",
                      "type": "string"
                    },
                    "eventBurst": {
                      "description": "EventBurst is the maximum size of a burst of event creations.",
                      "type": "integer"
                    },
                    "eventRecordQPS": {
                      "description": "EventRecordQPS is the maximum event creations per second.",
                      "type": "integer"
                    },
                    "evictionHard": {
                      "description": "EvictionHard is a map of signal names to quantities that defines hard eviction thresholds.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "evictionMaxPodGracePeriod": {
                      "description": "EvictionMaxPodGracePeriod is the maximum allowed grace period (in seconds) to use\nwhen terminating pods in response to a soft eviction threshold being met.",
                      "type": "integer"
                    },
                    "evictionSoft": {
                      "description": "EvictionSoft is a map of signal names to quantities that defines soft eviction thresholds.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "evictionSoftGracePeriod": {
                      "description": "EvictionSoftGracePeriod is a map of signal names to quantities that defines grace periods\nfor each soft eviction signal.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "imageGCHighThresholdPercent": {
                      "description": "ImageGCHighThresholdPercent is the percent of disk usage after which image garbage\ncollection is always run.",
                      "type": "integer"
                    },
                    "imageGCLowThresholdPercent": {
                      "description": "ImageGCLowThresholdPercent is the percent of disk usage before which image garbage collection is never run.",
                      "type": "integer"
                    },
                    "kubeAPIBurst": {
                      "description": "KubeAPIBurst  is the burst to allow while talking with kubernetes API server.",
                      "type": "integer"
                    },
                    "kubeAPIQPS": {
                      "description": "KubeAPIQPS is the QPS to use while talking with kubernetes apiserver.",
                      "type": "integer"
                    },
                    "kubeReserved": {
                      "description": "KubeReserved is a set of ResourceName=ResourceQuantity pairs that describe resources\nreserved for kubernetes system components",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "maxPods": {
                      "description": "MaxPods defines the maximum number of pods that can run on a node.",
                      "type": "integer"
                    },
                    "memoryManagerPolicy": {
                      "description": "MemoryManagerPolicy is the name of the policy to use by memory manager.",
                      "type": "string"
                    },
                    "podPidsLimit": {
                      "description": "PodPidsLimit is the maximum number of PIDs in any pod.",
                      "type": "integer",
                      "format": "int64"
                    },
                    "providerID": {
                      "description": "ProviderID sets the unique ID of the instance that an external provider.",
                      "type": "string"
                    },
                    "registryBurst": {
                      "description": "RegistryBurst is the maximum size of bursty pulls.",
                      "type": "integer"
                    },
                    "registryPullQPS": {
                      "description": "RegistryPullQPS is the limit of registry pulls per second.",
                      "type": "integer"
                    },
                    "shutdownGracePeriod": {
                      "description": "ShutdownGracePeriod specifies the total duration that the node should delay\nthe shutdown and total grace period for pod termination during a node shutdown.",
                      "type": "string"
                    },
                    "shutdownGracePeriodCriticalPods": {
                      "description": "ShutdownGracePeriodCriticalPods specifies the duration used to terminate\ncritical pods during a node shutdown.",
                      "type": "string"
                    },
                    "systemReserved": {
                      "description": "SystemReserved is a set of ResourceName=ResourceQuantity pairs that describe\nresources reserved for non-kubernetes components.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "topologyManagerPolicy": {
                      "description": "TopologyManagerPolicy is the name of the topology manager policy to use.",
                      "type": "string"
                    },
                    "topologyManagerScope": {
                      "description": "TopologyManagerScope represents the scope of topology hint generation\nthat topology manager requests and hint providers generate.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "certBundles": {
              "type": "array",
              "items": {
                "description": "Cert defines additional trusted cert bundles on the host OS.",
                "type": "object",
                "required": [
                  "data",
                  "name"
                ],
                "properties": {
                  "data": {
                    "description": "Data defines the cert bundle data.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name defines the cert bundle name.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "ntpConfiguration": {
              "description": "NTPConfiguration defines the NTP configuration on the host OS.",
              "type": "object",
              "required": [
                "servers"
              ],
              "properties": {
                "servers": {
                  "description": "Servers defines a list of NTP servers to be configured on the host OS.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "memoryMiB": {
          "type": "integer"
        },
        "numCPUs": {
          "type": "integer"
        },
        "osFamily": {
          "type": "string"
        },
        "resourcePool": {
          "type": "string"
        },
        "storagePolicyName": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "template": {
          "description": "Template field is the template to use for provisioning the VM. It must include the Kubernetes\nversion(s). For example, a template used for Kubernetes 1.27 could be ubuntu-2204-1.27.",
          "type": "string"
        },
        "users": {
          "type": "array",
          "items": {
            "description": "UserConfiguration defines the configuration of the user to be added to the VM.",
            "type": "object",
            "required": [
              "name",
              "sshAuthorizedKeys"
            ],
            "properties": {
              "name": {
                "type": "string"
              },
              "sshAuthorizedKeys": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false
          }
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "VSphereMachineConfigStatus defines the observed state of VSphereMachineConfig.",
      "type": "object"
    }
  }
}
