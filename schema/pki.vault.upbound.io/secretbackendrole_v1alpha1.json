{
  "description": "SecretBackendRole is the Schema for the SecretBackendRoles API. Create a role on an PKI Secret Backend for Vault.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "SecretBackendRoleSpec defines the desired state of SecretBackendRole",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "deletionPolicy": {
          "description": "DeletionPolicy specifies what will happen to the underlying external\nwhen this managed resource is deleted - either \"Delete\" or \"Orphan\" the\nexternal resource.\nThis field is planned to be deprecated in favor of the ManagementPolicies\nfield in a future release. Currently, both could be set independently and\nnon-default values would be honored if the feature flag is enabled.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "type": "string",
          "default": "Delete",
          "enum": [
            "Orphan",
            "Delete"
          ]
        },
        "forProvider": {
          "type": "object",
          "properties": {
            "allowAnyName": {
              "description": "Flag to allow any name\nFlag to allow any name",
              "type": "boolean"
            },
            "allowBareDomains": {
              "description": "Flag to allow certificates matching the actual domain\nFlag to allow certificates matching the actual domain.",
              "type": "boolean"
            },
            "allowGlobDomains": {
              "description": "Flag to allow names containing glob patterns.\nFlag to allow names containing glob patterns.",
              "type": "boolean"
            },
            "allowIpSans": {
              "description": "Flag to allow IP SANs\nFlag to allow IP SANs",
              "type": "boolean"
            },
            "allowLocalhost": {
              "description": "Flag to allow certificates for localhost\nFlag to allow certificates for localhost.",
              "type": "boolean"
            },
            "allowSubdomains": {
              "description": "Flag to allow certificates matching subdomains\nFlag to allow certificates matching subdomains.",
              "type": "boolean"
            },
            "allowWildcardCertificates": {
              "description": "Flag to allow wildcard certificates.\nFlag to allow wildcard certificates",
              "type": "boolean"
            },
            "allowedDomains": {
              "description": "List of allowed domains for certificates\nThe domains of the role.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "allowedDomainsTemplate": {
              "description": "Flag, if set, allowed_domains can be specified using identity template expressions such as {{identity.entity.aliases.\u003cmount accessor\u003e.name}}.\nFlag to indicate that `allowed_domains` specifies a template expression (e.g. {{identity.entity.aliases.\u003cmount accessor\u003e.name}})",
              "type": "boolean"
            },
            "allowedOtherSans": {
              "description": "Defines allowed custom SANs\nDefines allowed custom SANs",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "allowedSerialNumbers": {
              "description": "An array of allowed serial numbers to put in Subject\nDefines allowed Subject serial numbers.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "allowedUriSans": {
              "description": "Defines allowed URI SANs\nDefines allowed URI SANs",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "allowedUriSansTemplate": {
              "description": "Flag, if set, allowed_uri_sans can be specified using identity template expressions such as {{identity.entity.aliases.\u003cmount accessor\u003e.name}}.\nFlag to indicate that `allowed_uri_sans` specifies a template expression (e.g. {{identity.entity.aliases.\u003cmount accessor\u003e.name}})",
              "type": "boolean"
            },
            "allowedUserIds": {
              "description": "Defines allowed User IDs\nThe allowed User ID's.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "backend": {
              "description": "The path the PKI secret backend is mounted at, with no leading or trailing /s.\nThe path of the PKI secret backend the resource belongs to.",
              "type": "string"
            },
            "backendRef": {
              "description": "Reference to a Mount in vault to populate backend.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "backendSelector": {
              "description": "Selector for a Mount in vault to populate backend.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "basicConstraintsValidForNonCa": {
              "description": "Flag to mark basic constraints valid when issuing non-CA certificates\nFlag to mark basic constraints valid when issuing non-CA certificates.",
              "type": "boolean"
            },
            "clientFlag": {
              "description": "Flag to specify certificates for client use\nFlag to specify certificates for client use.",
              "type": "boolean"
            },
            "cnValidations": {
              "description": "Validations to run on the Common Name field of the certificate, choices: email, hostname, disabled\nSpecify validations to run on the Common Name field of the certificate.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "codeSigningFlag": {
              "description": "Flag to specify certificates for code signing use\nFlag to specify certificates for code signing use.",
              "type": "boolean"
            },
            "country": {
              "description": "The country of generated certificates\nThe country of generated certificates.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "emailProtectionFlag": {
              "description": "Flag to specify certificates for email protection use\nFlag to specify certificates for email protection use.",
              "type": "boolean"
            },
            "enforceHostnames": {
              "description": "Flag to allow only valid host names\nFlag to allow only valid host names",
              "type": "boolean"
            },
            "extKeyUsage": {
              "description": "Specify the allowed extended key usage constraint on issued certificates\nSpecify the allowed extended key usage constraint on issued certificates.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "extKeyUsageOids": {
              "description": "Specify the allowed extended key usage OIDs constraint on issued certificates\nA list of extended key usage OIDs.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "generateLease": {
              "description": "Flag to generate leases with certificates\nFlag to generate leases with certificates.",
              "type": "boolean"
            },
            "issuerRef": {
              "description": "Specifies the default issuer of this request. May\nbe the value default, a name, or an issuer ID. Use ACLs to prevent access to\nthe /pki/issuer/:issuer_ref/{issue,sign}/:name paths to prevent users\noverriding the role's issuer_ref value.\nSpecifies the default issuer of this request.",
              "type": "string"
            },
            "keyBits": {
              "description": "The number of bits of generated keys\nThe number of bits of generated keys.",
              "type": "number"
            },
            "keyType": {
              "description": "The generated key type, choices: rsa, ec, ed25519, any\nDefaults to rsa\nThe generated key type.",
              "type": "string"
            },
            "keyUsage": {
              "description": "Specify the allowed key usage constraint on issued\ncertificates. Defaults to [\"DigitalSignature\", \"KeyAgreement\", \"KeyEncipherment\"]).\nTo specify no default key usage constraints, set this to an empty list [].\nSpecify the allowed key usage constraint on issued certificates.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "locality": {
              "description": "The locality of generated certificates\nThe locality of generated certificates.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "maxTtl": {
              "description": "The maximum lease TTL, in seconds, for the role.\nThe maximum TTL.",
              "type": "string"
            },
            "name": {
              "description": "The name to identify this role within the backend. Must be unique within the backend.\nUnique name for the role.",
              "type": "string"
            },
            "namespace": {
              "description": "The namespace to provision the resource in.\nThe value should not contain leading or trailing forward slashes.\nThe namespace is always relative to the provider's configured namespace.\nAvailable only for Vault Enterprise.\nTarget namespace. (requires Enterprise)",
              "type": "string"
            },
            "noStore": {
              "description": "Flag to not store certificates in the storage backend\nFlag to not store certificates in the storage backend.",
              "type": "boolean"
            },
            "noStoreMetadata": {
              "description": "Allows metadata to be stored keyed on the certificate's serial number. The field is independent of no_store, allowing metadata storage regardless of whether certificates are stored. If true, metadata is not stored and an error is returned if the metadata field is specified on issuance APIs\nAllows metadata to be stored keyed on the certificate's serial number. The field is independent of no_store, allowing metadata storage regardless of whether certificates are stored. If true, metadata is not stored and an error is returned if the metadata field is specified on issuance APIs",
              "type": "boolean"
            },
            "notAfter": {
              "description": "Set the Not After field of the certificate with specified date value. The value format should be given in UTC format YYYY-MM-ddTHH:MM:SSZ. Supports the Y10K end date for IEEE 802.1AR-2018 standard devices, 9999-12-31T23:59:59Z.\nSet the Not After field of the certificate with specified date value. The value format should be given in UTC format YYYY-MM-ddTHH:MM:SSZ. Supports the Y10K end date for IEEE 802.1AR-2018 standard devices, 9999-12-31T23:59:59Z.",
              "type": "string"
            },
            "notBeforeDuration": {
              "description": "Specifies the duration by which to backdate the NotBefore property.\nSpecifies the duration by which to backdate the NotBefore property.",
              "type": "string"
            },
            "organization": {
              "description": "The organization of generated certificates\nThe organization of generated certificates.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "ou": {
              "description": "The organization unit of generated certificates\nThe organization unit of generated certificates.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "policyIdentifier": {
              "description": "(Vault 1.11+ only) A block for specifying policy identifers. The policy_identifier block can be repeated, and supports the following arguments:\nPolicy identifier block; can only be used with Vault 1.11+",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "cps": {
                    "description": "The URL of the CPS for the policy identifier\nOptional CPS URL",
                    "type": "string"
                  },
                  "notice": {
                    "description": "A notice for the policy identifier\nOptional notice",
                    "type": "string"
                  },
                  "oid": {
                    "description": "The OID for the policy identifier\nOID",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "policyIdentifiers": {
              "description": "Specify the list of allowed policies OIDs. Use with Vault 1.10 or before. For Vault 1.11+, use policy_identifier blocks instead\nSpecify the list of allowed policies OIDs.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "postalCode": {
              "description": "The postal code of generated certificates\nThe postal code of generated certificates.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "province": {
              "description": "The province of generated certificates\nThe province of generated certificates.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "requireCn": {
              "description": "Flag to force CN usage\nFlag to force CN usage.",
              "type": "boolean"
            },
            "serialNumberSource": {
              "description": "Specifies the source of the subject serial number. Valid values are json-csr (default) or json. When set to json-csr, the subject serial number is taken from the serial_number parameter and falls back to the serial number in the CSR. When set to json, the subject serial number is taken from the serial_number parameter but will ignore any value in the CSR. For backwards compatibility an empty value for this field will default to the json-csr behavior.\nSpecifies the source of the subject serial number. Valid values are json-csr (default) or json. When set to json-csr, the subject serial number is taken from the serial_number parameter and falls back to the serial number in the CSR. When set to json, the subject serial number is taken from the serial_number parameter but will ignore any value in the CSR. For backwards compatibility an empty value for this field will default to the json-csr behavior.",
              "type": "string"
            },
            "serverFlag": {
              "description": "Flag to specify certificates for server use\nFlag to specify certificates for server use.",
              "type": "boolean"
            },
            "signatureBits": {
              "description": "The number of bits to use in the signature algorithm\nThe number of bits to use in the signature algorithm.",
              "type": "number"
            },
            "streetAddress": {
              "description": "The street address of generated certificates\nThe street address of generated certificates.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "ttl": {
              "description": "The TTL, in seconds, for any certificate issued against this role.\nThe TTL.",
              "type": "string"
            },
            "useCsrCommonName": {
              "description": "Flag to use the CN in the CSR\nFlag to use the CN in the CSR.",
              "type": "boolean"
            },
            "useCsrSans": {
              "description": "Flag to use the SANs in the CSR\nFlag to use the SANs in the CSR.",
              "type": "boolean"
            },
            "usePss": {
              "description": "Specifies whether or not to use PSS signatures over PKCS#1v1.5 signatures when a RSA-type issuer is used. Ignored for ECDSA/Ed25519 issuers.\nSpecifies whether or not to use PSS signatures over PKCS#1v1.5 signatures when a RSA-type issuer is used. Ignored for ECDSA/Ed25519 issuers.",
              "type": "boolean"
            }
          },
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored\nunless the Management Policies feature flag is disabled.\nInitProvider holds the same fields as ForProvider, with the exception\nof Identifier and other resource reference fields. The fields that are\nin InitProvider are merged into ForProvider when the resource is created.\nThe same fields are also added to the terraform ignore_changes hook, to\navoid updating them after creation. This is useful for fields that are\nrequired on creation, but we do not desire to update them after creation,\nfor example because of an external controller is managing them, like an\nautoscaler.",
          "type": "object",
          "properties": {
            "allowAnyName": {
              "description": "Flag to allow any name\nFlag to allow any name",
              "type": "boolean"
            },
            "allowBareDomains": {
              "description": "Flag to allow certificates matching the actual domain\nFlag to allow certificates matching the actual domain.",
              "type": "boolean"
            },
            "allowGlobDomains": {
              "description": "Flag to allow names containing glob patterns.\nFlag to allow names containing glob patterns.",
              "type": "boolean"
            },
            "allowIpSans": {
              "description": "Flag to allow IP SANs\nFlag to allow IP SANs",
              "type": "boolean"
            },
            "allowLocalhost": {
              "description": "Flag to allow certificates for localhost\nFlag to allow certificates for localhost.",
              "type": "boolean"
            },
            "allowSubdomains": {
              "description": "Flag to allow certificates matching subdomains\nFlag to allow certificates matching subdomains.",
              "type": "boolean"
            },
            "allowWildcardCertificates": {
              "description": "Flag to allow wildcard certificates.\nFlag to allow wildcard certificates",
              "type": "boolean"
            },
            "allowedDomains": {
              "description": "List of allowed domains for certificates\nThe domains of the role.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "allowedDomainsTemplate": {
              "description": "Flag, if set, allowed_domains can be specified using identity template expressions such as {{identity.entity.aliases.\u003cmount accessor\u003e.name}}.\nFlag to indicate that `allowed_domains` specifies a template expression (e.g. {{identity.entity.aliases.\u003cmount accessor\u003e.name}})",
              "type": "boolean"
            },
            "allowedOtherSans": {
              "description": "Defines allowed custom SANs\nDefines allowed custom SANs",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "allowedSerialNumbers": {
              "description": "An array of allowed serial numbers to put in Subject\nDefines allowed Subject serial numbers.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "allowedUriSans": {
              "description": "Defines allowed URI SANs\nDefines allowed URI SANs",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "allowedUriSansTemplate": {
              "description": "Flag, if set, allowed_uri_sans can be specified using identity template expressions such as {{identity.entity.aliases.\u003cmount accessor\u003e.name}}.\nFlag to indicate that `allowed_uri_sans` specifies a template expression (e.g. {{identity.entity.aliases.\u003cmount accessor\u003e.name}})",
              "type": "boolean"
            },
            "allowedUserIds": {
              "description": "Defines allowed User IDs\nThe allowed User ID's.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "backend": {
              "description": "The path the PKI secret backend is mounted at, with no leading or trailing /s.\nThe path of the PKI secret backend the resource belongs to.",
              "type": "string"
            },
            "backendRef": {
              "description": "Reference to a Mount in vault to populate backend.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "backendSelector": {
              "description": "Selector for a Mount in vault to populate backend.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "basicConstraintsValidForNonCa": {
              "description": "Flag to mark basic constraints valid when issuing non-CA certificates\nFlag to mark basic constraints valid when issuing non-CA certificates.",
              "type": "boolean"
            },
            "clientFlag": {
              "description": "Flag to specify certificates for client use\nFlag to specify certificates for client use.",
              "type": "boolean"
            },
            "cnValidations": {
              "description": "Validations to run on the Common Name field of the certificate, choices: email, hostname, disabled\nSpecify validations to run on the Common Name field of the certificate.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "codeSigningFlag": {
              "description": "Flag to specify certificates for code signing use\nFlag to specify certificates for code signing use.",
              "type": "boolean"
            },
            "country": {
              "description": "The country of generated certificates\nThe country of generated certificates.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "emailProtectionFlag": {
              "description": "Flag to specify certificates for email protection use\nFlag to specify certificates for email protection use.",
              "type": "boolean"
            },
            "enforceHostnames": {
              "description": "Flag to allow only valid host names\nFlag to allow only valid host names",
              "type": "boolean"
            },
            "extKeyUsage": {
              "description": "Specify the allowed extended key usage constraint on issued certificates\nSpecify the allowed extended key usage constraint on issued certificates.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "extKeyUsageOids": {
              "description": "Specify the allowed extended key usage OIDs constraint on issued certificates\nA list of extended key usage OIDs.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "generateLease": {
              "description": "Flag to generate leases with certificates\nFlag to generate leases with certificates.",
              "type": "boolean"
            },
            "issuerRef": {
              "description": "Specifies the default issuer of this request. May\nbe the value default, a name, or an issuer ID. Use ACLs to prevent access to\nthe /pki/issuer/:issuer_ref/{issue,sign}/:name paths to prevent users\noverriding the role's issuer_ref value.\nSpecifies the default issuer of this request.",
              "type": "string"
            },
            "keyBits": {
              "description": "The number of bits of generated keys\nThe number of bits of generated keys.",
              "type": "number"
            },
            "keyType": {
              "description": "The generated key type, choices: rsa, ec, ed25519, any\nDefaults to rsa\nThe generated key type.",
              "type": "string"
            },
            "keyUsage": {
              "description": "Specify the allowed key usage constraint on issued\ncertificates. Defaults to [\"DigitalSignature\", \"KeyAgreement\", \"KeyEncipherment\"]).\nTo specify no default key usage constraints, set this to an empty list [].\nSpecify the allowed key usage constraint on issued certificates.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "locality": {
              "description": "The locality of generated certificates\nThe locality of generated certificates.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "maxTtl": {
              "description": "The maximum lease TTL, in seconds, for the role.\nThe maximum TTL.",
              "type": "string"
            },
            "name": {
              "description": "The name to identify this role within the backend. Must be unique within the backend.\nUnique name for the role.",
              "type": "string"
            },
            "namespace": {
              "description": "The namespace to provision the resource in.\nThe value should not contain leading or trailing forward slashes.\nThe namespace is always relative to the provider's configured namespace.\nAvailable only for Vault Enterprise.\nTarget namespace. (requires Enterprise)",
              "type": "string"
            },
            "noStore": {
              "description": "Flag to not store certificates in the storage backend\nFlag to not store certificates in the storage backend.",
              "type": "boolean"
            },
            "noStoreMetadata": {
              "description": "Allows metadata to be stored keyed on the certificate's serial number. The field is independent of no_store, allowing metadata storage regardless of whether certificates are stored. If true, metadata is not stored and an error is returned if the metadata field is specified on issuance APIs\nAllows metadata to be stored keyed on the certificate's serial number. The field is independent of no_store, allowing metadata storage regardless of whether certificates are stored. If true, metadata is not stored and an error is returned if the metadata field is specified on issuance APIs",
              "type": "boolean"
            },
            "notAfter": {
              "description": "Set the Not After field of the certificate with specified date value. The value format should be given in UTC format YYYY-MM-ddTHH:MM:SSZ. Supports the Y10K end date for IEEE 802.1AR-2018 standard devices, 9999-12-31T23:59:59Z.\nSet the Not After field of the certificate with specified date value. The value format should be given in UTC format YYYY-MM-ddTHH:MM:SSZ. Supports the Y10K end date for IEEE 802.1AR-2018 standard devices, 9999-12-31T23:59:59Z.",
              "type": "string"
            },
            "notBeforeDuration": {
              "description": "Specifies the duration by which to backdate the NotBefore property.\nSpecifies the duration by which to backdate the NotBefore property.",
              "type": "string"
            },
            "organization": {
              "description": "The organization of generated certificates\nThe organization of generated certificates.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "ou": {
              "description": "The organization unit of generated certificates\nThe organization unit of generated certificates.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "policyIdentifier": {
              "description": "(Vault 1.11+ only) A block for specifying policy identifers. The policy_identifier block can be repeated, and supports the following arguments:\nPolicy identifier block; can only be used with Vault 1.11+",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "cps": {
                    "description": "The URL of the CPS for the policy identifier\nOptional CPS URL",
                    "type": "string"
                  },
                  "notice": {
                    "description": "A notice for the policy identifier\nOptional notice",
                    "type": "string"
                  },
                  "oid": {
                    "description": "The OID for the policy identifier\nOID",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "policyIdentifiers": {
              "description": "Specify the list of allowed policies OIDs. Use with Vault 1.10 or before. For Vault 1.11+, use policy_identifier blocks instead\nSpecify the list of allowed policies OIDs.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "postalCode": {
              "description": "The postal code of generated certificates\nThe postal code of generated certificates.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "province": {
              "description": "The province of generated certificates\nThe province of generated certificates.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "requireCn": {
              "description": "Flag to force CN usage\nFlag to force CN usage.",
              "type": "boolean"
            },
            "serialNumberSource": {
              "description": "Specifies the source of the subject serial number. Valid values are json-csr (default) or json. When set to json-csr, the subject serial number is taken from the serial_number parameter and falls back to the serial number in the CSR. When set to json, the subject serial number is taken from the serial_number parameter but will ignore any value in the CSR. For backwards compatibility an empty value for this field will default to the json-csr behavior.\nSpecifies the source of the subject serial number. Valid values are json-csr (default) or json. When set to json-csr, the subject serial number is taken from the serial_number parameter and falls back to the serial number in the CSR. When set to json, the subject serial number is taken from the serial_number parameter but will ignore any value in the CSR. For backwards compatibility an empty value for this field will default to the json-csr behavior.",
              "type": "string"
            },
            "serverFlag": {
              "description": "Flag to specify certificates for server use\nFlag to specify certificates for server use.",
              "type": "boolean"
            },
            "signatureBits": {
              "description": "The number of bits to use in the signature algorithm\nThe number of bits to use in the signature algorithm.",
              "type": "number"
            },
            "streetAddress": {
              "description": "The street address of generated certificates\nThe street address of generated certificates.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "ttl": {
              "description": "The TTL, in seconds, for any certificate issued against this role.\nThe TTL.",
              "type": "string"
            },
            "useCsrCommonName": {
              "description": "Flag to use the CN in the CSR\nFlag to use the CN in the CSR.",
              "type": "boolean"
            },
            "useCsrSans": {
              "description": "Flag to use the SANs in the CSR\nFlag to use the SANs in the CSR.",
              "type": "boolean"
            },
            "usePss": {
              "description": "Specifies whether or not to use PSS signatures over PKCS#1v1.5 signatures when a RSA-type issuer is used. Ignored for ECDSA/Ed25519 issuers.\nSpecifies whether or not to use PSS signatures over PKCS#1v1.5 signatures when a RSA-type issuer is used. Ignored for ECDSA/Ed25519 issuers.",
              "type": "boolean"
            }
          },
          "additionalProperties": false
        },
        "managementPolicies": {
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out\nthrough a Crossplane feature flag.\nManagementPolicies specify the array of actions Crossplane is allowed to\ntake on the managed and external resources.\nThis field is planned to replace the DeletionPolicy field in a future\nrelease. Currently, both could be set independently and non-default\nvalues would be honored if the feature flag is enabled. If both are\ncustom, the DeletionPolicy field will be ignored.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223\nand this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers\ncan take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to\ncreate, observe, update, and delete this managed resource should be\nconfigured.",
          "type": "object",
          "default": {
            "name": "default"
          },
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "type": "object",
              "properties": {
                "resolution": {
                  "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                  "type": "string",
                  "default": "Required",
                  "enum": [
                    "Required",
                    "Optional"
                  ]
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                  "type": "string",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a\nSecret to which any connection details for this managed resource should\nbe written. Connection details frequently include the endpoint, username,\nand password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name",
            "namespace"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false,
      "x-kubernetes-validations": [
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.name))",
          "message": "spec.forProvider.name is a required parameter"
        }
      ]
    },
    "status": {
      "description": "SecretBackendRoleStatus defines the observed state of SecretBackendRole.",
      "type": "object",
      "properties": {
        "atProvider": {
          "type": "object",
          "properties": {
            "allowAnyName": {
              "description": "Flag to allow any name\nFlag to allow any name",
              "type": "boolean"
            },
            "allowBareDomains": {
              "description": "Flag to allow certificates matching the actual domain\nFlag to allow certificates matching the actual domain.",
              "type": "boolean"
            },
            "allowGlobDomains": {
              "description": "Flag to allow names containing glob patterns.\nFlag to allow names containing glob patterns.",
              "type": "boolean"
            },
            "allowIpSans": {
              "description": "Flag to allow IP SANs\nFlag to allow IP SANs",
              "type": "boolean"
            },
            "allowLocalhost": {
              "description": "Flag to allow certificates for localhost\nFlag to allow certificates for localhost.",
              "type": "boolean"
            },
            "allowSubdomains": {
              "description": "Flag to allow certificates matching subdomains\nFlag to allow certificates matching subdomains.",
              "type": "boolean"
            },
            "allowWildcardCertificates": {
              "description": "Flag to allow wildcard certificates.\nFlag to allow wildcard certificates",
              "type": "boolean"
            },
            "allowedDomains": {
              "description": "List of allowed domains for certificates\nThe domains of the role.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "allowedDomainsTemplate": {
              "description": "Flag, if set, allowed_domains can be specified using identity template expressions such as {{identity.entity.aliases.\u003cmount accessor\u003e.name}}.\nFlag to indicate that `allowed_domains` specifies a template expression (e.g. {{identity.entity.aliases.\u003cmount accessor\u003e.name}})",
              "type": "boolean"
            },
            "allowedOtherSans": {
              "description": "Defines allowed custom SANs\nDefines allowed custom SANs",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "allowedSerialNumbers": {
              "description": "An array of allowed serial numbers to put in Subject\nDefines allowed Subject serial numbers.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "allowedUriSans": {
              "description": "Defines allowed URI SANs\nDefines allowed URI SANs",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "allowedUriSansTemplate": {
              "description": "Flag, if set, allowed_uri_sans can be specified using identity template expressions such as {{identity.entity.aliases.\u003cmount accessor\u003e.name}}.\nFlag to indicate that `allowed_uri_sans` specifies a template expression (e.g. {{identity.entity.aliases.\u003cmount accessor\u003e.name}})",
              "type": "boolean"
            },
            "allowedUserIds": {
              "description": "Defines allowed User IDs\nThe allowed User ID's.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "backend": {
              "description": "The path the PKI secret backend is mounted at, with no leading or trailing /s.\nThe path of the PKI secret backend the resource belongs to.",
              "type": "string"
            },
            "basicConstraintsValidForNonCa": {
              "description": "Flag to mark basic constraints valid when issuing non-CA certificates\nFlag to mark basic constraints valid when issuing non-CA certificates.",
              "type": "boolean"
            },
            "clientFlag": {
              "description": "Flag to specify certificates for client use\nFlag to specify certificates for client use.",
              "type": "boolean"
            },
            "cnValidations": {
              "description": "Validations to run on the Common Name field of the certificate, choices: email, hostname, disabled\nSpecify validations to run on the Common Name field of the certificate.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "codeSigningFlag": {
              "description": "Flag to specify certificates for code signing use\nFlag to specify certificates for code signing use.",
              "type": "boolean"
            },
            "country": {
              "description": "The country of generated certificates\nThe country of generated certificates.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "emailProtectionFlag": {
              "description": "Flag to specify certificates for email protection use\nFlag to specify certificates for email protection use.",
              "type": "boolean"
            },
            "enforceHostnames": {
              "description": "Flag to allow only valid host names\nFlag to allow only valid host names",
              "type": "boolean"
            },
            "extKeyUsage": {
              "description": "Specify the allowed extended key usage constraint on issued certificates\nSpecify the allowed extended key usage constraint on issued certificates.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "extKeyUsageOids": {
              "description": "Specify the allowed extended key usage OIDs constraint on issued certificates\nA list of extended key usage OIDs.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "generateLease": {
              "description": "Flag to generate leases with certificates\nFlag to generate leases with certificates.",
              "type": "boolean"
            },
            "id": {
              "type": "string"
            },
            "issuerRef": {
              "description": "Specifies the default issuer of this request. May\nbe the value default, a name, or an issuer ID. Use ACLs to prevent access to\nthe /pki/issuer/:issuer_ref/{issue,sign}/:name paths to prevent users\noverriding the role's issuer_ref value.\nSpecifies the default issuer of this request.",
              "type": "string"
            },
            "keyBits": {
              "description": "The number of bits of generated keys\nThe number of bits of generated keys.",
              "type": "number"
            },
            "keyType": {
              "description": "The generated key type, choices: rsa, ec, ed25519, any\nDefaults to rsa\nThe generated key type.",
              "type": "string"
            },
            "keyUsage": {
              "description": "Specify the allowed key usage constraint on issued\ncertificates. Defaults to [\"DigitalSignature\", \"KeyAgreement\", \"KeyEncipherment\"]).\nTo specify no default key usage constraints, set this to an empty list [].\nSpecify the allowed key usage constraint on issued certificates.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "locality": {
              "description": "The locality of generated certificates\nThe locality of generated certificates.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "maxTtl": {
              "description": "The maximum lease TTL, in seconds, for the role.\nThe maximum TTL.",
              "type": "string"
            },
            "name": {
              "description": "The name to identify this role within the backend. Must be unique within the backend.\nUnique name for the role.",
              "type": "string"
            },
            "namespace": {
              "description": "The namespace to provision the resource in.\nThe value should not contain leading or trailing forward slashes.\nThe namespace is always relative to the provider's configured namespace.\nAvailable only for Vault Enterprise.\nTarget namespace. (requires Enterprise)",
              "type": "string"
            },
            "noStore": {
              "description": "Flag to not store certificates in the storage backend\nFlag to not store certificates in the storage backend.",
              "type": "boolean"
            },
            "noStoreMetadata": {
              "description": "Allows metadata to be stored keyed on the certificate's serial number. The field is independent of no_store, allowing metadata storage regardless of whether certificates are stored. If true, metadata is not stored and an error is returned if the metadata field is specified on issuance APIs\nAllows metadata to be stored keyed on the certificate's serial number. The field is independent of no_store, allowing metadata storage regardless of whether certificates are stored. If true, metadata is not stored and an error is returned if the metadata field is specified on issuance APIs",
              "type": "boolean"
            },
            "notAfter": {
              "description": "Set the Not After field of the certificate with specified date value. The value format should be given in UTC format YYYY-MM-ddTHH:MM:SSZ. Supports the Y10K end date for IEEE 802.1AR-2018 standard devices, 9999-12-31T23:59:59Z.\nSet the Not After field of the certificate with specified date value. The value format should be given in UTC format YYYY-MM-ddTHH:MM:SSZ. Supports the Y10K end date for IEEE 802.1AR-2018 standard devices, 9999-12-31T23:59:59Z.",
              "type": "string"
            },
            "notBeforeDuration": {
              "description": "Specifies the duration by which to backdate the NotBefore property.\nSpecifies the duration by which to backdate the NotBefore property.",
              "type": "string"
            },
            "organization": {
              "description": "The organization of generated certificates\nThe organization of generated certificates.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "ou": {
              "description": "The organization unit of generated certificates\nThe organization unit of generated certificates.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "policyIdentifier": {
              "description": "(Vault 1.11+ only) A block for specifying policy identifers. The policy_identifier block can be repeated, and supports the following arguments:\nPolicy identifier block; can only be used with Vault 1.11+",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "cps": {
                    "description": "The URL of the CPS for the policy identifier\nOptional CPS URL",
                    "type": "string"
                  },
                  "notice": {
                    "description": "A notice for the policy identifier\nOptional notice",
                    "type": "string"
                  },
                  "oid": {
                    "description": "The OID for the policy identifier\nOID",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "policyIdentifiers": {
              "description": "Specify the list of allowed policies OIDs. Use with Vault 1.10 or before. For Vault 1.11+, use policy_identifier blocks instead\nSpecify the list of allowed policies OIDs.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "postalCode": {
              "description": "The postal code of generated certificates\nThe postal code of generated certificates.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "province": {
              "description": "The province of generated certificates\nThe province of generated certificates.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "requireCn": {
              "description": "Flag to force CN usage\nFlag to force CN usage.",
              "type": "boolean"
            },
            "serialNumberSource": {
              "description": "Specifies the source of the subject serial number. Valid values are json-csr (default) or json. When set to json-csr, the subject serial number is taken from the serial_number parameter and falls back to the serial number in the CSR. When set to json, the subject serial number is taken from the serial_number parameter but will ignore any value in the CSR. For backwards compatibility an empty value for this field will default to the json-csr behavior.\nSpecifies the source of the subject serial number. Valid values are json-csr (default) or json. When set to json-csr, the subject serial number is taken from the serial_number parameter and falls back to the serial number in the CSR. When set to json, the subject serial number is taken from the serial_number parameter but will ignore any value in the CSR. For backwards compatibility an empty value for this field will default to the json-csr behavior.",
              "type": "string"
            },
            "serverFlag": {
              "description": "Flag to specify certificates for server use\nFlag to specify certificates for server use.",
              "type": "boolean"
            },
            "signatureBits": {
              "description": "The number of bits to use in the signature algorithm\nThe number of bits to use in the signature algorithm.",
              "type": "number"
            },
            "streetAddress": {
              "description": "The street address of generated certificates\nThe street address of generated certificates.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "ttl": {
              "description": "The TTL, in seconds, for any certificate issued against this role.\nThe TTL.",
              "type": "string"
            },
            "useCsrCommonName": {
              "description": "Flag to use the CN in the CSR\nFlag to use the CN in the CSR.",
              "type": "boolean"
            },
            "useCsrSans": {
              "description": "Flag to use the SANs in the CSR\nFlag to use the SANs in the CSR.",
              "type": "boolean"
            },
            "usePss": {
              "description": "Specifies whether or not to use PSS signatures over PKCS#1v1.5 signatures when a RSA-type issuer is used. Ignored for ECDSA/Ed25519 issuers.\nSpecifies whether or not to use PSS signatures over PKCS#1v1.5 signatures when a RSA-type issuer is used. Ignored for ECDSA/Ed25519 issuers.",
              "type": "boolean"
            }
          },
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "type": "array",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one\nstatus to another.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from\none status to another, if any.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to\na resource at any point in time.",
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest metadata.generation\nwhich resulted in either a ready state, or stalled due to error\nit can not recover from without human intervention.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    }
  }
}
