{
  "description": "SecretBackendRootSignIntermediate is the Schema for the SecretBackendRootSignIntermediates API. \u003cno value\u003e",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "SecretBackendRootSignIntermediateSpec defines the desired state of SecretBackendRootSignIntermediate",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "deletionPolicy": {
          "description": "DeletionPolicy specifies what will happen to the underlying external\nwhen this managed resource is deleted - either \"Delete\" or \"Orphan\" the\nexternal resource.\nThis field is planned to be deprecated in favor of the ManagementPolicies\nfield in a future release. Currently, both could be set independently and\nnon-default values would be honored if the feature flag is enabled.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "type": "string",
          "default": "Delete",
          "enum": [
            "Orphan",
            "Delete"
          ]
        },
        "forProvider": {
          "type": "object",
          "properties": {
            "altNames": {
              "description": "List of alternative names.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "backend": {
              "description": "The PKI secret backend the resource belongs to.",
              "type": "string"
            },
            "commonName": {
              "description": "CN of intermediate to create.",
              "type": "string"
            },
            "country": {
              "description": "The country.",
              "type": "string"
            },
            "csr": {
              "description": "The CSR.",
              "type": "string"
            },
            "excludeCnFromSans": {
              "description": "Flag to exclude CN from SANs.",
              "type": "boolean"
            },
            "excludedDnsDomains": {
              "description": "List of domains for which certificates are not allowed to be issued.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "excludedEmailAddresses": {
              "description": "List of email addresses for which certificates are not allowed to be issued.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "excludedIpRanges": {
              "description": "List of IP ranges for which certificates are NOT allowed to be issued.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "excludedUriDomains": {
              "description": "List of URI domains for which certificates are not allowed to be issued.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "format": {
              "description": "The format of data.",
              "type": "string"
            },
            "ipSans": {
              "description": "List of alternative IPs.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "issuerRef": {
              "description": "Specifies the default issuer of this request.",
              "type": "string"
            },
            "keyUsage": {
              "description": "Specify the key usages to be added to the existing set of key usages (\"CRL\", \"CertSign\") on the generated certificate.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "locality": {
              "description": "The locality.",
              "type": "string"
            },
            "maxPathLength": {
              "description": "The maximum path length to encode in the generated certificate.",
              "type": "number"
            },
            "namespace": {
              "description": "Target namespace. (requires Enterprise)",
              "type": "string"
            },
            "notAfter": {
              "description": "Set the Not After field of the certificate with specified date value. The value format should be given in UTC format YYYY-MM-ddTHH:MM:SSZ. Supports the Y10K end date for IEEE 802.1AR-2018 standard devices, 9999-12-31T23:59:59Z.",
              "type": "string"
            },
            "notBeforeDuration": {
              "description": "Specifies the duration by which to backdate the NotBefore property.",
              "type": "string"
            },
            "organization": {
              "description": "The organization.",
              "type": "string"
            },
            "otherSans": {
              "description": "List of other SANs.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "ou": {
              "description": "The organization unit.",
              "type": "string"
            },
            "permittedDnsDomains": {
              "description": "List of domains for which certificates are allowed to be issued.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "permittedEmailAddresses": {
              "description": "List of email addresses for which certificates are allowed to be issued.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "permittedIpRanges": {
              "description": "List of IP ranges for which certificates are allowed to be issued.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "permittedUriDomains": {
              "description": "List of URI domains for which certificates are allowed to be issued.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "postalCode": {
              "description": "The postal code.",
              "type": "string"
            },
            "province": {
              "description": "The province.",
              "type": "string"
            },
            "revoke": {
              "description": "Revoke the certificate upon resource destruction.",
              "type": "boolean"
            },
            "signatureBits": {
              "description": "The number of bits to use in the signature algorithm.",
              "type": "number"
            },
            "skid": {
              "description": "Value for the Subject Key Identifier field\n(RFC 5280 Section 4.2.1.2). Specified as a string in hex format.",
              "type": "string"
            },
            "streetAddress": {
              "description": "The street address.",
              "type": "string"
            },
            "ttl": {
              "description": "Time to live.",
              "type": "string"
            },
            "uriSans": {
              "description": "List of alternative URIs.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "useCsrValues": {
              "description": "Preserve CSR values.",
              "type": "boolean"
            },
            "usePss": {
              "description": "Specifies whether or not to use PSS signatures\nover PKCS#1v1.5 signatures when a RSA-type issuer is used.",
              "type": "boolean"
            }
          },
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored\nunless the Management Policies feature flag is disabled.\nInitProvider holds the same fields as ForProvider, with the exception\nof Identifier and other resource reference fields. The fields that are\nin InitProvider are merged into ForProvider when the resource is created.\nThe same fields are also added to the terraform ignore_changes hook, to\navoid updating them after creation. This is useful for fields that are\nrequired on creation, but we do not desire to update them after creation,\nfor example because of an external controller is managing them, like an\nautoscaler.",
          "type": "object",
          "properties": {
            "altNames": {
              "description": "List of alternative names.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "backend": {
              "description": "The PKI secret backend the resource belongs to.",
              "type": "string"
            },
            "commonName": {
              "description": "CN of intermediate to create.",
              "type": "string"
            },
            "country": {
              "description": "The country.",
              "type": "string"
            },
            "csr": {
              "description": "The CSR.",
              "type": "string"
            },
            "excludeCnFromSans": {
              "description": "Flag to exclude CN from SANs.",
              "type": "boolean"
            },
            "excludedDnsDomains": {
              "description": "List of domains for which certificates are not allowed to be issued.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "excludedEmailAddresses": {
              "description": "List of email addresses for which certificates are not allowed to be issued.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "excludedIpRanges": {
              "description": "List of IP ranges for which certificates are NOT allowed to be issued.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "excludedUriDomains": {
              "description": "List of URI domains for which certificates are not allowed to be issued.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "format": {
              "description": "The format of data.",
              "type": "string"
            },
            "ipSans": {
              "description": "List of alternative IPs.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "issuerRef": {
              "description": "Specifies the default issuer of this request.",
              "type": "string"
            },
            "keyUsage": {
              "description": "Specify the key usages to be added to the existing set of key usages (\"CRL\", \"CertSign\") on the generated certificate.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "locality": {
              "description": "The locality.",
              "type": "string"
            },
            "maxPathLength": {
              "description": "The maximum path length to encode in the generated certificate.",
              "type": "number"
            },
            "namespace": {
              "description": "Target namespace. (requires Enterprise)",
              "type": "string"
            },
            "notAfter": {
              "description": "Set the Not After field of the certificate with specified date value. The value format should be given in UTC format YYYY-MM-ddTHH:MM:SSZ. Supports the Y10K end date for IEEE 802.1AR-2018 standard devices, 9999-12-31T23:59:59Z.",
              "type": "string"
            },
            "notBeforeDuration": {
              "description": "Specifies the duration by which to backdate the NotBefore property.",
              "type": "string"
            },
            "organization": {
              "description": "The organization.",
              "type": "string"
            },
            "otherSans": {
              "description": "List of other SANs.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "ou": {
              "description": "The organization unit.",
              "type": "string"
            },
            "permittedDnsDomains": {
              "description": "List of domains for which certificates are allowed to be issued.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "permittedEmailAddresses": {
              "description": "List of email addresses for which certificates are allowed to be issued.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "permittedIpRanges": {
              "description": "List of IP ranges for which certificates are allowed to be issued.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "permittedUriDomains": {
              "description": "List of URI domains for which certificates are allowed to be issued.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "postalCode": {
              "description": "The postal code.",
              "type": "string"
            },
            "province": {
              "description": "The province.",
              "type": "string"
            },
            "revoke": {
              "description": "Revoke the certificate upon resource destruction.",
              "type": "boolean"
            },
            "signatureBits": {
              "description": "The number of bits to use in the signature algorithm.",
              "type": "number"
            },
            "skid": {
              "description": "Value for the Subject Key Identifier field\n(RFC 5280 Section 4.2.1.2). Specified as a string in hex format.",
              "type": "string"
            },
            "streetAddress": {
              "description": "The street address.",
              "type": "string"
            },
            "ttl": {
              "description": "Time to live.",
              "type": "string"
            },
            "uriSans": {
              "description": "List of alternative URIs.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "useCsrValues": {
              "description": "Preserve CSR values.",
              "type": "boolean"
            },
            "usePss": {
              "description": "Specifies whether or not to use PSS signatures\nover PKCS#1v1.5 signatures when a RSA-type issuer is used.",
              "type": "boolean"
            }
          },
          "additionalProperties": false
        },
        "managementPolicies": {
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out\nthrough a Crossplane feature flag.\nManagementPolicies specify the array of actions Crossplane is allowed to\ntake on the managed and external resources.\nThis field is planned to replace the DeletionPolicy field in a future\nrelease. Currently, both could be set independently and non-default\nvalues would be honored if the feature flag is enabled. If both are\ncustom, the DeletionPolicy field will be ignored.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223\nand this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers\ncan take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to\ncreate, observe, update, and delete this managed resource should be\nconfigured.",
          "type": "object",
          "default": {
            "name": "default"
          },
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "type": "object",
              "properties": {
                "resolution": {
                  "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                  "type": "string",
                  "default": "Required",
                  "enum": [
                    "Required",
                    "Optional"
                  ]
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                  "type": "string",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a\nSecret to which any connection details for this managed resource should\nbe written. Connection details frequently include the endpoint, username,\nand password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name",
            "namespace"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false,
      "x-kubernetes-validations": [
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.backend) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.backend))",
          "message": "spec.forProvider.backend is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.commonName) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.commonName))",
          "message": "spec.forProvider.commonName is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.csr) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.csr))",
          "message": "spec.forProvider.csr is a required parameter"
        }
      ]
    },
    "status": {
      "description": "SecretBackendRootSignIntermediateStatus defines the observed state of SecretBackendRootSignIntermediate.",
      "type": "object",
      "properties": {
        "atProvider": {
          "type": "object",
          "properties": {
            "altNames": {
              "description": "List of alternative names.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "backend": {
              "description": "The PKI secret backend the resource belongs to.",
              "type": "string"
            },
            "caChain": {
              "description": "The CA chain as a list of format specific certificates",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "certificate": {
              "description": "The signed intermediate CA certificate.",
              "type": "string"
            },
            "certificateBundle": {
              "description": "The concatenation of the intermediate and issuing CA certificates (PEM encoded). Requires the format to be set to any of: pem, pem_bundle. The value will be empty for all other formats.",
              "type": "string"
            },
            "commonName": {
              "description": "CN of intermediate to create.",
              "type": "string"
            },
            "country": {
              "description": "The country.",
              "type": "string"
            },
            "csr": {
              "description": "The CSR.",
              "type": "string"
            },
            "excludeCnFromSans": {
              "description": "Flag to exclude CN from SANs.",
              "type": "boolean"
            },
            "excludedDnsDomains": {
              "description": "List of domains for which certificates are not allowed to be issued.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "excludedEmailAddresses": {
              "description": "List of email addresses for which certificates are not allowed to be issued.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "excludedIpRanges": {
              "description": "List of IP ranges for which certificates are NOT allowed to be issued.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "excludedUriDomains": {
              "description": "List of URI domains for which certificates are not allowed to be issued.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "format": {
              "description": "The format of data.",
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "ipSans": {
              "description": "List of alternative IPs.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "issuerRef": {
              "description": "Specifies the default issuer of this request.",
              "type": "string"
            },
            "issuingCa": {
              "description": "The issuing CA certificate.",
              "type": "string"
            },
            "keyUsage": {
              "description": "Specify the key usages to be added to the existing set of key usages (\"CRL\", \"CertSign\") on the generated certificate.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "locality": {
              "description": "The locality.",
              "type": "string"
            },
            "maxPathLength": {
              "description": "The maximum path length to encode in the generated certificate.",
              "type": "number"
            },
            "namespace": {
              "description": "Target namespace. (requires Enterprise)",
              "type": "string"
            },
            "notAfter": {
              "description": "Set the Not After field of the certificate with specified date value. The value format should be given in UTC format YYYY-MM-ddTHH:MM:SSZ. Supports the Y10K end date for IEEE 802.1AR-2018 standard devices, 9999-12-31T23:59:59Z.",
              "type": "string"
            },
            "notBeforeDuration": {
              "description": "Specifies the duration by which to backdate the NotBefore property.",
              "type": "string"
            },
            "organization": {
              "description": "The organization.",
              "type": "string"
            },
            "otherSans": {
              "description": "List of other SANs.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "ou": {
              "description": "The organization unit.",
              "type": "string"
            },
            "permittedDnsDomains": {
              "description": "List of domains for which certificates are allowed to be issued.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "permittedEmailAddresses": {
              "description": "List of email addresses for which certificates are allowed to be issued.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "permittedIpRanges": {
              "description": "List of IP ranges for which certificates are allowed to be issued.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "permittedUriDomains": {
              "description": "List of URI domains for which certificates are allowed to be issued.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "postalCode": {
              "description": "The postal code.",
              "type": "string"
            },
            "province": {
              "description": "The province.",
              "type": "string"
            },
            "revoke": {
              "description": "Revoke the certificate upon resource destruction.",
              "type": "boolean"
            },
            "serialNumber": {
              "description": "The certificate's serial number, hex formatted.",
              "type": "string"
            },
            "signatureBits": {
              "description": "The number of bits to use in the signature algorithm.",
              "type": "number"
            },
            "skid": {
              "description": "Value for the Subject Key Identifier field\n(RFC 5280 Section 4.2.1.2). Specified as a string in hex format.",
              "type": "string"
            },
            "streetAddress": {
              "description": "The street address.",
              "type": "string"
            },
            "ttl": {
              "description": "Time to live.",
              "type": "string"
            },
            "uriSans": {
              "description": "List of alternative URIs.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "useCsrValues": {
              "description": "Preserve CSR values.",
              "type": "boolean"
            },
            "usePss": {
              "description": "Specifies whether or not to use PSS signatures\nover PKCS#1v1.5 signatures when a RSA-type issuer is used.",
              "type": "boolean"
            }
          },
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "type": "array",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one\nstatus to another.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from\none status to another, if any.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to\na resource at any point in time.",
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest metadata.generation\nwhich resulted in either a ready state, or stalled due to error\nit can not recover from without human intervention.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    }
  }
}
