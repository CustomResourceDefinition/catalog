{
  "description": "SecretBackendIntermediateCertRequest is the Schema for the SecretBackendIntermediateCertRequests API. Generate a new private key and a CSR for signing the PKI.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "SecretBackendIntermediateCertRequestSpec defines the desired state of SecretBackendIntermediateCertRequest",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "deletionPolicy": {
          "description": "DeletionPolicy specifies what will happen to the underlying external\nwhen this managed resource is deleted - either \"Delete\" or \"Orphan\" the\nexternal resource.\nThis field is planned to be deprecated in favor of the ManagementPolicies\nfield in a future release. Currently, both could be set independently and\nnon-default values would be honored if the feature flag is enabled.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "type": "string",
          "default": "Delete",
          "enum": [
            "Orphan",
            "Delete"
          ]
        },
        "forProvider": {
          "type": "object",
          "properties": {
            "addBasicConstraints": {
              "description": "Adds a Basic Constraints extension with 'CA: true'.\nOnly needed as a workaround in some compatibility scenarios with Active Directory\nCertificate Services\nSet 'CA: true' in a Basic Constraints extension. Only needed as\na workaround in some compatibility scenarios with Active Directory Certificate Services.",
              "type": "boolean"
            },
            "altNames": {
              "description": "List of alternative names\nList of alternative names.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "backend": {
              "description": "The PKI secret backend the resource belongs to.\nThe PKI secret backend the resource belongs to.",
              "type": "string"
            },
            "backendRef": {
              "description": "Reference to a Mount in vault to populate backend.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "backendSelector": {
              "description": "Selector for a Mount in vault to populate backend.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "commonName": {
              "description": "CN of intermediate to create\nCN of intermediate to create.",
              "type": "string"
            },
            "country": {
              "description": "The country\nThe country.",
              "type": "string"
            },
            "excludeCnFromSans": {
              "description": "Flag to exclude CN from SANs\nFlag to exclude CN from SANs.",
              "type": "boolean"
            },
            "format": {
              "description": "The format of data\nThe format of data.",
              "type": "string"
            },
            "ipSans": {
              "description": "List of alternative IPs\nList of alternative IPs.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "keyBits": {
              "description": "The number of bits to use\nThe number of bits to use.",
              "type": "number"
            },
            "keyName": {
              "description": "When a new key is created with this request, optionally specifies\nthe name for this. The global ref default may not be used as a name.\nWhen a new key is created with this request, optionally specifies the name for this.",
              "type": "string"
            },
            "keyRef": {
              "description": "Specifies the key (either default, by name, or by identifier) to use\nfor generating this request. Only suitable for type=existing requests.\nSpecifies the key to use for generating this request.",
              "type": "string"
            },
            "keyType": {
              "description": "The desired key type\nThe desired key type.",
              "type": "string"
            },
            "keyUsage": {
              "description": "Specifies key_usage to encode in the generated certificate.\nSpecify the key usages to encode in the generated certificate.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "locality": {
              "description": "The locality\nThe locality.",
              "type": "string"
            },
            "managedKeyId": {
              "description": "The ID of the previously configured managed key. This field is\nrequired if type is kms and it conflicts with managed_key_name\nThe ID of the previously configured managed key.",
              "type": "string"
            },
            "managedKeyName": {
              "description": "The name of the previously configured managed key. This field is\nrequired if type is kms  and it conflicts with managed_key_id\nThe name of the previously configured managed key.",
              "type": "string"
            },
            "namespace": {
              "description": "The namespace to provision the resource in.\nThe value should not contain leading or trailing forward slashes.\nThe namespace is always relative to the provider's configured namespace.\nAvailable only for Vault Enterprise.\nTarget namespace. (requires Enterprise)",
              "type": "string"
            },
            "organization": {
              "description": "The organization\nThe organization.",
              "type": "string"
            },
            "otherSans": {
              "description": "List of other SANs\nList of other SANs.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "ou": {
              "description": "The organization unit\nThe organization unit.",
              "type": "string"
            },
            "postalCode": {
              "description": "The postal code\nThe postal code.",
              "type": "string"
            },
            "privateKeyFormat": {
              "description": "The private key format\nThe private key format.",
              "type": "string"
            },
            "province": {
              "description": "The province\nThe province.",
              "type": "string"
            },
            "serialNumber": {
              "description": "The requested Subject's named Serial Number\nThe requested Subject's named serial number.",
              "type": "string"
            },
            "signatureBits": {
              "description": "The number of bits to use in the signature algorithm\nThe number of bits to use in the signature algorithm.",
              "type": "number"
            },
            "streetAddress": {
              "description": "The street address\nThe street address.",
              "type": "string"
            },
            "type": {
              "description": "Type of intermediate to create. Must be either \"exported\" or \"internal\"\nor \"kms\"\nType of intermediate to create. Must be either \"existing\", \"exported\", \"internal\" or \"kms\"",
              "type": "string"
            },
            "uriSans": {
              "description": "List of alternative URIs\nList of alternative URIs.",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored\nunless the Management Policies feature flag is disabled.\nInitProvider holds the same fields as ForProvider, with the exception\nof Identifier and other resource reference fields. The fields that are\nin InitProvider are merged into ForProvider when the resource is created.\nThe same fields are also added to the terraform ignore_changes hook, to\navoid updating them after creation. This is useful for fields that are\nrequired on creation, but we do not desire to update them after creation,\nfor example because of an external controller is managing them, like an\nautoscaler.",
          "type": "object",
          "properties": {
            "addBasicConstraints": {
              "description": "Adds a Basic Constraints extension with 'CA: true'.\nOnly needed as a workaround in some compatibility scenarios with Active Directory\nCertificate Services\nSet 'CA: true' in a Basic Constraints extension. Only needed as\na workaround in some compatibility scenarios with Active Directory Certificate Services.",
              "type": "boolean"
            },
            "altNames": {
              "description": "List of alternative names\nList of alternative names.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "backend": {
              "description": "The PKI secret backend the resource belongs to.\nThe PKI secret backend the resource belongs to.",
              "type": "string"
            },
            "backendRef": {
              "description": "Reference to a Mount in vault to populate backend.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "backendSelector": {
              "description": "Selector for a Mount in vault to populate backend.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "commonName": {
              "description": "CN of intermediate to create\nCN of intermediate to create.",
              "type": "string"
            },
            "country": {
              "description": "The country\nThe country.",
              "type": "string"
            },
            "excludeCnFromSans": {
              "description": "Flag to exclude CN from SANs\nFlag to exclude CN from SANs.",
              "type": "boolean"
            },
            "format": {
              "description": "The format of data\nThe format of data.",
              "type": "string"
            },
            "ipSans": {
              "description": "List of alternative IPs\nList of alternative IPs.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "keyBits": {
              "description": "The number of bits to use\nThe number of bits to use.",
              "type": "number"
            },
            "keyName": {
              "description": "When a new key is created with this request, optionally specifies\nthe name for this. The global ref default may not be used as a name.\nWhen a new key is created with this request, optionally specifies the name for this.",
              "type": "string"
            },
            "keyRef": {
              "description": "Specifies the key (either default, by name, or by identifier) to use\nfor generating this request. Only suitable for type=existing requests.\nSpecifies the key to use for generating this request.",
              "type": "string"
            },
            "keyType": {
              "description": "The desired key type\nThe desired key type.",
              "type": "string"
            },
            "keyUsage": {
              "description": "Specifies key_usage to encode in the generated certificate.\nSpecify the key usages to encode in the generated certificate.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "locality": {
              "description": "The locality\nThe locality.",
              "type": "string"
            },
            "managedKeyId": {
              "description": "The ID of the previously configured managed key. This field is\nrequired if type is kms and it conflicts with managed_key_name\nThe ID of the previously configured managed key.",
              "type": "string"
            },
            "managedKeyName": {
              "description": "The name of the previously configured managed key. This field is\nrequired if type is kms  and it conflicts with managed_key_id\nThe name of the previously configured managed key.",
              "type": "string"
            },
            "namespace": {
              "description": "The namespace to provision the resource in.\nThe value should not contain leading or trailing forward slashes.\nThe namespace is always relative to the provider's configured namespace.\nAvailable only for Vault Enterprise.\nTarget namespace. (requires Enterprise)",
              "type": "string"
            },
            "organization": {
              "description": "The organization\nThe organization.",
              "type": "string"
            },
            "otherSans": {
              "description": "List of other SANs\nList of other SANs.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "ou": {
              "description": "The organization unit\nThe organization unit.",
              "type": "string"
            },
            "postalCode": {
              "description": "The postal code\nThe postal code.",
              "type": "string"
            },
            "privateKeyFormat": {
              "description": "The private key format\nThe private key format.",
              "type": "string"
            },
            "province": {
              "description": "The province\nThe province.",
              "type": "string"
            },
            "serialNumber": {
              "description": "The requested Subject's named Serial Number\nThe requested Subject's named serial number.",
              "type": "string"
            },
            "signatureBits": {
              "description": "The number of bits to use in the signature algorithm\nThe number of bits to use in the signature algorithm.",
              "type": "number"
            },
            "streetAddress": {
              "description": "The street address\nThe street address.",
              "type": "string"
            },
            "type": {
              "description": "Type of intermediate to create. Must be either \"exported\" or \"internal\"\nor \"kms\"\nType of intermediate to create. Must be either \"existing\", \"exported\", \"internal\" or \"kms\"",
              "type": "string"
            },
            "uriSans": {
              "description": "List of alternative URIs\nList of alternative URIs.",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false
        },
        "managementPolicies": {
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out\nthrough a Crossplane feature flag.\nManagementPolicies specify the array of actions Crossplane is allowed to\ntake on the managed and external resources.\nThis field is planned to replace the DeletionPolicy field in a future\nrelease. Currently, both could be set independently and non-default\nvalues would be honored if the feature flag is enabled. If both are\ncustom, the DeletionPolicy field will be ignored.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223\nand this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers\ncan take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to\ncreate, observe, update, and delete this managed resource should be\nconfigured.",
          "type": "object",
          "default": {
            "name": "default"
          },
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "type": "object",
              "properties": {
                "resolution": {
                  "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                  "type": "string",
                  "default": "Required",
                  "enum": [
                    "Required",
                    "Optional"
                  ]
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                  "type": "string",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a\nSecret to which any connection details for this managed resource should\nbe written. Connection details frequently include the endpoint, username,\nand password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name",
            "namespace"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false,
      "x-kubernetes-validations": [
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.commonName) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.commonName))",
          "message": "spec.forProvider.commonName is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.type))",
          "message": "spec.forProvider.type is a required parameter"
        }
      ]
    },
    "status": {
      "description": "SecretBackendIntermediateCertRequestStatus defines the observed state of SecretBackendIntermediateCertRequest.",
      "type": "object",
      "properties": {
        "atProvider": {
          "type": "object",
          "properties": {
            "addBasicConstraints": {
              "description": "Adds a Basic Constraints extension with 'CA: true'.\nOnly needed as a workaround in some compatibility scenarios with Active Directory\nCertificate Services\nSet 'CA: true' in a Basic Constraints extension. Only needed as\na workaround in some compatibility scenarios with Active Directory Certificate Services.",
              "type": "boolean"
            },
            "altNames": {
              "description": "List of alternative names\nList of alternative names.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "backend": {
              "description": "The PKI secret backend the resource belongs to.\nThe PKI secret backend the resource belongs to.",
              "type": "string"
            },
            "commonName": {
              "description": "CN of intermediate to create\nCN of intermediate to create.",
              "type": "string"
            },
            "country": {
              "description": "The country\nThe country.",
              "type": "string"
            },
            "csr": {
              "description": "The CSR\nThe CSR.",
              "type": "string"
            },
            "excludeCnFromSans": {
              "description": "Flag to exclude CN from SANs\nFlag to exclude CN from SANs.",
              "type": "boolean"
            },
            "format": {
              "description": "The format of data\nThe format of data.",
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "ipSans": {
              "description": "List of alternative IPs\nList of alternative IPs.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "keyBits": {
              "description": "The number of bits to use\nThe number of bits to use.",
              "type": "number"
            },
            "keyId": {
              "description": "The ID of the generated key.\nThe ID of the generated key.",
              "type": "string"
            },
            "keyName": {
              "description": "When a new key is created with this request, optionally specifies\nthe name for this. The global ref default may not be used as a name.\nWhen a new key is created with this request, optionally specifies the name for this.",
              "type": "string"
            },
            "keyRef": {
              "description": "Specifies the key (either default, by name, or by identifier) to use\nfor generating this request. Only suitable for type=existing requests.\nSpecifies the key to use for generating this request.",
              "type": "string"
            },
            "keyType": {
              "description": "The desired key type\nThe desired key type.",
              "type": "string"
            },
            "keyUsage": {
              "description": "Specifies key_usage to encode in the generated certificate.\nSpecify the key usages to encode in the generated certificate.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "locality": {
              "description": "The locality\nThe locality.",
              "type": "string"
            },
            "managedKeyId": {
              "description": "The ID of the previously configured managed key. This field is\nrequired if type is kms and it conflicts with managed_key_name\nThe ID of the previously configured managed key.",
              "type": "string"
            },
            "managedKeyName": {
              "description": "The name of the previously configured managed key. This field is\nrequired if type is kms  and it conflicts with managed_key_id\nThe name of the previously configured managed key.",
              "type": "string"
            },
            "namespace": {
              "description": "The namespace to provision the resource in.\nThe value should not contain leading or trailing forward slashes.\nThe namespace is always relative to the provider's configured namespace.\nAvailable only for Vault Enterprise.\nTarget namespace. (requires Enterprise)",
              "type": "string"
            },
            "organization": {
              "description": "The organization\nThe organization.",
              "type": "string"
            },
            "otherSans": {
              "description": "List of other SANs\nList of other SANs.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "ou": {
              "description": "The organization unit\nThe organization unit.",
              "type": "string"
            },
            "postalCode": {
              "description": "The postal code\nThe postal code.",
              "type": "string"
            },
            "privateKeyFormat": {
              "description": "The private key format\nThe private key format.",
              "type": "string"
            },
            "privateKeyType": {
              "description": "The private key type\nThe private key type.",
              "type": "string"
            },
            "province": {
              "description": "The province\nThe province.",
              "type": "string"
            },
            "serialNumber": {
              "description": "The requested Subject's named Serial Number\nThe requested Subject's named serial number.",
              "type": "string"
            },
            "signatureBits": {
              "description": "The number of bits to use in the signature algorithm\nThe number of bits to use in the signature algorithm.",
              "type": "number"
            },
            "streetAddress": {
              "description": "The street address\nThe street address.",
              "type": "string"
            },
            "type": {
              "description": "Type of intermediate to create. Must be either \"exported\" or \"internal\"\nor \"kms\"\nType of intermediate to create. Must be either \"existing\", \"exported\", \"internal\" or \"kms\"",
              "type": "string"
            },
            "uriSans": {
              "description": "List of alternative URIs\nList of alternative URIs.",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "type": "array",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one\nstatus to another.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from\none status to another, if any.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to\na resource at any point in time.",
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest metadata.generation\nwhich resulted in either a ready state, or stalled due to error\nit can not recover from without human intervention.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    }
  }
}
