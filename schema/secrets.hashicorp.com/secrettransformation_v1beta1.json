{
  "description": "SecretTransformation is the Schema for the secrettransformations API",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "SecretTransformationSpec defines the desired state of SecretTransformation",
      "type": "object",
      "properties": {
        "excludes": {
          "description": "Excludes contains regex patterns used to filter top-level source secret data\nfields for exclusion from the final secret data. These pattern filters are\nnever applied to templated fields as defined in Templates. They are always\napplied before any inclusion patterns. To exclude all source secret data\nfields, you can configure the single pattern \".*\".",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "includes": {
          "description": "Includes contains regex patterns used to filter top-level source secret data\nfields for inclusion in the final secret data. These pattern filters are\nnever applied to templated fields as defined in Templates. They are always\napplied last.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "sourceTemplates": {
          "description": "SourceTemplates are never included in the rendered secret, they can be\nused to provide common template definitions, etc.",
          "type": "array",
          "items": {
            "description": "SourceTemplate provides source templating configuration.",
            "type": "object",
            "required": [
              "text"
            ],
            "properties": {
              "name": {
                "type": "string"
              },
              "text": {
                "description": "Text contains the Go text template format. The template\nreferences attributes from the data structure of the source secret.\nRefer to https://pkg.go.dev/text/template for more information.",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "templates": {
          "description": "Templates maps a template name to its Template. Templates are always included\nin the rendered secret with the specified key.",
          "type": "object",
          "additionalProperties": {
            "description": "Template provides templating configuration.",
            "type": "object",
            "required": [
              "text"
            ],
            "properties": {
              "name": {
                "description": "Name of the Template",
                "type": "string"
              },
              "text": {
                "description": "Text contains the Go text template format. The template\nreferences attributes from the data structure of the source secret.\nRefer to https://pkg.go.dev/text/template for more information.",
                "type": "string"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "SecretTransformationStatus defines the observed state of SecretTransformation",
      "type": "object",
      "required": [
        "error",
        "valid"
      ],
      "properties": {
        "conditions": {
          "description": "Conditions hold information that can be used by other apps to determine the\nhealth of the resource instance.",
          "type": "array",
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                "type": "string",
                "maxLength": 32768
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64",
                "minimum": 0
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                "type": "string",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "type": "string",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ]
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                "type": "string",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
              }
            },
            "additionalProperties": false
          }
        },
        "error": {
          "type": "string"
        },
        "valid": {
          "type": "boolean"
        }
      },
      "additionalProperties": false
    }
  }
}
