{
  "description": "KubeadmConfigTemplate is the Schema for the kubeadmconfigtemplates API.\n\nDeprecated: This type will be removed in one of the next releases.",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "spec is the desired state of KubeadmConfigTemplate.",
      "type": "object",
      "required": [
        "template"
      ],
      "properties": {
        "template": {
          "description": "template defines the desired state of KubeadmConfigTemplate.",
          "type": "object",
          "properties": {
            "spec": {
              "description": "spec is the desired state of KubeadmConfig.",
              "type": "object",
              "properties": {
                "clusterConfiguration": {
                  "description": "clusterConfiguration along with InitConfiguration are the configurations necessary for the init command",
                  "type": "object",
                  "properties": {
                    "apiServer": {
                      "description": "APIServer contains extra settings for the API server control plane component",
                      "type": "object",
                      "properties": {
                        "certSANs": {
                          "description": "CertSANs sets extra Subject Alternative Names for the API Server signing cert.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "extraArgs": {
                          "description": "ExtraArgs is an extra set of flags to pass to the control plane component.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "extraVolumes": {
                          "description": "ExtraVolumes is an extra set of host volumes, mounted to the control plane component.",
                          "type": "array",
                          "items": {
                            "description": "HostPathMount contains elements describing volumes that are mounted from the\nhost.",
                            "type": "object",
                            "required": [
                              "hostPath",
                              "mountPath",
                              "name"
                            ],
                            "properties": {
                              "hostPath": {
                                "description": "HostPath is the path in the host that will be mounted inside\nthe pod.",
                                "type": "string"
                              },
                              "mountPath": {
                                "description": "MountPath is the path inside the pod where hostPath will be mounted.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the volume inside the pod template.",
                                "type": "string"
                              },
                              "pathType": {
                                "description": "PathType is the type of the HostPath.",
                                "type": "string"
                              },
                              "readOnly": {
                                "description": "ReadOnly controls write access to the volume",
                                "type": "boolean"
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "timeoutForControlPlane": {
                          "description": "TimeoutForControlPlane controls the timeout that we use for API server to appear",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    },
                    "apiVersion": {
                      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                      "type": "string"
                    },
                    "certificatesDir": {
                      "description": "CertificatesDir specifies where to store or look for all required certificates.\nNB: if not provided, this will default to `/etc/kubernetes/pki`",
                      "type": "string"
                    },
                    "clusterName": {
                      "description": "The cluster name",
                      "type": "string"
                    },
                    "controlPlaneEndpoint": {
                      "description": "ControlPlaneEndpoint sets a stable IP address or DNS name for the control plane; it\ncan be a valid IP address or a RFC-1123 DNS subdomain, both with optional TCP port.\nIn case the ControlPlaneEndpoint is not specified, the AdvertiseAddress + BindPort\nare used; in case the ControlPlaneEndpoint is specified but without a TCP port,\nthe BindPort is used.\nPossible usages are:\ne.g. In a cluster with more than one control plane instances, this field should be\nassigned the address of the external load balancer in front of the\ncontrol plane instances.\ne.g.  in environments with enforced node recycling, the ControlPlaneEndpoint\ncould be used for assigning a stable DNS to the control plane.\nNB: This value defaults to the first value in the Cluster object status.apiEndpoints array.",
                      "type": "string"
                    },
                    "controllerManager": {
                      "description": "ControllerManager contains extra settings for the controller manager control plane component",
                      "type": "object",
                      "properties": {
                        "extraArgs": {
                          "description": "ExtraArgs is an extra set of flags to pass to the control plane component.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "extraVolumes": {
                          "description": "ExtraVolumes is an extra set of host volumes, mounted to the control plane component.",
                          "type": "array",
                          "items": {
                            "description": "HostPathMount contains elements describing volumes that are mounted from the\nhost.",
                            "type": "object",
                            "required": [
                              "hostPath",
                              "mountPath",
                              "name"
                            ],
                            "properties": {
                              "hostPath": {
                                "description": "HostPath is the path in the host that will be mounted inside\nthe pod.",
                                "type": "string"
                              },
                              "mountPath": {
                                "description": "MountPath is the path inside the pod where hostPath will be mounted.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the volume inside the pod template.",
                                "type": "string"
                              },
                              "pathType": {
                                "description": "PathType is the type of the HostPath.",
                                "type": "string"
                              },
                              "readOnly": {
                                "description": "ReadOnly controls write access to the volume",
                                "type": "boolean"
                              }
                            },
                            "additionalProperties": false
                          }
                        }
                      },
                      "additionalProperties": false
                    },
                    "dns": {
                      "description": "DNS defines the options for the DNS add-on installed in the cluster.",
                      "type": "object",
                      "properties": {
                        "imageRepository": {
                          "description": "ImageRepository sets the container registry to pull images from.\nif not set, the ImageRepository defined in ClusterConfiguration will be used instead.",
                          "type": "string"
                        },
                        "imageTag": {
                          "description": "ImageTag allows to specify a tag for the image.\nIn case this value is set, kubeadm does not change automatically the version of the above components during upgrades.",
                          "type": "string"
                        },
                        "type": {
                          "description": "Type defines the DNS add-on to be used",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    },
                    "etcd": {
                      "description": "Etcd holds configuration for etcd.\nNB: This value defaults to a Local (stacked) etcd",
                      "type": "object",
                      "properties": {
                        "external": {
                          "description": "External describes how to connect to an external etcd cluster\nLocal and External are mutually exclusive",
                          "type": "object",
                          "required": [
                            "caFile",
                            "certFile",
                            "endpoints",
                            "keyFile"
                          ],
                          "properties": {
                            "caFile": {
                              "description": "CAFile is an SSL Certificate Authority file used to secure etcd communication.\nRequired if using a TLS connection.",
                              "type": "string"
                            },
                            "certFile": {
                              "description": "CertFile is an SSL certification file used to secure etcd communication.\nRequired if using a TLS connection.",
                              "type": "string"
                            },
                            "endpoints": {
                              "description": "Endpoints of etcd members. Required for ExternalEtcd.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "keyFile": {
                              "description": "KeyFile is an SSL key file used to secure etcd communication.\nRequired if using a TLS connection.",
                              "type": "string"
                            }
                          },
                          "additionalProperties": false
                        },
                        "local": {
                          "description": "Local provides configuration knobs for configuring the local etcd instance\nLocal and External are mutually exclusive",
                          "type": "object",
                          "properties": {
                            "dataDir": {
                              "description": "DataDir is the directory etcd will place its data.\nDefaults to \"/var/lib/etcd\".",
                              "type": "string"
                            },
                            "extraArgs": {
                              "description": "ExtraArgs are extra arguments provided to the etcd binary\nwhen run inside a static pod.",
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              }
                            },
                            "imageRepository": {
                              "description": "ImageRepository sets the container registry to pull images from.\nif not set, the ImageRepository defined in ClusterConfiguration will be used instead.",
                              "type": "string"
                            },
                            "imageTag": {
                              "description": "ImageTag allows to specify a tag for the image.\nIn case this value is set, kubeadm does not change automatically the version of the above components during upgrades.",
                              "type": "string"
                            },
                            "peerCertSANs": {
                              "description": "PeerCertSANs sets extra Subject Alternative Names for the etcd peer signing cert.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "serverCertSANs": {
                              "description": "ServerCertSANs sets extra Subject Alternative Names for the etcd server signing cert.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    },
                    "featureGates": {
                      "description": "FeatureGates enabled by the user.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "boolean"
                      }
                    },
                    "imageRepository": {
                      "description": "ImageRepository sets the container registry to pull images from.\nIf empty, `k8s.gcr.io` will be used by default; in case of kubernetes version is a CI build (kubernetes version starts with `ci/` or `ci-cross/`)\n`gcr.io/k8s-staging-ci-images` will be used as a default for control plane components and for kube-proxy, while `k8s.gcr.io`\nwill be used for all the other images.",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "kubernetesVersion": {
                      "description": "KubernetesVersion is the target version of the control plane.\nNB: This value defaults to the Machine object spec.version",
                      "type": "string"
                    },
                    "networking": {
                      "description": "Networking holds configuration for the networking topology of the cluster.\nNB: This value defaults to the Cluster object spec.clusterNetwork.",
                      "type": "object",
                      "properties": {
                        "dnsDomain": {
                          "description": "DNSDomain is the dns domain used by k8s services. Defaults to \"cluster.local\".",
                          "type": "string"
                        },
                        "podSubnet": {
                          "description": "PodSubnet is the subnet used by pods.\nIf unset, the API server will not allocate CIDR ranges for every node.\nDefaults to a comma-delimited string of the Cluster object's spec.clusterNetwork.services.cidrBlocks if that is set",
                          "type": "string"
                        },
                        "serviceSubnet": {
                          "description": "ServiceSubnet is the subnet used by k8s services.\nDefaults to a comma-delimited string of the Cluster object's spec.clusterNetwork.pods.cidrBlocks, or\nto \"10.96.0.0/12\" if that's unset.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    },
                    "scheduler": {
                      "description": "Scheduler contains extra settings for the scheduler control plane component",
                      "type": "object",
                      "properties": {
                        "extraArgs": {
                          "description": "ExtraArgs is an extra set of flags to pass to the control plane component.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "extraVolumes": {
                          "description": "ExtraVolumes is an extra set of host volumes, mounted to the control plane component.",
                          "type": "array",
                          "items": {
                            "description": "HostPathMount contains elements describing volumes that are mounted from the\nhost.",
                            "type": "object",
                            "required": [
                              "hostPath",
                              "mountPath",
                              "name"
                            ],
                            "properties": {
                              "hostPath": {
                                "description": "HostPath is the path in the host that will be mounted inside\nthe pod.",
                                "type": "string"
                              },
                              "mountPath": {
                                "description": "MountPath is the path inside the pod where hostPath will be mounted.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the volume inside the pod template.",
                                "type": "string"
                              },
                              "pathType": {
                                "description": "PathType is the type of the HostPath.",
                                "type": "string"
                              },
                              "readOnly": {
                                "description": "ReadOnly controls write access to the volume",
                                "type": "boolean"
                              }
                            },
                            "additionalProperties": false
                          }
                        }
                      },
                      "additionalProperties": false
                    },
                    "useHyperKubeImage": {
                      "description": "UseHyperKubeImage controls if hyperkube should be used for Kubernetes components instead of their respective separate images",
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "diskSetup": {
                  "description": "diskSetup specifies options for the creation of partition tables and file systems on devices.",
                  "type": "object",
                  "properties": {
                    "filesystems": {
                      "description": "filesystems specifies the list of file systems to setup.",
                      "type": "array",
                      "items": {
                        "description": "Filesystem defines the file systems to be created.",
                        "type": "object",
                        "required": [
                          "device",
                          "filesystem",
                          "label"
                        ],
                        "properties": {
                          "device": {
                            "description": "device specifies the device name",
                            "type": "string"
                          },
                          "extraOpts": {
                            "description": "extraOpts defined extra options to add to the command for creating the file system.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "filesystem": {
                            "description": "filesystem specifies the file system type.",
                            "type": "string"
                          },
                          "label": {
                            "description": "label specifies the file system label to be used. If set to None, no label is used.",
                            "type": "string"
                          },
                          "overwrite": {
                            "description": "overwrite defines whether or not to overwrite any existing filesystem.\nIf true, any pre-existing file system will be destroyed. Use with Caution.",
                            "type": "boolean"
                          },
                          "partition": {
                            "description": "partition specifies the partition to use. The valid options are: \"auto|any\", \"auto\", \"any\", \"none\", and \u003cNUM\u003e, where NUM is the actual partition number.",
                            "type": "string"
                          },
                          "replaceFS": {
                            "description": "replaceFS is a special directive, used for Microsoft Azure that instructs cloud-init to replace a file system of \u003cFS_TYPE\u003e.\nNOTE: unless you define a label, this requires the use of the 'any' partition directive.",
                            "type": "string"
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "partitions": {
                      "description": "partitions specifies the list of the partitions to setup.",
                      "type": "array",
                      "items": {
                        "description": "Partition defines how to create and layout a partition.",
                        "type": "object",
                        "required": [
                          "device",
                          "layout"
                        ],
                        "properties": {
                          "device": {
                            "description": "device is the name of the device.",
                            "type": "string"
                          },
                          "layout": {
                            "description": "layout specifies the device layout.\nIf it is true, a single partition will be created for the entire device.\nWhen layout is false, it means don't partition or ignore existing partitioning.",
                            "type": "boolean"
                          },
                          "overwrite": {
                            "description": "overwrite describes whether to skip checks and create the partition if a partition or filesystem is found on the device.\nUse with caution. Default is 'false'.",
                            "type": "boolean"
                          },
                          "tableType": {
                            "description": "tableType specifies the tupe of partition table. The following are supported:\n'mbr': default and setups a MS-DOS partition table\n'gpt': setups a GPT partition table",
                            "type": "string"
                          }
                        },
                        "additionalProperties": false
                      }
                    }
                  },
                  "additionalProperties": false
                },
                "files": {
                  "description": "files specifies extra files to be passed to user_data upon creation.",
                  "type": "array",
                  "items": {
                    "description": "File defines the input for generating write_files in cloud-init.",
                    "type": "object",
                    "required": [
                      "path"
                    ],
                    "properties": {
                      "content": {
                        "description": "content is the actual content of the file.",
                        "type": "string"
                      },
                      "contentFrom": {
                        "description": "contentFrom is a referenced source of content to populate the file.",
                        "type": "object",
                        "required": [
                          "secret"
                        ],
                        "properties": {
                          "secret": {
                            "description": "secret represents a secret that should populate this file.",
                            "type": "object",
                            "required": [
                              "key",
                              "name"
                            ],
                            "properties": {
                              "key": {
                                "description": "key is the key in the secret's data map for this value.",
                                "type": "string"
                              },
                              "name": {
                                "description": "name of the secret in the KubeadmBootstrapConfig's namespace to use.",
                                "type": "string"
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "additionalProperties": false
                      },
                      "encoding": {
                        "description": "encoding specifies the encoding of the file contents.",
                        "type": "string",
                        "enum": [
                          "base64",
                          "gzip",
                          "gzip+base64"
                        ]
                      },
                      "owner": {
                        "description": "owner specifies the ownership of the file, e.g. \"root:root\".",
                        "type": "string"
                      },
                      "path": {
                        "description": "path specifies the full path on disk where to store the file.",
                        "type": "string"
                      },
                      "permissions": {
                        "description": "permissions specifies the permissions to assign to the file, e.g. \"0640\".",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "format": {
                  "description": "format specifies the output format of the bootstrap data",
                  "type": "string",
                  "enum": [
                    "cloud-config"
                  ]
                },
                "initConfiguration": {
                  "description": "initConfiguration along with ClusterConfiguration are the configurations necessary for the init command",
                  "type": "object",
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                      "type": "string"
                    },
                    "bootstrapTokens": {
                      "description": "BootstrapTokens is respected at `kubeadm init` time and describes a set of Bootstrap Tokens to create.\nThis information IS NOT uploaded to the kubeadm cluster configmap, partly because of its sensitive nature",
                      "type": "array",
                      "items": {
                        "description": "BootstrapToken describes one bootstrap token, stored as a Secret in the cluster.",
                        "type": "object",
                        "required": [
                          "token"
                        ],
                        "properties": {
                          "description": {
                            "description": "Description sets a human-friendly message why this token exists and what it's used\nfor, so other administrators can know its purpose.",
                            "type": "string"
                          },
                          "expires": {
                            "description": "Expires specifies the timestamp when this token expires. Defaults to being set\ndynamically at runtime based on the TTL. Expires and TTL are mutually exclusive.",
                            "type": "string",
                            "format": "date-time"
                          },
                          "groups": {
                            "description": "Groups specifies the extra groups that this token will authenticate as when/if\nused for authentication",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "token": {
                            "description": "Token is used for establishing bidirectional trust between nodes and control-planes.\nUsed for joining nodes in the cluster.",
                            "type": "string"
                          },
                          "ttl": {
                            "description": "TTL defines the time to live for this token. Defaults to 24h.\nExpires and TTL are mutually exclusive.",
                            "type": "string"
                          },
                          "usages": {
                            "description": "Usages describes the ways in which this token can be used. Can by default be used\nfor establishing bidirectional trust, but that can be changed here.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "kind": {
                      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "localAPIEndpoint": {
                      "description": "LocalAPIEndpoint represents the endpoint of the API server instance that's deployed on this control plane node\nIn HA setups, this differs from ClusterConfiguration.ControlPlaneEndpoint in the sense that ControlPlaneEndpoint\nis the global endpoint for the cluster, which then loadbalances the requests to each individual API server. This\nconfiguration object lets you customize what IP/DNS name and port the local API server advertises it's accessible\non. By default, kubeadm tries to auto-detect the IP of the default interface and use that, but in case that process\nfails you may set the desired value here.",
                      "type": "object",
                      "required": [
                        "advertiseAddress",
                        "bindPort"
                      ],
                      "properties": {
                        "advertiseAddress": {
                          "description": "AdvertiseAddress sets the IP address for the API server to advertise.",
                          "type": "string"
                        },
                        "bindPort": {
                          "description": "BindPort sets the secure port for the API Server to bind to.\nDefaults to 6443.",
                          "type": "integer",
                          "format": "int32"
                        }
                      },
                      "additionalProperties": false
                    },
                    "nodeRegistration": {
                      "description": "NodeRegistration holds fields that relate to registering the new control-plane node to the cluster.\nWhen used in the context of control plane nodes, NodeRegistration should remain consistent\nacross both InitConfiguration and JoinConfiguration",
                      "type": "object",
                      "properties": {
                        "criSocket": {
                          "description": "CRISocket is used to retrieve container runtime info. This information will be annotated to the Node API object, for later re-use",
                          "type": "string"
                        },
                        "kubeletExtraArgs": {
                          "description": "KubeletExtraArgs passes through extra arguments to the kubelet. The arguments here are passed to the kubelet command line via the environment file\nkubeadm writes at runtime for the kubelet to source. This overrides the generic base-level configuration in the kubelet-config-1.X ConfigMap\nFlags have higher priority when parsing. These values are local and specific to the node kubeadm is executing on.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "name": {
                          "description": "Name is the `.Metadata.Name` field of the Node API object that will be created in this `kubeadm init` or `kubeadm join` operation.\nThis field is also used in the CommonName field of the kubelet's client certificate to the API server.\nDefaults to the hostname of the node if not provided.",
                          "type": "string"
                        },
                        "taints": {
                          "description": "Taints specifies the taints the Node API object should be registered with. If this field is unset, i.e. nil, in the `kubeadm init` process\nit will be defaulted to []v1.Taint{'node-role.kubernetes.io/master=\"\"'}. If you don't want to taint your control-plane node, set this field to an\nempty slice, i.e. `taints: {}` in the YAML file. This field is solely used for Node registration.",
                          "type": "array",
                          "items": {
                            "description": "The node this Taint is attached to has the \"effect\" on\nany pod that does not tolerate the Taint.",
                            "type": "object",
                            "required": [
                              "effect",
                              "key"
                            ],
                            "properties": {
                              "effect": {
                                "description": "Required. The effect of the taint on pods\nthat do not tolerate the taint.\nValid effects are NoSchedule, PreferNoSchedule and NoExecute.",
                                "type": "string"
                              },
                              "key": {
                                "description": "Required. The taint key to be applied to a node.",
                                "type": "string"
                              },
                              "timeAdded": {
                                "description": "TimeAdded represents the time at which the taint was added.\nIt is only written for NoExecute taints.",
                                "type": "string",
                                "format": "date-time"
                              },
                              "value": {
                                "description": "The taint value corresponding to the taint key.",
                                "type": "string"
                              }
                            },
                            "additionalProperties": false
                          }
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "joinConfiguration": {
                  "description": "joinConfiguration is the kubeadm configuration for the join command",
                  "type": "object",
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                      "type": "string"
                    },
                    "caCertPath": {
                      "description": "CACertPath is the path to the SSL certificate authority used to\nsecure comunications between node and control-plane.\nDefaults to \"/etc/kubernetes/pki/ca.crt\".",
                      "type": "string"
                    },
                    "controlPlane": {
                      "description": "ControlPlane defines the additional control plane instance to be deployed on the joining node.\nIf nil, no additional control plane instance will be deployed.",
                      "type": "object",
                      "properties": {
                        "localAPIEndpoint": {
                          "description": "LocalAPIEndpoint represents the endpoint of the API server instance to be deployed on this node.",
                          "type": "object",
                          "required": [
                            "advertiseAddress",
                            "bindPort"
                          ],
                          "properties": {
                            "advertiseAddress": {
                              "description": "AdvertiseAddress sets the IP address for the API server to advertise.",
                              "type": "string"
                            },
                            "bindPort": {
                              "description": "BindPort sets the secure port for the API Server to bind to.\nDefaults to 6443.",
                              "type": "integer",
                              "format": "int32"
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    },
                    "discovery": {
                      "description": "Discovery specifies the options for the kubelet to use during the TLS Bootstrap process",
                      "type": "object",
                      "properties": {
                        "bootstrapToken": {
                          "description": "BootstrapToken is used to set the options for bootstrap token based discovery\nBootstrapToken and File are mutually exclusive",
                          "type": "object",
                          "required": [
                            "token",
                            "unsafeSkipCAVerification"
                          ],
                          "properties": {
                            "apiServerEndpoint": {
                              "description": "APIServerEndpoint is an IP or domain name to the API server from which info will be fetched.",
                              "type": "string"
                            },
                            "caCertHashes": {
                              "description": "CACertHashes specifies a set of public key pins to verify\nwhen token-based discovery is used. The root CA found during discovery\nmust match one of these values. Specifying an empty set disables root CA\npinning, which can be unsafe. Each hash is specified as \"\u003ctype\u003e:\u003cvalue\u003e\",\nwhere the only currently supported type is \"sha256\". This is a hex-encoded\nSHA-256 hash of the Subject Public Key Info (SPKI) object in DER-encoded\nASN.1. These hashes can be calculated using, for example, OpenSSL:\nopenssl x509 -pubkey -in ca.crt openssl rsa -pubin -outform der 2\u003e\u0026/dev/null | openssl dgst -sha256 -hex",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "token": {
                              "description": "Token is a token used to validate cluster information\nfetched from the control-plane.",
                              "type": "string"
                            },
                            "unsafeSkipCAVerification": {
                              "description": "UnsafeSkipCAVerification allows token-based discovery\nwithout CA verification via CACertHashes. This can weaken\nthe security of kubeadm since other nodes can impersonate the control-plane.",
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "file": {
                          "description": "File is used to specify a file or URL to a kubeconfig file from which to load cluster information\nBootstrapToken and File are mutually exclusive",
                          "type": "object",
                          "required": [
                            "kubeConfigPath"
                          ],
                          "properties": {
                            "kubeConfigPath": {
                              "description": "KubeConfigPath is used to specify the actual file path or URL to the kubeconfig file from which to load cluster information",
                              "type": "string"
                            }
                          },
                          "additionalProperties": false
                        },
                        "timeout": {
                          "description": "Timeout modifies the discovery timeout",
                          "type": "string"
                        },
                        "tlsBootstrapToken": {
                          "description": "TLSBootstrapToken is a token used for TLS bootstrapping.\nIf .BootstrapToken is set, this field is defaulted to .BootstrapToken.Token, but can be overridden.\nIf .File is set, this field **must be set** in case the KubeConfigFile does not contain any other authentication information",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    },
                    "kind": {
                      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "nodeRegistration": {
                      "description": "NodeRegistration holds fields that relate to registering the new control-plane node to the cluster.\nWhen used in the context of control plane nodes, NodeRegistration should remain consistent\nacross both InitConfiguration and JoinConfiguration",
                      "type": "object",
                      "properties": {
                        "criSocket": {
                          "description": "CRISocket is used to retrieve container runtime info. This information will be annotated to the Node API object, for later re-use",
                          "type": "string"
                        },
                        "kubeletExtraArgs": {
                          "description": "KubeletExtraArgs passes through extra arguments to the kubelet. The arguments here are passed to the kubelet command line via the environment file\nkubeadm writes at runtime for the kubelet to source. This overrides the generic base-level configuration in the kubelet-config-1.X ConfigMap\nFlags have higher priority when parsing. These values are local and specific to the node kubeadm is executing on.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "name": {
                          "description": "Name is the `.Metadata.Name` field of the Node API object that will be created in this `kubeadm init` or `kubeadm join` operation.\nThis field is also used in the CommonName field of the kubelet's client certificate to the API server.\nDefaults to the hostname of the node if not provided.",
                          "type": "string"
                        },
                        "taints": {
                          "description": "Taints specifies the taints the Node API object should be registered with. If this field is unset, i.e. nil, in the `kubeadm init` process\nit will be defaulted to []v1.Taint{'node-role.kubernetes.io/master=\"\"'}. If you don't want to taint your control-plane node, set this field to an\nempty slice, i.e. `taints: {}` in the YAML file. This field is solely used for Node registration.",
                          "type": "array",
                          "items": {
                            "description": "The node this Taint is attached to has the \"effect\" on\nany pod that does not tolerate the Taint.",
                            "type": "object",
                            "required": [
                              "effect",
                              "key"
                            ],
                            "properties": {
                              "effect": {
                                "description": "Required. The effect of the taint on pods\nthat do not tolerate the taint.\nValid effects are NoSchedule, PreferNoSchedule and NoExecute.",
                                "type": "string"
                              },
                              "key": {
                                "description": "Required. The taint key to be applied to a node.",
                                "type": "string"
                              },
                              "timeAdded": {
                                "description": "TimeAdded represents the time at which the taint was added.\nIt is only written for NoExecute taints.",
                                "type": "string",
                                "format": "date-time"
                              },
                              "value": {
                                "description": "The taint value corresponding to the taint key.",
                                "type": "string"
                              }
                            },
                            "additionalProperties": false
                          }
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "mounts": {
                  "description": "mounts specifies a list of mount points to be setup.",
                  "type": "array",
                  "items": {
                    "description": "MountPoints defines input for generated mounts in cloud-init.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "ntp": {
                  "description": "ntp specifies NTP configuration",
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "description": "enabled specifies whether NTP should be enabled",
                      "type": "boolean"
                    },
                    "servers": {
                      "description": "servers specifies which NTP servers to use",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "additionalProperties": false
                },
                "postKubeadmCommands": {
                  "description": "postKubeadmCommands specifies extra commands to run after kubeadm runs",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "preKubeadmCommands": {
                  "description": "preKubeadmCommands specifies extra commands to run before kubeadm runs",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "useExperimentalRetryJoin": {
                  "description": "useExperimentalRetryJoin replaces a basic kubeadm command with a shell\nscript with retries for joins.\n\nThis is meant to be an experimental temporary workaround on some environments\nwhere joins fail due to timing (and other issues). The long term goal is to add retries to\nkubeadm proper and use that functionality.\n\nThis will add about 40KB to userdata\n\nFor more information, refer to https://github.com/kubernetes-sigs/cluster-api/pull/2763#discussion_r397306055.",
                  "type": "boolean"
                },
                "users": {
                  "description": "users specifies extra users to add",
                  "type": "array",
                  "items": {
                    "description": "User defines the input for a generated user in cloud-init.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "gecos": {
                        "description": "gecos specifies the gecos to use for the user",
                        "type": "string"
                      },
                      "groups": {
                        "description": "groups specifies the additional groups for the user",
                        "type": "string"
                      },
                      "homeDir": {
                        "description": "homeDir specifies the home directory to use for the user",
                        "type": "string"
                      },
                      "inactive": {
                        "description": "inactive specifies whether to mark the user as inactive",
                        "type": "boolean"
                      },
                      "lockPassword": {
                        "description": "lockPassword specifies if password login should be disabled",
                        "type": "boolean"
                      },
                      "name": {
                        "description": "name specifies the user name",
                        "type": "string"
                      },
                      "passwd": {
                        "description": "passwd specifies a hashed password for the user",
                        "type": "string"
                      },
                      "primaryGroup": {
                        "description": "primaryGroup specifies the primary group for the user",
                        "type": "string"
                      },
                      "shell": {
                        "description": "shell specifies the user's shell",
                        "type": "string"
                      },
                      "sshAuthorizedKeys": {
                        "description": "sshAuthorizedKeys specifies a list of ssh authorized keys for the user",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "sudo": {
                        "description": "sudo specifies a sudo role for the user",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "verbosity": {
                  "description": "verbosity is the number for the kubeadm log level verbosity.\nIt overrides the `--v` flag in kubeadm commands.",
                  "type": "integer",
                  "format": "int32"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  }
}
