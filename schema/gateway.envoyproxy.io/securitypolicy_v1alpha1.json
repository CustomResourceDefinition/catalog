{
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "type": "string"
    },
    "kind": {
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "type": "object",
      "properties": {
        "apiKeyAuth": {
          "type": "object",
          "required": [
            "credentialRefs",
            "extractFrom"
          ],
          "properties": {
            "credentialRefs": {
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "group": {
                    "type": "string",
                    "default": "",
                    "maxLength": 253,
                    "pattern": "^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
                  },
                  "kind": {
                    "type": "string",
                    "default": "Secret",
                    "maxLength": 63,
                    "minLength": 1,
                    "pattern": "^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"
                  },
                  "name": {
                    "type": "string",
                    "maxLength": 253,
                    "minLength": 1
                  },
                  "namespace": {
                    "type": "string",
                    "maxLength": 63,
                    "minLength": 1,
                    "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                  }
                },
                "additionalProperties": false
              }
            },
            "extractFrom": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "cookies": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "headers": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "params": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "forwardClientIDHeader": {
              "type": "string"
            },
            "sanitize": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        },
        "authorization": {
          "type": "object",
          "properties": {
            "defaultAction": {
              "type": "string",
              "enum": [
                "Allow",
                "Deny"
              ]
            },
            "rules": {
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "action",
                  "principal"
                ],
                "properties": {
                  "action": {
                    "type": "string",
                    "enum": [
                      "Allow",
                      "Deny"
                    ]
                  },
                  "name": {
                    "type": "string",
                    "maxLength": 253,
                    "minLength": 1
                  },
                  "operation": {
                    "type": "object",
                    "required": [
                      "methods"
                    ],
                    "properties": {
                      "methods": {
                        "type": "array",
                        "maxItems": 16,
                        "minItems": 1,
                        "items": {
                          "type": "string",
                          "enum": [
                            "GET",
                            "HEAD",
                            "POST",
                            "PUT",
                            "DELETE",
                            "CONNECT",
                            "OPTIONS",
                            "TRACE",
                            "PATCH"
                          ]
                        }
                      }
                    },
                    "additionalProperties": false
                  },
                  "principal": {
                    "type": "object",
                    "properties": {
                      "clientCIDRs": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "string",
                          "pattern": "((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\/([0-9]+))|((([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\\/([0-9]+))"
                        }
                      },
                      "headers": {
                        "type": "array",
                        "maxItems": 256,
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "required": [
                            "name",
                            "values"
                          ],
                          "properties": {
                            "name": {
                              "type": "string",
                              "maxLength": 256,
                              "minLength": 1
                            },
                            "values": {
                              "type": "array",
                              "maxItems": 256,
                              "minItems": 1,
                              "items": {
                                "type": "string"
                              }
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "jwt": {
                        "type": "object",
                        "required": [
                          "provider"
                        ],
                        "properties": {
                          "claims": {
                            "type": "array",
                            "maxItems": 16,
                            "minItems": 1,
                            "items": {
                              "type": "object",
                              "required": [
                                "name",
                                "values"
                              ],
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "maxLength": 253,
                                  "minLength": 1
                                },
                                "valueType": {
                                  "type": "string",
                                  "default": "String",
                                  "enum": [
                                    "String",
                                    "StringArray"
                                  ]
                                },
                                "values": {
                                  "type": "array",
                                  "maxItems": 16,
                                  "minItems": 1,
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              },
                              "additionalProperties": false
                            }
                          },
                          "provider": {
                            "type": "string",
                            "maxLength": 253,
                            "minLength": 1
                          },
                          "scopes": {
                            "type": "array",
                            "maxItems": 16,
                            "minItems": 1,
                            "items": {
                              "type": "string",
                              "maxLength": 253,
                              "minLength": 1
                            }
                          }
                        },
                        "additionalProperties": false,
                        "x-kubernetes-validations": [
                          {
                            "rule": "(has(self.claims) || has(self.scopes))",
                            "message": "at least one of claims or scopes must be specified"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false,
                    "x-kubernetes-validations": [
                      {
                        "rule": "(has(self.clientCIDRs) || has(self.jwt) || has(self.headers))",
                        "message": "at least one of clientCIDRs, jwt, or headers must be specified"
                      }
                    ]
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "additionalProperties": false
        },
        "basicAuth": {
          "type": "object",
          "required": [
            "users"
          ],
          "properties": {
            "forwardUsernameHeader": {
              "type": "string"
            },
            "users": {
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "group": {
                  "type": "string",
                  "default": "",
                  "maxLength": 253,
                  "pattern": "^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
                },
                "kind": {
                  "type": "string",
                  "default": "Secret",
                  "maxLength": 63,
                  "minLength": 1,
                  "pattern": "^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"
                },
                "name": {
                  "type": "string",
                  "maxLength": 253,
                  "minLength": 1
                },
                "namespace": {
                  "type": "string",
                  "maxLength": 63,
                  "minLength": 1,
                  "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "cors": {
          "type": "object",
          "properties": {
            "allowCredentials": {
              "type": "boolean"
            },
            "allowHeaders": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "allowMethods": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "allowOrigins": {
              "type": "array",
              "items": {
                "type": "string",
                "maxLength": 253,
                "minLength": 1,
                "pattern": "^(\\*|https?:\\/\\/(\\*|(\\*\\.)?(([\\w-]+\\.?)+)?[\\w-]+)(:\\d{1,5})?)$"
              }
            },
            "exposeHeaders": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "maxAge": {
              "type": "string",
              "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
            }
          },
          "additionalProperties": false
        },
        "extAuth": {
          "type": "object",
          "properties": {
            "bodyToExtAuth": {
              "type": "object",
              "required": [
                "maxRequestBytes"
              ],
              "properties": {
                "maxRequestBytes": {
                  "type": "integer",
                  "format": "int32",
                  "minimum": 1
                }
              },
              "additionalProperties": false
            },
            "failOpen": {
              "type": "boolean",
              "default": false
            },
            "grpc": {
              "type": "object",
              "properties": {
                "backendRef": {
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "group": {
                      "type": "string",
                      "default": "",
                      "maxLength": 253,
                      "pattern": "^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
                    },
                    "kind": {
                      "type": "string",
                      "default": "Service",
                      "maxLength": 63,
                      "minLength": 1,
                      "pattern": "^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"
                    },
                    "name": {
                      "type": "string",
                      "maxLength": 253,
                      "minLength": 1
                    },
                    "namespace": {
                      "type": "string",
                      "maxLength": 63,
                      "minLength": 1,
                      "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                    },
                    "port": {
                      "type": "integer",
                      "format": "int32",
                      "maximum": 65535,
                      "minimum": 1
                    }
                  },
                  "additionalProperties": false,
                  "x-kubernetes-validations": [
                    {
                      "rule": "(size(self.group) == 0 \u0026\u0026 self.kind == 'Service') ? has(self.port) : true",
                      "message": "Must have port for Service reference"
                    }
                  ]
                },
                "backendRefs": {
                  "type": "array",
                  "maxItems": 16,
                  "items": {
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "fallback": {
                        "type": "boolean"
                      },
                      "group": {
                        "type": "string",
                        "default": "",
                        "maxLength": 253,
                        "pattern": "^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
                      },
                      "kind": {
                        "type": "string",
                        "default": "Service",
                        "maxLength": 63,
                        "minLength": 1,
                        "pattern": "^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"
                      },
                      "name": {
                        "type": "string",
                        "maxLength": 253,
                        "minLength": 1
                      },
                      "namespace": {
                        "type": "string",
                        "maxLength": 63,
                        "minLength": 1,
                        "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                      },
                      "port": {
                        "type": "integer",
                        "format": "int32",
                        "maximum": 65535,
                        "minimum": 1
                      }
                    },
                    "additionalProperties": false,
                    "x-kubernetes-validations": [
                      {
                        "rule": "(size(self.group) == 0 \u0026\u0026 self.kind == 'Service') ? has(self.port) : true",
                        "message": "Must have port for Service reference"
                      }
                    ]
                  }
                },
                "backendSettings": {
                  "type": "object",
                  "properties": {
                    "circuitBreaker": {
                      "type": "object",
                      "properties": {
                        "maxConnections": {
                          "type": "integer",
                          "format": "int64",
                          "default": 1024,
                          "maximum": 4294967295,
                          "minimum": 0
                        },
                        "maxParallelRequests": {
                          "type": "integer",
                          "format": "int64",
                          "default": 1024,
                          "maximum": 4294967295,
                          "minimum": 0
                        },
                        "maxParallelRetries": {
                          "type": "integer",
                          "format": "int64",
                          "default": 1024,
                          "maximum": 4294967295,
                          "minimum": 0
                        },
                        "maxPendingRequests": {
                          "type": "integer",
                          "format": "int64",
                          "default": 1024,
                          "maximum": 4294967295,
                          "minimum": 0
                        },
                        "maxRequestsPerConnection": {
                          "type": "integer",
                          "format": "int64",
                          "maximum": 4294967295,
                          "minimum": 0
                        },
                        "perEndpoint": {
                          "type": "object",
                          "properties": {
                            "maxConnections": {
                              "type": "integer",
                              "format": "int64",
                              "default": 1024,
                              "maximum": 4294967295,
                              "minimum": 0
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    },
                    "connection": {
                      "type": "object",
                      "properties": {
                        "bufferLimit": {
                          "allOf": [
                            {
                              "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"
                            },
                            {
                              "pattern": "^[1-9]+[0-9]*([EPTGMK]i|[EPTGMk])?$"
                            }
                          ],
                          "anyOf": [
                            {
                              "type": "integer"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "x-kubernetes-int-or-string": true
                        },
                        "socketBufferLimit": {
                          "allOf": [
                            {
                              "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"
                            },
                            {
                              "pattern": "^[1-9]+[0-9]*([EPTGMK]i|[EPTGMk])?$"
                            }
                          ],
                          "anyOf": [
                            {
                              "type": "integer"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "x-kubernetes-int-or-string": true
                        }
                      },
                      "additionalProperties": false
                    },
                    "dns": {
                      "type": "object",
                      "properties": {
                        "dnsRefreshRate": {
                          "type": "string",
                          "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                        },
                        "lookupFamily": {
                          "type": "string",
                          "enum": [
                            "IPv4",
                            "IPv6",
                            "IPv4Preferred",
                            "IPv6Preferred",
                            "IPv4AndIPv6"
                          ]
                        },
                        "respectDnsTtl": {
                          "type": "boolean"
                        }
                      },
                      "additionalProperties": false
                    },
                    "healthCheck": {
                      "type": "object",
                      "properties": {
                        "active": {
                          "type": "object",
                          "required": [
                            "type"
                          ],
                          "properties": {
                            "grpc": {
                              "type": "object",
                              "properties": {
                                "service": {
                                  "type": "string"
                                }
                              },
                              "additionalProperties": false
                            },
                            "healthyThreshold": {
                              "type": "integer",
                              "format": "int32",
                              "default": 1,
                              "minimum": 1
                            },
                            "http": {
                              "type": "object",
                              "required": [
                                "path"
                              ],
                              "properties": {
                                "expectedResponse": {
                                  "type": "object",
                                  "required": [
                                    "type"
                                  ],
                                  "properties": {
                                    "binary": {
                                      "type": "string",
                                      "format": "byte"
                                    },
                                    "text": {
                                      "type": "string"
                                    },
                                    "type": {
                                      "type": "string",
                                      "allOf": [
                                        {
                                          "enum": [
                                            "Text",
                                            "Binary"
                                          ]
                                        },
                                        {
                                          "enum": [
                                            "Text",
                                            "Binary"
                                          ]
                                        }
                                      ]
                                    }
                                  },
                                  "additionalProperties": false,
                                  "x-kubernetes-validations": [
                                    {
                                      "rule": "self.type == 'Text' ? has(self.text) : !has(self.text)",
                                      "message": "If payload type is Text, text field needs to be set."
                                    },
                                    {
                                      "rule": "self.type == 'Binary' ? has(self.binary) : !has(self.binary)",
                                      "message": "If payload type is Binary, binary field needs to be set."
                                    }
                                  ]
                                },
                                "expectedStatuses": {
                                  "type": "array",
                                  "items": {
                                    "type": "integer",
                                    "maximum": 600,
                                    "exclusiveMaximum": true,
                                    "minimum": 100
                                  }
                                },
                                "hostname": {
                                  "type": "string",
                                  "maxLength": 253,
                                  "minLength": 1,
                                  "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
                                },
                                "method": {
                                  "type": "string"
                                },
                                "path": {
                                  "type": "string",
                                  "maxLength": 1024,
                                  "minLength": 1
                                }
                              },
                              "additionalProperties": false
                            },
                            "initialJitter": {
                              "type": "string",
                              "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                            },
                            "interval": {
                              "type": "string",
                              "default": "3s",
                              "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                            },
                            "tcp": {
                              "type": "object",
                              "properties": {
                                "receive": {
                                  "type": "object",
                                  "required": [
                                    "type"
                                  ],
                                  "properties": {
                                    "binary": {
                                      "type": "string",
                                      "format": "byte"
                                    },
                                    "text": {
                                      "type": "string"
                                    },
                                    "type": {
                                      "type": "string",
                                      "allOf": [
                                        {
                                          "enum": [
                                            "Text",
                                            "Binary"
                                          ]
                                        },
                                        {
                                          "enum": [
                                            "Text",
                                            "Binary"
                                          ]
                                        }
                                      ]
                                    }
                                  },
                                  "additionalProperties": false,
                                  "x-kubernetes-validations": [
                                    {
                                      "rule": "self.type == 'Text' ? has(self.text) : !has(self.text)",
                                      "message": "If payload type is Text, text field needs to be set."
                                    },
                                    {
                                      "rule": "self.type == 'Binary' ? has(self.binary) : !has(self.binary)",
                                      "message": "If payload type is Binary, binary field needs to be set."
                                    }
                                  ]
                                },
                                "send": {
                                  "type": "object",
                                  "required": [
                                    "type"
                                  ],
                                  "properties": {
                                    "binary": {
                                      "type": "string",
                                      "format": "byte"
                                    },
                                    "text": {
                                      "type": "string"
                                    },
                                    "type": {
                                      "type": "string",
                                      "allOf": [
                                        {
                                          "enum": [
                                            "Text",
                                            "Binary"
                                          ]
                                        },
                                        {
                                          "enum": [
                                            "Text",
                                            "Binary"
                                          ]
                                        }
                                      ]
                                    }
                                  },
                                  "additionalProperties": false,
                                  "x-kubernetes-validations": [
                                    {
                                      "rule": "self.type == 'Text' ? has(self.text) : !has(self.text)",
                                      "message": "If payload type is Text, text field needs to be set."
                                    },
                                    {
                                      "rule": "self.type == 'Binary' ? has(self.binary) : !has(self.binary)",
                                      "message": "If payload type is Binary, binary field needs to be set."
                                    }
                                  ]
                                }
                              },
                              "additionalProperties": false
                            },
                            "timeout": {
                              "type": "string",
                              "default": "1s",
                              "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                            },
                            "type": {
                              "type": "string",
                              "allOf": [
                                {
                                  "enum": [
                                    "HTTP",
                                    "TCP",
                                    "GRPC"
                                  ]
                                },
                                {
                                  "enum": [
                                    "HTTP",
                                    "TCP",
                                    "GRPC"
                                  ]
                                }
                              ]
                            },
                            "unhealthyThreshold": {
                              "type": "integer",
                              "format": "int32",
                              "default": 3,
                              "minimum": 1
                            }
                          },
                          "additionalProperties": false,
                          "x-kubernetes-validations": [
                            {
                              "rule": "self.type == 'HTTP' ? has(self.http) : !has(self.http)",
                              "message": "If Health Checker type is HTTP, http field needs to be set."
                            },
                            {
                              "rule": "self.type == 'TCP' ? has(self.tcp) : !has(self.tcp)",
                              "message": "If Health Checker type is TCP, tcp field needs to be set."
                            },
                            {
                              "rule": "has(self.grpc) ? self.type == 'GRPC' : true",
                              "message": "The grpc field can only be set if the Health Checker type is GRPC."
                            }
                          ]
                        },
                        "panicThreshold": {
                          "type": "integer",
                          "format": "int32",
                          "maximum": 100,
                          "minimum": 0
                        },
                        "passive": {
                          "type": "object",
                          "properties": {
                            "baseEjectionTime": {
                              "type": "string",
                              "default": "30s",
                              "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                            },
                            "consecutive5XxErrors": {
                              "type": "integer",
                              "format": "int32",
                              "default": 5
                            },
                            "consecutiveGatewayErrors": {
                              "type": "integer",
                              "format": "int32",
                              "default": 0
                            },
                            "consecutiveLocalOriginFailures": {
                              "type": "integer",
                              "format": "int32",
                              "default": 5
                            },
                            "interval": {
                              "type": "string",
                              "default": "3s",
                              "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                            },
                            "maxEjectionPercent": {
                              "type": "integer",
                              "format": "int32",
                              "default": 10
                            },
                            "splitExternalLocalOriginErrors": {
                              "type": "boolean",
                              "default": false
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    },
                    "http2": {
                      "type": "object",
                      "properties": {
                        "initialConnectionWindowSize": {
                          "allOf": [
                            {
                              "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"
                            },
                            {
                              "pattern": "^[1-9]+[0-9]*([EPTGMK]i|[EPTGMk])?$"
                            }
                          ],
                          "anyOf": [
                            {
                              "type": "integer"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "x-kubernetes-int-or-string": true
                        },
                        "initialStreamWindowSize": {
                          "allOf": [
                            {
                              "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"
                            },
                            {
                              "pattern": "^[1-9]+[0-9]*([EPTGMK]i|[EPTGMk])?$"
                            }
                          ],
                          "anyOf": [
                            {
                              "type": "integer"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "x-kubernetes-int-or-string": true
                        },
                        "maxConcurrentStreams": {
                          "type": "integer",
                          "format": "int32",
                          "maximum": 2147483647,
                          "minimum": 1
                        },
                        "onInvalidMessage": {
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    },
                    "loadBalancer": {
                      "type": "object",
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "consistentHash": {
                          "type": "object",
                          "required": [
                            "type"
                          ],
                          "properties": {
                            "cookie": {
                              "type": "object",
                              "required": [
                                "name"
                              ],
                              "properties": {
                                "attributes": {
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                },
                                "name": {
                                  "type": "string"
                                },
                                "ttl": {
                                  "type": "string",
                                  "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                                }
                              },
                              "additionalProperties": false
                            },
                            "header": {
                              "type": "object",
                              "required": [
                                "name"
                              ],
                              "properties": {
                                "name": {
                                  "type": "string"
                                }
                              },
                              "additionalProperties": false
                            },
                            "tableSize": {
                              "type": "integer",
                              "format": "int64",
                              "default": 65537,
                              "maximum": 5000011,
                              "minimum": 2
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "SourceIP",
                                "Header",
                                "Cookie"
                              ]
                            }
                          },
                          "additionalProperties": false,
                          "x-kubernetes-validations": [
                            {
                              "rule": "self.type == 'Header' ? has(self.header) : !has(self.header)",
                              "message": "If consistent hash type is header, the header field must be set."
                            },
                            {
                              "rule": "self.type == 'Cookie' ? has(self.cookie) : !has(self.cookie)",
                              "message": "If consistent hash type is cookie, the cookie field must be set."
                            }
                          ]
                        },
                        "endpointOverride": {
                          "type": "object",
                          "required": [
                            "extractFrom"
                          ],
                          "properties": {
                            "extractFrom": {
                              "type": "array",
                              "maxItems": 10,
                              "minItems": 1,
                              "items": {
                                "type": "object",
                                "properties": {
                                  "header": {
                                    "type": "string"
                                  }
                                },
                                "additionalProperties": false
                              }
                            }
                          },
                          "additionalProperties": false
                        },
                        "slowStart": {
                          "type": "object",
                          "required": [
                            "window"
                          ],
                          "properties": {
                            "window": {
                              "type": "string",
                              "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                            }
                          },
                          "additionalProperties": false
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "ConsistentHash",
                            "LeastRequest",
                            "Random",
                            "RoundRobin"
                          ]
                        },
                        "zoneAware": {
                          "type": "object",
                          "properties": {
                            "preferLocal": {
                              "type": "object",
                              "properties": {
                                "force": {
                                  "type": "object",
                                  "properties": {
                                    "minEndpointsInZoneThreshold": {
                                      "type": "integer",
                                      "format": "int32"
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "minEndpointsThreshold": {
                                  "type": "integer",
                                  "format": "int64"
                                }
                              },
                              "additionalProperties": false
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false,
                      "x-kubernetes-validations": [
                        {
                          "rule": "self.type == 'ConsistentHash' ? has(self.consistentHash) : !has(self.consistentHash)",
                          "message": "If LoadBalancer type is consistentHash, consistentHash field needs to be set."
                        },
                        {
                          "rule": "self.type in ['Random', 'ConsistentHash'] ? !has(self.slowStart) : true ",
                          "message": "Currently SlowStart is only supported for RoundRobin and LeastRequest load balancers."
                        },
                        {
                          "rule": "self.type == 'ConsistentHash' ? !has(self.zoneAware) : true ",
                          "message": "Currently ZoneAware is only supported for LeastRequest, Random, and RoundRobin load balancers."
                        }
                      ]
                    },
                    "proxyProtocol": {
                      "type": "object",
                      "required": [
                        "version"
                      ],
                      "properties": {
                        "version": {
                          "type": "string",
                          "enum": [
                            "V1",
                            "V2"
                          ]
                        }
                      },
                      "additionalProperties": false
                    },
                    "retry": {
                      "type": "object",
                      "properties": {
                        "numAttemptsPerPriority": {
                          "type": "integer",
                          "format": "int32"
                        },
                        "numRetries": {
                          "type": "integer",
                          "format": "int32",
                          "default": 2,
                          "minimum": 0
                        },
                        "perRetry": {
                          "type": "object",
                          "properties": {
                            "backOff": {
                              "type": "object",
                              "properties": {
                                "baseInterval": {
                                  "type": "string",
                                  "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                                },
                                "maxInterval": {
                                  "type": "string",
                                  "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                                }
                              },
                              "additionalProperties": false
                            },
                            "timeout": {
                              "type": "string",
                              "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                            }
                          },
                          "additionalProperties": false
                        },
                        "retryOn": {
                          "type": "object",
                          "properties": {
                            "httpStatusCodes": {
                              "type": "array",
                              "items": {
                                "type": "integer",
                                "maximum": 600,
                                "exclusiveMaximum": true,
                                "minimum": 100
                              }
                            },
                            "triggers": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "enum": [
                                  "5xx",
                                  "gateway-error",
                                  "reset",
                                  "reset-before-request",
                                  "connect-failure",
                                  "retriable-4xx",
                                  "refused-stream",
                                  "retriable-status-codes",
                                  "cancelled",
                                  "deadline-exceeded",
                                  "internal",
                                  "resource-exhausted",
                                  "unavailable"
                                ]
                              }
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    },
                    "tcpKeepalive": {
                      "type": "object",
                      "properties": {
                        "idleTime": {
                          "type": "string",
                          "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                        },
                        "interval": {
                          "type": "string",
                          "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                        },
                        "probes": {
                          "type": "integer",
                          "format": "int32"
                        }
                      },
                      "additionalProperties": false
                    },
                    "timeout": {
                      "type": "object",
                      "properties": {
                        "http": {
                          "type": "object",
                          "properties": {
                            "connectionIdleTimeout": {
                              "type": "string",
                              "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                            },
                            "maxConnectionDuration": {
                              "type": "string",
                              "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                            },
                            "requestTimeout": {
                              "type": "string",
                              "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                            }
                          },
                          "additionalProperties": false
                        },
                        "tcp": {
                          "type": "object",
                          "properties": {
                            "connectTimeout": {
                              "type": "string",
                              "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false,
              "x-kubernetes-validations": [
                {
                  "rule": "has(self.backendRef) || self.backendRefs.size() \u003e 0",
                  "message": "backendRef or backendRefs needs to be set"
                },
                {
                  "rule": "has(self.backendRefs) ? self.backendRefs.all(f, f.kind == 'Service' || f.kind == 'ServiceImport' || f.kind == 'Backend') : true",
                  "message": "BackendRefs only supports Service, ServiceImport, and Backend kind."
                },
                {
                  "rule": "has(self.backendRefs) ? (self.backendRefs.all(f, f.group == \"\" || f.group == 'multicluster.x-k8s.io' || f.group == 'gateway.envoyproxy.io')) : true",
                  "message": "BackendRefs only supports Core, multicluster.x-k8s.io, and gateway.envoyproxy.io groups."
                }
              ]
            },
            "headersToExtAuth": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "http": {
              "type": "object",
              "properties": {
                "backendRef": {
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "group": {
                      "type": "string",
                      "default": "",
                      "maxLength": 253,
                      "pattern": "^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
                    },
                    "kind": {
                      "type": "string",
                      "default": "Service",
                      "maxLength": 63,
                      "minLength": 1,
                      "pattern": "^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"
                    },
                    "name": {
                      "type": "string",
                      "maxLength": 253,
                      "minLength": 1
                    },
                    "namespace": {
                      "type": "string",
                      "maxLength": 63,
                      "minLength": 1,
                      "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                    },
                    "port": {
                      "type": "integer",
                      "format": "int32",
                      "maximum": 65535,
                      "minimum": 1
                    }
                  },
                  "additionalProperties": false,
                  "x-kubernetes-validations": [
                    {
                      "rule": "(size(self.group) == 0 \u0026\u0026 self.kind == 'Service') ? has(self.port) : true",
                      "message": "Must have port for Service reference"
                    }
                  ]
                },
                "backendRefs": {
                  "type": "array",
                  "maxItems": 16,
                  "items": {
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "fallback": {
                        "type": "boolean"
                      },
                      "group": {
                        "type": "string",
                        "default": "",
                        "maxLength": 253,
                        "pattern": "^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
                      },
                      "kind": {
                        "type": "string",
                        "default": "Service",
                        "maxLength": 63,
                        "minLength": 1,
                        "pattern": "^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"
                      },
                      "name": {
                        "type": "string",
                        "maxLength": 253,
                        "minLength": 1
                      },
                      "namespace": {
                        "type": "string",
                        "maxLength": 63,
                        "minLength": 1,
                        "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                      },
                      "port": {
                        "type": "integer",
                        "format": "int32",
                        "maximum": 65535,
                        "minimum": 1
                      }
                    },
                    "additionalProperties": false,
                    "x-kubernetes-validations": [
                      {
                        "rule": "(size(self.group) == 0 \u0026\u0026 self.kind == 'Service') ? has(self.port) : true",
                        "message": "Must have port for Service reference"
                      }
                    ]
                  }
                },
                "backendSettings": {
                  "type": "object",
                  "properties": {
                    "circuitBreaker": {
                      "type": "object",
                      "properties": {
                        "maxConnections": {
                          "type": "integer",
                          "format": "int64",
                          "default": 1024,
                          "maximum": 4294967295,
                          "minimum": 0
                        },
                        "maxParallelRequests": {
                          "type": "integer",
                          "format": "int64",
                          "default": 1024,
                          "maximum": 4294967295,
                          "minimum": 0
                        },
                        "maxParallelRetries": {
                          "type": "integer",
                          "format": "int64",
                          "default": 1024,
                          "maximum": 4294967295,
                          "minimum": 0
                        },
                        "maxPendingRequests": {
                          "type": "integer",
                          "format": "int64",
                          "default": 1024,
                          "maximum": 4294967295,
                          "minimum": 0
                        },
                        "maxRequestsPerConnection": {
                          "type": "integer",
                          "format": "int64",
                          "maximum": 4294967295,
                          "minimum": 0
                        },
                        "perEndpoint": {
                          "type": "object",
                          "properties": {
                            "maxConnections": {
                              "type": "integer",
                              "format": "int64",
                              "default": 1024,
                              "maximum": 4294967295,
                              "minimum": 0
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    },
                    "connection": {
                      "type": "object",
                      "properties": {
                        "bufferLimit": {
                          "allOf": [
                            {
                              "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"
                            },
                            {
                              "pattern": "^[1-9]+[0-9]*([EPTGMK]i|[EPTGMk])?$"
                            }
                          ],
                          "anyOf": [
                            {
                              "type": "integer"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "x-kubernetes-int-or-string": true
                        },
                        "socketBufferLimit": {
                          "allOf": [
                            {
                              "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"
                            },
                            {
                              "pattern": "^[1-9]+[0-9]*([EPTGMK]i|[EPTGMk])?$"
                            }
                          ],
                          "anyOf": [
                            {
                              "type": "integer"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "x-kubernetes-int-or-string": true
                        }
                      },
                      "additionalProperties": false
                    },
                    "dns": {
                      "type": "object",
                      "properties": {
                        "dnsRefreshRate": {
                          "type": "string",
                          "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                        },
                        "lookupFamily": {
                          "type": "string",
                          "enum": [
                            "IPv4",
                            "IPv6",
                            "IPv4Preferred",
                            "IPv6Preferred",
                            "IPv4AndIPv6"
                          ]
                        },
                        "respectDnsTtl": {
                          "type": "boolean"
                        }
                      },
                      "additionalProperties": false
                    },
                    "healthCheck": {
                      "type": "object",
                      "properties": {
                        "active": {
                          "type": "object",
                          "required": [
                            "type"
                          ],
                          "properties": {
                            "grpc": {
                              "type": "object",
                              "properties": {
                                "service": {
                                  "type": "string"
                                }
                              },
                              "additionalProperties": false
                            },
                            "healthyThreshold": {
                              "type": "integer",
                              "format": "int32",
                              "default": 1,
                              "minimum": 1
                            },
                            "http": {
                              "type": "object",
                              "required": [
                                "path"
                              ],
                              "properties": {
                                "expectedResponse": {
                                  "type": "object",
                                  "required": [
                                    "type"
                                  ],
                                  "properties": {
                                    "binary": {
                                      "type": "string",
                                      "format": "byte"
                                    },
                                    "text": {
                                      "type": "string"
                                    },
                                    "type": {
                                      "type": "string",
                                      "allOf": [
                                        {
                                          "enum": [
                                            "Text",
                                            "Binary"
                                          ]
                                        },
                                        {
                                          "enum": [
                                            "Text",
                                            "Binary"
                                          ]
                                        }
                                      ]
                                    }
                                  },
                                  "additionalProperties": false,
                                  "x-kubernetes-validations": [
                                    {
                                      "rule": "self.type == 'Text' ? has(self.text) : !has(self.text)",
                                      "message": "If payload type is Text, text field needs to be set."
                                    },
                                    {
                                      "rule": "self.type == 'Binary' ? has(self.binary) : !has(self.binary)",
                                      "message": "If payload type is Binary, binary field needs to be set."
                                    }
                                  ]
                                },
                                "expectedStatuses": {
                                  "type": "array",
                                  "items": {
                                    "type": "integer",
                                    "maximum": 600,
                                    "exclusiveMaximum": true,
                                    "minimum": 100
                                  }
                                },
                                "hostname": {
                                  "type": "string",
                                  "maxLength": 253,
                                  "minLength": 1,
                                  "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
                                },
                                "method": {
                                  "type": "string"
                                },
                                "path": {
                                  "type": "string",
                                  "maxLength": 1024,
                                  "minLength": 1
                                }
                              },
                              "additionalProperties": false
                            },
                            "initialJitter": {
                              "type": "string",
                              "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                            },
                            "interval": {
                              "type": "string",
                              "default": "3s",
                              "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                            },
                            "tcp": {
                              "type": "object",
                              "properties": {
                                "receive": {
                                  "type": "object",
                                  "required": [
                                    "type"
                                  ],
                                  "properties": {
                                    "binary": {
                                      "type": "string",
                                      "format": "byte"
                                    },
                                    "text": {
                                      "type": "string"
                                    },
                                    "type": {
                                      "type": "string",
                                      "allOf": [
                                        {
                                          "enum": [
                                            "Text",
                                            "Binary"
                                          ]
                                        },
                                        {
                                          "enum": [
                                            "Text",
                                            "Binary"
                                          ]
                                        }
                                      ]
                                    }
                                  },
                                  "additionalProperties": false,
                                  "x-kubernetes-validations": [
                                    {
                                      "rule": "self.type == 'Text' ? has(self.text) : !has(self.text)",
                                      "message": "If payload type is Text, text field needs to be set."
                                    },
                                    {
                                      "rule": "self.type == 'Binary' ? has(self.binary) : !has(self.binary)",
                                      "message": "If payload type is Binary, binary field needs to be set."
                                    }
                                  ]
                                },
                                "send": {
                                  "type": "object",
                                  "required": [
                                    "type"
                                  ],
                                  "properties": {
                                    "binary": {
                                      "type": "string",
                                      "format": "byte"
                                    },
                                    "text": {
                                      "type": "string"
                                    },
                                    "type": {
                                      "type": "string",
                                      "allOf": [
                                        {
                                          "enum": [
                                            "Text",
                                            "Binary"
                                          ]
                                        },
                                        {
                                          "enum": [
                                            "Text",
                                            "Binary"
                                          ]
                                        }
                                      ]
                                    }
                                  },
                                  "additionalProperties": false,
                                  "x-kubernetes-validations": [
                                    {
                                      "rule": "self.type == 'Text' ? has(self.text) : !has(self.text)",
                                      "message": "If payload type is Text, text field needs to be set."
                                    },
                                    {
                                      "rule": "self.type == 'Binary' ? has(self.binary) : !has(self.binary)",
                                      "message": "If payload type is Binary, binary field needs to be set."
                                    }
                                  ]
                                }
                              },
                              "additionalProperties": false
                            },
                            "timeout": {
                              "type": "string",
                              "default": "1s",
                              "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                            },
                            "type": {
                              "type": "string",
                              "allOf": [
                                {
                                  "enum": [
                                    "HTTP",
                                    "TCP",
                                    "GRPC"
                                  ]
                                },
                                {
                                  "enum": [
                                    "HTTP",
                                    "TCP",
                                    "GRPC"
                                  ]
                                }
                              ]
                            },
                            "unhealthyThreshold": {
                              "type": "integer",
                              "format": "int32",
                              "default": 3,
                              "minimum": 1
                            }
                          },
                          "additionalProperties": false,
                          "x-kubernetes-validations": [
                            {
                              "rule": "self.type == 'HTTP' ? has(self.http) : !has(self.http)",
                              "message": "If Health Checker type is HTTP, http field needs to be set."
                            },
                            {
                              "rule": "self.type == 'TCP' ? has(self.tcp) : !has(self.tcp)",
                              "message": "If Health Checker type is TCP, tcp field needs to be set."
                            },
                            {
                              "rule": "has(self.grpc) ? self.type == 'GRPC' : true",
                              "message": "The grpc field can only be set if the Health Checker type is GRPC."
                            }
                          ]
                        },
                        "panicThreshold": {
                          "type": "integer",
                          "format": "int32",
                          "maximum": 100,
                          "minimum": 0
                        },
                        "passive": {
                          "type": "object",
                          "properties": {
                            "baseEjectionTime": {
                              "type": "string",
                              "default": "30s",
                              "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                            },
                            "consecutive5XxErrors": {
                              "type": "integer",
                              "format": "int32",
                              "default": 5
                            },
                            "consecutiveGatewayErrors": {
                              "type": "integer",
                              "format": "int32",
                              "default": 0
                            },
                            "consecutiveLocalOriginFailures": {
                              "type": "integer",
                              "format": "int32",
                              "default": 5
                            },
                            "interval": {
                              "type": "string",
                              "default": "3s",
                              "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                            },
                            "maxEjectionPercent": {
                              "type": "integer",
                              "format": "int32",
                              "default": 10
                            },
                            "splitExternalLocalOriginErrors": {
                              "type": "boolean",
                              "default": false
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    },
                    "http2": {
                      "type": "object",
                      "properties": {
                        "initialConnectionWindowSize": {
                          "allOf": [
                            {
                              "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"
                            },
                            {
                              "pattern": "^[1-9]+[0-9]*([EPTGMK]i|[EPTGMk])?$"
                            }
                          ],
                          "anyOf": [
                            {
                              "type": "integer"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "x-kubernetes-int-or-string": true
                        },
                        "initialStreamWindowSize": {
                          "allOf": [
                            {
                              "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"
                            },
                            {
                              "pattern": "^[1-9]+[0-9]*([EPTGMK]i|[EPTGMk])?$"
                            }
                          ],
                          "anyOf": [
                            {
                              "type": "integer"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "x-kubernetes-int-or-string": true
                        },
                        "maxConcurrentStreams": {
                          "type": "integer",
                          "format": "int32",
                          "maximum": 2147483647,
                          "minimum": 1
                        },
                        "onInvalidMessage": {
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    },
                    "loadBalancer": {
                      "type": "object",
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "consistentHash": {
                          "type": "object",
                          "required": [
                            "type"
                          ],
                          "properties": {
                            "cookie": {
                              "type": "object",
                              "required": [
                                "name"
                              ],
                              "properties": {
                                "attributes": {
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                },
                                "name": {
                                  "type": "string"
                                },
                                "ttl": {
                                  "type": "string",
                                  "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                                }
                              },
                              "additionalProperties": false
                            },
                            "header": {
                              "type": "object",
                              "required": [
                                "name"
                              ],
                              "properties": {
                                "name": {
                                  "type": "string"
                                }
                              },
                              "additionalProperties": false
                            },
                            "tableSize": {
                              "type": "integer",
                              "format": "int64",
                              "default": 65537,
                              "maximum": 5000011,
                              "minimum": 2
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "SourceIP",
                                "Header",
                                "Cookie"
                              ]
                            }
                          },
                          "additionalProperties": false,
                          "x-kubernetes-validations": [
                            {
                              "rule": "self.type == 'Header' ? has(self.header) : !has(self.header)",
                              "message": "If consistent hash type is header, the header field must be set."
                            },
                            {
                              "rule": "self.type == 'Cookie' ? has(self.cookie) : !has(self.cookie)",
                              "message": "If consistent hash type is cookie, the cookie field must be set."
                            }
                          ]
                        },
                        "endpointOverride": {
                          "type": "object",
                          "required": [
                            "extractFrom"
                          ],
                          "properties": {
                            "extractFrom": {
                              "type": "array",
                              "maxItems": 10,
                              "minItems": 1,
                              "items": {
                                "type": "object",
                                "properties": {
                                  "header": {
                                    "type": "string"
                                  }
                                },
                                "additionalProperties": false
                              }
                            }
                          },
                          "additionalProperties": false
                        },
                        "slowStart": {
                          "type": "object",
                          "required": [
                            "window"
                          ],
                          "properties": {
                            "window": {
                              "type": "string",
                              "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                            }
                          },
                          "additionalProperties": false
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "ConsistentHash",
                            "LeastRequest",
                            "Random",
                            "RoundRobin"
                          ]
                        },
                        "zoneAware": {
                          "type": "object",
                          "properties": {
                            "preferLocal": {
                              "type": "object",
                              "properties": {
                                "force": {
                                  "type": "object",
                                  "properties": {
                                    "minEndpointsInZoneThreshold": {
                                      "type": "integer",
                                      "format": "int32"
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "minEndpointsThreshold": {
                                  "type": "integer",
                                  "format": "int64"
                                }
                              },
                              "additionalProperties": false
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false,
                      "x-kubernetes-validations": [
                        {
                          "rule": "self.type == 'ConsistentHash' ? has(self.consistentHash) : !has(self.consistentHash)",
                          "message": "If LoadBalancer type is consistentHash, consistentHash field needs to be set."
                        },
                        {
                          "rule": "self.type in ['Random', 'ConsistentHash'] ? !has(self.slowStart) : true ",
                          "message": "Currently SlowStart is only supported for RoundRobin and LeastRequest load balancers."
                        },
                        {
                          "rule": "self.type == 'ConsistentHash' ? !has(self.zoneAware) : true ",
                          "message": "Currently ZoneAware is only supported for LeastRequest, Random, and RoundRobin load balancers."
                        }
                      ]
                    },
                    "proxyProtocol": {
                      "type": "object",
                      "required": [
                        "version"
                      ],
                      "properties": {
                        "version": {
                          "type": "string",
                          "enum": [
                            "V1",
                            "V2"
                          ]
                        }
                      },
                      "additionalProperties": false
                    },
                    "retry": {
                      "type": "object",
                      "properties": {
                        "numAttemptsPerPriority": {
                          "type": "integer",
                          "format": "int32"
                        },
                        "numRetries": {
                          "type": "integer",
                          "format": "int32",
                          "default": 2,
                          "minimum": 0
                        },
                        "perRetry": {
                          "type": "object",
                          "properties": {
                            "backOff": {
                              "type": "object",
                              "properties": {
                                "baseInterval": {
                                  "type": "string",
                                  "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                                },
                                "maxInterval": {
                                  "type": "string",
                                  "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                                }
                              },
                              "additionalProperties": false
                            },
                            "timeout": {
                              "type": "string",
                              "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                            }
                          },
                          "additionalProperties": false
                        },
                        "retryOn": {
                          "type": "object",
                          "properties": {
                            "httpStatusCodes": {
                              "type": "array",
                              "items": {
                                "type": "integer",
                                "maximum": 600,
                                "exclusiveMaximum": true,
                                "minimum": 100
                              }
                            },
                            "triggers": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "enum": [
                                  "5xx",
                                  "gateway-error",
                                  "reset",
                                  "reset-before-request",
                                  "connect-failure",
                                  "retriable-4xx",
                                  "refused-stream",
                                  "retriable-status-codes",
                                  "cancelled",
                                  "deadline-exceeded",
                                  "internal",
                                  "resource-exhausted",
                                  "unavailable"
                                ]
                              }
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    },
                    "tcpKeepalive": {
                      "type": "object",
                      "properties": {
                        "idleTime": {
                          "type": "string",
                          "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                        },
                        "interval": {
                          "type": "string",
                          "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                        },
                        "probes": {
                          "type": "integer",
                          "format": "int32"
                        }
                      },
                      "additionalProperties": false
                    },
                    "timeout": {
                      "type": "object",
                      "properties": {
                        "http": {
                          "type": "object",
                          "properties": {
                            "connectionIdleTimeout": {
                              "type": "string",
                              "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                            },
                            "maxConnectionDuration": {
                              "type": "string",
                              "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                            },
                            "requestTimeout": {
                              "type": "string",
                              "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                            }
                          },
                          "additionalProperties": false
                        },
                        "tcp": {
                          "type": "object",
                          "properties": {
                            "connectTimeout": {
                              "type": "string",
                              "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "headersToBackend": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "path": {
                  "type": "string"
                }
              },
              "additionalProperties": false,
              "x-kubernetes-validations": [
                {
                  "rule": "has(self.backendRef) || self.backendRefs.size() \u003e 0",
                  "message": "backendRef or backendRefs needs to be set"
                },
                {
                  "rule": "has(self.backendRefs) ? self.backendRefs.all(f, f.kind == 'Service' || f.kind == 'ServiceImport' || f.kind == 'Backend') : true",
                  "message": "BackendRefs only supports Service, ServiceImport, and Backend kind."
                },
                {
                  "rule": "has(self.backendRefs) ? (self.backendRefs.all(f, f.group == \"\" || f.group == 'multicluster.x-k8s.io' || f.group == 'gateway.envoyproxy.io')) : true",
                  "message": "BackendRefs only supports Core, multicluster.x-k8s.io, and gateway.envoyproxy.io groups."
                }
              ]
            },
            "recomputeRoute": {
              "type": "boolean"
            }
          },
          "additionalProperties": false,
          "x-kubernetes-validations": [
            {
              "rule": "(has(self.grpc) || has(self.http))",
              "message": "one of grpc or http must be specified"
            },
            {
              "rule": "(has(self.grpc) \u0026\u0026 !has(self.http)) || (!has(self.grpc) \u0026\u0026 has(self.http))",
              "message": "only one of grpc or http can be specified"
            }
          ]
        },
        "jwt": {
          "type": "object",
          "required": [
            "providers"
          ],
          "properties": {
            "optional": {
              "type": "boolean"
            },
            "providers": {
              "type": "array",
              "maxItems": 4,
              "minItems": 1,
              "items": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "audiences": {
                    "type": "array",
                    "maxItems": 8,
                    "items": {
                      "type": "string"
                    }
                  },
                  "claimToHeaders": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "claim",
                        "header"
                      ],
                      "properties": {
                        "claim": {
                          "type": "string"
                        },
                        "header": {
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "extractFrom": {
                    "type": "object",
                    "properties": {
                      "cookies": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "headers": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "name"
                          ],
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "valuePrefix": {
                              "type": "string"
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "params": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "additionalProperties": false
                  },
                  "issuer": {
                    "type": "string",
                    "maxLength": 253
                  },
                  "localJWKS": {
                    "type": "object",
                    "required": [
                      "type"
                    ],
                    "properties": {
                      "inline": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string",
                        "default": "Inline",
                        "enum": [
                          "Inline",
                          "ValueRef"
                        ]
                      },
                      "valueRef": {
                        "type": "object",
                        "required": [
                          "group",
                          "kind",
                          "name"
                        ],
                        "properties": {
                          "group": {
                            "type": "string",
                            "maxLength": 253,
                            "pattern": "^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
                          },
                          "kind": {
                            "type": "string",
                            "maxLength": 63,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"
                          },
                          "name": {
                            "type": "string",
                            "maxLength": 253,
                            "minLength": 1
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false,
                    "x-kubernetes-validations": [
                      {
                        "rule": "(self.type == 'Inline' \u0026\u0026 has(self.inline) \u0026\u0026 !has(self.valueRef)) || (self.type == 'ValueRef' \u0026\u0026 !has(self.inline) \u0026\u0026 has(self.valueRef))",
                        "message": "Exactly one of inline or valueRef must be set with correct type."
                      }
                    ]
                  },
                  "name": {
                    "type": "string",
                    "maxLength": 253,
                    "minLength": 1
                  },
                  "recomputeRoute": {
                    "type": "boolean"
                  },
                  "remoteJWKS": {
                    "type": "object",
                    "required": [
                      "uri"
                    ],
                    "properties": {
                      "backendRef": {
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "group": {
                            "type": "string",
                            "default": "",
                            "maxLength": 253,
                            "pattern": "^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
                          },
                          "kind": {
                            "type": "string",
                            "default": "Service",
                            "maxLength": 63,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"
                          },
                          "name": {
                            "type": "string",
                            "maxLength": 253,
                            "minLength": 1
                          },
                          "namespace": {
                            "type": "string",
                            "maxLength": 63,
                            "minLength": 1,
                            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                          },
                          "port": {
                            "type": "integer",
                            "format": "int32",
                            "maximum": 65535,
                            "minimum": 1
                          }
                        },
                        "additionalProperties": false,
                        "x-kubernetes-validations": [
                          {
                            "rule": "(size(self.group) == 0 \u0026\u0026 self.kind == 'Service') ? has(self.port) : true",
                            "message": "Must have port for Service reference"
                          }
                        ]
                      },
                      "backendRefs": {
                        "type": "array",
                        "maxItems": 16,
                        "items": {
                          "type": "object",
                          "required": [
                            "name"
                          ],
                          "properties": {
                            "fallback": {
                              "type": "boolean"
                            },
                            "group": {
                              "type": "string",
                              "default": "",
                              "maxLength": 253,
                              "pattern": "^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
                            },
                            "kind": {
                              "type": "string",
                              "default": "Service",
                              "maxLength": 63,
                              "minLength": 1,
                              "pattern": "^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"
                            },
                            "name": {
                              "type": "string",
                              "maxLength": 253,
                              "minLength": 1
                            },
                            "namespace": {
                              "type": "string",
                              "maxLength": 63,
                              "minLength": 1,
                              "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                            },
                            "port": {
                              "type": "integer",
                              "format": "int32",
                              "maximum": 65535,
                              "minimum": 1
                            }
                          },
                          "additionalProperties": false,
                          "x-kubernetes-validations": [
                            {
                              "rule": "(size(self.group) == 0 \u0026\u0026 self.kind == 'Service') ? has(self.port) : true",
                              "message": "Must have port for Service reference"
                            }
                          ]
                        }
                      },
                      "backendSettings": {
                        "type": "object",
                        "properties": {
                          "circuitBreaker": {
                            "type": "object",
                            "properties": {
                              "maxConnections": {
                                "type": "integer",
                                "format": "int64",
                                "default": 1024,
                                "maximum": 4294967295,
                                "minimum": 0
                              },
                              "maxParallelRequests": {
                                "type": "integer",
                                "format": "int64",
                                "default": 1024,
                                "maximum": 4294967295,
                                "minimum": 0
                              },
                              "maxParallelRetries": {
                                "type": "integer",
                                "format": "int64",
                                "default": 1024,
                                "maximum": 4294967295,
                                "minimum": 0
                              },
                              "maxPendingRequests": {
                                "type": "integer",
                                "format": "int64",
                                "default": 1024,
                                "maximum": 4294967295,
                                "minimum": 0
                              },
                              "maxRequestsPerConnection": {
                                "type": "integer",
                                "format": "int64",
                                "maximum": 4294967295,
                                "minimum": 0
                              },
                              "perEndpoint": {
                                "type": "object",
                                "properties": {
                                  "maxConnections": {
                                    "type": "integer",
                                    "format": "int64",
                                    "default": 1024,
                                    "maximum": 4294967295,
                                    "minimum": 0
                                  }
                                },
                                "additionalProperties": false
                              }
                            },
                            "additionalProperties": false
                          },
                          "connection": {
                            "type": "object",
                            "properties": {
                              "bufferLimit": {
                                "allOf": [
                                  {
                                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"
                                  },
                                  {
                                    "pattern": "^[1-9]+[0-9]*([EPTGMK]i|[EPTGMk])?$"
                                  }
                                ],
                                "anyOf": [
                                  {
                                    "type": "integer"
                                  },
                                  {
                                    "type": "string"
                                  }
                                ],
                                "x-kubernetes-int-or-string": true
                              },
                              "socketBufferLimit": {
                                "allOf": [
                                  {
                                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"
                                  },
                                  {
                                    "pattern": "^[1-9]+[0-9]*([EPTGMK]i|[EPTGMk])?$"
                                  }
                                ],
                                "anyOf": [
                                  {
                                    "type": "integer"
                                  },
                                  {
                                    "type": "string"
                                  }
                                ],
                                "x-kubernetes-int-or-string": true
                              }
                            },
                            "additionalProperties": false
                          },
                          "dns": {
                            "type": "object",
                            "properties": {
                              "dnsRefreshRate": {
                                "type": "string",
                                "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                              },
                              "lookupFamily": {
                                "type": "string",
                                "enum": [
                                  "IPv4",
                                  "IPv6",
                                  "IPv4Preferred",
                                  "IPv6Preferred",
                                  "IPv4AndIPv6"
                                ]
                              },
                              "respectDnsTtl": {
                                "type": "boolean"
                              }
                            },
                            "additionalProperties": false
                          },
                          "healthCheck": {
                            "type": "object",
                            "properties": {
                              "active": {
                                "type": "object",
                                "required": [
                                  "type"
                                ],
                                "properties": {
                                  "grpc": {
                                    "type": "object",
                                    "properties": {
                                      "service": {
                                        "type": "string"
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  "healthyThreshold": {
                                    "type": "integer",
                                    "format": "int32",
                                    "default": 1,
                                    "minimum": 1
                                  },
                                  "http": {
                                    "type": "object",
                                    "required": [
                                      "path"
                                    ],
                                    "properties": {
                                      "expectedResponse": {
                                        "type": "object",
                                        "required": [
                                          "type"
                                        ],
                                        "properties": {
                                          "binary": {
                                            "type": "string",
                                            "format": "byte"
                                          },
                                          "text": {
                                            "type": "string"
                                          },
                                          "type": {
                                            "type": "string",
                                            "allOf": [
                                              {
                                                "enum": [
                                                  "Text",
                                                  "Binary"
                                                ]
                                              },
                                              {
                                                "enum": [
                                                  "Text",
                                                  "Binary"
                                                ]
                                              }
                                            ]
                                          }
                                        },
                                        "additionalProperties": false,
                                        "x-kubernetes-validations": [
                                          {
                                            "rule": "self.type == 'Text' ? has(self.text) : !has(self.text)",
                                            "message": "If payload type is Text, text field needs to be set."
                                          },
                                          {
                                            "rule": "self.type == 'Binary' ? has(self.binary) : !has(self.binary)",
                                            "message": "If payload type is Binary, binary field needs to be set."
                                          }
                                        ]
                                      },
                                      "expectedStatuses": {
                                        "type": "array",
                                        "items": {
                                          "type": "integer",
                                          "maximum": 600,
                                          "exclusiveMaximum": true,
                                          "minimum": 100
                                        }
                                      },
                                      "hostname": {
                                        "type": "string",
                                        "maxLength": 253,
                                        "minLength": 1,
                                        "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
                                      },
                                      "method": {
                                        "type": "string"
                                      },
                                      "path": {
                                        "type": "string",
                                        "maxLength": 1024,
                                        "minLength": 1
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  "initialJitter": {
                                    "type": "string",
                                    "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                                  },
                                  "interval": {
                                    "type": "string",
                                    "default": "3s",
                                    "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                                  },
                                  "tcp": {
                                    "type": "object",
                                    "properties": {
                                      "receive": {
                                        "type": "object",
                                        "required": [
                                          "type"
                                        ],
                                        "properties": {
                                          "binary": {
                                            "type": "string",
                                            "format": "byte"
                                          },
                                          "text": {
                                            "type": "string"
                                          },
                                          "type": {
                                            "type": "string",
                                            "allOf": [
                                              {
                                                "enum": [
                                                  "Text",
                                                  "Binary"
                                                ]
                                              },
                                              {
                                                "enum": [
                                                  "Text",
                                                  "Binary"
                                                ]
                                              }
                                            ]
                                          }
                                        },
                                        "additionalProperties": false,
                                        "x-kubernetes-validations": [
                                          {
                                            "rule": "self.type == 'Text' ? has(self.text) : !has(self.text)",
                                            "message": "If payload type is Text, text field needs to be set."
                                          },
                                          {
                                            "rule": "self.type == 'Binary' ? has(self.binary) : !has(self.binary)",
                                            "message": "If payload type is Binary, binary field needs to be set."
                                          }
                                        ]
                                      },
                                      "send": {
                                        "type": "object",
                                        "required": [
                                          "type"
                                        ],
                                        "properties": {
                                          "binary": {
                                            "type": "string",
                                            "format": "byte"
                                          },
                                          "text": {
                                            "type": "string"
                                          },
                                          "type": {
                                            "type": "string",
                                            "allOf": [
                                              {
                                                "enum": [
                                                  "Text",
                                                  "Binary"
                                                ]
                                              },
                                              {
                                                "enum": [
                                                  "Text",
                                                  "Binary"
                                                ]
                                              }
                                            ]
                                          }
                                        },
                                        "additionalProperties": false,
                                        "x-kubernetes-validations": [
                                          {
                                            "rule": "self.type == 'Text' ? has(self.text) : !has(self.text)",
                                            "message": "If payload type is Text, text field needs to be set."
                                          },
                                          {
                                            "rule": "self.type == 'Binary' ? has(self.binary) : !has(self.binary)",
                                            "message": "If payload type is Binary, binary field needs to be set."
                                          }
                                        ]
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  "timeout": {
                                    "type": "string",
                                    "default": "1s",
                                    "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                                  },
                                  "type": {
                                    "type": "string",
                                    "allOf": [
                                      {
                                        "enum": [
                                          "HTTP",
                                          "TCP",
                                          "GRPC"
                                        ]
                                      },
                                      {
                                        "enum": [
                                          "HTTP",
                                          "TCP",
                                          "GRPC"
                                        ]
                                      }
                                    ]
                                  },
                                  "unhealthyThreshold": {
                                    "type": "integer",
                                    "format": "int32",
                                    "default": 3,
                                    "minimum": 1
                                  }
                                },
                                "additionalProperties": false,
                                "x-kubernetes-validations": [
                                  {
                                    "rule": "self.type == 'HTTP' ? has(self.http) : !has(self.http)",
                                    "message": "If Health Checker type is HTTP, http field needs to be set."
                                  },
                                  {
                                    "rule": "self.type == 'TCP' ? has(self.tcp) : !has(self.tcp)",
                                    "message": "If Health Checker type is TCP, tcp field needs to be set."
                                  },
                                  {
                                    "rule": "has(self.grpc) ? self.type == 'GRPC' : true",
                                    "message": "The grpc field can only be set if the Health Checker type is GRPC."
                                  }
                                ]
                              },
                              "panicThreshold": {
                                "type": "integer",
                                "format": "int32",
                                "maximum": 100,
                                "minimum": 0
                              },
                              "passive": {
                                "type": "object",
                                "properties": {
                                  "baseEjectionTime": {
                                    "type": "string",
                                    "default": "30s",
                                    "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                                  },
                                  "consecutive5XxErrors": {
                                    "type": "integer",
                                    "format": "int32",
                                    "default": 5
                                  },
                                  "consecutiveGatewayErrors": {
                                    "type": "integer",
                                    "format": "int32",
                                    "default": 0
                                  },
                                  "consecutiveLocalOriginFailures": {
                                    "type": "integer",
                                    "format": "int32",
                                    "default": 5
                                  },
                                  "interval": {
                                    "type": "string",
                                    "default": "3s",
                                    "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                                  },
                                  "maxEjectionPercent": {
                                    "type": "integer",
                                    "format": "int32",
                                    "default": 10
                                  },
                                  "splitExternalLocalOriginErrors": {
                                    "type": "boolean",
                                    "default": false
                                  }
                                },
                                "additionalProperties": false
                              }
                            },
                            "additionalProperties": false
                          },
                          "http2": {
                            "type": "object",
                            "properties": {
                              "initialConnectionWindowSize": {
                                "allOf": [
                                  {
                                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"
                                  },
                                  {
                                    "pattern": "^[1-9]+[0-9]*([EPTGMK]i|[EPTGMk])?$"
                                  }
                                ],
                                "anyOf": [
                                  {
                                    "type": "integer"
                                  },
                                  {
                                    "type": "string"
                                  }
                                ],
                                "x-kubernetes-int-or-string": true
                              },
                              "initialStreamWindowSize": {
                                "allOf": [
                                  {
                                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"
                                  },
                                  {
                                    "pattern": "^[1-9]+[0-9]*([EPTGMK]i|[EPTGMk])?$"
                                  }
                                ],
                                "anyOf": [
                                  {
                                    "type": "integer"
                                  },
                                  {
                                    "type": "string"
                                  }
                                ],
                                "x-kubernetes-int-or-string": true
                              },
                              "maxConcurrentStreams": {
                                "type": "integer",
                                "format": "int32",
                                "maximum": 2147483647,
                                "minimum": 1
                              },
                              "onInvalidMessage": {
                                "type": "string"
                              }
                            },
                            "additionalProperties": false
                          },
                          "loadBalancer": {
                            "type": "object",
                            "required": [
                              "type"
                            ],
                            "properties": {
                              "consistentHash": {
                                "type": "object",
                                "required": [
                                  "type"
                                ],
                                "properties": {
                                  "cookie": {
                                    "type": "object",
                                    "required": [
                                      "name"
                                    ],
                                    "properties": {
                                      "attributes": {
                                        "type": "object",
                                        "additionalProperties": {
                                          "type": "string"
                                        }
                                      },
                                      "name": {
                                        "type": "string"
                                      },
                                      "ttl": {
                                        "type": "string",
                                        "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  "header": {
                                    "type": "object",
                                    "required": [
                                      "name"
                                    ],
                                    "properties": {
                                      "name": {
                                        "type": "string"
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  "tableSize": {
                                    "type": "integer",
                                    "format": "int64",
                                    "default": 65537,
                                    "maximum": 5000011,
                                    "minimum": 2
                                  },
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "SourceIP",
                                      "Header",
                                      "Cookie"
                                    ]
                                  }
                                },
                                "additionalProperties": false,
                                "x-kubernetes-validations": [
                                  {
                                    "rule": "self.type == 'Header' ? has(self.header) : !has(self.header)",
                                    "message": "If consistent hash type is header, the header field must be set."
                                  },
                                  {
                                    "rule": "self.type == 'Cookie' ? has(self.cookie) : !has(self.cookie)",
                                    "message": "If consistent hash type is cookie, the cookie field must be set."
                                  }
                                ]
                              },
                              "endpointOverride": {
                                "type": "object",
                                "required": [
                                  "extractFrom"
                                ],
                                "properties": {
                                  "extractFrom": {
                                    "type": "array",
                                    "maxItems": 10,
                                    "minItems": 1,
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "header": {
                                          "type": "string"
                                        }
                                      },
                                      "additionalProperties": false
                                    }
                                  }
                                },
                                "additionalProperties": false
                              },
                              "slowStart": {
                                "type": "object",
                                "required": [
                                  "window"
                                ],
                                "properties": {
                                  "window": {
                                    "type": "string",
                                    "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                                  }
                                },
                                "additionalProperties": false
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "ConsistentHash",
                                  "LeastRequest",
                                  "Random",
                                  "RoundRobin"
                                ]
                              },
                              "zoneAware": {
                                "type": "object",
                                "properties": {
                                  "preferLocal": {
                                    "type": "object",
                                    "properties": {
                                      "force": {
                                        "type": "object",
                                        "properties": {
                                          "minEndpointsInZoneThreshold": {
                                            "type": "integer",
                                            "format": "int32"
                                          }
                                        },
                                        "additionalProperties": false
                                      },
                                      "minEndpointsThreshold": {
                                        "type": "integer",
                                        "format": "int64"
                                      }
                                    },
                                    "additionalProperties": false
                                  }
                                },
                                "additionalProperties": false
                              }
                            },
                            "additionalProperties": false,
                            "x-kubernetes-validations": [
                              {
                                "rule": "self.type == 'ConsistentHash' ? has(self.consistentHash) : !has(self.consistentHash)",
                                "message": "If LoadBalancer type is consistentHash, consistentHash field needs to be set."
                              },
                              {
                                "rule": "self.type in ['Random', 'ConsistentHash'] ? !has(self.slowStart) : true ",
                                "message": "Currently SlowStart is only supported for RoundRobin and LeastRequest load balancers."
                              },
                              {
                                "rule": "self.type == 'ConsistentHash' ? !has(self.zoneAware) : true ",
                                "message": "Currently ZoneAware is only supported for LeastRequest, Random, and RoundRobin load balancers."
                              }
                            ]
                          },
                          "proxyProtocol": {
                            "type": "object",
                            "required": [
                              "version"
                            ],
                            "properties": {
                              "version": {
                                "type": "string",
                                "enum": [
                                  "V1",
                                  "V2"
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          "retry": {
                            "type": "object",
                            "properties": {
                              "numAttemptsPerPriority": {
                                "type": "integer",
                                "format": "int32"
                              },
                              "numRetries": {
                                "type": "integer",
                                "format": "int32",
                                "default": 2,
                                "minimum": 0
                              },
                              "perRetry": {
                                "type": "object",
                                "properties": {
                                  "backOff": {
                                    "type": "object",
                                    "properties": {
                                      "baseInterval": {
                                        "type": "string",
                                        "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                                      },
                                      "maxInterval": {
                                        "type": "string",
                                        "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  "timeout": {
                                    "type": "string",
                                    "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                                  }
                                },
                                "additionalProperties": false
                              },
                              "retryOn": {
                                "type": "object",
                                "properties": {
                                  "httpStatusCodes": {
                                    "type": "array",
                                    "items": {
                                      "type": "integer",
                                      "maximum": 600,
                                      "exclusiveMaximum": true,
                                      "minimum": 100
                                    }
                                  },
                                  "triggers": {
                                    "type": "array",
                                    "items": {
                                      "type": "string",
                                      "enum": [
                                        "5xx",
                                        "gateway-error",
                                        "reset",
                                        "reset-before-request",
                                        "connect-failure",
                                        "retriable-4xx",
                                        "refused-stream",
                                        "retriable-status-codes",
                                        "cancelled",
                                        "deadline-exceeded",
                                        "internal",
                                        "resource-exhausted",
                                        "unavailable"
                                      ]
                                    }
                                  }
                                },
                                "additionalProperties": false
                              }
                            },
                            "additionalProperties": false
                          },
                          "tcpKeepalive": {
                            "type": "object",
                            "properties": {
                              "idleTime": {
                                "type": "string",
                                "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                              },
                              "interval": {
                                "type": "string",
                                "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                              },
                              "probes": {
                                "type": "integer",
                                "format": "int32"
                              }
                            },
                            "additionalProperties": false
                          },
                          "timeout": {
                            "type": "object",
                            "properties": {
                              "http": {
                                "type": "object",
                                "properties": {
                                  "connectionIdleTimeout": {
                                    "type": "string",
                                    "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                                  },
                                  "maxConnectionDuration": {
                                    "type": "string",
                                    "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                                  },
                                  "requestTimeout": {
                                    "type": "string",
                                    "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                                  }
                                },
                                "additionalProperties": false
                              },
                              "tcp": {
                                "type": "object",
                                "properties": {
                                  "connectTimeout": {
                                    "type": "string",
                                    "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                                  }
                                },
                                "additionalProperties": false
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "additionalProperties": false
                      },
                      "uri": {
                        "type": "string",
                        "maxLength": 253,
                        "minLength": 1
                      }
                    },
                    "additionalProperties": false,
                    "x-kubernetes-validations": [
                      {
                        "rule": "!has(self.backendRef)",
                        "message": "BackendRefs must be used, backendRef is not supported."
                      },
                      {
                        "rule": "has(self.backendSettings)? (has(self.backendSettings.retry)?(has(self.backendSettings.retry.perRetry)? !has(self.backendSettings.retry.perRetry.timeout):true):true):true",
                        "message": "Retry timeout is not supported."
                      },
                      {
                        "rule": "has(self.backendSettings)? (has(self.backendSettings.retry)?(has(self.backendSettings.retry.retryOn)? !has(self.backendSettings.retry.retryOn.httpStatusCodes):true):true):true",
                        "message": "HTTPStatusCodes is not supported."
                      }
                    ]
                  }
                },
                "additionalProperties": false,
                "x-kubernetes-validations": [
                  {
                    "rule": "(has(self.recomputeRoute) \u0026\u0026 self.recomputeRoute) ? size(self.claimToHeaders) \u003e 0 : true",
                    "message": "claimToHeaders must be specified if recomputeRoute is enabled."
                  },
                  {
                    "rule": "has(self.remoteJWKS) || has(self.localJWKS)",
                    "message": "either remoteJWKS or localJWKS must be specified."
                  },
                  {
                    "rule": "!(has(self.remoteJWKS) \u0026\u0026 has(self.localJWKS))",
                    "message": "remoteJWKS and localJWKS cannot both be specified."
                  }
                ]
              }
            }
          },
          "additionalProperties": false
        },
        "oidc": {
          "type": "object",
          "required": [
            "clientSecret",
            "provider"
          ],
          "properties": {
            "clientID": {
              "type": "string",
              "minLength": 1
            },
            "clientIDRef": {
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "group": {
                  "type": "string",
                  "default": "",
                  "maxLength": 253,
                  "pattern": "^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
                },
                "kind": {
                  "type": "string",
                  "default": "Secret",
                  "maxLength": 63,
                  "minLength": 1,
                  "pattern": "^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"
                },
                "name": {
                  "type": "string",
                  "maxLength": 253,
                  "minLength": 1
                },
                "namespace": {
                  "type": "string",
                  "maxLength": 63,
                  "minLength": 1,
                  "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                }
              },
              "additionalProperties": false
            },
            "clientSecret": {
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "group": {
                  "type": "string",
                  "default": "",
                  "maxLength": 253,
                  "pattern": "^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
                },
                "kind": {
                  "type": "string",
                  "default": "Secret",
                  "maxLength": 63,
                  "minLength": 1,
                  "pattern": "^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"
                },
                "name": {
                  "type": "string",
                  "maxLength": 253,
                  "minLength": 1
                },
                "namespace": {
                  "type": "string",
                  "maxLength": 63,
                  "minLength": 1,
                  "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                }
              },
              "additionalProperties": false
            },
            "cookieConfig": {
              "type": "object",
              "properties": {
                "sameSite": {
                  "type": "string",
                  "default": "Strict",
                  "enum": [
                    "Lax",
                    "Strict",
                    "None"
                  ]
                }
              },
              "additionalProperties": false
            },
            "cookieDomain": {
              "type": "string",
              "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9]))*$"
            },
            "cookieNames": {
              "type": "object",
              "properties": {
                "accessToken": {
                  "type": "string"
                },
                "idToken": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "defaultRefreshTokenTTL": {
              "type": "string",
              "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
            },
            "defaultTokenTTL": {
              "type": "string",
              "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
            },
            "denyRedirect": {
              "type": "object",
              "required": [
                "headers"
              ],
              "properties": {
                "headers": {
                  "type": "array",
                  "maxItems": 16,
                  "minItems": 1,
                  "items": {
                    "type": "object",
                    "required": [
                      "name",
                      "value"
                    ],
                    "properties": {
                      "name": {
                        "type": "string",
                        "minLength": 1
                      },
                      "type": {
                        "type": "string",
                        "default": "Exact",
                        "enum": [
                          "Exact",
                          "Prefix",
                          "Suffix",
                          "RegularExpression"
                        ]
                      },
                      "value": {
                        "type": "string",
                        "maxLength": 1024,
                        "minLength": 1
                      }
                    },
                    "additionalProperties": false
                  }
                }
              },
              "additionalProperties": false
            },
            "forwardAccessToken": {
              "type": "boolean"
            },
            "logoutPath": {
              "type": "string"
            },
            "passThroughAuthHeader": {
              "type": "boolean"
            },
            "provider": {
              "type": "object",
              "required": [
                "issuer"
              ],
              "properties": {
                "authorizationEndpoint": {
                  "type": "string"
                },
                "backendRef": {
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "group": {
                      "type": "string",
                      "default": "",
                      "maxLength": 253,
                      "pattern": "^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
                    },
                    "kind": {
                      "type": "string",
                      "default": "Service",
                      "maxLength": 63,
                      "minLength": 1,
                      "pattern": "^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"
                    },
                    "name": {
                      "type": "string",
                      "maxLength": 253,
                      "minLength": 1
                    },
                    "namespace": {
                      "type": "string",
                      "maxLength": 63,
                      "minLength": 1,
                      "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                    },
                    "port": {
                      "type": "integer",
                      "format": "int32",
                      "maximum": 65535,
                      "minimum": 1
                    }
                  },
                  "additionalProperties": false,
                  "x-kubernetes-validations": [
                    {
                      "rule": "(size(self.group) == 0 \u0026\u0026 self.kind == 'Service') ? has(self.port) : true",
                      "message": "Must have port for Service reference"
                    }
                  ]
                },
                "backendRefs": {
                  "type": "array",
                  "maxItems": 16,
                  "items": {
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "fallback": {
                        "type": "boolean"
                      },
                      "group": {
                        "type": "string",
                        "default": "",
                        "maxLength": 253,
                        "pattern": "^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
                      },
                      "kind": {
                        "type": "string",
                        "default": "Service",
                        "maxLength": 63,
                        "minLength": 1,
                        "pattern": "^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"
                      },
                      "name": {
                        "type": "string",
                        "maxLength": 253,
                        "minLength": 1
                      },
                      "namespace": {
                        "type": "string",
                        "maxLength": 63,
                        "minLength": 1,
                        "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                      },
                      "port": {
                        "type": "integer",
                        "format": "int32",
                        "maximum": 65535,
                        "minimum": 1
                      }
                    },
                    "additionalProperties": false,
                    "x-kubernetes-validations": [
                      {
                        "rule": "(size(self.group) == 0 \u0026\u0026 self.kind == 'Service') ? has(self.port) : true",
                        "message": "Must have port for Service reference"
                      }
                    ]
                  }
                },
                "backendSettings": {
                  "type": "object",
                  "properties": {
                    "circuitBreaker": {
                      "type": "object",
                      "properties": {
                        "maxConnections": {
                          "type": "integer",
                          "format": "int64",
                          "default": 1024,
                          "maximum": 4294967295,
                          "minimum": 0
                        },
                        "maxParallelRequests": {
                          "type": "integer",
                          "format": "int64",
                          "default": 1024,
                          "maximum": 4294967295,
                          "minimum": 0
                        },
                        "maxParallelRetries": {
                          "type": "integer",
                          "format": "int64",
                          "default": 1024,
                          "maximum": 4294967295,
                          "minimum": 0
                        },
                        "maxPendingRequests": {
                          "type": "integer",
                          "format": "int64",
                          "default": 1024,
                          "maximum": 4294967295,
                          "minimum": 0
                        },
                        "maxRequestsPerConnection": {
                          "type": "integer",
                          "format": "int64",
                          "maximum": 4294967295,
                          "minimum": 0
                        },
                        "perEndpoint": {
                          "type": "object",
                          "properties": {
                            "maxConnections": {
                              "type": "integer",
                              "format": "int64",
                              "default": 1024,
                              "maximum": 4294967295,
                              "minimum": 0
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    },
                    "connection": {
                      "type": "object",
                      "properties": {
                        "bufferLimit": {
                          "allOf": [
                            {
                              "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"
                            },
                            {
                              "pattern": "^[1-9]+[0-9]*([EPTGMK]i|[EPTGMk])?$"
                            }
                          ],
                          "anyOf": [
                            {
                              "type": "integer"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "x-kubernetes-int-or-string": true
                        },
                        "socketBufferLimit": {
                          "allOf": [
                            {
                              "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"
                            },
                            {
                              "pattern": "^[1-9]+[0-9]*([EPTGMK]i|[EPTGMk])?$"
                            }
                          ],
                          "anyOf": [
                            {
                              "type": "integer"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "x-kubernetes-int-or-string": true
                        }
                      },
                      "additionalProperties": false
                    },
                    "dns": {
                      "type": "object",
                      "properties": {
                        "dnsRefreshRate": {
                          "type": "string",
                          "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                        },
                        "lookupFamily": {
                          "type": "string",
                          "enum": [
                            "IPv4",
                            "IPv6",
                            "IPv4Preferred",
                            "IPv6Preferred",
                            "IPv4AndIPv6"
                          ]
                        },
                        "respectDnsTtl": {
                          "type": "boolean"
                        }
                      },
                      "additionalProperties": false
                    },
                    "healthCheck": {
                      "type": "object",
                      "properties": {
                        "active": {
                          "type": "object",
                          "required": [
                            "type"
                          ],
                          "properties": {
                            "grpc": {
                              "type": "object",
                              "properties": {
                                "service": {
                                  "type": "string"
                                }
                              },
                              "additionalProperties": false
                            },
                            "healthyThreshold": {
                              "type": "integer",
                              "format": "int32",
                              "default": 1,
                              "minimum": 1
                            },
                            "http": {
                              "type": "object",
                              "required": [
                                "path"
                              ],
                              "properties": {
                                "expectedResponse": {
                                  "type": "object",
                                  "required": [
                                    "type"
                                  ],
                                  "properties": {
                                    "binary": {
                                      "type": "string",
                                      "format": "byte"
                                    },
                                    "text": {
                                      "type": "string"
                                    },
                                    "type": {
                                      "type": "string",
                                      "allOf": [
                                        {
                                          "enum": [
                                            "Text",
                                            "Binary"
                                          ]
                                        },
                                        {
                                          "enum": [
                                            "Text",
                                            "Binary"
                                          ]
                                        }
                                      ]
                                    }
                                  },
                                  "additionalProperties": false,
                                  "x-kubernetes-validations": [
                                    {
                                      "rule": "self.type == 'Text' ? has(self.text) : !has(self.text)",
                                      "message": "If payload type is Text, text field needs to be set."
                                    },
                                    {
                                      "rule": "self.type == 'Binary' ? has(self.binary) : !has(self.binary)",
                                      "message": "If payload type is Binary, binary field needs to be set."
                                    }
                                  ]
                                },
                                "expectedStatuses": {
                                  "type": "array",
                                  "items": {
                                    "type": "integer",
                                    "maximum": 600,
                                    "exclusiveMaximum": true,
                                    "minimum": 100
                                  }
                                },
                                "hostname": {
                                  "type": "string",
                                  "maxLength": 253,
                                  "minLength": 1,
                                  "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
                                },
                                "method": {
                                  "type": "string"
                                },
                                "path": {
                                  "type": "string",
                                  "maxLength": 1024,
                                  "minLength": 1
                                }
                              },
                              "additionalProperties": false
                            },
                            "initialJitter": {
                              "type": "string",
                              "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                            },
                            "interval": {
                              "type": "string",
                              "default": "3s",
                              "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                            },
                            "tcp": {
                              "type": "object",
                              "properties": {
                                "receive": {
                                  "type": "object",
                                  "required": [
                                    "type"
                                  ],
                                  "properties": {
                                    "binary": {
                                      "type": "string",
                                      "format": "byte"
                                    },
                                    "text": {
                                      "type": "string"
                                    },
                                    "type": {
                                      "type": "string",
                                      "allOf": [
                                        {
                                          "enum": [
                                            "Text",
                                            "Binary"
                                          ]
                                        },
                                        {
                                          "enum": [
                                            "Text",
                                            "Binary"
                                          ]
                                        }
                                      ]
                                    }
                                  },
                                  "additionalProperties": false,
                                  "x-kubernetes-validations": [
                                    {
                                      "rule": "self.type == 'Text' ? has(self.text) : !has(self.text)",
                                      "message": "If payload type is Text, text field needs to be set."
                                    },
                                    {
                                      "rule": "self.type == 'Binary' ? has(self.binary) : !has(self.binary)",
                                      "message": "If payload type is Binary, binary field needs to be set."
                                    }
                                  ]
                                },
                                "send": {
                                  "type": "object",
                                  "required": [
                                    "type"
                                  ],
                                  "properties": {
                                    "binary": {
                                      "type": "string",
                                      "format": "byte"
                                    },
                                    "text": {
                                      "type": "string"
                                    },
                                    "type": {
                                      "type": "string",
                                      "allOf": [
                                        {
                                          "enum": [
                                            "Text",
                                            "Binary"
                                          ]
                                        },
                                        {
                                          "enum": [
                                            "Text",
                                            "Binary"
                                          ]
                                        }
                                      ]
                                    }
                                  },
                                  "additionalProperties": false,
                                  "x-kubernetes-validations": [
                                    {
                                      "rule": "self.type == 'Text' ? has(self.text) : !has(self.text)",
                                      "message": "If payload type is Text, text field needs to be set."
                                    },
                                    {
                                      "rule": "self.type == 'Binary' ? has(self.binary) : !has(self.binary)",
                                      "message": "If payload type is Binary, binary field needs to be set."
                                    }
                                  ]
                                }
                              },
                              "additionalProperties": false
                            },
                            "timeout": {
                              "type": "string",
                              "default": "1s",
                              "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                            },
                            "type": {
                              "type": "string",
                              "allOf": [
                                {
                                  "enum": [
                                    "HTTP",
                                    "TCP",
                                    "GRPC"
                                  ]
                                },
                                {
                                  "enum": [
                                    "HTTP",
                                    "TCP",
                                    "GRPC"
                                  ]
                                }
                              ]
                            },
                            "unhealthyThreshold": {
                              "type": "integer",
                              "format": "int32",
                              "default": 3,
                              "minimum": 1
                            }
                          },
                          "additionalProperties": false,
                          "x-kubernetes-validations": [
                            {
                              "rule": "self.type == 'HTTP' ? has(self.http) : !has(self.http)",
                              "message": "If Health Checker type is HTTP, http field needs to be set."
                            },
                            {
                              "rule": "self.type == 'TCP' ? has(self.tcp) : !has(self.tcp)",
                              "message": "If Health Checker type is TCP, tcp field needs to be set."
                            },
                            {
                              "rule": "has(self.grpc) ? self.type == 'GRPC' : true",
                              "message": "The grpc field can only be set if the Health Checker type is GRPC."
                            }
                          ]
                        },
                        "panicThreshold": {
                          "type": "integer",
                          "format": "int32",
                          "maximum": 100,
                          "minimum": 0
                        },
                        "passive": {
                          "type": "object",
                          "properties": {
                            "baseEjectionTime": {
                              "type": "string",
                              "default": "30s",
                              "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                            },
                            "consecutive5XxErrors": {
                              "type": "integer",
                              "format": "int32",
                              "default": 5
                            },
                            "consecutiveGatewayErrors": {
                              "type": "integer",
                              "format": "int32",
                              "default": 0
                            },
                            "consecutiveLocalOriginFailures": {
                              "type": "integer",
                              "format": "int32",
                              "default": 5
                            },
                            "interval": {
                              "type": "string",
                              "default": "3s",
                              "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                            },
                            "maxEjectionPercent": {
                              "type": "integer",
                              "format": "int32",
                              "default": 10
                            },
                            "splitExternalLocalOriginErrors": {
                              "type": "boolean",
                              "default": false
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    },
                    "http2": {
                      "type": "object",
                      "properties": {
                        "initialConnectionWindowSize": {
                          "allOf": [
                            {
                              "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"
                            },
                            {
                              "pattern": "^[1-9]+[0-9]*([EPTGMK]i|[EPTGMk])?$"
                            }
                          ],
                          "anyOf": [
                            {
                              "type": "integer"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "x-kubernetes-int-or-string": true
                        },
                        "initialStreamWindowSize": {
                          "allOf": [
                            {
                              "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"
                            },
                            {
                              "pattern": "^[1-9]+[0-9]*([EPTGMK]i|[EPTGMk])?$"
                            }
                          ],
                          "anyOf": [
                            {
                              "type": "integer"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "x-kubernetes-int-or-string": true
                        },
                        "maxConcurrentStreams": {
                          "type": "integer",
                          "format": "int32",
                          "maximum": 2147483647,
                          "minimum": 1
                        },
                        "onInvalidMessage": {
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    },
                    "loadBalancer": {
                      "type": "object",
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "consistentHash": {
                          "type": "object",
                          "required": [
                            "type"
                          ],
                          "properties": {
                            "cookie": {
                              "type": "object",
                              "required": [
                                "name"
                              ],
                              "properties": {
                                "attributes": {
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                },
                                "name": {
                                  "type": "string"
                                },
                                "ttl": {
                                  "type": "string",
                                  "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                                }
                              },
                              "additionalProperties": false
                            },
                            "header": {
                              "type": "object",
                              "required": [
                                "name"
                              ],
                              "properties": {
                                "name": {
                                  "type": "string"
                                }
                              },
                              "additionalProperties": false
                            },
                            "tableSize": {
                              "type": "integer",
                              "format": "int64",
                              "default": 65537,
                              "maximum": 5000011,
                              "minimum": 2
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "SourceIP",
                                "Header",
                                "Cookie"
                              ]
                            }
                          },
                          "additionalProperties": false,
                          "x-kubernetes-validations": [
                            {
                              "rule": "self.type == 'Header' ? has(self.header) : !has(self.header)",
                              "message": "If consistent hash type is header, the header field must be set."
                            },
                            {
                              "rule": "self.type == 'Cookie' ? has(self.cookie) : !has(self.cookie)",
                              "message": "If consistent hash type is cookie, the cookie field must be set."
                            }
                          ]
                        },
                        "endpointOverride": {
                          "type": "object",
                          "required": [
                            "extractFrom"
                          ],
                          "properties": {
                            "extractFrom": {
                              "type": "array",
                              "maxItems": 10,
                              "minItems": 1,
                              "items": {
                                "type": "object",
                                "properties": {
                                  "header": {
                                    "type": "string"
                                  }
                                },
                                "additionalProperties": false
                              }
                            }
                          },
                          "additionalProperties": false
                        },
                        "slowStart": {
                          "type": "object",
                          "required": [
                            "window"
                          ],
                          "properties": {
                            "window": {
                              "type": "string",
                              "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                            }
                          },
                          "additionalProperties": false
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "ConsistentHash",
                            "LeastRequest",
                            "Random",
                            "RoundRobin"
                          ]
                        },
                        "zoneAware": {
                          "type": "object",
                          "properties": {
                            "preferLocal": {
                              "type": "object",
                              "properties": {
                                "force": {
                                  "type": "object",
                                  "properties": {
                                    "minEndpointsInZoneThreshold": {
                                      "type": "integer",
                                      "format": "int32"
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "minEndpointsThreshold": {
                                  "type": "integer",
                                  "format": "int64"
                                }
                              },
                              "additionalProperties": false
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false,
                      "x-kubernetes-validations": [
                        {
                          "rule": "self.type == 'ConsistentHash' ? has(self.consistentHash) : !has(self.consistentHash)",
                          "message": "If LoadBalancer type is consistentHash, consistentHash field needs to be set."
                        },
                        {
                          "rule": "self.type in ['Random', 'ConsistentHash'] ? !has(self.slowStart) : true ",
                          "message": "Currently SlowStart is only supported for RoundRobin and LeastRequest load balancers."
                        },
                        {
                          "rule": "self.type == 'ConsistentHash' ? !has(self.zoneAware) : true ",
                          "message": "Currently ZoneAware is only supported for LeastRequest, Random, and RoundRobin load balancers."
                        }
                      ]
                    },
                    "proxyProtocol": {
                      "type": "object",
                      "required": [
                        "version"
                      ],
                      "properties": {
                        "version": {
                          "type": "string",
                          "enum": [
                            "V1",
                            "V2"
                          ]
                        }
                      },
                      "additionalProperties": false
                    },
                    "retry": {
                      "type": "object",
                      "properties": {
                        "numAttemptsPerPriority": {
                          "type": "integer",
                          "format": "int32"
                        },
                        "numRetries": {
                          "type": "integer",
                          "format": "int32",
                          "default": 2,
                          "minimum": 0
                        },
                        "perRetry": {
                          "type": "object",
                          "properties": {
                            "backOff": {
                              "type": "object",
                              "properties": {
                                "baseInterval": {
                                  "type": "string",
                                  "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                                },
                                "maxInterval": {
                                  "type": "string",
                                  "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                                }
                              },
                              "additionalProperties": false
                            },
                            "timeout": {
                              "type": "string",
                              "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                            }
                          },
                          "additionalProperties": false
                        },
                        "retryOn": {
                          "type": "object",
                          "properties": {
                            "httpStatusCodes": {
                              "type": "array",
                              "items": {
                                "type": "integer",
                                "maximum": 600,
                                "exclusiveMaximum": true,
                                "minimum": 100
                              }
                            },
                            "triggers": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "enum": [
                                  "5xx",
                                  "gateway-error",
                                  "reset",
                                  "reset-before-request",
                                  "connect-failure",
                                  "retriable-4xx",
                                  "refused-stream",
                                  "retriable-status-codes",
                                  "cancelled",
                                  "deadline-exceeded",
                                  "internal",
                                  "resource-exhausted",
                                  "unavailable"
                                ]
                              }
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    },
                    "tcpKeepalive": {
                      "type": "object",
                      "properties": {
                        "idleTime": {
                          "type": "string",
                          "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                        },
                        "interval": {
                          "type": "string",
                          "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                        },
                        "probes": {
                          "type": "integer",
                          "format": "int32"
                        }
                      },
                      "additionalProperties": false
                    },
                    "timeout": {
                      "type": "object",
                      "properties": {
                        "http": {
                          "type": "object",
                          "properties": {
                            "connectionIdleTimeout": {
                              "type": "string",
                              "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                            },
                            "maxConnectionDuration": {
                              "type": "string",
                              "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                            },
                            "requestTimeout": {
                              "type": "string",
                              "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                            }
                          },
                          "additionalProperties": false
                        },
                        "tcp": {
                          "type": "object",
                          "properties": {
                            "connectTimeout": {
                              "type": "string",
                              "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "endSessionEndpoint": {
                  "type": "string"
                },
                "issuer": {
                  "type": "string",
                  "minLength": 1
                },
                "tokenEndpoint": {
                  "type": "string"
                }
              },
              "additionalProperties": false,
              "x-kubernetes-validations": [
                {
                  "rule": "!has(self.backendRef)",
                  "message": "BackendRefs must be used, backendRef is not supported."
                },
                {
                  "rule": "has(self.backendSettings)? (has(self.backendSettings.retry)?(has(self.backendSettings.retry.perRetry)? !has(self.backendSettings.retry.perRetry.timeout):true):true):true",
                  "message": "Retry timeout is not supported."
                },
                {
                  "rule": "has(self.backendSettings)? (has(self.backendSettings.retry)?(has(self.backendSettings.retry.retryOn)? !has(self.backendSettings.retry.retryOn.httpStatusCodes):true):true):true",
                  "message": "HTTPStatusCodes is not supported."
                }
              ]
            },
            "redirectURL": {
              "type": "string"
            },
            "refreshToken": {
              "type": "boolean"
            },
            "resources": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "scopes": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false,
          "x-kubernetes-validations": [
            {
              "rule": "(has(self.clientID) \u0026\u0026 !has(self.clientIDRef)) || (!has(self.clientID) \u0026\u0026 has(self.clientIDRef))",
              "message": "only one of clientID or clientIDRef must be set"
            }
          ]
        },
        "targetRef": {
          "type": "object",
          "required": [
            "group",
            "kind",
            "name"
          ],
          "properties": {
            "group": {
              "type": "string",
              "maxLength": 253,
              "pattern": "^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
            },
            "kind": {
              "type": "string",
              "maxLength": 63,
              "minLength": 1,
              "pattern": "^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"
            },
            "name": {
              "type": "string",
              "maxLength": 253,
              "minLength": 1
            },
            "sectionName": {
              "type": "string",
              "maxLength": 253,
              "minLength": 1,
              "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
            }
          },
          "additionalProperties": false
        },
        "targetRefs": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "group",
              "kind",
              "name"
            ],
            "properties": {
              "group": {
                "type": "string",
                "maxLength": 253,
                "pattern": "^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
              },
              "kind": {
                "type": "string",
                "maxLength": 63,
                "minLength": 1,
                "pattern": "^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"
              },
              "name": {
                "type": "string",
                "maxLength": 253,
                "minLength": 1
              },
              "sectionName": {
                "type": "string",
                "maxLength": 253,
                "minLength": 1,
                "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
              }
            },
            "additionalProperties": false
          }
        },
        "targetSelectors": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "kind"
            ],
            "properties": {
              "group": {
                "type": "string",
                "default": "gateway.networking.k8s.io",
                "maxLength": 253,
                "pattern": "^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
              },
              "kind": {
                "type": "string",
                "maxLength": 63,
                "minLength": 1,
                "pattern": "^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"
              },
              "matchExpressions": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "key",
                    "operator"
                  ],
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "operator": {
                      "type": "string"
                    },
                    "values": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "x-kubernetes-list-type": "atomic"
                    }
                  },
                  "additionalProperties": false
                },
                "x-kubernetes-list-type": "atomic"
              },
              "matchLabels": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false,
            "x-kubernetes-validations": [
              {
                "rule": "has(self.group) ? self.group == 'gateway.networking.k8s.io' : true ",
                "message": "group must be gateway.networking.k8s.io"
              }
            ]
          }
        }
      },
      "additionalProperties": false,
      "x-kubernetes-validations": [
        {
          "rule": "(has(self.targetRef) \u0026\u0026 !has(self.targetRefs)) || (!has(self.targetRef) \u0026\u0026 has(self.targetRefs)) || (has(self.targetSelectors) \u0026\u0026 self.targetSelectors.size() \u003e 0) ",
          "message": "either targetRef or targetRefs must be used"
        },
        {
          "rule": "has(self.targetRef) ? self.targetRef.group == 'gateway.networking.k8s.io' : true",
          "message": "this policy can only have a targetRef.group of gateway.networking.k8s.io"
        },
        {
          "rule": "has(self.targetRef) ? self.targetRef.kind in ['Gateway', 'HTTPRoute', 'GRPCRoute'] : true",
          "message": "this policy can only have a targetRef.kind of Gateway/HTTPRoute/GRPCRoute"
        },
        {
          "rule": "has(self.targetRefs) ? self.targetRefs.all(ref, ref.group == 'gateway.networking.k8s.io') : true ",
          "message": "this policy can only have a targetRefs[*].group of gateway.networking.k8s.io"
        },
        {
          "rule": "has(self.targetRefs) ? self.targetRefs.all(ref, ref.kind in ['Gateway', 'HTTPRoute', 'GRPCRoute']) : true ",
          "message": "this policy can only have a targetRefs[*].kind of Gateway/HTTPRoute/GRPCRoute"
        },
        {
          "rule": "(has(self.authorization) \u0026\u0026 has(self.authorization.rules) \u0026\u0026 self.authorization.rules.exists(r, has(r.principal.jwt))) ? has(self.jwt) : true",
          "message": "if authorization.rules.principal.jwt is used, jwt must be defined"
        }
      ]
    },
    "status": {
      "type": "object",
      "required": [
        "ancestors"
      ],
      "properties": {
        "ancestors": {
          "type": "array",
          "maxItems": 16,
          "items": {
            "type": "object",
            "required": [
              "ancestorRef",
              "controllerName"
            ],
            "properties": {
              "ancestorRef": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "group": {
                    "type": "string",
                    "default": "gateway.networking.k8s.io",
                    "maxLength": 253,
                    "pattern": "^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
                  },
                  "kind": {
                    "type": "string",
                    "default": "Gateway",
                    "maxLength": 63,
                    "minLength": 1,
                    "pattern": "^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"
                  },
                  "name": {
                    "type": "string",
                    "maxLength": 253,
                    "minLength": 1
                  },
                  "namespace": {
                    "type": "string",
                    "maxLength": 63,
                    "minLength": 1,
                    "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                  },
                  "port": {
                    "type": "integer",
                    "format": "int32",
                    "maximum": 65535,
                    "minimum": 1
                  },
                  "sectionName": {
                    "type": "string",
                    "maxLength": 253,
                    "minLength": 1,
                    "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
                  }
                },
                "additionalProperties": false
              },
              "conditions": {
                "type": "array",
                "maxItems": 8,
                "minItems": 1,
                "items": {
                  "type": "object",
                  "required": [
                    "lastTransitionTime",
                    "message",
                    "reason",
                    "status",
                    "type"
                  ],
                  "properties": {
                    "lastTransitionTime": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "message": {
                      "type": "string",
                      "maxLength": 32768
                    },
                    "observedGeneration": {
                      "type": "integer",
                      "format": "int64",
                      "minimum": 0
                    },
                    "reason": {
                      "type": "string",
                      "maxLength": 1024,
                      "minLength": 1,
                      "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "True",
                        "False",
                        "Unknown"
                      ]
                    },
                    "type": {
                      "type": "string",
                      "maxLength": 316,
                      "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                    }
                  },
                  "additionalProperties": false
                },
                "x-kubernetes-list-map-keys": [
                  "type"
                ],
                "x-kubernetes-list-type": "map"
              },
              "controllerName": {
                "type": "string",
                "maxLength": 253,
                "minLength": 1,
                "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*\\/[A-Za-z0-9\\/\\-._~%!$\u0026'()*+,;=:]+$"
              }
            },
            "additionalProperties": false
          }
        }
      },
      "additionalProperties": false
    }
  }
}
