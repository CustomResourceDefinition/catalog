{
  "description": "EnvoyExtensionPolicy allows the user to configure various envoy extensibility options for the Gateway.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "Spec defines the desired state of EnvoyExtensionPolicy.",
      "type": "object",
      "properties": {
        "extProc": {
          "description": "ExtProc is an ordered list of external processing filters\nthat should be added to the envoy filter chain",
          "type": "array",
          "maxItems": 16,
          "items": {
            "description": "ExtProc defines the configuration for External Processing filter.",
            "type": "object",
            "properties": {
              "backendRef": {
                "description": "BackendRef references a Kubernetes object that represents the\nbackend server to which the authorization request will be sent.\n\nDeprecated: Use BackendRefs instead.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "group": {
                    "description": "Group is the group of the referent. For example, \"gateway.networking.k8s.io\".\nWhen unspecified or empty string, core API group is inferred.",
                    "type": "string",
                    "default": "",
                    "maxLength": 253,
                    "pattern": "^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
                  },
                  "kind": {
                    "description": "Kind is the Kubernetes resource kind of the referent. For example\n\"Service\".\n\nDefaults to \"Service\" when not specified.\n\nExternalName services can refer to CNAME DNS records that may live\noutside of the cluster and as such are difficult to reason about in\nterms of conformance. They also may not be safe to forward to (see\nCVE-2021-25740 for more information). Implementations SHOULD NOT\nsupport ExternalName Services.\n\nSupport: Core (Services with a type other than ExternalName)\n\nSupport: Implementation-specific (Services with type ExternalName)",
                    "type": "string",
                    "default": "Service",
                    "maxLength": 63,
                    "minLength": 1,
                    "pattern": "^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"
                  },
                  "name": {
                    "description": "Name is the name of the referent.",
                    "type": "string",
                    "maxLength": 253,
                    "minLength": 1
                  },
                  "namespace": {
                    "description": "Namespace is the namespace of the backend. When unspecified, the local\nnamespace is inferred.\n\nNote that when a namespace different than the local namespace is specified,\na ReferenceGrant object is required in the referent namespace to allow that\nnamespace's owner to accept the reference. See the ReferenceGrant\ndocumentation for details.\n\nSupport: Core",
                    "type": "string",
                    "maxLength": 63,
                    "minLength": 1,
                    "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                  },
                  "port": {
                    "description": "Port specifies the destination port number to use for this resource.\nPort is required when the referent is a Kubernetes Service. In this\ncase, the port number is the service port number, not the target port.\nFor other resources, destination port might be derived from the referent\nresource or this field.",
                    "type": "integer",
                    "format": "int32",
                    "maximum": 65535,
                    "minimum": 1
                  }
                },
                "additionalProperties": false,
                "x-kubernetes-validations": [
                  {
                    "rule": "(size(self.group) == 0 \u0026\u0026 self.kind == 'Service') ? has(self.port) : true",
                    "message": "Must have port for Service reference"
                  }
                ]
              },
              "backendRefs": {
                "description": "BackendRefs references a Kubernetes object that represents the\nbackend server to which the authorization request will be sent.",
                "type": "array",
                "maxItems": 16,
                "items": {
                  "description": "BackendRef defines how an ObjectReference that is specific to BackendRef.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "fallback": {
                      "description": "Fallback indicates whether the backend is designated as a fallback.\nMultiple fallback backends can be configured.\nIt is highly recommended to configure active or passive health checks to ensure that failover can be detected\nwhen the active backends become unhealthy and to automatically readjust once the primary backends are healthy again.\nThe overprovisioning factor is set to 1.4, meaning the fallback backends will only start receiving traffic when\nthe health of the active backends falls below 72%.",
                      "type": "boolean"
                    },
                    "group": {
                      "description": "Group is the group of the referent. For example, \"gateway.networking.k8s.io\".\nWhen unspecified or empty string, core API group is inferred.",
                      "type": "string",
                      "default": "",
                      "maxLength": 253,
                      "pattern": "^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
                    },
                    "kind": {
                      "description": "Kind is the Kubernetes resource kind of the referent. For example\n\"Service\".\n\nDefaults to \"Service\" when not specified.\n\nExternalName services can refer to CNAME DNS records that may live\noutside of the cluster and as such are difficult to reason about in\nterms of conformance. They also may not be safe to forward to (see\nCVE-2021-25740 for more information). Implementations SHOULD NOT\nsupport ExternalName Services.\n\nSupport: Core (Services with a type other than ExternalName)\n\nSupport: Implementation-specific (Services with type ExternalName)",
                      "type": "string",
                      "default": "Service",
                      "maxLength": 63,
                      "minLength": 1,
                      "pattern": "^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"
                    },
                    "name": {
                      "description": "Name is the name of the referent.",
                      "type": "string",
                      "maxLength": 253,
                      "minLength": 1
                    },
                    "namespace": {
                      "description": "Namespace is the namespace of the backend. When unspecified, the local\nnamespace is inferred.\n\nNote that when a namespace different than the local namespace is specified,\na ReferenceGrant object is required in the referent namespace to allow that\nnamespace's owner to accept the reference. See the ReferenceGrant\ndocumentation for details.\n\nSupport: Core",
                      "type": "string",
                      "maxLength": 63,
                      "minLength": 1,
                      "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                    },
                    "port": {
                      "description": "Port specifies the destination port number to use for this resource.\nPort is required when the referent is a Kubernetes Service. In this\ncase, the port number is the service port number, not the target port.\nFor other resources, destination port might be derived from the referent\nresource or this field.",
                      "type": "integer",
                      "format": "int32",
                      "maximum": 65535,
                      "minimum": 1
                    }
                  },
                  "additionalProperties": false,
                  "x-kubernetes-validations": [
                    {
                      "rule": "(size(self.group) == 0 \u0026\u0026 self.kind == 'Service') ? has(self.port) : true",
                      "message": "Must have port for Service reference"
                    }
                  ]
                }
              },
              "backendSettings": {
                "description": "BackendSettings holds configuration for managing the connection\nto the backend.",
                "type": "object",
                "properties": {
                  "circuitBreaker": {
                    "description": "Circuit Breaker settings for the upstream connections and requests.\nIf not set, circuit breakers will be enabled with the default thresholds",
                    "type": "object",
                    "properties": {
                      "maxConnections": {
                        "description": "The maximum number of connections that Envoy will establish to the referenced backend defined within a xRoute rule.",
                        "type": "integer",
                        "format": "int64",
                        "default": 1024,
                        "maximum": 4294967295,
                        "minimum": 0
                      },
                      "maxParallelRequests": {
                        "description": "The maximum number of parallel requests that Envoy will make to the referenced backend defined within a xRoute rule.",
                        "type": "integer",
                        "format": "int64",
                        "default": 1024,
                        "maximum": 4294967295,
                        "minimum": 0
                      },
                      "maxParallelRetries": {
                        "description": "The maximum number of parallel retries that Envoy will make to the referenced backend defined within a xRoute rule.",
                        "type": "integer",
                        "format": "int64",
                        "default": 1024,
                        "maximum": 4294967295,
                        "minimum": 0
                      },
                      "maxPendingRequests": {
                        "description": "The maximum number of pending requests that Envoy will queue to the referenced backend defined within a xRoute rule.",
                        "type": "integer",
                        "format": "int64",
                        "default": 1024,
                        "maximum": 4294967295,
                        "minimum": 0
                      },
                      "maxRequestsPerConnection": {
                        "description": "The maximum number of requests that Envoy will make over a single connection to the referenced backend defined within a xRoute rule.\nDefault: unlimited.",
                        "type": "integer",
                        "format": "int64",
                        "maximum": 4294967295,
                        "minimum": 0
                      },
                      "perEndpoint": {
                        "description": "PerEndpoint defines Circuit Breakers that will apply per-endpoint for an upstream cluster",
                        "type": "object",
                        "properties": {
                          "maxConnections": {
                            "description": "MaxConnections configures the maximum number of connections that Envoy will establish per-endpoint to the referenced backend defined within a xRoute rule.",
                            "type": "integer",
                            "format": "int64",
                            "default": 1024,
                            "maximum": 4294967295,
                            "minimum": 0
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  },
                  "connection": {
                    "description": "Connection includes backend connection settings.",
                    "type": "object",
                    "properties": {
                      "bufferLimit": {
                        "description": "BufferLimit Soft limit on size of the cluster’s connections read and write buffers.\nBufferLimit applies to connection streaming (maybe non-streaming) channel between processes, it's in user space.\nIf unspecified, an implementation defined default is applied (32768 bytes).\nFor example, 20Mi, 1Gi, 256Ki etc.\nNote: that when the suffix is not provided, the value is interpreted as bytes.",
                        "allOf": [
                          {
                            "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"
                          },
                          {
                            "pattern": "^[1-9]+[0-9]*([EPTGMK]i|[EPTGMk])?$"
                          }
                        ],
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "string"
                          }
                        ],
                        "x-kubernetes-int-or-string": true
                      },
                      "socketBufferLimit": {
                        "description": "SocketBufferLimit provides configuration for the maximum buffer size in bytes for each socket\nto backend.\nSocketBufferLimit applies to socket streaming channel between TCP/IP stacks, it's in kernel space.\nFor example, 20Mi, 1Gi, 256Ki etc.\nNote that when the suffix is not provided, the value is interpreted as bytes.",
                        "allOf": [
                          {
                            "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"
                          },
                          {
                            "pattern": "^[1-9]+[0-9]*([EPTGMK]i|[EPTGMk])?$"
                          }
                        ],
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "string"
                          }
                        ],
                        "x-kubernetes-int-or-string": true
                      }
                    },
                    "additionalProperties": false
                  },
                  "dns": {
                    "description": "DNS includes dns resolution settings.",
                    "type": "object",
                    "properties": {
                      "dnsRefreshRate": {
                        "description": "DNSRefreshRate specifies the rate at which DNS records should be refreshed.\nDefaults to 30 seconds.",
                        "type": "string",
                        "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                      },
                      "lookupFamily": {
                        "description": "LookupFamily determines how Envoy would resolve DNS for Routes where the backend is specified as a fully qualified domain name (FQDN).\nIf set, this configuration overrides other defaults.",
                        "type": "string",
                        "enum": [
                          "IPv4",
                          "IPv6",
                          "IPv4Preferred",
                          "IPv6Preferred",
                          "IPv4AndIPv6"
                        ]
                      },
                      "respectDnsTtl": {
                        "description": "RespectDNSTTL indicates whether the DNS Time-To-Live (TTL) should be respected.\nIf the value is set to true, the DNS refresh rate will be set to the resource record’s TTL.\nDefaults to true.",
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "healthCheck": {
                    "description": "HealthCheck allows gateway to perform active health checking on backends.",
                    "type": "object",
                    "properties": {
                      "active": {
                        "description": "Active health check configuration",
                        "type": "object",
                        "required": [
                          "type"
                        ],
                        "properties": {
                          "grpc": {
                            "description": "GRPC defines the configuration of the GRPC health checker.\nIt's optional, and can only be used if the specified type is GRPC.",
                            "type": "object",
                            "properties": {
                              "service": {
                                "description": "Service to send in the health check request.\nIf this is not specified, then the health check request applies to the entire\nserver and not to a specific service.",
                                "type": "string"
                              }
                            },
                            "additionalProperties": false
                          },
                          "healthyThreshold": {
                            "description": "HealthyThreshold defines the number of healthy health checks required before a backend host is marked healthy.",
                            "type": "integer",
                            "format": "int32",
                            "default": 1,
                            "minimum": 1
                          },
                          "http": {
                            "description": "HTTP defines the configuration of http health checker.\nIt's required while the health checker type is HTTP.",
                            "type": "object",
                            "required": [
                              "path"
                            ],
                            "properties": {
                              "expectedResponse": {
                                "description": "ExpectedResponse defines a list of HTTP expected responses to match.",
                                "type": "object",
                                "required": [
                                  "type"
                                ],
                                "properties": {
                                  "binary": {
                                    "description": "Binary payload base64 encoded.",
                                    "type": "string",
                                    "format": "byte"
                                  },
                                  "text": {
                                    "description": "Text payload in plain text.",
                                    "type": "string"
                                  },
                                  "type": {
                                    "description": "Type defines the type of the payload.",
                                    "type": "string",
                                    "allOf": [
                                      {
                                        "enum": [
                                          "Text",
                                          "Binary"
                                        ]
                                      },
                                      {
                                        "enum": [
                                          "Text",
                                          "Binary"
                                        ]
                                      }
                                    ]
                                  }
                                },
                                "additionalProperties": false,
                                "x-kubernetes-validations": [
                                  {
                                    "rule": "self.type == 'Text' ? has(self.text) : !has(self.text)",
                                    "message": "If payload type is Text, text field needs to be set."
                                  },
                                  {
                                    "rule": "self.type == 'Binary' ? has(self.binary) : !has(self.binary)",
                                    "message": "If payload type is Binary, binary field needs to be set."
                                  }
                                ]
                              },
                              "expectedStatuses": {
                                "description": "ExpectedStatuses defines a list of HTTP response statuses considered healthy.\nDefaults to 200 only",
                                "type": "array",
                                "items": {
                                  "description": "HTTPStatus defines the http status code.",
                                  "type": "integer",
                                  "maximum": 599,
                                  "minimum": 100
                                }
                              },
                              "hostname": {
                                "description": "Hostname defines the HTTP host that will be requested during health checking.\nDefault: HTTPRoute or GRPCRoute hostname.",
                                "type": "string",
                                "maxLength": 253,
                                "minLength": 1,
                                "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
                              },
                              "method": {
                                "description": "Method defines the HTTP method used for health checking.\nDefaults to GET",
                                "type": "string"
                              },
                              "path": {
                                "description": "Path defines the HTTP path that will be requested during health checking.",
                                "type": "string",
                                "maxLength": 1024,
                                "minLength": 1
                              }
                            },
                            "additionalProperties": false
                          },
                          "initialJitter": {
                            "description": "InitialJitter defines the maximum time Envoy will wait before the first health check.\nEnvoy will randomly select a value between 0 and the initial jitter value.",
                            "type": "string",
                            "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                          },
                          "interval": {
                            "description": "Interval defines the time between active health checks.",
                            "type": "string",
                            "default": "3s",
                            "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                          },
                          "tcp": {
                            "description": "TCP defines the configuration of tcp health checker.\nIt's required while the health checker type is TCP.",
                            "type": "object",
                            "properties": {
                              "receive": {
                                "description": "Receive defines the expected response payload.",
                                "type": "object",
                                "required": [
                                  "type"
                                ],
                                "properties": {
                                  "binary": {
                                    "description": "Binary payload base64 encoded.",
                                    "type": "string",
                                    "format": "byte"
                                  },
                                  "text": {
                                    "description": "Text payload in plain text.",
                                    "type": "string"
                                  },
                                  "type": {
                                    "description": "Type defines the type of the payload.",
                                    "type": "string",
                                    "allOf": [
                                      {
                                        "enum": [
                                          "Text",
                                          "Binary"
                                        ]
                                      },
                                      {
                                        "enum": [
                                          "Text",
                                          "Binary"
                                        ]
                                      }
                                    ]
                                  }
                                },
                                "additionalProperties": false,
                                "x-kubernetes-validations": [
                                  {
                                    "rule": "self.type == 'Text' ? has(self.text) : !has(self.text)",
                                    "message": "If payload type is Text, text field needs to be set."
                                  },
                                  {
                                    "rule": "self.type == 'Binary' ? has(self.binary) : !has(self.binary)",
                                    "message": "If payload type is Binary, binary field needs to be set."
                                  }
                                ]
                              },
                              "send": {
                                "description": "Send defines the request payload.",
                                "type": "object",
                                "required": [
                                  "type"
                                ],
                                "properties": {
                                  "binary": {
                                    "description": "Binary payload base64 encoded.",
                                    "type": "string",
                                    "format": "byte"
                                  },
                                  "text": {
                                    "description": "Text payload in plain text.",
                                    "type": "string"
                                  },
                                  "type": {
                                    "description": "Type defines the type of the payload.",
                                    "type": "string",
                                    "allOf": [
                                      {
                                        "enum": [
                                          "Text",
                                          "Binary"
                                        ]
                                      },
                                      {
                                        "enum": [
                                          "Text",
                                          "Binary"
                                        ]
                                      }
                                    ]
                                  }
                                },
                                "additionalProperties": false,
                                "x-kubernetes-validations": [
                                  {
                                    "rule": "self.type == 'Text' ? has(self.text) : !has(self.text)",
                                    "message": "If payload type is Text, text field needs to be set."
                                  },
                                  {
                                    "rule": "self.type == 'Binary' ? has(self.binary) : !has(self.binary)",
                                    "message": "If payload type is Binary, binary field needs to be set."
                                  }
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          "timeout": {
                            "description": "Timeout defines the time to wait for a health check response.",
                            "type": "string",
                            "default": "1s",
                            "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                          },
                          "type": {
                            "description": "Type defines the type of health checker.",
                            "type": "string",
                            "allOf": [
                              {
                                "enum": [
                                  "HTTP",
                                  "TCP",
                                  "GRPC"
                                ]
                              },
                              {
                                "enum": [
                                  "HTTP",
                                  "TCP",
                                  "GRPC"
                                ]
                              }
                            ]
                          },
                          "unhealthyThreshold": {
                            "description": "UnhealthyThreshold defines the number of unhealthy health checks required before a backend host is marked unhealthy.",
                            "type": "integer",
                            "format": "int32",
                            "default": 3,
                            "minimum": 1
                          }
                        },
                        "additionalProperties": false,
                        "x-kubernetes-validations": [
                          {
                            "rule": "self.type == 'HTTP' ? has(self.http) : !has(self.http)",
                            "message": "If Health Checker type is HTTP, http field needs to be set."
                          },
                          {
                            "rule": "self.type == 'TCP' ? has(self.tcp) : !has(self.tcp)",
                            "message": "If Health Checker type is TCP, tcp field needs to be set."
                          },
                          {
                            "rule": "has(self.grpc) ? self.type == 'GRPC' : true",
                            "message": "The grpc field can only be set if the Health Checker type is GRPC."
                          }
                        ]
                      },
                      "panicThreshold": {
                        "description": "When number of unhealthy endpoints for a backend reaches this threshold\nEnvoy will disregard health status and balance across all endpoints.\nIt's designed to prevent a situation in which host failures cascade throughout the cluster\nas load increases. If not set, the default value is 50%. To disable panic mode, set value to `0`.",
                        "type": "integer",
                        "format": "int32",
                        "maximum": 100,
                        "minimum": 0
                      },
                      "passive": {
                        "description": "Passive passive check configuration",
                        "type": "object",
                        "properties": {
                          "baseEjectionTime": {
                            "description": "BaseEjectionTime defines the base duration for which a host will be ejected on consecutive failures.",
                            "type": "string",
                            "default": "30s",
                            "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                          },
                          "consecutive5XxErrors": {
                            "description": "Consecutive5xxErrors sets the number of consecutive 5xx errors triggering ejection.",
                            "type": "integer",
                            "format": "int32",
                            "default": 5
                          },
                          "consecutiveGatewayErrors": {
                            "description": "ConsecutiveGatewayErrors sets the number of consecutive gateway errors triggering ejection.",
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                          },
                          "consecutiveLocalOriginFailures": {
                            "description": "ConsecutiveLocalOriginFailures sets the number of consecutive local origin failures triggering ejection.\nParameter takes effect only when split_external_local_origin_errors is set to true.",
                            "type": "integer",
                            "format": "int32",
                            "default": 5
                          },
                          "interval": {
                            "description": "Interval defines the time between passive health checks.",
                            "type": "string",
                            "default": "3s",
                            "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                          },
                          "maxEjectionPercent": {
                            "description": "MaxEjectionPercent sets the maximum percentage of hosts in a cluster that can be ejected.",
                            "type": "integer",
                            "format": "int32",
                            "default": 10
                          },
                          "splitExternalLocalOriginErrors": {
                            "description": "SplitExternalLocalOriginErrors enables splitting of errors between external and local origin.",
                            "type": "boolean",
                            "default": false
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  },
                  "http2": {
                    "description": "HTTP2 provides HTTP/2 configuration for backend connections.",
                    "type": "object",
                    "properties": {
                      "initialConnectionWindowSize": {
                        "description": "InitialConnectionWindowSize sets the initial window size for HTTP/2 connections.\nIf not set, the default value is 1 MiB.",
                        "allOf": [
                          {
                            "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"
                          },
                          {
                            "pattern": "^[1-9]+[0-9]*([EPTGMK]i|[EPTGMk])?$"
                          }
                        ],
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "string"
                          }
                        ],
                        "x-kubernetes-int-or-string": true
                      },
                      "initialStreamWindowSize": {
                        "description": "InitialStreamWindowSize sets the initial window size for HTTP/2 streams.\nIf not set, the default value is 64 KiB(64*1024).",
                        "allOf": [
                          {
                            "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"
                          },
                          {
                            "pattern": "^[1-9]+[0-9]*([EPTGMK]i|[EPTGMk])?$"
                          }
                        ],
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "string"
                          }
                        ],
                        "x-kubernetes-int-or-string": true
                      },
                      "maxConcurrentStreams": {
                        "description": "MaxConcurrentStreams sets the maximum number of concurrent streams allowed per connection.\nIf not set, the default value is 100.",
                        "type": "integer",
                        "format": "int32",
                        "maximum": 2147483647,
                        "minimum": 1
                      },
                      "onInvalidMessage": {
                        "description": "OnInvalidMessage determines if Envoy will terminate the connection or just the offending stream in the event of HTTP messaging error\nIt's recommended for L2 Envoy deployments to set this value to TerminateStream.\nhttps://www.envoyproxy.io/docs/envoy/latest/configuration/best_practices/level_two\nDefault: TerminateConnection",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "loadBalancer": {
                    "description": "LoadBalancer policy to apply when routing traffic from the gateway to\nthe backend endpoints. Defaults to `LeastRequest`.",
                    "type": "object",
                    "required": [
                      "type"
                    ],
                    "properties": {
                      "consistentHash": {
                        "description": "ConsistentHash defines the configuration when the load balancer type is\nset to ConsistentHash",
                        "type": "object",
                        "required": [
                          "type"
                        ],
                        "properties": {
                          "cookie": {
                            "description": "Cookie configures the cookie hash policy when the consistent hash type is set to Cookie.",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "attributes": {
                                "description": "Additional Attributes to set for the generated cookie.",
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              },
                              "name": {
                                "description": "Name of the cookie to hash.\nIf this cookie does not exist in the request, Envoy will generate a cookie and set\nthe TTL on the response back to the client based on Layer 4\nattributes of the backend endpoint, to ensure that these future requests\ngo to the same backend endpoint. Make sure to set the TTL field for this case.",
                                "type": "string"
                              },
                              "ttl": {
                                "description": "TTL of the generated cookie if the cookie is not present. This value sets the\nMax-Age attribute value.",
                                "type": "string",
                                "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                              }
                            },
                            "additionalProperties": false
                          },
                          "header": {
                            "description": "Header configures the header hash policy when the consistent hash type is set to Header.",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "description": "Name of the header to hash.",
                                "type": "string"
                              }
                            },
                            "additionalProperties": false
                          },
                          "tableSize": {
                            "description": "The table size for consistent hashing, must be prime number limited to 5000011.",
                            "type": "integer",
                            "format": "int64",
                            "default": 65537,
                            "maximum": 5000011,
                            "minimum": 2
                          },
                          "type": {
                            "description": "ConsistentHashType defines the type of input to hash on. Valid Type values are\n\"SourceIP\",\n\"Header\",\n\"Cookie\".",
                            "type": "string",
                            "enum": [
                              "SourceIP",
                              "Header",
                              "Cookie"
                            ]
                          }
                        },
                        "additionalProperties": false,
                        "x-kubernetes-validations": [
                          {
                            "rule": "self.type == 'Header' ? has(self.header) : !has(self.header)",
                            "message": "If consistent hash type is header, the header field must be set."
                          },
                          {
                            "rule": "self.type == 'Cookie' ? has(self.cookie) : !has(self.cookie)",
                            "message": "If consistent hash type is cookie, the cookie field must be set."
                          }
                        ]
                      },
                      "endpointOverride": {
                        "description": "EndpointOverride defines the configuration for endpoint override.\nWhen specified, the load balancer will attempt to route requests to endpoints\nbased on the override information extracted from request headers or metadata.\n If the override endpoints are not available, the configured load balancer policy will be used as fallback.",
                        "type": "object",
                        "required": [
                          "extractFrom"
                        ],
                        "properties": {
                          "extractFrom": {
                            "description": "ExtractFrom defines the sources to extract endpoint override information from.",
                            "type": "array",
                            "maxItems": 10,
                            "minItems": 1,
                            "items": {
                              "description": "EndpointOverrideExtractFrom defines a source to extract endpoint override information from.",
                              "type": "object",
                              "properties": {
                                "header": {
                                  "description": "Header defines the header to get the override endpoint addresses.\nThe header value must specify at least one endpoint in `IP:Port` format or multiple endpoints in `IP:Port,IP:Port,...` format.\nFor example `10.0.0.5:8080` or `[2600:4040:5204::1574:24ae]:80`.\nThe IPv6 address is enclosed in square brackets.",
                                  "type": "string"
                                }
                              },
                              "additionalProperties": false
                            }
                          }
                        },
                        "additionalProperties": false
                      },
                      "slowStart": {
                        "description": "SlowStart defines the configuration related to the slow start load balancer policy.\nIf set, during slow start window, traffic sent to the newly added hosts will gradually increase.\nCurrently this is only supported for RoundRobin and LeastRequest load balancers",
                        "type": "object",
                        "required": [
                          "window"
                        ],
                        "properties": {
                          "window": {
                            "description": "Window defines the duration of the warm up period for newly added host.\nDuring slow start window, traffic sent to the newly added hosts will gradually increase.\nCurrently only supports linear growth of traffic. For additional details,\nsee https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/cluster/v3/cluster.proto#config-cluster-v3-cluster-slowstartconfig",
                            "type": "string",
                            "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                          }
                        },
                        "additionalProperties": false
                      },
                      "type": {
                        "description": "Type decides the type of Load Balancer policy.\nValid LoadBalancerType values are\n\"ConsistentHash\",\n\"LeastRequest\",\n\"Random\",\n\"RoundRobin\".",
                        "type": "string",
                        "enum": [
                          "ConsistentHash",
                          "LeastRequest",
                          "Random",
                          "RoundRobin"
                        ]
                      },
                      "zoneAware": {
                        "description": "ZoneAware defines the configuration related to the distribution of requests between locality zones.",
                        "type": "object",
                        "properties": {
                          "preferLocal": {
                            "description": "PreferLocalZone configures zone-aware routing to prefer sending traffic to the local locality zone.",
                            "type": "object",
                            "properties": {
                              "force": {
                                "description": "ForceLocalZone defines override configuration for forcing all traffic to stay within the local zone instead of the default behavior\nwhich maintains equal distribution among upstream endpoints while sending as much traffic as possible locally.",
                                "type": "object",
                                "properties": {
                                  "minEndpointsInZoneThreshold": {
                                    "description": "MinEndpointsInZoneThreshold is the minimum number of upstream endpoints in the local zone required to honor the forceLocalZone\noverride. This is useful for protecting zones with fewer endpoints.",
                                    "type": "integer",
                                    "format": "int32"
                                  }
                                },
                                "additionalProperties": false
                              },
                              "minEndpointsThreshold": {
                                "description": "MinEndpointsThreshold is the minimum number of total upstream endpoints across all zones required to enable zone-aware routing.",
                                "type": "integer",
                                "format": "int64"
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false,
                    "x-kubernetes-validations": [
                      {
                        "rule": "self.type == 'ConsistentHash' ? has(self.consistentHash) : !has(self.consistentHash)",
                        "message": "If LoadBalancer type is consistentHash, consistentHash field needs to be set."
                      },
                      {
                        "rule": "self.type in ['Random', 'ConsistentHash'] ? !has(self.slowStart) : true ",
                        "message": "Currently SlowStart is only supported for RoundRobin and LeastRequest load balancers."
                      },
                      {
                        "rule": "self.type == 'ConsistentHash' ? !has(self.zoneAware) : true ",
                        "message": "Currently ZoneAware is only supported for LeastRequest, Random, and RoundRobin load balancers."
                      }
                    ]
                  },
                  "proxyProtocol": {
                    "description": "ProxyProtocol enables the Proxy Protocol when communicating with the backend.",
                    "type": "object",
                    "required": [
                      "version"
                    ],
                    "properties": {
                      "version": {
                        "description": "Version of ProxyProtol\nValid ProxyProtocolVersion values are\n\"V1\"\n\"V2\"",
                        "type": "string",
                        "enum": [
                          "V1",
                          "V2"
                        ]
                      }
                    },
                    "additionalProperties": false
                  },
                  "retry": {
                    "description": "Retry provides more advanced usage, allowing users to customize the number of retries, retry fallback strategy, and retry triggering conditions.\nIf not set, retry will be disabled.",
                    "type": "object",
                    "properties": {
                      "numAttemptsPerPriority": {
                        "description": "NumAttemptsPerPriority defines the number of requests (initial attempt + retries)\nthat should be sent to the same priority before switching to a different one.\nIf not specified or set to 0, all requests are sent to the highest priority that is healthy.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "numRetries": {
                        "description": "NumRetries is the number of retries to be attempted. Defaults to 2.",
                        "type": "integer",
                        "format": "int32",
                        "default": 2,
                        "minimum": 0
                      },
                      "perRetry": {
                        "description": "PerRetry is the retry policy to be applied per retry attempt.",
                        "type": "object",
                        "properties": {
                          "backOff": {
                            "description": "Backoff is the backoff policy to be applied per retry attempt. gateway uses a fully jittered exponential\nback-off algorithm for retries. For additional details,\nsee https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/router_filter#config-http-filters-router-x-envoy-max-retries",
                            "type": "object",
                            "properties": {
                              "baseInterval": {
                                "description": "BaseInterval is the base interval between retries.",
                                "type": "string",
                                "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                              },
                              "maxInterval": {
                                "description": "MaxInterval is the maximum interval between retries. This parameter is optional, but must be greater than or equal to the base_interval if set.\nThe default is 10 times the base_interval",
                                "type": "string",
                                "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                              }
                            },
                            "additionalProperties": false
                          },
                          "timeout": {
                            "description": "Timeout is the timeout per retry attempt.",
                            "type": "string",
                            "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                          }
                        },
                        "additionalProperties": false
                      },
                      "retryOn": {
                        "description": "RetryOn specifies the retry trigger condition.\n\nIf not specified, the default is to retry on connect-failure,refused-stream,unavailable,cancelled,retriable-status-codes(503).",
                        "type": "object",
                        "properties": {
                          "httpStatusCodes": {
                            "description": "HttpStatusCodes specifies the http status codes to be retried.\nThe retriable-status-codes trigger must also be configured for these status codes to trigger a retry.",
                            "type": "array",
                            "items": {
                              "description": "HTTPStatus defines the http status code.",
                              "type": "integer",
                              "maximum": 599,
                              "minimum": 100
                            }
                          },
                          "triggers": {
                            "description": "Triggers specifies the retry trigger condition(Http/Grpc).",
                            "type": "array",
                            "items": {
                              "description": "TriggerEnum specifies the conditions that trigger retries.",
                              "type": "string",
                              "enum": [
                                "5xx",
                                "gateway-error",
                                "reset",
                                "reset-before-request",
                                "connect-failure",
                                "retriable-4xx",
                                "refused-stream",
                                "retriable-status-codes",
                                "cancelled",
                                "deadline-exceeded",
                                "internal",
                                "resource-exhausted",
                                "unavailable"
                              ]
                            }
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  },
                  "tcpKeepalive": {
                    "description": "TcpKeepalive settings associated with the upstream client connection.\nDisabled by default.",
                    "type": "object",
                    "properties": {
                      "idleTime": {
                        "description": "The duration a connection needs to be idle before keep-alive\nprobes start being sent.\nThe duration format is\nDefaults to `7200s`.",
                        "type": "string",
                        "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                      },
                      "interval": {
                        "description": "The duration between keep-alive probes.\nDefaults to `75s`.",
                        "type": "string",
                        "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                      },
                      "probes": {
                        "description": "The total number of unacknowledged probes to send before deciding\nthe connection is dead.\nDefaults to 9.",
                        "type": "integer",
                        "format": "int32"
                      }
                    },
                    "additionalProperties": false
                  },
                  "timeout": {
                    "description": "Timeout settings for the backend connections.",
                    "type": "object",
                    "properties": {
                      "http": {
                        "description": "Timeout settings for HTTP.",
                        "type": "object",
                        "properties": {
                          "connectionIdleTimeout": {
                            "description": "The idle timeout for an HTTP connection. Idle time is defined as a period in which there are no active requests in the connection.\nDefault: 1 hour.",
                            "type": "string",
                            "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                          },
                          "maxConnectionDuration": {
                            "description": "The maximum duration of an HTTP connection.\nDefault: unlimited.",
                            "type": "string",
                            "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                          },
                          "requestTimeout": {
                            "description": "RequestTimeout is the time until which entire response is received from the upstream.",
                            "type": "string",
                            "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                          }
                        },
                        "additionalProperties": false
                      },
                      "tcp": {
                        "description": "Timeout settings for TCP.",
                        "type": "object",
                        "properties": {
                          "connectTimeout": {
                            "description": "The timeout for network connection establishment, including TCP and TLS handshakes.\nDefault: 10 seconds.",
                            "type": "string",
                            "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              },
              "failOpen": {
                "description": "FailOpen is a switch used to control the behavior when failing to call the external processor.\n\nIf FailOpen is set to true, the system bypasses the ExtProc extension and\nallows the traffic to pass through. If it is set to false or\nnot set (defaulting to false), the system blocks the traffic and returns\nan HTTP 5xx error.\n\nIf set to true, the ExtProc extension will also be bypassed if the configuration is invalid.",
                "type": "boolean",
                "default": false
              },
              "messageTimeout": {
                "description": "MessageTimeout is the timeout for a response to be returned from the external processor\nDefault: 200ms",
                "type": "string",
                "pattern": "^([0-9]{1,5}(h|m|s|ms)){1,4}$"
              },
              "metadata": {
                "description": "Metadata defines options related to the sending and receiving of dynamic metadata.\nThese options define which metadata namespaces would be sent to the processor and which dynamic metadata\nnamespaces the processor would be permitted to emit metadata to.\nUsers can specify custom namespaces or well-known envoy metadata namespace (such as envoy.filters.http.ext_authz)\ndocumented here: https://www.envoyproxy.io/docs/envoy/latest/configuration/advanced/well_known_dynamic_metadata#well-known-dynamic-metadata\nDefault: no metadata context is sent or received from the external processor",
                "type": "object",
                "properties": {
                  "accessibleNamespaces": {
                    "description": "AccessibleNamespaces are metadata namespaces that are sent to the external processor as context",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "writableNamespaces": {
                    "description": "WritableNamespaces are metadata namespaces that the external processor can write to",
                    "type": "array",
                    "maxItems": 8,
                    "items": {
                      "type": "string"
                    },
                    "x-kubernetes-validations": [
                      {
                        "rule": "self.all(f, !f.startsWith('envoy.filters.http'))",
                        "message": "writableNamespaces cannot contain well-known Envoy HTTP filter namespaces"
                      }
                    ]
                  }
                },
                "additionalProperties": false
              },
              "processingMode": {
                "description": "ProcessingMode defines how request and response body is processed\nDefault: header and body are not sent to the external processor",
                "type": "object",
                "properties": {
                  "allowModeOverride": {
                    "description": "AllowModeOverride allows the external processor to override the processing mode set via the\n`mode_override` field in the gRPC response message. This defaults to false.",
                    "type": "boolean"
                  },
                  "request": {
                    "description": "Defines processing mode for requests. If present, request headers are sent. Request body is processed according\nto the specified mode.",
                    "type": "object",
                    "properties": {
                      "attributes": {
                        "description": "Defines which attributes are sent to the external processor. Envoy Gateway currently\nsupports only the following attribute prefixes: connection, source, destination,\nrequest, response, upstream and xds.route.\nhttps://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/advanced/attributes",
                        "type": "array",
                        "items": {
                          "type": "string",
                          "pattern": "^(connection\\.|source\\.|destination\\.|request\\.|response\\.|upstream\\.|xds\\.route_)[a-z_1-9]*$"
                        }
                      },
                      "body": {
                        "description": "Defines body processing mode",
                        "type": "string",
                        "enum": [
                          "Streamed",
                          "Buffered",
                          "BufferedPartial",
                          "FullDuplexStreamed"
                        ]
                      }
                    },
                    "additionalProperties": false
                  },
                  "response": {
                    "description": "Defines processing mode for responses. If present, response headers are sent. Response body is processed according\nto the specified mode.",
                    "type": "object",
                    "properties": {
                      "attributes": {
                        "description": "Defines which attributes are sent to the external processor. Envoy Gateway currently\nsupports only the following attribute prefixes: connection, source, destination,\nrequest, response, upstream and xds.route.\nhttps://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/advanced/attributes",
                        "type": "array",
                        "items": {
                          "type": "string",
                          "pattern": "^(connection\\.|source\\.|destination\\.|request\\.|response\\.|upstream\\.|xds\\.route_)[a-z_1-9]*$"
                        }
                      },
                      "body": {
                        "description": "Defines body processing mode",
                        "type": "string",
                        "enum": [
                          "Streamed",
                          "Buffered",
                          "BufferedPartial",
                          "FullDuplexStreamed"
                        ]
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false,
            "x-kubernetes-validations": [
              {
                "rule": "!has(self.backendRef)",
                "message": "BackendRefs must be used, backendRef is not supported."
              },
              {
                "rule": "has(self.backendRefs) ? self.backendRefs.all(f, f.kind == 'Service' || f.kind == 'ServiceImport' || f.kind == 'Backend') : true",
                "message": "BackendRefs only supports Service, ServiceImport, and Backend kind."
              },
              {
                "rule": "has(self.backendRefs) ? (self.backendRefs.all(f, f.group == \"\" || f.group == 'multicluster.x-k8s.io' || f.group == 'gateway.envoyproxy.io')) : true",
                "message": "BackendRefs only supports Core, multicluster.x-k8s.io, and gateway.envoyproxy.io groups."
              },
              {
                "rule": "!(has(self.failOpen) \u0026\u0026 self.failOpen == true \u0026\u0026 has(self.processingMode) \u0026\u0026 ((has(self.processingMode.request) \u0026\u0026 has(self.processingMode.request.body) \u0026\u0026 self.processingMode.request.body == 'FullDuplexStreamed') || (has(self.processingMode.response) \u0026\u0026 has(self.processingMode.response.body) \u0026\u0026 self.processingMode.response.body == 'FullDuplexStreamed')))",
                "message": "If FullDuplexStreamed body processing mode is used, FailOpen must be false."
              }
            ]
          }
        },
        "lua": {
          "description": "Lua is an ordered list of Lua filters\nthat should be added to the envoy filter chain",
          "type": "array",
          "maxItems": 16,
          "items": {
            "description": "Lua defines a Lua extension\nOnly one of Inline or ValueRef must be set",
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "inline": {
                "description": "Inline contains the source code as an inline string.",
                "type": "string"
              },
              "type": {
                "description": "Type is the type of method to use to read the Lua value.\nValid values are Inline and ValueRef, default is Inline.",
                "type": "string",
                "default": "Inline",
                "enum": [
                  "Inline",
                  "ValueRef"
                ]
              },
              "valueRef": {
                "description": "ValueRef has the source code specified as a local object reference.\nOnly a reference to ConfigMap is supported.\nThe value of key `lua` in the ConfigMap will be used.\nIf the key is not found, the first value in the ConfigMap will be used.",
                "type": "object",
                "required": [
                  "group",
                  "kind",
                  "name"
                ],
                "properties": {
                  "group": {
                    "description": "Group is the group of the referent. For example, \"gateway.networking.k8s.io\".\nWhen unspecified or empty string, core API group is inferred.",
                    "type": "string",
                    "maxLength": 253,
                    "pattern": "^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
                  },
                  "kind": {
                    "description": "Kind is kind of the referent. For example \"HTTPRoute\" or \"Service\".",
                    "type": "string",
                    "maxLength": 63,
                    "minLength": 1,
                    "pattern": "^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"
                  },
                  "name": {
                    "description": "Name is the name of the referent.",
                    "type": "string",
                    "maxLength": 253,
                    "minLength": 1
                  }
                },
                "additionalProperties": false,
                "x-kubernetes-validations": [
                  {
                    "rule": "self.kind == 'ConfigMap' \u0026\u0026 (self.group == 'v1' || self.group == '')",
                    "message": "Only a reference to an object of kind ConfigMap belonging to default v1 API group is supported."
                  }
                ]
              }
            },
            "additionalProperties": false,
            "x-kubernetes-validations": [
              {
                "rule": "(self.type == 'Inline' \u0026\u0026 has(self.inline) \u0026\u0026 !has(self.valueRef)) || (self.type == 'ValueRef' \u0026\u0026 !has(self.inline) \u0026\u0026 has(self.valueRef))",
                "message": "Exactly one of inline or valueRef must be set with correct type."
              }
            ]
          }
        },
        "targetRef": {
          "description": "TargetRef is the name of the resource this policy is being attached to.\nThis policy and the TargetRef MUST be in the same namespace for this\nPolicy to have effect\n\nDeprecated: use targetRefs/targetSelectors instead",
          "type": "object",
          "required": [
            "group",
            "kind",
            "name"
          ],
          "properties": {
            "group": {
              "description": "Group is the group of the target resource.",
              "type": "string",
              "maxLength": 253,
              "pattern": "^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
            },
            "kind": {
              "description": "Kind is kind of the target resource.",
              "type": "string",
              "maxLength": 63,
              "minLength": 1,
              "pattern": "^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"
            },
            "name": {
              "description": "Name is the name of the target resource.",
              "type": "string",
              "maxLength": 253,
              "minLength": 1
            },
            "sectionName": {
              "description": "SectionName is the name of a section within the target resource. When\nunspecified, this targetRef targets the entire resource. In the following\nresources, SectionName is interpreted as the following:\n\n* Gateway: Listener name\n* HTTPRoute: HTTPRouteRule name\n* Service: Port name\n\nIf a SectionName is specified, but does not exist on the targeted object,\nthe Policy must fail to attach, and the policy implementation should record\na `ResolvedRefs` or similar Condition in the Policy's status.",
              "type": "string",
              "maxLength": 253,
              "minLength": 1,
              "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
            }
          },
          "additionalProperties": false
        },
        "targetRefs": {
          "description": "TargetRefs are the names of the Gateway resources this policy\nis being attached to.",
          "type": "array",
          "items": {
            "description": "LocalPolicyTargetReferenceWithSectionName identifies an API object to apply a\ndirect policy to. This should be used as part of Policy resources that can\ntarget single resources. For more information on how this policy attachment\nmode works, and a sample Policy resource, refer to the policy attachment\ndocumentation for Gateway API.\n\nNote: This should only be used for direct policy attachment when references\nto SectionName are actually needed. In all other cases,\nLocalPolicyTargetReference should be used.",
            "type": "object",
            "required": [
              "group",
              "kind",
              "name"
            ],
            "properties": {
              "group": {
                "description": "Group is the group of the target resource.",
                "type": "string",
                "maxLength": 253,
                "pattern": "^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
              },
              "kind": {
                "description": "Kind is kind of the target resource.",
                "type": "string",
                "maxLength": 63,
                "minLength": 1,
                "pattern": "^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"
              },
              "name": {
                "description": "Name is the name of the target resource.",
                "type": "string",
                "maxLength": 253,
                "minLength": 1
              },
              "sectionName": {
                "description": "SectionName is the name of a section within the target resource. When\nunspecified, this targetRef targets the entire resource. In the following\nresources, SectionName is interpreted as the following:\n\n* Gateway: Listener name\n* HTTPRoute: HTTPRouteRule name\n* Service: Port name\n\nIf a SectionName is specified, but does not exist on the targeted object,\nthe Policy must fail to attach, and the policy implementation should record\na `ResolvedRefs` or similar Condition in the Policy's status.",
                "type": "string",
                "maxLength": 253,
                "minLength": 1,
                "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
              }
            },
            "additionalProperties": false
          }
        },
        "targetSelectors": {
          "description": "TargetSelectors allow targeting resources for this policy based on labels",
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "kind"
            ],
            "properties": {
              "group": {
                "description": "Group is the group that this selector targets. Defaults to gateway.networking.k8s.io",
                "type": "string",
                "default": "gateway.networking.k8s.io",
                "maxLength": 253,
                "pattern": "^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
              },
              "kind": {
                "description": "Kind is the resource kind that this selector targets.",
                "type": "string",
                "maxLength": 63,
                "minLength": 1,
                "pattern": "^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"
              },
              "matchExpressions": {
                "description": "MatchExpressions is a list of label selector requirements. The requirements are ANDed.",
                "type": "array",
                "items": {
                  "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                  "type": "object",
                  "required": [
                    "key",
                    "operator"
                  ],
                  "properties": {
                    "key": {
                      "description": "key is the label key that the selector applies to.",
                      "type": "string"
                    },
                    "operator": {
                      "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                      "type": "string"
                    },
                    "values": {
                      "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "x-kubernetes-list-type": "atomic"
                    }
                  },
                  "additionalProperties": false
                },
                "x-kubernetes-list-type": "atomic"
              },
              "matchLabels": {
                "description": "MatchLabels are the set of label selectors for identifying the targeted resource",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false,
            "x-kubernetes-validations": [
              {
                "rule": "has(self.group) ? self.group == 'gateway.networking.k8s.io' : true ",
                "message": "group must be gateway.networking.k8s.io"
              }
            ]
          }
        },
        "wasm": {
          "description": "Wasm is a list of Wasm extensions to be loaded by the Gateway.\nOrder matters, as the extensions will be loaded in the order they are\ndefined in this list.",
          "type": "array",
          "maxItems": 16,
          "items": {
            "description": "Wasm defines a Wasm extension.\n\nNote: at the moment, Envoy Gateway does not support configuring Wasm runtime.\nv8 is used as the VM runtime for the Wasm extensions.",
            "type": "object",
            "required": [
              "code"
            ],
            "properties": {
              "code": {
                "description": "Code is the Wasm code for the extension.",
                "type": "object",
                "required": [
                  "type"
                ],
                "properties": {
                  "http": {
                    "description": "HTTP is the HTTP URL containing the Wasm code.\n\nNote that the HTTP server must be accessible from the Envoy proxy.",
                    "type": "object",
                    "required": [
                      "url"
                    ],
                    "properties": {
                      "sha256": {
                        "description": "SHA256 checksum that will be used to verify the Wasm code.\n\nIf not specified, Envoy Gateway will not verify the downloaded Wasm code.\nkubebuilder:validation:Pattern=`^[a-f0-9]{64}$`",
                        "type": "string"
                      },
                      "tls": {
                        "description": "TLS configuration when connecting to the Wasm code source.",
                        "type": "object",
                        "required": [
                          "caCertificateRef"
                        ],
                        "properties": {
                          "caCertificateRef": {
                            "description": "CACertificateRef contains a references to\nKubernetes objects that contain TLS certificates of\nthe Certificate Authorities that can be used\nas a trust anchor to validate the certificates presented by the Wasm code source.\n\nKubernetes ConfigMap and Kubernetes Secret are supported.\nNote: The ConfigMap or Secret must be in the same namespace as the EnvoyExtensionPolicy.",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "group": {
                                "description": "Group is the group of the referent. For example, \"gateway.networking.k8s.io\".\nWhen unspecified or empty string, core API group is inferred.",
                                "type": "string",
                                "default": "",
                                "maxLength": 253,
                                "pattern": "^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
                              },
                              "kind": {
                                "description": "Kind is kind of the referent. For example \"Secret\".",
                                "type": "string",
                                "default": "Secret",
                                "maxLength": 63,
                                "minLength": 1,
                                "pattern": "^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"
                              },
                              "name": {
                                "description": "Name is the name of the referent.",
                                "type": "string",
                                "maxLength": 253,
                                "minLength": 1
                              },
                              "namespace": {
                                "description": "Namespace is the namespace of the referenced object. When unspecified, the local\nnamespace is inferred.\n\nNote that when a namespace different than the local namespace is specified,\na ReferenceGrant object is required in the referent namespace to allow that\nnamespace's owner to accept the reference. See the ReferenceGrant\ndocumentation for details.\n\nSupport: Core",
                                "type": "string",
                                "maxLength": 63,
                                "minLength": 1,
                                "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "additionalProperties": false
                      },
                      "url": {
                        "description": "URL is the URL containing the Wasm code.",
                        "type": "string",
                        "pattern": "^((https?:)(\\/\\/\\/?)([\\w]*(?::[\\w]*)?@)?([\\d\\w\\.-]+)(?::(\\d+))?)?([\\/\\\\\\w\\.()-]*)?(?:([?][^#]*)?(#.*)?)*"
                      }
                    },
                    "additionalProperties": false
                  },
                  "image": {
                    "description": "Image is the OCI image containing the Wasm code.\n\nNote that the image must be accessible from the Envoy Gateway.",
                    "type": "object",
                    "required": [
                      "url"
                    ],
                    "properties": {
                      "pullSecretRef": {
                        "description": "PullSecretRef is a reference to the secret containing the credentials to pull the image.\nOnly support Kubernetes Secret resource from the same namespace.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "group": {
                            "description": "Group is the group of the referent. For example, \"gateway.networking.k8s.io\".\nWhen unspecified or empty string, core API group is inferred.",
                            "type": "string",
                            "default": "",
                            "maxLength": 253,
                            "pattern": "^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
                          },
                          "kind": {
                            "description": "Kind is kind of the referent. For example \"Secret\".",
                            "type": "string",
                            "default": "Secret",
                            "maxLength": 63,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"
                          },
                          "name": {
                            "description": "Name is the name of the referent.",
                            "type": "string",
                            "maxLength": 253,
                            "minLength": 1
                          },
                          "namespace": {
                            "description": "Namespace is the namespace of the referenced object. When unspecified, the local\nnamespace is inferred.\n\nNote that when a namespace different than the local namespace is specified,\na ReferenceGrant object is required in the referent namespace to allow that\nnamespace's owner to accept the reference. See the ReferenceGrant\ndocumentation for details.\n\nSupport: Core",
                            "type": "string",
                            "maxLength": 63,
                            "minLength": 1,
                            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                          }
                        },
                        "additionalProperties": false,
                        "x-kubernetes-validations": [
                          {
                            "rule": "self.kind == 'Secret'",
                            "message": "only support Secret kind."
                          }
                        ]
                      },
                      "sha256": {
                        "description": "SHA256 checksum that will be used to verify the OCI image.\n\nIt must match the digest of the OCI image.\n\nIf not specified, Envoy Gateway will not verify the downloaded OCI image.\nkubebuilder:validation:Pattern=`^[a-f0-9]{64}$`",
                        "type": "string"
                      },
                      "tls": {
                        "description": "TLS configuration when connecting to the Wasm code source.",
                        "type": "object",
                        "required": [
                          "caCertificateRef"
                        ],
                        "properties": {
                          "caCertificateRef": {
                            "description": "CACertificateRef contains a references to\nKubernetes objects that contain TLS certificates of\nthe Certificate Authorities that can be used\nas a trust anchor to validate the certificates presented by the Wasm code source.\n\nKubernetes ConfigMap and Kubernetes Secret are supported.\nNote: The ConfigMap or Secret must be in the same namespace as the EnvoyExtensionPolicy.",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "group": {
                                "description": "Group is the group of the referent. For example, \"gateway.networking.k8s.io\".\nWhen unspecified or empty string, core API group is inferred.",
                                "type": "string",
                                "default": "",
                                "maxLength": 253,
                                "pattern": "^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
                              },
                              "kind": {
                                "description": "Kind is kind of the referent. For example \"Secret\".",
                                "type": "string",
                                "default": "Secret",
                                "maxLength": 63,
                                "minLength": 1,
                                "pattern": "^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"
                              },
                              "name": {
                                "description": "Name is the name of the referent.",
                                "type": "string",
                                "maxLength": 253,
                                "minLength": 1
                              },
                              "namespace": {
                                "description": "Namespace is the namespace of the referenced object. When unspecified, the local\nnamespace is inferred.\n\nNote that when a namespace different than the local namespace is specified,\na ReferenceGrant object is required in the referent namespace to allow that\nnamespace's owner to accept the reference. See the ReferenceGrant\ndocumentation for details.\n\nSupport: Core",
                                "type": "string",
                                "maxLength": 63,
                                "minLength": 1,
                                "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "additionalProperties": false
                      },
                      "url": {
                        "description": "URL is the URL of the OCI image.\nURL can be in the format of `registry/image:tag` or `registry/image@sha256:digest`.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "pullPolicy": {
                    "description": "PullPolicy is the policy to use when pulling the Wasm module by either the HTTP or Image source.\nThis field is only applicable when the SHA256 field is not set.\n\nIf not specified, the default policy is IfNotPresent except for OCI images whose tag is latest.\n\nNote: EG does not update the Wasm module every time an Envoy proxy requests\nthe Wasm module even if the pull policy is set to Always.\nIt only updates the Wasm module when the EnvoyExtension resource version changes.",
                    "type": "string",
                    "enum": [
                      "IfNotPresent",
                      "Always"
                    ]
                  },
                  "type": {
                    "description": "Type is the type of the source of the Wasm code.\nValid WasmCodeSourceType values are \"HTTP\" or \"Image\".",
                    "type": "string",
                    "allOf": [
                      {
                        "enum": [
                          "HTTP",
                          "Image"
                        ]
                      },
                      {
                        "enum": [
                          "HTTP",
                          "Image",
                          "ConfigMap"
                        ]
                      }
                    ]
                  }
                },
                "additionalProperties": false,
                "x-kubernetes-validations": [
                  {
                    "rule": "self.type == 'HTTP' ? has(self.http) : !has(self.http)",
                    "message": "If type is HTTP, http field needs to be set."
                  },
                  {
                    "rule": "self.type == 'Image' ? has(self.image) : !has(self.image)",
                    "message": "If type is Image, image field needs to be set."
                  }
                ]
              },
              "config": {
                "description": "Config is the configuration for the Wasm extension.\nThis configuration will be passed as a JSON string to the Wasm extension.",
                "x-kubernetes-preserve-unknown-fields": true
              },
              "env": {
                "description": "Env configures the environment for the Wasm extension",
                "type": "object",
                "properties": {
                  "hostKeys": {
                    "description": "HostKeys is a list of keys for environment variables from the host envoy process\nthat should be passed into the Wasm VM. This is useful for passing secrets to to Wasm extensions.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "additionalProperties": false
              },
              "failOpen": {
                "description": "FailOpen is a switch used to control the behavior when a fatal error occurs\nduring the initialization or the execution of the Wasm extension.\n\nIf FailOpen is set to true, the system bypasses the Wasm extension and\nallows the traffic to pass through. If it is set to false or\nnot set (defaulting to false), the system blocks the traffic and returns\nan HTTP 5xx error.\n\nIf set to true, the Wasm extension will also be bypassed if the configuration is invalid.",
                "type": "boolean",
                "default": false
              },
              "name": {
                "description": "Name is a unique name for this Wasm extension. It is used to identify the\nWasm extension if multiple extensions are handled by the same vm_id and root_id.\nIt's also used for logging/debugging.\nIf not specified, EG will generate a unique name for the Wasm extension.",
                "type": "string"
              },
              "rootID": {
                "description": "RootID is a unique ID for a set of extensions in a VM which will share a\nRootContext and Contexts if applicable (e.g., an Wasm HttpFilter and an Wasm AccessLog).\nIf left blank, all extensions with a blank root_id with the same vm_id will share Context(s).\n\nNote: RootID must match the root_id parameter used to register the Context in the Wasm code.",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        }
      },
      "additionalProperties": false,
      "x-kubernetes-validations": [
        {
          "rule": "(has(self.targetRef) \u0026\u0026 !has(self.targetRefs)) || (!has(self.targetRef) \u0026\u0026 has(self.targetRefs)) || (has(self.targetSelectors) \u0026\u0026 self.targetSelectors.size() \u003e 0) ",
          "message": "either targetRef or targetRefs must be used"
        },
        {
          "rule": "has(self.targetRef) ? self.targetRef.group == 'gateway.networking.k8s.io' : true",
          "message": "this policy can only have a targetRef.group of gateway.networking.k8s.io"
        },
        {
          "rule": "has(self.targetRef) ? self.targetRef.kind in ['Gateway', 'HTTPRoute', 'GRPCRoute', 'UDPRoute', 'TCPRoute', 'TLSRoute'] : true",
          "message": "this policy can only have a targetRef.kind of Gateway/HTTPRoute/GRPCRoute/TCPRoute/UDPRoute/TLSRoute"
        },
        {
          "rule": "has(self.targetRef) ? !has(self.targetRef.sectionName) : true",
          "message": "this policy does not yet support the sectionName field"
        },
        {
          "rule": "has(self.targetRefs) ? self.targetRefs.all(ref, ref.group == 'gateway.networking.k8s.io') : true ",
          "message": "this policy can only have a targetRefs[*].group of gateway.networking.k8s.io"
        },
        {
          "rule": "has(self.targetRefs) ? self.targetRefs.all(ref, ref.kind in ['Gateway', 'HTTPRoute', 'GRPCRoute', 'UDPRoute', 'TCPRoute', 'TLSRoute']) : true ",
          "message": "this policy can only have a targetRefs[*].kind of Gateway/HTTPRoute/GRPCRoute/TCPRoute/UDPRoute/TLSRoute"
        },
        {
          "rule": "has(self.targetRefs) ? self.targetRefs.all(ref, !has(ref.sectionName)) : true",
          "message": "this policy does not yet support the sectionName field"
        }
      ]
    },
    "status": {
      "description": "Status defines the current status of EnvoyExtensionPolicy.",
      "type": "object",
      "required": [
        "ancestors"
      ],
      "properties": {
        "ancestors": {
          "description": "Ancestors is a list of ancestor resources (usually Gateways) that are\nassociated with the policy, and the status of the policy with respect to\neach ancestor. When this policy attaches to a parent, the controller that\nmanages the parent and the ancestors MUST add an entry to this list when\nthe controller first sees the policy and SHOULD update the entry as\nappropriate when the relevant ancestor is modified.\n\nNote that choosing the relevant ancestor is left to the Policy designers;\nan important part of Policy design is designing the right object level at\nwhich to namespace this status.\n\nNote also that implementations MUST ONLY populate ancestor status for\nthe Ancestor resources they are responsible for. Implementations MUST\nuse the ControllerName field to uniquely identify the entries in this list\nthat they are responsible for.\n\nNote that to achieve this, the list of PolicyAncestorStatus structs\nMUST be treated as a map with a composite key, made up of the AncestorRef\nand ControllerName fields combined.\n\nA maximum of 16 ancestors will be represented in this list. An empty list\nmeans the Policy is not relevant for any ancestors.\n\nIf this slice is full, implementations MUST NOT add further entries.\nInstead they MUST consider the policy unimplementable and signal that\non any related resources such as the ancestor that would be referenced\nhere. For example, if this list was full on BackendTLSPolicy, no\nadditional Gateways would be able to reference the Service targeted by\nthe BackendTLSPolicy.",
          "type": "array",
          "maxItems": 16,
          "items": {
            "description": "PolicyAncestorStatus describes the status of a route with respect to an\nassociated Ancestor.\n\nAncestors refer to objects that are either the Target of a policy or above it\nin terms of object hierarchy. For example, if a policy targets a Service, the\nPolicy's Ancestors are, in order, the Service, the HTTPRoute, the Gateway, and\nthe GatewayClass. Almost always, in this hierarchy, the Gateway will be the most\nuseful object to place Policy status on, so we recommend that implementations\nSHOULD use Gateway as the PolicyAncestorStatus object unless the designers\nhave a _very_ good reason otherwise.\n\nIn the context of policy attachment, the Ancestor is used to distinguish which\nresource results in a distinct application of this policy. For example, if a policy\ntargets a Service, it may have a distinct result per attached Gateway.\n\nPolicies targeting the same resource may have different effects depending on the\nancestors of those resources. For example, different Gateways targeting the same\nService may have different capabilities, especially if they have different underlying\nimplementations.\n\nFor example, in BackendTLSPolicy, the Policy attaches to a Service that is\nused as a backend in a HTTPRoute that is itself attached to a Gateway.\nIn this case, the relevant object for status is the Gateway, and that is the\nancestor object referred to in this status.\n\nNote that a parent is also an ancestor, so for objects where the parent is the\nrelevant object for status, this struct SHOULD still be used.\n\nThis struct is intended to be used in a slice that's effectively a map,\nwith a composite key made up of the AncestorRef and the ControllerName.",
            "type": "object",
            "required": [
              "ancestorRef",
              "controllerName"
            ],
            "properties": {
              "ancestorRef": {
                "description": "AncestorRef corresponds with a ParentRef in the spec that this\nPolicyAncestorStatus struct describes the status of.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "group": {
                    "description": "Group is the group of the referent.\nWhen unspecified, \"gateway.networking.k8s.io\" is inferred.\nTo set the core API group (such as for a \"Service\" kind referent),\nGroup must be explicitly set to \"\" (empty string).\n\nSupport: Core",
                    "type": "string",
                    "default": "gateway.networking.k8s.io",
                    "maxLength": 253,
                    "pattern": "^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
                  },
                  "kind": {
                    "description": "Kind is kind of the referent.\n\nThere are two kinds of parent resources with \"Core\" support:\n\n* Gateway (Gateway conformance profile)\n* Service (Mesh conformance profile, ClusterIP Services only)\n\nSupport for other resources is Implementation-Specific.",
                    "type": "string",
                    "default": "Gateway",
                    "maxLength": 63,
                    "minLength": 1,
                    "pattern": "^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"
                  },
                  "name": {
                    "description": "Name is the name of the referent.\n\nSupport: Core",
                    "type": "string",
                    "maxLength": 253,
                    "minLength": 1
                  },
                  "namespace": {
                    "description": "Namespace is the namespace of the referent. When unspecified, this refers\nto the local namespace of the Route.\n\nNote that there are specific rules for ParentRefs which cross namespace\nboundaries. Cross-namespace references are only valid if they are explicitly\nallowed by something in the namespace they are referring to. For example:\nGateway has the AllowedRoutes field, and ReferenceGrant provides a\ngeneric way to enable any other kind of cross-namespace reference.\n\n\u003cgateway:experimental:description\u003e\nParentRefs from a Route to a Service in the same namespace are \"producer\"\nroutes, which apply default routing rules to inbound connections from\nany namespace to the Service.\n\nParentRefs from a Route to a Service in a different namespace are\n\"consumer\" routes, and these routing rules are only applied to outbound\nconnections originating from the same namespace as the Route, for which\nthe intended destination of the connections are a Service targeted as a\nParentRef of the Route.\n\u003c/gateway:experimental:description\u003e\n\nSupport: Core",
                    "type": "string",
                    "maxLength": 63,
                    "minLength": 1,
                    "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                  },
                  "port": {
                    "description": "Port is the network port this Route targets. It can be interpreted\ndifferently based on the type of parent resource.\n\nWhen the parent resource is a Gateway, this targets all listeners\nlistening on the specified port that also support this kind of Route(and\nselect this Route). It's not recommended to set `Port` unless the\nnetworking behaviors specified in a Route must apply to a specific port\nas opposed to a listener(s) whose port(s) may be changed. When both Port\nand SectionName are specified, the name and port of the selected listener\nmust match both specified values.\n\n\u003cgateway:experimental:description\u003e\nWhen the parent resource is a Service, this targets a specific port in the\nService spec. When both Port (experimental) and SectionName are specified,\nthe name and port of the selected port must match both specified values.\n\u003c/gateway:experimental:description\u003e\n\nImplementations MAY choose to support other parent resources.\nImplementations supporting other types of parent resources MUST clearly\ndocument how/if Port is interpreted.\n\nFor the purpose of status, an attachment is considered successful as\nlong as the parent resource accepts it partially. For example, Gateway\nlisteners can restrict which Routes can attach to them by Route kind,\nnamespace, or hostname. If 1 of 2 Gateway listeners accept attachment\nfrom the referencing Route, the Route MUST be considered successfully\nattached. If no Gateway listeners accept attachment from this Route,\nthe Route MUST be considered detached from the Gateway.\n\nSupport: Extended",
                    "type": "integer",
                    "format": "int32",
                    "maximum": 65535,
                    "minimum": 1
                  },
                  "sectionName": {
                    "description": "SectionName is the name of a section within the target resource. In the\nfollowing resources, SectionName is interpreted as the following:\n\n* Gateway: Listener name. When both Port (experimental) and SectionName\nare specified, the name and port of the selected listener must match\nboth specified values.\n* Service: Port name. When both Port (experimental) and SectionName\nare specified, the name and port of the selected listener must match\nboth specified values.\n\nImplementations MAY choose to support attaching Routes to other resources.\nIf that is the case, they MUST clearly document how SectionName is\ninterpreted.\n\nWhen unspecified (empty string), this will reference the entire resource.\nFor the purpose of status, an attachment is considered successful if at\nleast one section in the parent resource accepts it. For example, Gateway\nlisteners can restrict which Routes can attach to them by Route kind,\nnamespace, or hostname. If 1 of 2 Gateway listeners accept attachment from\nthe referencing Route, the Route MUST be considered successfully\nattached. If no Gateway listeners accept attachment from this Route, the\nRoute MUST be considered detached from the Gateway.\n\nSupport: Core",
                    "type": "string",
                    "maxLength": 253,
                    "minLength": 1,
                    "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
                  }
                },
                "additionalProperties": false
              },
              "conditions": {
                "description": "Conditions describes the status of the Policy with respect to the given Ancestor.",
                "type": "array",
                "maxItems": 8,
                "minItems": 1,
                "items": {
                  "description": "Condition contains details for one aspect of the current state of this API Resource.",
                  "type": "object",
                  "required": [
                    "lastTransitionTime",
                    "message",
                    "reason",
                    "status",
                    "type"
                  ],
                  "properties": {
                    "lastTransitionTime": {
                      "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                      "type": "string",
                      "format": "date-time"
                    },
                    "message": {
                      "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                      "type": "string",
                      "maxLength": 32768
                    },
                    "observedGeneration": {
                      "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                      "type": "integer",
                      "format": "int64",
                      "minimum": 0
                    },
                    "reason": {
                      "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                      "type": "string",
                      "maxLength": 1024,
                      "minLength": 1,
                      "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
                    },
                    "status": {
                      "description": "status of the condition, one of True, False, Unknown.",
                      "type": "string",
                      "enum": [
                        "True",
                        "False",
                        "Unknown"
                      ]
                    },
                    "type": {
                      "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                      "type": "string",
                      "maxLength": 316,
                      "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                    }
                  },
                  "additionalProperties": false
                },
                "x-kubernetes-list-map-keys": [
                  "type"
                ],
                "x-kubernetes-list-type": "map"
              },
              "controllerName": {
                "description": "ControllerName is a domain/path string that indicates the name of the\ncontroller that wrote this status. This corresponds with the\ncontrollerName field on GatewayClass.\n\nExample: \"example.net/gateway-controller\".\n\nThe format of this field is DOMAIN \"/\" PATH, where DOMAIN and PATH are\nvalid Kubernetes names\n(https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).\n\nControllers MUST populate this field when writing status. Controllers should ensure that\nentries to status populated with their ControllerName are cleaned up when they are no\nlonger necessary.",
                "type": "string",
                "maxLength": 253,
                "minLength": 1,
                "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*\\/[A-Za-z0-9\\/\\-._~%!$\u0026'()*+,;=:]+$"
              }
            },
            "additionalProperties": false
          }
        }
      },
      "additionalProperties": false
    }
  }
}
