{
  "description": "HTTPRouteFilter is a custom Envoy Gateway HTTPRouteFilter which provides extended\ntraffic processing options such as path regex rewrite, direct response and more.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "Spec defines the desired state of HTTPRouteFilter.",
      "type": "object",
      "properties": {
        "credentialInjection": {
          "description": "HTTPCredentialInjectionFilter defines the configuration to inject credentials into the request.\nThis is useful when the backend service requires credentials in the request, and the original\nrequest does not contain them. The filter can inject credentials into the request before forwarding\nit to the backend service.",
          "type": "object",
          "required": [
            "credential"
          ],
          "properties": {
            "credential": {
              "description": "Credential is the credential to be injected.",
              "type": "object",
              "required": [
                "valueRef"
              ],
              "properties": {
                "valueRef": {
                  "description": "ValueRef is a reference to the secret containing the credentials to be injected.\nThis is an Opaque secret. The credential should be stored in the key\n\"credential\", and the value should be the credential to be injected.\nFor example, for basic authentication, the value should be \"Basic \u003cbase64 encoded username:password\u003e\".\nfor bearer token, the value should be \"Bearer \u003ctoken\u003e\".\nNote: The secret must be in the same namespace as the HTTPRouteFilter.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "group": {
                      "description": "Group is the group of the referent. For example, \"gateway.networking.k8s.io\".\nWhen unspecified or empty string, core API group is inferred.",
                      "type": "string",
                      "default": "",
                      "maxLength": 253,
                      "pattern": "^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
                    },
                    "kind": {
                      "description": "Kind is kind of the referent. For example \"Secret\".",
                      "type": "string",
                      "default": "Secret",
                      "maxLength": 63,
                      "minLength": 1,
                      "pattern": "^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"
                    },
                    "name": {
                      "description": "Name is the name of the referent.",
                      "type": "string",
                      "maxLength": 253,
                      "minLength": 1
                    },
                    "namespace": {
                      "description": "Namespace is the namespace of the referenced object. When unspecified, the local\nnamespace is inferred.\n\nNote that when a namespace different than the local namespace is specified,\na ReferenceGrant object is required in the referent namespace to allow that\nnamespace's owner to accept the reference. See the ReferenceGrant\ndocumentation for details.\n\nSupport: Core",
                      "type": "string",
                      "maxLength": 63,
                      "minLength": 1,
                      "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "header": {
              "description": "Header is the name of the header where the credentials are injected.\nIf not specified, the credentials are injected into the Authorization header.",
              "type": "string"
            },
            "overwrite": {
              "description": "Whether to overwrite the value or not if the injected headers already exist.\nIf not specified, the default value is false.",
              "type": "boolean"
            }
          },
          "additionalProperties": false
        },
        "directResponse": {
          "description": "HTTPDirectResponseFilter defines the configuration to return a fixed response.",
          "type": "object",
          "properties": {
            "body": {
              "description": "Body of the Response",
              "type": "object",
              "required": [
                "type"
              ],
              "properties": {
                "inline": {
                  "description": "Inline contains the value as an inline string.",
                  "type": "string"
                },
                "type": {
                  "description": "Type is the type of method to use to read the body value.\nValid values are Inline and ValueRef, default is Inline.",
                  "type": "string",
                  "default": "Inline",
                  "allOf": [
                    {
                      "enum": [
                        "Inline",
                        "ValueRef"
                      ]
                    },
                    {
                      "enum": [
                        "Inline",
                        "ValueRef"
                      ]
                    }
                  ]
                },
                "valueRef": {
                  "description": "ValueRef contains the contents of the body\nspecified as a local object reference.\nOnly a reference to ConfigMap is supported.\n\nThe value of key `response.body` in the ConfigMap will be used as the response body.\nIf the key is not found, the first value in the ConfigMap will be used.",
                  "type": "object",
                  "required": [
                    "group",
                    "kind",
                    "name"
                  ],
                  "properties": {
                    "group": {
                      "description": "Group is the group of the referent. For example, \"gateway.networking.k8s.io\".\nWhen unspecified or empty string, core API group is inferred.",
                      "type": "string",
                      "maxLength": 253,
                      "pattern": "^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
                    },
                    "kind": {
                      "description": "Kind is kind of the referent. For example \"HTTPRoute\" or \"Service\".",
                      "type": "string",
                      "maxLength": 63,
                      "minLength": 1,
                      "pattern": "^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"
                    },
                    "name": {
                      "description": "Name is the name of the referent.",
                      "type": "string",
                      "maxLength": 253,
                      "minLength": 1
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false,
              "x-kubernetes-validations": [
                {
                  "rule": "(!has(self.type) || self.type == 'Inline')? has(self.inline) : true",
                  "message": "inline must be set for type Inline"
                },
                {
                  "rule": "(has(self.type) \u0026\u0026 self.type == 'ValueRef')? has(self.valueRef) : true",
                  "message": "valueRef must be set for type ValueRef"
                },
                {
                  "rule": "has(self.valueRef) ? self.valueRef.kind == 'ConfigMap' : true",
                  "message": "only ConfigMap is supported for ValueRef"
                }
              ]
            },
            "contentType": {
              "description": "Content Type of the response. This will be set in the Content-Type header.",
              "type": "string"
            },
            "statusCode": {
              "description": "Status Code of the HTTP response\nIf unset, defaults to 200.",
              "type": "integer"
            }
          },
          "additionalProperties": false
        },
        "urlRewrite": {
          "description": "HTTPURLRewriteFilter define rewrites of HTTP URL components such as path and host",
          "type": "object",
          "properties": {
            "hostname": {
              "description": "Hostname is the value to be used to replace the Host header value during\nforwarding.",
              "type": "object",
              "required": [
                "type"
              ],
              "properties": {
                "header": {
                  "description": "Header is the name of the header whose value would be used to rewrite the Host header",
                  "type": "string"
                },
                "type": {
                  "description": "HTTPPathModifierType defines the type of Hostname rewrite.",
                  "type": "string",
                  "enum": [
                    "Header",
                    "Backend"
                  ]
                }
              },
              "additionalProperties": false,
              "x-kubernetes-validations": [
                {
                  "rule": "!(has(self.header) \u0026\u0026 self.type != 'Header')",
                  "message": "header must be nil if the type is not Header"
                },
                {
                  "rule": "!(!has(self.header) \u0026\u0026 self.type == 'Header')",
                  "message": "header must be specified for Header type"
                }
              ]
            },
            "path": {
              "description": "Path defines a path rewrite.",
              "type": "object",
              "required": [
                "type"
              ],
              "properties": {
                "replaceRegexMatch": {
                  "description": "ReplaceRegexMatch defines a path regex rewrite. The path portions matched by the regex pattern are replaced by the defined substitution.\nhttps://www.envoyproxy.io/docs/envoy/latest/api-v3/config/route/v3/route_components.proto#envoy-v3-api-field-config-route-v3-routeaction-regex-rewrite\nSome examples:\n(1) replaceRegexMatch:\n      pattern: ^/service/([^/]+)(/.*)$\n      substitution: \\2/instance/\\1\n    Would transform /service/foo/v1/api into /v1/api/instance/foo.\n(2) replaceRegexMatch:\n      pattern: one\n      substitution: two\n    Would transform /xxx/one/yyy/one/zzz into /xxx/two/yyy/two/zzz.\n(3) replaceRegexMatch:\n      pattern: ^(.*?)one(.*)$\n      substitution: \\1two\\2\n    Would transform /xxx/one/yyy/one/zzz into /xxx/two/yyy/one/zzz.\n(3) replaceRegexMatch:\n      pattern: (?i)/xxx/\n      substitution: /yyy/\n    Would transform path /aaa/XxX/bbb into /aaa/yyy/bbb (case-insensitive).",
                  "type": "object",
                  "required": [
                    "pattern",
                    "substitution"
                  ],
                  "properties": {
                    "pattern": {
                      "description": "Pattern matches a regular expression against the value of the HTTP Path.The regex string must\nadhere to the syntax documented in https://github.com/google/re2/wiki/Syntax.",
                      "type": "string",
                      "minLength": 1
                    },
                    "substitution": {
                      "description": "Substitution is an expression that replaces the matched portion.The expression may include numbered\ncapture groups that adhere to syntax documented in https://github.com/google/re2/wiki/Syntax.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "type": {
                  "description": "HTTPPathModifierType defines the type of path redirect or rewrite.",
                  "type": "string",
                  "enum": [
                    "ReplaceRegexMatch"
                  ]
                }
              },
              "additionalProperties": false,
              "x-kubernetes-validations": [
                {
                  "rule": "self.type == 'ReplaceRegexMatch' ? has(self.replaceRegexMatch) : !has(self.replaceRegexMatch)",
                  "message": "If HTTPPathModifier type is ReplaceRegexMatch, replaceRegexMatch field needs to be set."
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  }
}
