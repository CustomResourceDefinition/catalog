{
  "description": "A Composition defines a collection of managed resources or functions that\nCrossplane uses to create and manage new composite resources.\n\nRead the Crossplane documentation for\n[more information about Compositions](https://docs.crossplane.io/latest/concepts/compositions).",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "CompositionSpec specifies desired state of a composition.",
      "type": "object",
      "required": [
        "compositeTypeRef"
      ],
      "properties": {
        "compositeTypeRef": {
          "description": "CompositeTypeRef specifies the type of composite resource that this\ncomposition is compatible with.",
          "type": "object",
          "required": [
            "apiVersion",
            "kind"
          ],
          "properties": {
            "apiVersion": {
              "description": "APIVersion of the type.",
              "type": "string"
            },
            "kind": {
              "description": "Kind of the type.",
              "type": "string"
            }
          },
          "additionalProperties": false,
          "x-kubernetes-validations": [
            {
              "rule": "self == oldSelf",
              "message": "Value is immutable"
            }
          ]
        },
        "mode": {
          "description": "Mode controls what type or \"mode\" of Composition will be used.\n\n\"Pipeline\" indicates that a Composition specifies a pipeline of\nfunctions, each of which is responsible for producing composed\nresources that Crossplane should create or update.",
          "type": "string",
          "default": "Pipeline",
          "enum": [
            "Pipeline"
          ]
        },
        "pipeline": {
          "description": "Pipeline is a list of composition function steps that will be used when a\ncomposite resource referring to this composition is created. One of\nresources and pipeline must be specified - you cannot specify both.\n\nThe Pipeline is only used by the \"Pipeline\" mode of Composition. It is\nignored by other modes.",
          "type": "array",
          "maxItems": 99,
          "minItems": 1,
          "items": {
            "description": "A PipelineStep in a function pipeline.",
            "type": "object",
            "required": [
              "functionRef",
              "step"
            ],
            "properties": {
              "credentials": {
                "description": "Credentials are optional credentials that the function needs.",
                "type": "array",
                "items": {
                  "description": "FunctionCredentials are optional credentials that a function\nneeds to run.",
                  "type": "object",
                  "required": [
                    "name",
                    "source"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name of this set of credentials.",
                      "type": "string"
                    },
                    "secretRef": {
                      "description": "A SecretRef is a reference to a secret containing credentials that should\nbe supplied to the function.",
                      "type": "object",
                      "required": [
                        "name",
                        "namespace"
                      ],
                      "properties": {
                        "name": {
                          "description": "Name of the secret.",
                          "type": "string"
                        },
                        "namespace": {
                          "description": "Namespace of the secret.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    },
                    "source": {
                      "description": "Source of the function credentials.",
                      "type": "string",
                      "enum": [
                        "None",
                        "Secret"
                      ]
                    }
                  },
                  "additionalProperties": false,
                  "x-kubernetes-validations": [
                    {
                      "rule": "self.source == 'Secret' \u0026\u0026 has(self.secretRef)",
                      "message": "the Secret source requires a secretRef"
                    }
                  ]
                },
                "x-kubernetes-list-map-keys": [
                  "name"
                ],
                "x-kubernetes-list-type": "map"
              },
              "functionRef": {
                "description": "FunctionRef is a reference to the function this step should\nexecute.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Name of the referenced Function.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              },
              "input": {
                "description": "Input is an optional, arbitrary Kubernetes resource (i.e. a resource\nwith an apiVersion and kind) that will be passed to the function as\nthe 'input' of its RunFunctionRequest.",
                "type": "object",
                "x-kubernetes-preserve-unknown-fields": true,
                "x-kubernetes-embedded-resource": true
              },
              "requirements": {
                "description": "Requirements are resource requirements that will be satisfied before\nthis pipeline step is called for the first time. This allows\npre-populating required resources without requiring a function to\nrequest them first.",
                "type": "object",
                "properties": {
                  "requiredResources": {
                    "description": "RequiredResources is a list of resources that must be fetched before\nthis function is called.",
                    "type": "array",
                    "items": {
                      "description": "RequiredResourceSelector selects a required resource.",
                      "type": "object",
                      "required": [
                        "apiVersion",
                        "kind",
                        "requirementName"
                      ],
                      "properties": {
                        "apiVersion": {
                          "description": "APIVersion of the required resource.",
                          "type": "string"
                        },
                        "kind": {
                          "description": "Kind of the required resource.",
                          "type": "string"
                        },
                        "matchLabels": {
                          "description": "MatchLabels specifies the set of labels to match for finding the\nrequired resource. When specified, Name is ignored.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "name": {
                          "description": "Name of the required resource.",
                          "type": "string"
                        },
                        "namespace": {
                          "description": "Namespace of the required resource if it is namespaced.",
                          "type": "string"
                        },
                        "requirementName": {
                          "description": "RequirementName is the unique name to identify this required resource\nin the Required Resources map in the function request.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false,
                      "x-kubernetes-validations": [
                        {
                          "rule": "(has(self.name) \u0026\u0026 !has(self.matchLabels)) || (!has(self.name) \u0026\u0026 has(self.matchLabels))",
                          "message": "Either name or matchLabels must be specified, but not both"
                        }
                      ]
                    },
                    "x-kubernetes-list-map-keys": [
                      "requirementName"
                    ],
                    "x-kubernetes-list-type": "map"
                  }
                },
                "additionalProperties": false
              },
              "step": {
                "description": "Step name. Must be unique within its Pipeline.",
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "step"
          ],
          "x-kubernetes-list-type": "map"
        },
        "writeConnectionSecretsToNamespace": {
          "description": "WriteConnectionSecretsToNamespace specifies the namespace in which the\nconnection secrets of composite resource dynamically provisioned using\nthis composition will be created.",
          "type": "string"
        }
      },
      "additionalProperties": false,
      "x-kubernetes-validations": [
        {
          "rule": "self.mode == 'Pipeline' \u0026\u0026 has(self.pipeline)",
          "message": "an array of pipeline steps is required in Pipeline mode"
        }
      ]
    }
  }
}
