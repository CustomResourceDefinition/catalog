{
  "description": "Composition defines the group of resources to be created when a compatible type is created with reference to the composition.",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "CompositionSpec specifies the desired state of the definition.",
      "type": "object",
      "required": [
        "from",
        "to",
        "writeConnectionSecretsToNamespace"
      ],
      "properties": {
        "from": {
          "description": "From refers to the type that this composition is compatible. The values for the underlying resources will be fetched from the instances of the From.",
          "type": "object",
          "required": [
            "apiVersion",
            "kind"
          ],
          "properties": {
            "apiVersion": {
              "description": "APIVersion of the type.",
              "type": "string"
            },
            "kind": {
              "description": "Kind of the type.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "reclaimPolicy": {
          "description": "ReclaimPolicy specifies what will happen to composite resource dynamically provisioned using this composition when their namespaced referrer is deleted. The \"Delete\" policy causes the composite resource to be deleted when its namespaced referrer is deleted. The \"Retain\" policy causes the composite resource to be retained, in binding phase \"Released\", when its namespaced referrer is deleted. The \"Retain\" policy is used when no policy is specified, however the \"Delete\" policy is set at dynamic provisioning time if no policy is set.",
          "type": "string",
          "enum": [
            "Retain",
            "Delete"
          ]
        },
        "to": {
          "description": "To is the list of target resources that make up the composition.",
          "type": "array",
          "items": {
            "description": "ComposedTemplate is used to provide information about how the composed resource should be processed.",
            "type": "object",
            "required": [
              "base"
            ],
            "properties": {
              "base": {
                "description": "Base is the target resource that the patches will be applied on.",
                "type": "object"
              },
              "connectionDetails": {
                "description": "ConnectionDetails lists the propagation secret keys from this target resource to the composition instance connection secret.",
                "type": "array",
                "items": {
                  "description": "ConnectionDetail includes the information about the propagation of the connection information from one secret to another.",
                  "type": "object",
                  "properties": {
                    "fromConnectionSecretKey": {
                      "description": "FromConnectionSecretKey is the key that will be used to fetch the value from the given target resource.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the connection secret key that will be propagated to the connection secret of the composition instance. Leave empty if you'd like to use the same key name.",
                      "type": "string"
                    },
                    "value": {
                      "description": "Value that will be propagated to the connection secret of the composition instance. Typically you should use FromConnectionSecretKey instead, but an explicit value may be set to inject a fixed, non-sensitive connection secret values, for example a well-known port. Supercedes FromConnectionSecretKey when set.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "patches": {
                "description": "Patches will be applied as overlay to the base resource.",
                "type": "array",
                "items": {
                  "description": "Patch is used to patch the field on the base resource at ToFieldPath after piping the value that is at FromFieldPath of the target resource through transformers.",
                  "type": "object",
                  "required": [
                    "fromFieldPath"
                  ],
                  "properties": {
                    "fromFieldPath": {
                      "description": "FromFieldPath is the path of the field on the upstream resource whose value to be used as input.",
                      "type": "string"
                    },
                    "toFieldPath": {
                      "description": "ToFieldPath is the path of the field on the base resource whose value will be changed with the result of transforms. Leave empty if you'd like to propagate to the same path on the target resource.",
                      "type": "string"
                    },
                    "transforms": {
                      "description": "Transforms are the list of functions that are used as a FIFO pipe for the input to be transformed.",
                      "type": "array",
                      "items": {
                        "description": "Transform is a unit of process whose input is transformed into an output with the supplied configuration.",
                        "type": "object",
                        "required": [
                          "type"
                        ],
                        "properties": {
                          "map": {
                            "description": "Map uses the input as a key in the given map and returns the value.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "math": {
                            "description": "Math is used to transform the input via mathematical operations such as multiplication.",
                            "type": "object",
                            "properties": {
                              "multiply": {
                                "description": "Multiply the value.",
                                "type": "integer",
                                "format": "int64"
                              }
                            },
                            "additionalProperties": false
                          },
                          "string": {
                            "description": "String is used to transform the input into a string or a different kind of string. Note that the input does not necessarily need to be a string.",
                            "type": "object",
                            "required": [
                              "fmt"
                            ],
                            "properties": {
                              "fmt": {
                                "description": "Format the input using a Go format string. See https://golang.org/pkg/fmt/ for details.",
                                "type": "string"
                              }
                            },
                            "additionalProperties": false
                          },
                          "type": {
                            "description": "Type of the transform to be run.",
                            "type": "string"
                          }
                        },
                        "additionalProperties": false
                      }
                    }
                  },
                  "additionalProperties": false
                }
              }
            },
            "additionalProperties": false
          }
        },
        "writeConnectionSecretsToNamespace": {
          "description": "WriteConnectionSecretsToNamespace specifies the namespace in which the connection secrets of composite resource dynamically provisioned using this composition will be created.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "CompositionStatus shows the observed state of the composition.",
      "type": "object",
      "properties": {
        "conditions": {
          "description": "Conditions of the resource.",
          "type": "array",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one status to another.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from one status to another, if any.",
                "type": "string"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to a resource at any point in time.",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        }
      },
      "additionalProperties": false
    }
  }
}
