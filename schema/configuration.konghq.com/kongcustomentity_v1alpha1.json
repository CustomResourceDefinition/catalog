{
  "description": "KongCustomEntity defines a \"custom\" Kong entity that KIC cannot support the entity type directly.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "KongCustomEntitySpec defines the specification of the KongCustomEntity.",
      "type": "object",
      "required": [
        "controllerName",
        "fields",
        "type"
      ],
      "properties": {
        "controllerName": {
          "description": "ControllerName specifies the controller that should reconcile it, like ingress class.",
          "type": "string"
        },
        "fields": {
          "description": "Fields defines the fields of the Kong entity itself.",
          "x-kubernetes-preserve-unknown-fields": true
        },
        "parentRef": {
          "description": "ParentRef references the kubernetes resource it attached to when its scope is \"attached\".\nCurrently only KongPlugin/KongClusterPlugin allowed. This will make the custom entity to be attached\nto the entity(service/route/consumer) where the plugin is attached.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "group": {
              "description": "Group defines the API group of the referred object.",
              "type": "string"
            },
            "kind": {
              "description": "Kind defines the kind of the referred object.",
              "type": "string",
              "enum": [
                "KongPlugin",
                "KongClusterPlugin"
              ]
            },
            "name": {
              "description": "Name defines the name of the referred object.",
              "type": "string"
            },
            "namespace": {
              "description": "Empty namespace means the same namespace of the owning object.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "type": {
          "description": "EntityType is the type of the Kong entity. The type is used in generating declarative configuration.",
          "type": "string"
        }
      },
      "additionalProperties": false,
      "x-kubernetes-validations": [
        {
          "rule": "!(self.type in ['services','routes','upstreams','targets','plugins','consumers','consumer_groups'])",
          "message": "The type field cannot be one of the known Kong entity types"
        }
      ]
    },
    "status": {
      "description": "Status stores the reconciling status of the resource.",
      "type": "object",
      "required": [
        "conditions"
      ],
      "properties": {
        "conditions": {
          "description": "Conditions describe the current conditions of the KongCustomEntityStatus.\n\nKnown condition types are:\n\n* \"Programmed\"",
          "type": "array",
          "default": [
            {
              "lastTransitionTime": "1970-01-01T00:00:00Z",
              "message": "Waiting for controller",
              "reason": "Pending",
              "status": "Unknown",
              "type": "Programmed"
            }
          ],
          "maxItems": 8,
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                "type": "string",
                "maxLength": 32768
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64",
                "minimum": 0
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                "type": "string",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "type": "string",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ]
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                "type": "string",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        }
      },
      "additionalProperties": false
    }
  },
  "x-kubernetes-validations": [
    {
      "rule": "self.spec.type == oldSelf.spec.type",
      "message": "The spec.type field is immutable"
    }
  ]
}
