{
  "description": "KongPlugin is the Schema for the kongplugins API.",
  "type": "object",
  "required": [
    "plugin"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "config": {
      "description": "Config contains the plugin configuration. It's a list of keys and values\nrequired to configure the plugin.\nPlease read the documentation of the plugin being configured to set values\nin here. For any plugin in Kong, anything that goes in the `config` JSON\nkey in the Admin API request, goes into this property.\nOnly one of `config` or `configFrom` may be used in a KongPlugin, not both at once.",
      "type": "object",
      "x-kubernetes-preserve-unknown-fields": true
    },
    "configFrom": {
      "description": "ConfigFrom references a secret containing the plugin configuration.\nThis should be used when the plugin configuration contains sensitive information,\nsuch as AWS credentials in the Lambda plugin or the client secret in the OIDC plugin.\nOnly one of `config` or `configFrom` may be used in a KongPlugin, not both at once.",
      "type": "object",
      "required": [
        "secretKeyRef"
      ],
      "properties": {
        "secretKeyRef": {
          "description": "Specifies a name and a key of a secret to refer to. The namespace is implicitly set to the one of referring object.",
          "type": "object",
          "required": [
            "key",
            "name"
          ],
          "properties": {
            "key": {
              "description": "The key containing the value.",
              "type": "string"
            },
            "name": {
              "description": "The secret containing the key.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "configPatches": {
      "description": "ConfigPatches represents JSON patches to the configuration of the plugin.\nEach item means a JSON patch to add something in the configuration,\nwhere path is specified in `path` and value is in `valueFrom` referencing\na key in a secret.\nWhen Config is specified, patches will be applied to the configuration in Config.\nOtherwise, patches will be applied to an empty object.",
      "type": "array",
      "items": {
        "description": "ConfigPatch is a JSON patch (RFC6902) to add values from Secret to the generated configuration.\nIt is an equivalent of the following patch:\n`{\"op\": \"add\", \"path\": {.Path}, \"value\": {.ComputedValueFrom}}`.",
        "type": "object",
        "required": [
          "path",
          "valueFrom"
        ],
        "properties": {
          "path": {
            "description": "Path is the JSON-Pointer value (RFC6901) that references a location within the target configuration.",
            "type": "string"
          },
          "valueFrom": {
            "description": "ValueFrom is the reference to a key of a secret where the patched value comes from.",
            "type": "object",
            "required": [
              "secretKeyRef"
            ],
            "properties": {
              "secretKeyRef": {
                "description": "Specifies a name and a key of a secret to refer to. The namespace is implicitly set to the one of referring object.",
                "type": "object",
                "required": [
                  "key",
                  "name"
                ],
                "properties": {
                  "key": {
                    "description": "The key containing the value.",
                    "type": "string"
                  },
                  "name": {
                    "description": "The secret containing the key.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    },
    "consumerRef": {
      "description": "ConsumerRef is a reference to a particular consumer.",
      "type": "string"
    },
    "disabled": {
      "description": "Disabled set if the plugin is disabled or not.",
      "type": "boolean"
    },
    "instance_name": {
      "description": "InstanceName is an optional custom name to identify an instance of the plugin. This is useful when running the\nsame plugin in multiple contexts, for example, on multiple services.",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "ordering": {
      "description": "Ordering overrides the normal plugin execution order. It's only available on Kong Enterprise.\n`\u003cphase\u003e` is a request processing phase (for example, `access` or `body_filter`) and\n`\u003cplugin\u003e` is the name of the plugin that will run before or after the KongPlugin.\nFor example, a KongPlugin with `plugin: rate-limiting` and `before.access: [\"key-auth\"]`\nwill create a rate limiting plugin that limits requests _before_ they are authenticated.",
      "type": "object",
      "properties": {
        "after": {
          "description": "PluginOrderingPhase indicates which plugins in a phase should affect the target plugin's order",
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "before": {
          "description": "PluginOrderingPhase indicates which plugins in a phase should affect the target plugin's order",
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    "plugin": {
      "description": "PluginName is the name of the plugin to which to apply the config.",
      "type": "string"
    },
    "protocols": {
      "description": "Protocols configures plugin to run on requests received on specific\nprotocols.",
      "type": "array",
      "items": {
        "description": "KongProtocol is a valid Kong protocol.\nThis alias is necessary to deal with https://github.com/kubernetes-sigs/controller-tools/issues/342",
        "type": "string",
        "enum": [
          "http",
          "https",
          "grpc",
          "grpcs",
          "tcp",
          "tls",
          "udp"
        ]
      }
    },
    "run_on": {
      "description": "RunOn configures the plugin to run on the first or the second or both\nnodes in case of a service mesh deployment.",
      "type": "string",
      "enum": [
        "first",
        "second",
        "all"
      ]
    },
    "status": {
      "description": "Status represents the current status of the KongPlugin resource.",
      "type": "object",
      "properties": {
        "conditions": {
          "description": "Conditions describe the current conditions of the KongPluginStatus.\n\nKnown condition types are:\n\n* \"Programmed\"",
          "type": "array",
          "default": [
            {
              "lastTransitionTime": "1970-01-01T00:00:00Z",
              "message": "Waiting for controller",
              "reason": "Pending",
              "status": "Unknown",
              "type": "Programmed"
            }
          ],
          "maxItems": 8,
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                "type": "string",
                "maxLength": 32768
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64",
                "minimum": 0
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                "type": "string",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "type": "string",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ]
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                "type": "string",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        }
      },
      "additionalProperties": false
    }
  },
  "x-kubernetes-validations": [
    {
      "rule": "!(has(self.config) \u0026\u0026 has(self.configFrom))",
      "message": "Using both config and configFrom fields is not allowed."
    },
    {
      "rule": "!(has(self.configFrom) \u0026\u0026 has(self.configPatches))",
      "message": "Using both configFrom and configPatches fields is not allowed."
    },
    {
      "rule": "self.plugin == oldSelf.plugin",
      "message": "The plugin field is immutable"
    }
  ]
}
