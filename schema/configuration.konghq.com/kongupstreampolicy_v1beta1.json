{
  "type": "object",
  "properties": {
    "apiVersion": {
      "type": "string"
    },
    "kind": {
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "type": "object",
      "properties": {
        "algorithm": {
          "type": "string",
          "enum": [
            "round-robin",
            "consistent-hashing",
            "least-connections",
            "latency"
          ]
        },
        "hashOn": {
          "type": "object",
          "properties": {
            "cookie": {
              "type": "string"
            },
            "cookiePath": {
              "type": "string"
            },
            "header": {
              "type": "string"
            },
            "input": {
              "type": "string",
              "enum": [
                "ip",
                "consumer",
                "path"
              ]
            },
            "queryArg": {
              "type": "string"
            },
            "uriCapture": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "hashOnFallback": {
          "type": "object",
          "properties": {
            "cookie": {
              "type": "string"
            },
            "cookiePath": {
              "type": "string"
            },
            "header": {
              "type": "string"
            },
            "input": {
              "type": "string",
              "enum": [
                "ip",
                "consumer",
                "path"
              ]
            },
            "queryArg": {
              "type": "string"
            },
            "uriCapture": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "healthchecks": {
          "type": "object",
          "properties": {
            "active": {
              "type": "object",
              "properties": {
                "concurrency": {
                  "type": "integer",
                  "minimum": 1
                },
                "headers": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "healthy": {
                  "type": "object",
                  "properties": {
                    "httpStatuses": {
                      "type": "array",
                      "items": {
                        "type": "integer",
                        "maximum": 599,
                        "minimum": 100
                      }
                    },
                    "interval": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "successes": {
                      "type": "integer",
                      "minimum": 0
                    }
                  },
                  "additionalProperties": false
                },
                "httpPath": {
                  "type": "string",
                  "pattern": "^/.*$"
                },
                "httpsSni": {
                  "type": "string"
                },
                "httpsVerifyCertificate": {
                  "type": "boolean"
                },
                "timeout": {
                  "type": "integer",
                  "minimum": 0
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "http",
                    "https",
                    "tcp",
                    "grpc",
                    "grpcs"
                  ]
                },
                "unhealthy": {
                  "type": "object",
                  "properties": {
                    "httpFailures": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "httpStatuses": {
                      "type": "array",
                      "items": {
                        "type": "integer",
                        "maximum": 599,
                        "minimum": 100
                      }
                    },
                    "interval": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "tcpFailures": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "timeouts": {
                      "type": "integer",
                      "minimum": 0
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "passive": {
              "type": "object",
              "properties": {
                "healthy": {
                  "type": "object",
                  "properties": {
                    "httpStatuses": {
                      "type": "array",
                      "items": {
                        "type": "integer",
                        "maximum": 599,
                        "minimum": 100
                      }
                    },
                    "interval": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "successes": {
                      "type": "integer",
                      "minimum": 0
                    }
                  },
                  "additionalProperties": false
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "http",
                    "https",
                    "tcp",
                    "grpc",
                    "grpcs"
                  ]
                },
                "unhealthy": {
                  "type": "object",
                  "properties": {
                    "httpFailures": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "httpStatuses": {
                      "type": "array",
                      "items": {
                        "type": "integer",
                        "maximum": 599,
                        "minimum": 100
                      }
                    },
                    "interval": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "tcpFailures": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "timeouts": {
                      "type": "integer",
                      "minimum": 0
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "threshold": {
              "type": "integer"
            }
          },
          "additionalProperties": false
        },
        "slots": {
          "type": "integer",
          "maximum": 65536,
          "minimum": 10
        }
      },
      "additionalProperties": false
    },
    "status": {
      "type": "object",
      "required": [
        "ancestors"
      ],
      "properties": {
        "ancestors": {
          "type": "array",
          "maxItems": 16,
          "items": {
            "type": "object",
            "required": [
              "ancestorRef",
              "controllerName"
            ],
            "properties": {
              "ancestorRef": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "group": {
                    "type": "string",
                    "default": "gateway.networking.k8s.io",
                    "maxLength": 253,
                    "pattern": "^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
                  },
                  "kind": {
                    "type": "string",
                    "default": "Gateway",
                    "maxLength": 63,
                    "minLength": 1,
                    "pattern": "^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"
                  },
                  "name": {
                    "type": "string",
                    "maxLength": 253,
                    "minLength": 1
                  },
                  "namespace": {
                    "type": "string",
                    "maxLength": 63,
                    "minLength": 1,
                    "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                  },
                  "port": {
                    "type": "integer",
                    "format": "int32",
                    "maximum": 65535,
                    "minimum": 1
                  },
                  "sectionName": {
                    "type": "string",
                    "maxLength": 253,
                    "minLength": 1,
                    "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
                  }
                },
                "additionalProperties": false
              },
              "conditions": {
                "type": "array",
                "maxItems": 8,
                "minItems": 1,
                "items": {
                  "type": "object",
                  "required": [
                    "lastTransitionTime",
                    "message",
                    "reason",
                    "status",
                    "type"
                  ],
                  "properties": {
                    "lastTransitionTime": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "message": {
                      "type": "string",
                      "maxLength": 32768
                    },
                    "observedGeneration": {
                      "type": "integer",
                      "format": "int64",
                      "minimum": 0
                    },
                    "reason": {
                      "type": "string",
                      "maxLength": 1024,
                      "minLength": 1,
                      "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "True",
                        "False",
                        "Unknown"
                      ]
                    },
                    "type": {
                      "type": "string",
                      "maxLength": 316,
                      "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                    }
                  },
                  "additionalProperties": false
                },
                "x-kubernetes-list-map-keys": [
                  "type"
                ],
                "x-kubernetes-list-type": "map"
              },
              "controllerName": {
                "type": "string",
                "maxLength": 253,
                "minLength": 1,
                "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*\\/[A-Za-z0-9\\/\\-._~%!$\u0026'()*+,;=:]+$"
              }
            },
            "additionalProperties": false
          }
        }
      },
      "additionalProperties": false
    }
  },
  "x-kubernetes-validations": [
    {
      "rule": "has(self.spec.hashOn) ? [has(self.spec.hashOn.input), has(self.spec.hashOn.cookie), has(self.spec.hashOn.header), has(self.spec.hashOn.uriCapture), has(self.spec.hashOn.queryArg)].filter(fieldSet, fieldSet == true).size() \u003c= 1 : true",
      "message": "Only one of spec.hashOn.(input|cookie|header|uriCapture|queryArg) can be set."
    },
    {
      "rule": "has(self.spec.hashOn) \u0026\u0026 has(self.spec.hashOn.cookie) ? has(self.spec.hashOn.cookiePath) : true",
      "message": "When spec.hashOn.cookie is set, spec.hashOn.cookiePath is required."
    },
    {
      "rule": "has(self.spec.hashOn) \u0026\u0026 has(self.spec.hashOn.cookiePath) ? has(self.spec.hashOn.cookie) : true",
      "message": "When spec.hashOn.cookiePath is set, spec.hashOn.cookie is required."
    },
    {
      "rule": "has(self.spec.hashOn) ? has(self.spec.algorithm) \u0026\u0026 self.spec.algorithm == \"consistent-hashing\" : true",
      "message": "spec.algorithm must be set to \"consistent-hashing\" when spec.hashOn is set."
    },
    {
      "rule": "has(self.spec.hashOnFallback) ? [has(self.spec.hashOnFallback.input), has(self.spec.hashOnFallback.header), has(self.spec.hashOnFallback.uriCapture), has(self.spec.hashOnFallback.queryArg)].filter(fieldSet, fieldSet == true).size() \u003c= 1 : true",
      "message": "Only one of spec.hashOnFallback.(input|header|uriCapture|queryArg) can be set."
    },
    {
      "rule": "has(self.spec.hashOnFallback) ? has(self.spec.algorithm) \u0026\u0026 self.spec.algorithm == \"consistent-hashing\" : true",
      "message": "spec.algorithm must be set to \"consistent-hashing\" when spec.hashOnFallback is set."
    },
    {
      "rule": "has(self.spec.hashOnFallback) ? !has(self.spec.hashOnFallback.cookie) : true",
      "message": "spec.hashOnFallback.cookie must not be set."
    },
    {
      "rule": "has(self.spec.hashOnFallback) ? !has(self.spec.hashOnFallback.cookiePath) : true",
      "message": "spec.hashOnFallback.cookiePath must not be set."
    },
    {
      "rule": "has(self.spec.healthchecks) \u0026\u0026 has(self.spec.healthchecks.passive) \u0026\u0026 has(self.spec.healthchecks.passive.healthy) ? !has(self.spec.healthchecks.passive.healthy.interval) : true",
      "message": "spec.healthchecks.passive.healthy.interval must not be set."
    },
    {
      "rule": "has(self.spec.healthchecks) \u0026\u0026 has(self.spec.healthchecks.passive) \u0026\u0026 has(self.spec.healthchecks.passive.unhealthy) ? !has(self.spec.healthchecks.passive.unhealthy.interval) : true",
      "message": "spec.healthchecks.passive.unhealthy.interval must not be set."
    },
    {
      "rule": "has(self.spec.hashOn) \u0026\u0026 has(self.spec.hashOn.cookie) ? !has(self.spec.hashOnFallback) : true",
      "message": "spec.hashOnFallback must not be set when spec.hashOn.cookie is set."
    }
  ]
}
