{
  "description": "DiscoveryServiceCertificate is an internal resource used to create certificates. This resource\nis used by the DiscoveryService controller to create the required certificates for the different\ncomponents. Direct use of DiscoveryServiceCertificate objects is discouraged.",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "DiscoveryServiceCertificateSpec defines the desired state of DiscoveryServiceCertificate",
      "type": "object",
      "required": [
        "commonName",
        "secretRef",
        "signer",
        "validFor"
      ],
      "properties": {
        "certificateRenewal": {
          "description": "CertificateRenewalConfig configures the certificate renewal process. If unset default\nbehavior is to renew the certificate but not notify of renewals.",
          "type": "object",
          "required": [
            "enabled"
          ],
          "properties": {
            "enabled": {
              "description": "Enabled is a flag to enable or disable renewal of the certificate",
              "type": "boolean"
            }
          },
          "additionalProperties": false
        },
        "commonName": {
          "description": "CommonName is the CommonName of the certificate",
          "type": "string"
        },
        "hosts": {
          "description": "Hosts is the list of hosts the certificate is valid for. Only\nuse when 'IsServerCertificate' is true. If unset, the CommonName\nfield will be used to populate the valid hosts of the certificate.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "isCA": {
          "description": "IsCA is a boolean specifying that the certificate is a CA",
          "type": "boolean"
        },
        "secretRef": {
          "description": "SecretRef is a reference to the secret that will hold the certificate\nand the private key.",
          "type": "object",
          "properties": {
            "name": {
              "description": "name is unique within a namespace to reference a secret resource.",
              "type": "string"
            },
            "namespace": {
              "description": "namespace defines the space within which the secret name must be unique.",
              "type": "string"
            }
          },
          "additionalProperties": false,
          "x-kubernetes-map-type": "atomic"
        },
        "server": {
          "description": "IsServerCertificate is a boolean specifying if the certificate should be\nissued with server auth usage enabled",
          "type": "boolean"
        },
        "signer": {
          "description": "Signer specifies  the signer to use to create this certificate. Supported\nsigners are CertManager and SelfSigned.",
          "type": "object",
          "properties": {
            "caSigned": {
              "description": "CASigned holds specific configuration for the CASigned signer",
              "type": "object",
              "required": [
                "caSecretRef"
              ],
              "properties": {
                "caSecretRef": {
                  "description": "A reference to a Secret containing the CA",
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "name is unique within a namespace to reference a secret resource.",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "namespace defines the space within which the secret name must be unique.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false,
                  "x-kubernetes-map-type": "atomic"
                }
              },
              "additionalProperties": false
            },
            "selfSigned": {
              "description": "SelfSigned holds specific configuration for the SelfSigned signer",
              "type": "object"
            }
          },
          "additionalProperties": false
        },
        "validFor": {
          "description": "ValidFor specifies the validity of the certificate in seconds",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "DiscoveryServiceCertificateStatus defines the observed state of DiscoveryServiceCertificate",
      "type": "object",
      "properties": {
        "certificateHash": {
          "description": "CertificateHash stores the current hash of the certificate. It is used\nfor other controllers to validate if a certificate has been re-issued.",
          "type": "string"
        },
        "conditions": {
          "description": "Conditions represent the latest available observations of an object's state",
          "type": "array",
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                "type": "string",
                "maxLength": 32768
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64",
                "minimum": 0
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                "type": "string",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "type": "string",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ]
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                "type": "string",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
              }
            },
            "additionalProperties": false
          }
        },
        "notAfter": {
          "description": "NotAfter is the time at which the certificate expires",
          "type": "string",
          "format": "date-time"
        },
        "notBefore": {
          "description": "NotBefore is the time at which the certificate starts\nbeing valid",
          "type": "string",
          "format": "date-time"
        },
        "ready": {
          "description": "Ready is a boolean that specifies if the certificate is ready to be used",
          "type": "boolean"
        }
      },
      "additionalProperties": false
    }
  }
}
