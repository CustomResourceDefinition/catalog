{
  "description": "SecretBackendCrlConfig is the Schema for the SecretBackendCrlConfigs API. Sets the CRL config on an PKI Secret Backend for Vault.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "SecretBackendCrlConfigSpec defines the desired state of SecretBackendCrlConfig",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "forProvider": {
          "type": "object",
          "properties": {
            "autoRebuild": {
              "description": "Enables periodic rebuilding of the CRL upon expiry. Vault 1.12+\nEnables or disables periodic rebuilding of the CRL upon expiry.",
              "type": "boolean"
            },
            "autoRebuildGracePeriod": {
              "description": "Grace period before CRL expiry to attempt rebuild of CRL. Vault 1.12+\nGrace period before CRL expiry to attempt rebuild of CRL.",
              "type": "string"
            },
            "backend": {
              "description": "The path the PKI secret backend is mounted at, with no leading or trailing /s.\nThe path of the PKI secret backend the resource belongs to.",
              "type": "string"
            },
            "backendRef": {
              "description": "Reference to a Mount in vault to populate backend.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referenced object",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "backendSelector": {
              "description": "Selector for a Mount in vault to populate backend.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "namespace": {
                  "description": "Namespace for the selector",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "crossClusterRevocation": {
              "description": "Enable cross-cluster revocation request queues. Vault 1.13+\nEnable cross-cluster revocation request queues.",
              "type": "boolean"
            },
            "deltaRebuildInterval": {
              "description": "Interval to check for new revocations on, to regenerate the delta CRL.\nInterval to check for new revocations on, to regenerate the delta CRL.",
              "type": "string"
            },
            "disable": {
              "description": "Disables or enables CRL building.\nDisables or enables CRL building",
              "type": "boolean"
            },
            "enableDelta": {
              "description": "Enables building of delta CRLs with up-to-date revocation information,\naugmenting the last complete CRL.  Vault 1.12+\nEnables or disables building of delta CRLs with up-to-date revocation information, augmenting the last complete CRL.",
              "type": "boolean"
            },
            "expiry": {
              "description": "Specifies the time until expiration.\nSpecifies the time until expiration.",
              "type": "string"
            },
            "maxCrlEntries": {
              "description": "The maximum number of entries a CRL can contain. This option exists to prevent\naccidental runaway issuance/revocation from overloading Vault. If set to -1, the limit is disabled. Vault 1.19\nThe maximum number of entries a CRL can contain. This option exists to prevent accidental runaway issuance/revocation from overloading Vault. If set to -1, the limit is disabled.",
              "type": "number"
            },
            "namespace": {
              "description": "The namespace to provision the resource in.\nThe value should not contain leading or trailing forward slashes.\nThe namespace is always relative to the provider's configured namespace.\nAvailable only for Vault Enterprise.\nTarget namespace. (requires Enterprise)",
              "type": "string"
            },
            "ocspDisable": {
              "description": "Disables the OCSP responder in Vault. Vault 1.12+\nDisables or enables the OCSP responder in Vault.",
              "type": "boolean"
            },
            "ocspExpiry": {
              "description": "The amount of time an OCSP response can be cached for, useful for OCSP stapling\nrefresh durations. Vault 1.12+\nThe amount of time an OCSP response can be cached for, useful for OCSP stapling refresh durations.",
              "type": "string"
            },
            "unifiedCrl": {
              "description": "Enables unified CRL and OCSP building. Vault 1.13+\nEnables unified CRL and OCSP building.",
              "type": "boolean"
            },
            "unifiedCrlOnExistingPaths": {
              "description": "Enables serving the unified CRL and OCSP on the existing, previously\ncluster-local paths. Vault 1.13+\nEnables serving the unified CRL and OCSP on the existing, previously cluster-local paths.",
              "type": "boolean"
            }
          },
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored\nunless the Management Policies feature flag is disabled.\nInitProvider holds the same fields as ForProvider, with the exception\nof Identifier and other resource reference fields. The fields that are\nin InitProvider are merged into ForProvider when the resource is created.\nThe same fields are also added to the terraform ignore_changes hook, to\navoid updating them after creation. This is useful for fields that are\nrequired on creation, but we do not desire to update them after creation,\nfor example because of an external controller is managing them, like an\nautoscaler.",
          "type": "object",
          "properties": {
            "autoRebuild": {
              "description": "Enables periodic rebuilding of the CRL upon expiry. Vault 1.12+\nEnables or disables periodic rebuilding of the CRL upon expiry.",
              "type": "boolean"
            },
            "autoRebuildGracePeriod": {
              "description": "Grace period before CRL expiry to attempt rebuild of CRL. Vault 1.12+\nGrace period before CRL expiry to attempt rebuild of CRL.",
              "type": "string"
            },
            "backend": {
              "description": "The path the PKI secret backend is mounted at, with no leading or trailing /s.\nThe path of the PKI secret backend the resource belongs to.",
              "type": "string"
            },
            "backendRef": {
              "description": "Reference to a Mount in vault to populate backend.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referenced object",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "backendSelector": {
              "description": "Selector for a Mount in vault to populate backend.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "namespace": {
                  "description": "Namespace for the selector",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "crossClusterRevocation": {
              "description": "Enable cross-cluster revocation request queues. Vault 1.13+\nEnable cross-cluster revocation request queues.",
              "type": "boolean"
            },
            "deltaRebuildInterval": {
              "description": "Interval to check for new revocations on, to regenerate the delta CRL.\nInterval to check for new revocations on, to regenerate the delta CRL.",
              "type": "string"
            },
            "disable": {
              "description": "Disables or enables CRL building.\nDisables or enables CRL building",
              "type": "boolean"
            },
            "enableDelta": {
              "description": "Enables building of delta CRLs with up-to-date revocation information,\naugmenting the last complete CRL.  Vault 1.12+\nEnables or disables building of delta CRLs with up-to-date revocation information, augmenting the last complete CRL.",
              "type": "boolean"
            },
            "expiry": {
              "description": "Specifies the time until expiration.\nSpecifies the time until expiration.",
              "type": "string"
            },
            "maxCrlEntries": {
              "description": "The maximum number of entries a CRL can contain. This option exists to prevent\naccidental runaway issuance/revocation from overloading Vault. If set to -1, the limit is disabled. Vault 1.19\nThe maximum number of entries a CRL can contain. This option exists to prevent accidental runaway issuance/revocation from overloading Vault. If set to -1, the limit is disabled.",
              "type": "number"
            },
            "namespace": {
              "description": "The namespace to provision the resource in.\nThe value should not contain leading or trailing forward slashes.\nThe namespace is always relative to the provider's configured namespace.\nAvailable only for Vault Enterprise.\nTarget namespace. (requires Enterprise)",
              "type": "string"
            },
            "ocspDisable": {
              "description": "Disables the OCSP responder in Vault. Vault 1.12+\nDisables or enables the OCSP responder in Vault.",
              "type": "boolean"
            },
            "ocspExpiry": {
              "description": "The amount of time an OCSP response can be cached for, useful for OCSP stapling\nrefresh durations. Vault 1.12+\nThe amount of time an OCSP response can be cached for, useful for OCSP stapling refresh durations.",
              "type": "string"
            },
            "unifiedCrl": {
              "description": "Enables unified CRL and OCSP building. Vault 1.13+\nEnables unified CRL and OCSP building.",
              "type": "boolean"
            },
            "unifiedCrlOnExistingPaths": {
              "description": "Enables serving the unified CRL and OCSP on the existing, previously\ncluster-local paths. Vault 1.13+\nEnables serving the unified CRL and OCSP on the existing, previously cluster-local paths.",
              "type": "boolean"
            }
          },
          "additionalProperties": false
        },
        "managementPolicies": {
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out\nthrough a Crossplane feature flag.\nManagementPolicies specify the array of actions Crossplane is allowed to\ntake on the managed and external resources.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223\nand this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers\ncan take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to\ncreate, observe, update, and delete this managed resource should be\nconfigured.",
          "type": "object",
          "default": {
            "kind": "ClusterProviderConfig",
            "name": "default"
          },
          "required": [
            "kind",
            "name"
          ],
          "properties": {
            "kind": {
              "description": "Kind of the referenced object.",
              "type": "string"
            },
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a\nSecret to which any connection details for this managed resource should\nbe written. Connection details frequently include the endpoint, username,\nand password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "SecretBackendCrlConfigStatus defines the observed state of SecretBackendCrlConfig.",
      "type": "object",
      "properties": {
        "atProvider": {
          "type": "object",
          "properties": {
            "autoRebuild": {
              "description": "Enables periodic rebuilding of the CRL upon expiry. Vault 1.12+\nEnables or disables periodic rebuilding of the CRL upon expiry.",
              "type": "boolean"
            },
            "autoRebuildGracePeriod": {
              "description": "Grace period before CRL expiry to attempt rebuild of CRL. Vault 1.12+\nGrace period before CRL expiry to attempt rebuild of CRL.",
              "type": "string"
            },
            "backend": {
              "description": "The path the PKI secret backend is mounted at, with no leading or trailing /s.\nThe path of the PKI secret backend the resource belongs to.",
              "type": "string"
            },
            "crossClusterRevocation": {
              "description": "Enable cross-cluster revocation request queues. Vault 1.13+\nEnable cross-cluster revocation request queues.",
              "type": "boolean"
            },
            "deltaRebuildInterval": {
              "description": "Interval to check for new revocations on, to regenerate the delta CRL.\nInterval to check for new revocations on, to regenerate the delta CRL.",
              "type": "string"
            },
            "disable": {
              "description": "Disables or enables CRL building.\nDisables or enables CRL building",
              "type": "boolean"
            },
            "enableDelta": {
              "description": "Enables building of delta CRLs with up-to-date revocation information,\naugmenting the last complete CRL.  Vault 1.12+\nEnables or disables building of delta CRLs with up-to-date revocation information, augmenting the last complete CRL.",
              "type": "boolean"
            },
            "expiry": {
              "description": "Specifies the time until expiration.\nSpecifies the time until expiration.",
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "maxCrlEntries": {
              "description": "The maximum number of entries a CRL can contain. This option exists to prevent\naccidental runaway issuance/revocation from overloading Vault. If set to -1, the limit is disabled. Vault 1.19\nThe maximum number of entries a CRL can contain. This option exists to prevent accidental runaway issuance/revocation from overloading Vault. If set to -1, the limit is disabled.",
              "type": "number"
            },
            "namespace": {
              "description": "The namespace to provision the resource in.\nThe value should not contain leading or trailing forward slashes.\nThe namespace is always relative to the provider's configured namespace.\nAvailable only for Vault Enterprise.\nTarget namespace. (requires Enterprise)",
              "type": "string"
            },
            "ocspDisable": {
              "description": "Disables the OCSP responder in Vault. Vault 1.12+\nDisables or enables the OCSP responder in Vault.",
              "type": "boolean"
            },
            "ocspExpiry": {
              "description": "The amount of time an OCSP response can be cached for, useful for OCSP stapling\nrefresh durations. Vault 1.12+\nThe amount of time an OCSP response can be cached for, useful for OCSP stapling refresh durations.",
              "type": "string"
            },
            "unifiedCrl": {
              "description": "Enables unified CRL and OCSP building. Vault 1.13+\nEnables unified CRL and OCSP building.",
              "type": "boolean"
            },
            "unifiedCrlOnExistingPaths": {
              "description": "Enables serving the unified CRL and OCSP on the existing, previously\ncluster-local paths. Vault 1.13+\nEnables serving the unified CRL and OCSP on the existing, previously cluster-local paths.",
              "type": "boolean"
            }
          },
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "type": "array",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one\nstatus to another.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from\none status to another, if any.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to\na resource at any point in time.",
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest metadata.generation\nwhich resulted in either a ready state, or stalled due to error\nit can not recover from without human intervention.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    }
  }
}
