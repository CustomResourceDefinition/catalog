{
  "description": "GitRepository is the Schema for the gitrepositories API.",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "GitRepositorySpec specifies the required configuration to produce an\nArtifact for a Git repository.",
      "type": "object",
      "required": [
        "interval",
        "url"
      ],
      "properties": {
        "accessFrom": {
          "description": "AccessFrom specifies an Access Control List for allowing cross-namespace\nreferences to this object.\nNOTE: Not implemented, provisional as of https://github.com/fluxcd/flux2/pull/2092",
          "type": "object",
          "required": [
            "namespaceSelectors"
          ],
          "properties": {
            "namespaceSelectors": {
              "description": "NamespaceSelectors is the list of namespace selectors to which this ACL applies.\nItems in this list are evaluated using a logical OR operation.",
              "type": "array",
              "items": {
                "description": "NamespaceSelector selects the namespaces to which this ACL applies.\nAn empty map of MatchLabels matches all namespaces in a cluster.",
                "type": "object",
                "properties": {
                  "matchLabels": {
                    "description": "MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "additionalProperties": false
        },
        "gitImplementation": {
          "description": "GitImplementation specifies which Git client library implementation to\nuse. Defaults to 'go-git', valid values are ('go-git', 'libgit2').\nDeprecated: gitImplementation is deprecated now that 'go-git' is the\nonly supported implementation.",
          "type": "string",
          "default": "go-git",
          "enum": [
            "go-git",
            "libgit2"
          ]
        },
        "ignore": {
          "description": "Ignore overrides the set of excluded patterns in the .sourceignore format\n(which is the same as .gitignore). If not provided, a default will be used,\nconsult the documentation for your version to find out what those are.",
          "type": "string"
        },
        "include": {
          "description": "Include specifies a list of GitRepository resources which Artifacts\nshould be included in the Artifact produced for this GitRepository.",
          "type": "array",
          "items": {
            "description": "GitRepositoryInclude specifies a local reference to a GitRepository which\nArtifact (sub-)contents must be included, and where they should be placed.",
            "type": "object",
            "required": [
              "repository"
            ],
            "properties": {
              "fromPath": {
                "description": "FromPath specifies the path to copy contents from, defaults to the root\nof the Artifact.",
                "type": "string"
              },
              "repository": {
                "description": "GitRepositoryRef specifies the GitRepository which Artifact contents\nmust be included.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Name of the referent.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              },
              "toPath": {
                "description": "ToPath specifies the path to copy contents to, defaults to the name of\nthe GitRepositoryRef.",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "interval": {
          "description": "Interval at which to check the GitRepository for updates.",
          "type": "string",
          "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$"
        },
        "recurseSubmodules": {
          "description": "RecurseSubmodules enables the initialization of all submodules within\nthe GitRepository as cloned from the URL, using their default settings.",
          "type": "boolean"
        },
        "ref": {
          "description": "Reference specifies the Git reference to resolve and monitor for\nchanges, defaults to the 'master' branch.",
          "type": "object",
          "properties": {
            "branch": {
              "description": "Branch to check out, defaults to 'master' if no other field is defined.",
              "type": "string"
            },
            "commit": {
              "description": "Commit SHA to check out, takes precedence over all reference fields.\n\nThis can be combined with Branch to shallow clone the branch, in which\nthe commit is expected to exist.",
              "type": "string"
            },
            "name": {
              "description": "Name of the reference to check out; takes precedence over Branch, Tag and SemVer.\n\nIt must be a valid Git reference: https://git-scm.com/docs/git-check-ref-format#_description\nExamples: \"refs/heads/main\", \"refs/tags/v0.1.0\", \"refs/pull/420/head\", \"refs/merge-requests/1/head\"",
              "type": "string"
            },
            "semver": {
              "description": "SemVer tag expression to check out, takes precedence over Tag.",
              "type": "string"
            },
            "tag": {
              "description": "Tag to check out, takes precedence over Branch.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "secretRef": {
          "description": "SecretRef specifies the Secret containing authentication credentials for\nthe GitRepository.\nFor HTTPS repositories the Secret must contain 'username' and 'password'\nfields for basic auth or 'bearerToken' field for token auth.\nFor SSH repositories the Secret must contain 'identity'\nand 'known_hosts' fields.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the referent.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "suspend": {
          "description": "Suspend tells the controller to suspend the reconciliation of this\nGitRepository.",
          "type": "boolean"
        },
        "timeout": {
          "description": "Timeout for Git operations like cloning, defaults to 60s.",
          "type": "string",
          "default": "60s",
          "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m))+$"
        },
        "url": {
          "description": "URL specifies the Git repository URL, it can be an HTTP/S or SSH address.",
          "type": "string",
          "pattern": "^(http|https|ssh)://.*$"
        },
        "verify": {
          "description": "Verification specifies the configuration to verify the Git commit\nsignature(s).",
          "type": "object",
          "required": [
            "mode",
            "secretRef"
          ],
          "properties": {
            "mode": {
              "description": "Mode specifies what Git object should be verified, currently ('head').",
              "type": "string",
              "enum": [
                "head"
              ]
            },
            "secretRef": {
              "description": "SecretRef specifies the Secret containing the public keys of trusted Git\nauthors.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referent.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "GitRepositoryStatus records the observed state of a Git repository.",
      "type": "object",
      "default": {
        "observedGeneration": -1
      },
      "properties": {
        "artifact": {
          "description": "Artifact represents the last successful GitRepository reconciliation.",
          "type": "object",
          "required": [
            "digest",
            "lastUpdateTime",
            "path",
            "revision",
            "url"
          ],
          "properties": {
            "digest": {
              "description": "Digest is the digest of the file in the form of '\u003calgorithm\u003e:\u003cchecksum\u003e'.",
              "type": "string",
              "pattern": "^[a-z0-9]+(?:[.+_-][a-z0-9]+)*:[a-zA-Z0-9=_-]+$"
            },
            "lastUpdateTime": {
              "description": "LastUpdateTime is the timestamp corresponding to the last update of the\nArtifact.",
              "type": "string",
              "format": "date-time"
            },
            "metadata": {
              "description": "Metadata holds upstream information such as OCI annotations.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "path": {
              "description": "Path is the relative file path of the Artifact. It can be used to locate\nthe file in the root of the Artifact storage on the local file system of\nthe controller managing the Source.",
              "type": "string"
            },
            "revision": {
              "description": "Revision is a human-readable identifier traceable in the origin source\nsystem. It can be a Git commit SHA, Git tag, a Helm chart version, etc.",
              "type": "string"
            },
            "size": {
              "description": "Size is the number of bytes in the file.",
              "type": "integer",
              "format": "int64"
            },
            "url": {
              "description": "URL is the HTTP address of the Artifact as exposed by the controller\nmanaging the Source. It can be used to retrieve the Artifact for\nconsumption, e.g. by another controller applying the Artifact contents.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions holds the conditions for the GitRepository.",
          "type": "array",
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                "type": "string",
                "maxLength": 32768
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64",
                "minimum": 0
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                "type": "string",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "type": "string",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ]
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                "type": "string",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
              }
            },
            "additionalProperties": false
          }
        },
        "contentConfigChecksum": {
          "description": "ContentConfigChecksum is a checksum of all the configurations related to\nthe content of the source artifact:\n - .spec.ignore\n - .spec.recurseSubmodules\n - .spec.included and the checksum of the included artifacts\nobserved in .status.observedGeneration version of the object. This can\nbe used to determine if the content of the included repository has\nchanged.\nIt has the format of `\u003calgo\u003e:\u003cchecksum\u003e`, for example: `sha256:\u003cchecksum\u003e`.\n\nDeprecated: Replaced with explicit fields for observed artifact content\nconfig in the status.",
          "type": "string"
        },
        "includedArtifacts": {
          "description": "IncludedArtifacts contains a list of the last successfully included\nArtifacts as instructed by GitRepositorySpec.Include.",
          "type": "array",
          "items": {
            "description": "Artifact represents the output of a Source reconciliation.",
            "type": "object",
            "required": [
              "digest",
              "lastUpdateTime",
              "path",
              "revision",
              "url"
            ],
            "properties": {
              "digest": {
                "description": "Digest is the digest of the file in the form of '\u003calgorithm\u003e:\u003cchecksum\u003e'.",
                "type": "string",
                "pattern": "^[a-z0-9]+(?:[.+_-][a-z0-9]+)*:[a-zA-Z0-9=_-]+$"
              },
              "lastUpdateTime": {
                "description": "LastUpdateTime is the timestamp corresponding to the last update of the\nArtifact.",
                "type": "string",
                "format": "date-time"
              },
              "metadata": {
                "description": "Metadata holds upstream information such as OCI annotations.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "path": {
                "description": "Path is the relative file path of the Artifact. It can be used to locate\nthe file in the root of the Artifact storage on the local file system of\nthe controller managing the Source.",
                "type": "string"
              },
              "revision": {
                "description": "Revision is a human-readable identifier traceable in the origin source\nsystem. It can be a Git commit SHA, Git tag, a Helm chart version, etc.",
                "type": "string"
              },
              "size": {
                "description": "Size is the number of bytes in the file.",
                "type": "integer",
                "format": "int64"
              },
              "url": {
                "description": "URL is the HTTP address of the Artifact as exposed by the controller\nmanaging the Source. It can be used to retrieve the Artifact for\nconsumption, e.g. by another controller applying the Artifact contents.",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "lastHandledReconcileAt": {
          "description": "LastHandledReconcileAt holds the value of the most recent\nreconcile request value, so a change of the annotation value\ncan be detected.",
          "type": "string"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the last observed generation of the GitRepository\nobject.",
          "type": "integer",
          "format": "int64"
        },
        "observedIgnore": {
          "description": "ObservedIgnore is the observed exclusion patterns used for constructing\nthe source artifact.",
          "type": "string"
        },
        "observedInclude": {
          "description": "ObservedInclude is the observed list of GitRepository resources used to\nto produce the current Artifact.",
          "type": "array",
          "items": {
            "description": "GitRepositoryInclude specifies a local reference to a GitRepository which\nArtifact (sub-)contents must be included, and where they should be placed.",
            "type": "object",
            "required": [
              "repository"
            ],
            "properties": {
              "fromPath": {
                "description": "FromPath specifies the path to copy contents from, defaults to the root\nof the Artifact.",
                "type": "string"
              },
              "repository": {
                "description": "GitRepositoryRef specifies the GitRepository which Artifact contents\nmust be included.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Name of the referent.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              },
              "toPath": {
                "description": "ToPath specifies the path to copy contents to, defaults to the name of\nthe GitRepositoryRef.",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "observedRecurseSubmodules": {
          "description": "ObservedRecurseSubmodules is the observed resource submodules\nconfiguration used to produce the current Artifact.",
          "type": "boolean"
        },
        "url": {
          "description": "URL is the dynamic fetch link for the latest Artifact.\nIt is provided on a \"best effort\" basis, and using the precise\nGitRepositoryStatus.Artifact data is recommended.",
          "type": "string"
        }
      },
      "additionalProperties": false
    }
  }
}
