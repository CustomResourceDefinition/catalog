{
  "description": "GithubComment is the Schema for the githubcomments API",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "GithubCommentSpec defines the desired state of GithubComment",
      "type": "object",
      "required": [
        "comment",
        "github"
      ],
      "properties": {
        "comment": {
          "type": "object",
          "required": [
            "source"
          ],
          "properties": {
            "id": {
              "description": "Id specifies the identifier to be used by the controller when it needs to find the actual comment when it does\nnot know the internal id. This Id is written into the comment inside a comment, so that a simple text search\ncan reveal the comment",
              "type": "string"
            },
            "source": {
              "description": "Source specifies the source content for the comment. Different source types are supported:\nText, ConfigMap and TextTemplate",
              "type": "object",
              "properties": {
                "configMap": {
                  "description": "ConfigMap specifies a ConfigMap and a key to load the source content from",
                  "type": "object",
                  "required": [
                    "key",
                    "name"
                  ],
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "text": {
                  "description": "Text specifies a raw text comment.",
                  "type": "string"
                },
                "textTemplate": {
                  "description": "TextTemplate specifies a TextTemplate to load the source content from",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name of the referent.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "github": {
          "type": "object",
          "required": [
            "owner",
            "pullRequestId",
            "repo"
          ],
          "properties": {
            "owner": {
              "description": "Owner specifies the GitHub user or organisation that owns the repository",
              "type": "string"
            },
            "pullRequestId": {
              "description": "PullRequestId specifies the pull request ID.",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ],
              "x-kubernetes-int-or-string": true
            },
            "repo": {
              "description": "Repo specifies the repository name.",
              "type": "string"
            },
            "tokenRef": {
              "description": "TokenRef specifies a secret and key to load the GitHub API token from",
              "type": "object",
              "required": [
                "key",
                "secretName"
              ],
              "properties": {
                "key": {
                  "type": "string"
                },
                "secretName": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "suspend": {
          "description": "Suspend can be used to suspend the reconciliation of this object",
          "type": "boolean",
          "default": false
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "GithubCommentStatus defines the observed state of GithubComment",
      "type": "object",
      "properties": {
        "commentId": {
          "type": "string"
        },
        "conditions": {
          "type": "array",
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource.\n---\nThis struct is intended for direct use as an array at the field path .status.conditions.  For example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the observations of a foo's current state.\n\t    // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    // +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t    // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t    // other fields\n\t}",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                "type": "string",
                "maxLength": 32768
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64",
                "minimum": 0
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                "type": "string",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "type": "string",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ]
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase.\n---\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions can be\nuseful (see .node.status.conditions), the ability to deconflict is important.\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                "type": "string",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
              }
            },
            "additionalProperties": false
          }
        },
        "lastPostedBodyHash": {
          "type": "string"
        }
      },
      "additionalProperties": false
    }
  }
}
