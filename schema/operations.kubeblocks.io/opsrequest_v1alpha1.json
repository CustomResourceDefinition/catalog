{
  "description": "OpsRequest is the Schema for the opsrequests API",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "OpsRequestSpec defines the desired state of OpsRequest",
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "backup": {
          "description": "Specifies the parameters to back up a Cluster.",
          "type": "object",
          "properties": {
            "backupMethod": {
              "description": "Specifies the name of BackupMethod.\nThe specified BackupMethod must be defined in the BackupPolicy.",
              "type": "string"
            },
            "backupName": {
              "description": "Specifies the name of the Backup custom resource.",
              "type": "string"
            },
            "backupPolicyName": {
              "description": "Indicates the name of the BackupPolicy applied to perform this Backup.",
              "type": "string"
            },
            "deletionPolicy": {
              "description": "Determines whether the backup contents stored in backup repository\nshould be deleted when the Backup custom resource is deleted.\nSupported values are `Retain` and `Delete`.\n- `Retain` means that the backup content and its physical snapshot on backup repository are kept.\n- `Delete` means that the backup content and its physical snapshot on backup repository are deleted.",
              "type": "string",
              "default": "Delete",
              "enum": [
                "Delete",
                "Retain"
              ]
            },
            "parameters": {
              "description": "Specifies a list of name-value pairs representing parameters and their corresponding values.\nParameters match the schema specified in the `actionset.spec.parametersSchema`",
              "type": "array",
              "maxItems": 128,
              "items": {
                "type": "object",
                "required": [
                  "name",
                  "value"
                ],
                "properties": {
                  "name": {
                    "description": "Represents the name of the parameter.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Represents the parameter values.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              },
              "x-kubernetes-list-map-keys": [
                "name"
              ],
              "x-kubernetes-list-type": "map",
              "x-kubernetes-validations": [
                {
                  "rule": "self == oldSelf",
                  "message": "forbidden to update parameters"
                }
              ]
            },
            "parentBackupName": {
              "description": "If the specified BackupMethod is incremental, `parentBackupName` is required.",
              "type": "string"
            },
            "retentionPeriod": {
              "description": "Determines the duration for which the Backup custom resources should be retained.\n\n\nThe controller will automatically remove all Backup objects that are older than the specified RetentionPeriod.\nFor example, RetentionPeriod of `30d` will keep only the Backup objects of last 30 days.\nSample duration format:\n\n\n- years: 2y\n- months: 6mo\n- days: 30d\n- hours: 12h\n- minutes: 30m\n\n\nYou can also combine the above durations. For example: 30d12h30m.\nIf not set, the Backup objects will be kept forever.\n\n\nIf the `deletionPolicy` is set to 'Delete', then the associated backup data will also be deleted\nalong with the Backup object.\nOtherwise, only the Backup custom resource will be deleted.",
              "type": "string"
            }
          },
          "additionalProperties": false,
          "x-kubernetes-validations": [
            {
              "rule": "has(oldSelf.parameters) == has(self.parameters)",
              "message": "forbidden to update backup.parameters"
            }
          ]
        },
        "cancel": {
          "description": "Indicates whether the current operation should be canceled and terminated gracefully if it's in the\n\"Pending\", \"Creating\", or \"Running\" state.\n\n\nThis field applies only to \"VerticalScaling\" and \"HorizontalScaling\" opsRequests.\n\n\nNote: Setting `cancel` to true is irreversible; further modifications to this field are ineffective.",
          "type": "boolean"
        },
        "clusterName": {
          "description": "Specifies the name of the Cluster resource that this operation is targeting.",
          "type": "string",
          "x-kubernetes-validations": [
            {
              "rule": "self == oldSelf",
              "message": "forbidden to update spec.clusterName"
            }
          ]
        },
        "custom": {
          "description": "Specifies a custom operation defined by OpsDefinition.",
          "type": "object",
          "required": [
            "components",
            "opsDefinitionName"
          ],
          "properties": {
            "components": {
              "description": "Specifies the components and their parameters for executing custom actions as defined in OpsDefinition.\nRequires at least one component.",
              "type": "array",
              "maxItems": 1024,
              "minItems": 1,
              "items": {
                "type": "object",
                "required": [
                  "componentName"
                ],
                "properties": {
                  "componentName": {
                    "description": "Specifies the name of the Component as defined in the cluster.spec",
                    "type": "string"
                  },
                  "parameters": {
                    "description": "Specifies the parameters that match the schema specified in the `opsDefinition.spec.parametersSchema`.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "value"
                      ],
                      "properties": {
                        "name": {
                          "description": "Specifies the identifier of the parameter as defined in the OpsDefinition.",
                          "type": "string"
                        },
                        "value": {
                          "description": "Holds the data associated with the parameter.\nIf the parameter type is an array, the format should be \"v1,v2,v3\".",
                          "type": "string"
                        },
                        "valueFrom": {
                          "description": "Source for the parameter's value. Cannot be used if value is not empty.",
                          "type": "object",
                          "properties": {
                            "configMapKeyRef": {
                              "description": "Selects a key of a ConfigMap.",
                              "type": "object",
                              "required": [
                                "key"
                              ],
                              "properties": {
                                "key": {
                                  "description": "The key to select.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                                  "type": "string"
                                },
                                "optional": {
                                  "description": "Specify whether the ConfigMap or its key must be defined",
                                  "type": "boolean"
                                }
                              },
                              "additionalProperties": false,
                              "x-kubernetes-map-type": "atomic"
                            },
                            "secretKeyRef": {
                              "description": "Selects a key of a Secret.",
                              "type": "object",
                              "required": [
                                "key"
                              ],
                              "properties": {
                                "key": {
                                  "description": "The key of the secret to select from.  Must be a valid secret key.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                                  "type": "string"
                                },
                                "optional": {
                                  "description": "Specify whether the Secret or its key must be defined",
                                  "type": "boolean"
                                }
                              },
                              "additionalProperties": false,
                              "x-kubernetes-map-type": "atomic"
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    },
                    "x-kubernetes-list-map-keys": [
                      "name"
                    ],
                    "x-kubernetes-list-type": "map"
                  }
                },
                "additionalProperties": false
              },
              "x-kubernetes-list-map-keys": [
                "componentName"
              ],
              "x-kubernetes-list-type": "map"
            },
            "maxConcurrentComponents": {
              "description": "Specifies the maximum number of components to be operated on concurrently to mitigate performance impact\non clusters with multiple components.\n\n\nIt accepts an absolute number (e.g., 5) or a percentage of components to execute in parallel (e.g., \"10%\").\nPercentages are rounded up to the nearest whole number of components.\nFor example, if \"10%\" results in less than one, it rounds up to 1.\n\n\nWhen unspecified, all components are processed simultaneously by default.\n\n\nNote: This feature is not implemented yet.",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ],
              "x-kubernetes-int-or-string": true
            },
            "opsDefinitionName": {
              "description": "Specifies the name of the OpsDefinition.",
              "type": "string"
            },
            "serviceAccountName": {
              "description": "Specifies the name of the ServiceAccount to be used for executing the custom operation.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "enqueueOnForce": {
          "description": "Indicates whether opsRequest should continue to queue when 'force' is set to true.",
          "type": "boolean",
          "default": false
        },
        "expose": {
          "description": "Lists Expose objects, each specifying a Component and its services to be exposed.",
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "services",
              "switch"
            ],
            "properties": {
              "componentName": {
                "description": "Specifies the name of the Component.",
                "type": "string"
              },
              "services": {
                "description": "Specifies a list of OpsService.\nWhen an OpsService is exposed, a corresponding ClusterService will be added to `cluster.spec.services`.\nOn the other hand, when an OpsService is unexposed, the corresponding ClusterService will be removed\nfrom `cluster.spec.services`.\n\n\nNote: If `componentName` is not specified, the `ports` and `selector` fields must be provided\nin each OpsService definition.",
                "type": "array",
                "items": {
                  "description": "OpsService represents the parameters to dynamically create or remove a ClusterService in the `cluster.spec.services` array.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "annotations": {
                      "description": "Contains cloud provider related parameters if ServiceType is LoadBalancer.\n\n\nMore info: https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "ipFamilies": {
                      "description": "A list of IP families (e.g., IPv4, IPv6) assigned to this Service.\n\n\nUsually assigned automatically based on the cluster configuration and the `ipFamilyPolicy` field.\nIf specified manually, the requested IP family must be available in the cluster and allowed by the `ipFamilyPolicy`.\nIf the requested IP family is not available or not allowed, the Service creation will fail.\n\n\nValid values:\n\n\n- \"IPv4\"\n- \"IPv6\"\n\n\nThis field may hold a maximum of two entries (dual-stack families, in either order).\n\n\nCommon combinations of `ipFamilies` and `ipFamilyPolicy` are:\n\n\n- ipFamilies=[] + ipFamilyPolicy=\"PreferDualStack\" :\n  The Service prefers dual-stack but can fall back to single-stack if the cluster does not support dual-stack.\n  The IP family is automatically assigned based on the cluster configuration.\n- ipFamilies=[\"IPV4\",\"IPV6\"] + ipFamilyPolicy=\"RequiredDualStack\" :\n  The Service requires dual-stack and will only be created if the cluster supports both IPv4 and IPv6.\n  The primary IP family is IPV4.\n- ipFamilies=[\"IPV6\",\"IPV4\"] + ipFamilyPolicy=\"RequiredDualStack\" :\n  The Service requires dual-stack and will only be created if the cluster supports both IPv4 and IPv6.\n  The primary IP family is IPV6.\n- ipFamilies=[\"IPV4\"] + ipFamilyPolicy=\"SingleStack\" :\n  The Service uses a single-stack with IPv4 only.\n- ipFamilies=[\"IPV6\"] + ipFamilyPolicy=\"SingleStack\" :\n  The Service uses a single-stack with IPv6 only.",
                      "type": "array",
                      "items": {
                        "description": "IPFamily represents the IP Family (IPv4 or IPv6). This type is used\nto express the family of an IP expressed by a type (e.g. service.spec.ipFamilies).",
                        "type": "string"
                      },
                      "x-kubernetes-list-type": "atomic"
                    },
                    "ipFamilyPolicy": {
                      "description": "Specifies whether the Service should use a single IP family (SingleStack) or two IP families (DualStack).\n\n\nPossible values:\n\n\n- 'SingleStack' (default) : The Service uses a single IP family.\n  If no value is provided, IPFamilyPolicy defaults to SingleStack.\n- 'PreferDualStack' : The Service prefers to use two IP families on dual-stack configured clusters\n  or a single IP family on single-stack clusters.\n- 'RequiredDualStack' : The Service requires two IP families on dual-stack configured clusters.\n  If the cluster is not configured for dual-stack, the Service creation fails.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Specifies the name of the Service. This name is used to set `clusterService.name`.\n\n\nNote: This field cannot be updated.",
                      "type": "string"
                    },
                    "podSelector": {
                      "description": "Routes service traffic to pods with matching label keys and values.\nIf specified, the service will only be exposed to pods matching the selector.\n\n\nNote: If the component has roles, at least one of 'roleSelector' or 'podSelector' must be specified.\nIf both are specified, a pod must match both conditions to be selected.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "x-kubernetes-map-type": "atomic"
                    },
                    "ports": {
                      "description": "Specifies Port definitions that are to be exposed by a ClusterService.\n\n\nIf not specified, the Port definitions from non-NodePort and non-LoadBalancer type ComponentService\ndefined in the ComponentDefinition (`componentDefinition.spec.services`) will be used.\nIf no matching ComponentService is found, the expose operation will fail.\n\n\nMore info: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports",
                      "type": "array",
                      "items": {
                        "description": "ServicePort contains information on service's port.",
                        "type": "object",
                        "required": [
                          "port"
                        ],
                        "properties": {
                          "appProtocol": {
                            "description": "The application protocol for this port.\nThis is used as a hint for implementations to offer richer behavior for protocols that they understand.\nThis field follows standard Kubernetes label syntax.\nValid values are either:\n\n\n* Un-prefixed protocol names - reserved for IANA standard service names (as per\nRFC-6335 and https://www.iana.org/assignments/service-names).\n\n\n* Kubernetes-defined prefixed names:\n  * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-\n  * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455\n  * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455\n\n\n* Other protocols should use implementation-defined prefixed names such as\nmycompany.com/my-custom-protocol.",
                            "type": "string"
                          },
                          "name": {
                            "description": "The name of this port within the service. This must be a DNS_LABEL.\nAll ports within a ServiceSpec must have unique names. When considering\nthe endpoints for a Service, this must match the 'name' field in the\nEndpointPort.\nOptional if only one ServicePort is defined on this service.",
                            "type": "string"
                          },
                          "nodePort": {
                            "description": "The port on each node on which this service is exposed when type is\nNodePort or LoadBalancer.  Usually assigned by the system. If a value is\nspecified, in-range, and not in use it will be used, otherwise the\noperation will fail.  If not specified, a port will be allocated if this\nService requires one.  If this field is specified when creating a\nService which does not need it, creation will fail. This field will be\nwiped when updating a Service to no longer need it (e.g. changing type\nfrom NodePort to ClusterIP).\nMore info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport",
                            "type": "integer",
                            "format": "int32"
                          },
                          "port": {
                            "description": "The port that will be exposed by this service.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "protocol": {
                            "description": "The IP protocol for this port. Supports \"TCP\", \"UDP\", and \"SCTP\".\nDefault is TCP.",
                            "type": "string",
                            "default": "TCP"
                          },
                          "targetPort": {
                            "description": "Number or name of the port to access on the pods targeted by the service.\nNumber must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\nIf this is a string, it will be looked up as a named port in the\ntarget Pod's container ports. If this is not specified, the value\nof the 'port' field is used (an identity map).\nThis field is ignored for services with clusterIP=None, and should be\nomitted or set equal to the 'port' field.\nMore info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service",
                            "anyOf": [
                              {
                                "type": "integer"
                              },
                              {
                                "type": "string"
                              }
                            ],
                            "x-kubernetes-int-or-string": true
                          }
                        },
                        "additionalProperties": false
                      },
                      "x-kubernetes-list-map-keys": [
                        "port",
                        "protocol"
                      ],
                      "x-kubernetes-list-type": "map"
                    },
                    "roleSelector": {
                      "description": "Specifies a role to target with the service.\nIf specified, the service will only be exposed to pods with the matching role.\n\n\nNote: If the component has roles, at least one of 'roleSelector' or 'podSelector' must be specified.\nIf both are specified, a pod must match both conditions to be selected.",
                      "type": "string"
                    },
                    "serviceType": {
                      "description": "Determines how the Service is exposed. Defaults to 'ClusterIP'.\nValid options are `ClusterIP`, `NodePort`, and `LoadBalancer`.\n\n\n- `ClusterIP`: allocates a cluster-internal IP address for load-balancing to endpoints.\n   Endpoints are determined by the selector or if that is not specified,\n   they are determined by manual construction of an Endpoints object or EndpointSlice objects.\n- `NodePort`: builds on ClusterIP and allocates a port on every node which routes to the same endpoints as the clusterIP.\n- `LoadBalancer`: builds on NodePort and creates an external load-balancer (if supported in the current cloud)\n   which routes to the same endpoints as the clusterIP.\n\n\nNote: although K8s Service type allows the 'ExternalName' type, it is not a valid option for the expose operation.\n\n\nFor more info, see:\nhttps://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "switch": {
                "description": "Indicates whether the services will be exposed.\n'Enable' exposes the services. while 'Disable' removes the exposed Service.",
                "type": "string",
                "enum": [
                  "Enable",
                  "Disable"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "force": {
          "description": "Instructs the system to bypass pre-checks (including cluster state checks and customized pre-conditions hooks)\nand immediately execute the opsRequest, except for the opsRequest of 'Start' type, which will still undergo\npre-checks even if `force` is true.\n\n\nThis is useful for concurrent execution of 'VerticalScaling' and 'HorizontalScaling' opsRequests.\nBy setting `force` to true, you can bypass the default checks and demand these opsRequests to run\nsimultaneously.\n\n\nNote: Once set, the `force` field is immutable and cannot be updated.",
          "type": "boolean",
          "x-kubernetes-validations": [
            {
              "rule": "self == oldSelf",
              "message": "forbidden to update spec.force"
            }
          ]
        },
        "horizontalScaling": {
          "description": "Lists HorizontalScaling objects, each specifying scaling requirements for a Component,\nincluding desired replica changes, configurations for new instances, modifications for existing instances,\nand take offline/online the specified instances.",
          "type": "array",
          "items": {
            "description": "HorizontalScaling defines the parameters of a horizontal scaling operation.",
            "type": "object",
            "required": [
              "componentName"
            ],
            "properties": {
              "componentName": {
                "description": "Specifies the name of the Component as defined in the cluster.spec",
                "type": "string"
              },
              "scaleIn": {
                "description": "Specifies the replica changes for scaling in components and instance templates,\nand takes specified instances offline. Can be used in conjunction with the \"scaleOut\" operation.\nNote: Any configuration that creates instances is considered invalid.",
                "type": "object",
                "properties": {
                  "instances": {
                    "description": "Modifies the desired replicas count for existing InstanceTemplate.\nif the inst",
                    "type": "array",
                    "items": {
                      "description": "InstanceReplicasTemplate defines the template for instance replicas.",
                      "type": "object",
                      "required": [
                        "name",
                        "replicaChanges"
                      ],
                      "properties": {
                        "name": {
                          "description": "Specifies the name of the instance template.",
                          "type": "string"
                        },
                        "replicaChanges": {
                          "description": "Specifies the replica changes for the instance template.",
                          "type": "integer",
                          "format": "int32",
                          "minimum": 0
                        }
                      },
                      "additionalProperties": false
                    },
                    "x-kubernetes-list-map-keys": [
                      "name"
                    ],
                    "x-kubernetes-list-type": "map"
                  },
                  "onlineInstancesToOffline": {
                    "description": "Specifies the instance names that need to be taken offline.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "replicaChanges": {
                    "description": "Specifies the replica changes for the component.",
                    "type": "integer",
                    "format": "int32",
                    "minimum": 0
                  }
                },
                "additionalProperties": false
              },
              "scaleOut": {
                "description": "Specifies the replica changes for scaling out components and instance templates,\nand brings offline instances back online. Can be used in conjunction with the \"scaleIn\" operation.\nNote: Any configuration that deletes instances is considered invalid.",
                "type": "object",
                "properties": {
                  "fromBackup": {
                    "description": "FromBackup specifies the configuration for creating new instances from an existing backup.\nThis is only effective for non-sharding components.\nWhen specified, new instances will be created using data from the specified backup.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Specifies the name of the Backup name.",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Specifies the namespace of the Backup namespace.\nIf not specified, the namespace of the OpsRequest will be used.",
                        "type": "string"
                      },
                      "restoreEnv": {
                        "description": "Defines container environment variables for the restore process.\nmerged with the ones specified in the Backup and ActionSet resources.\n\n\nMerge priority: Restore env \u003e Backup env \u003e ActionSet env.\n\n\nPurpose: Some databases require different configurations when being restored as a standby\ncompared to being restored as a primary.\nFor example, when restoring MySQL as a replica, you need to set `skip_slave_start=\"ON\"` for 5.7\nor `skip_replica_start=\"ON\"` for 8.0.\nAllowing environment variables to be passed in makes it more convenient to control these behavioral differences\nduring the restore process.",
                        "type": "array",
                        "items": {
                          "description": "EnvVar represents an environment variable present in a Container.",
                          "type": "object",
                          "required": [
                            "name"
                          ],
                          "properties": {
                            "name": {
                              "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
                              "type": "string"
                            },
                            "value": {
                              "description": "Variable references $(VAR_NAME) are expanded\nusing the previously defined environment variables in the container and\nany service environment variables. If a variable cannot be resolved,\nthe reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.\n\"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\".\nEscaped references will never be expanded, regardless of whether the variable\nexists or not.\nDefaults to \"\".",
                              "type": "string"
                            },
                            "valueFrom": {
                              "description": "Source for the environment variable's value. Cannot be used if value is not empty.",
                              "type": "object",
                              "properties": {
                                "configMapKeyRef": {
                                  "description": "Selects a key of a ConfigMap.",
                                  "type": "object",
                                  "required": [
                                    "key"
                                  ],
                                  "properties": {
                                    "key": {
                                      "description": "The key to select.",
                                      "type": "string"
                                    },
                                    "name": {
                                      "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                                      "type": "string"
                                    },
                                    "optional": {
                                      "description": "Specify whether the ConfigMap or its key must be defined",
                                      "type": "boolean"
                                    }
                                  },
                                  "additionalProperties": false,
                                  "x-kubernetes-map-type": "atomic"
                                },
                                "fieldRef": {
                                  "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['\u003cKEY\u003e']`, `metadata.annotations['\u003cKEY\u003e']`,\nspec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
                                  "type": "object",
                                  "required": [
                                    "fieldPath"
                                  ],
                                  "properties": {
                                    "apiVersion": {
                                      "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                                      "type": "string"
                                    },
                                    "fieldPath": {
                                      "description": "Path of the field to select in the specified API version.",
                                      "type": "string"
                                    }
                                  },
                                  "additionalProperties": false,
                                  "x-kubernetes-map-type": "atomic"
                                },
                                "resourceFieldRef": {
                                  "description": "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.",
                                  "type": "object",
                                  "required": [
                                    "resource"
                                  ],
                                  "properties": {
                                    "containerName": {
                                      "description": "Container name: required for volumes, optional for env vars",
                                      "type": "string"
                                    },
                                    "divisor": {
                                      "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                                      "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                      "anyOf": [
                                        {
                                          "type": "integer"
                                        },
                                        {
                                          "type": "string"
                                        }
                                      ],
                                      "x-kubernetes-int-or-string": true
                                    },
                                    "resource": {
                                      "description": "Required: resource to select",
                                      "type": "string"
                                    }
                                  },
                                  "additionalProperties": false,
                                  "x-kubernetes-map-type": "atomic"
                                },
                                "secretKeyRef": {
                                  "description": "Selects a key of a secret in the pod's namespace",
                                  "type": "object",
                                  "required": [
                                    "key"
                                  ],
                                  "properties": {
                                    "key": {
                                      "description": "The key of the secret to select from.  Must be a valid secret key.",
                                      "type": "string"
                                    },
                                    "name": {
                                      "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                                      "type": "string"
                                    },
                                    "optional": {
                                      "description": "Specify whether the Secret or its key must be defined",
                                      "type": "boolean"
                                    }
                                  },
                                  "additionalProperties": false,
                                  "x-kubernetes-map-type": "atomic"
                                }
                              },
                              "additionalProperties": false
                            }
                          },
                          "additionalProperties": false
                        },
                        "x-kubernetes-preserve-unknown-fields": true
                      },
                      "restorePointInTime": {
                        "description": "Specifies the point in time to which the restore should be performed.\nSupported time formats:\n\n\n- RFC3339 format, e.g. \"2023-11-25T18:52:53Z\"\n- A human-readable date-time format, e.g. \"Jul 25,2023 18:52:53 UTC+0800\"",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "instances": {
                    "description": "Modifies the desired replicas count for existing InstanceTemplate.\nif the inst",
                    "type": "array",
                    "items": {
                      "description": "InstanceReplicasTemplate defines the template for instance replicas.",
                      "type": "object",
                      "required": [
                        "name",
                        "replicaChanges"
                      ],
                      "properties": {
                        "name": {
                          "description": "Specifies the name of the instance template.",
                          "type": "string"
                        },
                        "replicaChanges": {
                          "description": "Specifies the replica changes for the instance template.",
                          "type": "integer",
                          "format": "int32",
                          "minimum": 0
                        }
                      },
                      "additionalProperties": false
                    },
                    "x-kubernetes-list-map-keys": [
                      "name"
                    ],
                    "x-kubernetes-list-type": "map"
                  },
                  "newInstances": {
                    "description": "Defines the configuration for new instances added during scaling, including resource requirements, labels, annotations, etc.\nNew instances are created based on the provided instance templates.",
                    "type": "array",
                    "items": {
                      "description": "InstanceTemplate allows customization of individual replica configurations in a Component.",
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "annotations": {
                          "description": "Specifies a map of key-value pairs to be merged into the Pod's existing annotations.\nExisting keys will have their values overwritten, while new keys will be added to the annotations.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "env": {
                          "description": "Defines Env to override.\nAdd new or override existing envs.",
                          "type": "array",
                          "items": {
                            "description": "EnvVar represents an environment variable present in a Container.",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
                                "type": "string"
                              },
                              "value": {
                                "description": "Variable references $(VAR_NAME) are expanded\nusing the previously defined environment variables in the container and\nany service environment variables. If a variable cannot be resolved,\nthe reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.\n\"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\".\nEscaped references will never be expanded, regardless of whether the variable\nexists or not.\nDefaults to \"\".",
                                "type": "string"
                              },
                              "valueFrom": {
                                "description": "Source for the environment variable's value. Cannot be used if value is not empty.",
                                "type": "object",
                                "properties": {
                                  "configMapKeyRef": {
                                    "description": "Selects a key of a ConfigMap.",
                                    "type": "object",
                                    "required": [
                                      "key"
                                    ],
                                    "properties": {
                                      "key": {
                                        "description": "The key to select.",
                                        "type": "string"
                                      },
                                      "name": {
                                        "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                                        "type": "string"
                                      },
                                      "optional": {
                                        "description": "Specify whether the ConfigMap or its key must be defined",
                                        "type": "boolean"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "x-kubernetes-map-type": "atomic"
                                  },
                                  "fieldRef": {
                                    "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['\u003cKEY\u003e']`, `metadata.annotations['\u003cKEY\u003e']`,\nspec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
                                    "type": "object",
                                    "required": [
                                      "fieldPath"
                                    ],
                                    "properties": {
                                      "apiVersion": {
                                        "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                                        "type": "string"
                                      },
                                      "fieldPath": {
                                        "description": "Path of the field to select in the specified API version.",
                                        "type": "string"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "x-kubernetes-map-type": "atomic"
                                  },
                                  "resourceFieldRef": {
                                    "description": "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.",
                                    "type": "object",
                                    "required": [
                                      "resource"
                                    ],
                                    "properties": {
                                      "containerName": {
                                        "description": "Container name: required for volumes, optional for env vars",
                                        "type": "string"
                                      },
                                      "divisor": {
                                        "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                        "anyOf": [
                                          {
                                            "type": "integer"
                                          },
                                          {
                                            "type": "string"
                                          }
                                        ],
                                        "x-kubernetes-int-or-string": true
                                      },
                                      "resource": {
                                        "description": "Required: resource to select",
                                        "type": "string"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "x-kubernetes-map-type": "atomic"
                                  },
                                  "secretKeyRef": {
                                    "description": "Selects a key of a secret in the pod's namespace",
                                    "type": "object",
                                    "required": [
                                      "key"
                                    ],
                                    "properties": {
                                      "key": {
                                        "description": "The key of the secret to select from.  Must be a valid secret key.",
                                        "type": "string"
                                      },
                                      "name": {
                                        "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                                        "type": "string"
                                      },
                                      "optional": {
                                        "description": "Specify whether the Secret or its key must be defined",
                                        "type": "boolean"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "x-kubernetes-map-type": "atomic"
                                  }
                                },
                                "additionalProperties": false
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "labels": {
                          "description": "Specifies a map of key-value pairs that will be merged into the Pod's existing labels.\nValues for existing keys will be overwritten, and new keys will be added.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "name": {
                          "description": "Name specifies the unique name of the instance Pod created using this InstanceTemplate.\nThis name is constructed by concatenating the Component's name, the template's name, and the instance's ordinal\nusing the pattern: $(cluster.name)-$(component.name)-$(template.name)-$(ordinal). Ordinals start from 0.\nThe specified name overrides any default naming conventions or patterns.",
                          "type": "string",
                          "maxLength": 54,
                          "pattern": "^[a-z0-9]([a-z0-9\\.\\-]*[a-z0-9])?$"
                        },
                        "ordinals": {
                          "description": "Specifies the desired Ordinals of this InstanceTemplate.\nThe Ordinals used to specify the ordinal of the instance (pod) names to be generated under this InstanceTemplate.\n\n\nFor example, if Ordinals is {ranges: [{start: 0, end: 1}], discrete: [7]},\nthen the instance names generated under this InstanceTemplate would be\n$(cluster.name)-$(component.name)-$(template.name)-0、$(cluster.name)-$(component.name)-$(template.name)-1 and\n$(cluster.name)-$(component.name)-$(template.name)-7",
                          "type": "object",
                          "properties": {
                            "discrete": {
                              "type": "array",
                              "items": {
                                "type": "integer",
                                "format": "int32"
                              }
                            },
                            "ranges": {
                              "type": "array",
                              "items": {
                                "description": "Range represents a range with a start and an end value.\nIt is used to define a continuous segment.",
                                "type": "object",
                                "required": [
                                  "end",
                                  "start"
                                ],
                                "properties": {
                                  "end": {
                                    "type": "integer",
                                    "format": "int32"
                                  },
                                  "start": {
                                    "type": "integer",
                                    "format": "int32"
                                  }
                                },
                                "additionalProperties": false
                              }
                            }
                          },
                          "additionalProperties": false
                        },
                        "replicas": {
                          "description": "Specifies the number of instances (Pods) to create from this InstanceTemplate.\nThis field allows setting how many replicated instances of the Component,\nwith the specific overrides in the InstanceTemplate, are created.\nThe default value is 1. A value of 0 disables instance creation.",
                          "type": "integer",
                          "format": "int32",
                          "default": 1,
                          "minimum": 0
                        },
                        "resources": {
                          "description": "Specifies an override for the resource requirements of the first container in the Pod.\nThis field allows for customizing resource allocation (CPU, memory, etc.) for the container.",
                          "type": "object",
                          "properties": {
                            "claims": {
                              "description": "Claims lists the names of resources, defined in spec.resourceClaims,\nthat are used by this container.\n\n\nThis is an alpha field and requires enabling the\nDynamicResourceAllocation feature gate.\n\n\nThis field is immutable. It can only be set for containers.",
                              "type": "array",
                              "items": {
                                "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                                "type": "object",
                                "required": [
                                  "name"
                                ],
                                "properties": {
                                  "name": {
                                    "description": "Name must match the name of one entry in pod.spec.resourceClaims of\nthe Pod where this field is used. It makes that resource available\ninside a container.",
                                    "type": "string"
                                  }
                                },
                                "additionalProperties": false
                              },
                              "x-kubernetes-list-map-keys": [
                                "name"
                              ],
                              "x-kubernetes-list-type": "map"
                            },
                            "limits": {
                              "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                              "type": "object",
                              "additionalProperties": {
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "anyOf": [
                                  {
                                    "type": "integer"
                                  },
                                  {
                                    "type": "string"
                                  }
                                ],
                                "x-kubernetes-int-or-string": true
                              }
                            },
                            "requests": {
                              "description": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                              "type": "object",
                              "additionalProperties": {
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "anyOf": [
                                  {
                                    "type": "integer"
                                  },
                                  {
                                    "type": "string"
                                  }
                                ],
                                "x-kubernetes-int-or-string": true
                              }
                            }
                          },
                          "additionalProperties": false
                        },
                        "schedulingPolicy": {
                          "description": "Specifies the scheduling policy for the instance.\nIf defined, it will overwrite the scheduling policy defined in ClusterSpec and/or ClusterComponentSpec.",
                          "type": "object",
                          "properties": {
                            "affinity": {
                              "description": "Specifies a group of affinity scheduling rules of the Cluster, including NodeAffinity, PodAffinity, and PodAntiAffinity.",
                              "type": "object",
                              "properties": {
                                "nodeAffinity": {
                                  "description": "Describes node affinity scheduling rules for the pod.",
                                  "type": "object",
                                  "properties": {
                                    "preferredDuringSchedulingIgnoredDuringExecution": {
                                      "description": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node matches the corresponding matchExpressions; the\nnode(s) with the highest sum are the most preferred.",
                                      "type": "array",
                                      "items": {
                                        "description": "An empty preferred scheduling term matches all objects with implicit weight 0\n(i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
                                        "type": "object",
                                        "required": [
                                          "preference",
                                          "weight"
                                        ],
                                        "properties": {
                                          "preference": {
                                            "description": "A node selector term, associated with the corresponding weight.",
                                            "type": "object",
                                            "properties": {
                                              "matchExpressions": {
                                                "description": "A list of node selector requirements by node's labels.",
                                                "type": "array",
                                                "items": {
                                                  "description": "A node selector requirement is a selector that contains values, a key, and an operator\nthat relates the key and values.",
                                                  "type": "object",
                                                  "required": [
                                                    "key",
                                                    "operator"
                                                  ],
                                                  "properties": {
                                                    "key": {
                                                      "description": "The label key that the selector applies to.",
                                                      "type": "string"
                                                    },
                                                    "operator": {
                                                      "description": "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                      "type": "string"
                                                    },
                                                    "values": {
                                                      "description": "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.",
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  },
                                                  "additionalProperties": false
                                                }
                                              },
                                              "matchFields": {
                                                "description": "A list of node selector requirements by node's fields.",
                                                "type": "array",
                                                "items": {
                                                  "description": "A node selector requirement is a selector that contains values, a key, and an operator\nthat relates the key and values.",
                                                  "type": "object",
                                                  "required": [
                                                    "key",
                                                    "operator"
                                                  ],
                                                  "properties": {
                                                    "key": {
                                                      "description": "The label key that the selector applies to.",
                                                      "type": "string"
                                                    },
                                                    "operator": {
                                                      "description": "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                      "type": "string"
                                                    },
                                                    "values": {
                                                      "description": "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.",
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  },
                                                  "additionalProperties": false
                                                }
                                              }
                                            },
                                            "additionalProperties": false,
                                            "x-kubernetes-map-type": "atomic"
                                          },
                                          "weight": {
                                            "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
                                            "type": "integer",
                                            "format": "int32"
                                          }
                                        },
                                        "additionalProperties": false
                                      }
                                    },
                                    "requiredDuringSchedulingIgnoredDuringExecution": {
                                      "description": "If the affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to an update), the system\nmay or may not try to eventually evict the pod from its node.",
                                      "type": "object",
                                      "required": [
                                        "nodeSelectorTerms"
                                      ],
                                      "properties": {
                                        "nodeSelectorTerms": {
                                          "description": "Required. A list of node selector terms. The terms are ORed.",
                                          "type": "array",
                                          "items": {
                                            "description": "A null or empty node selector term matches no objects. The requirements of\nthem are ANDed.\nThe TopologySelectorTerm type implements a subset of the NodeSelectorTerm.",
                                            "type": "object",
                                            "properties": {
                                              "matchExpressions": {
                                                "description": "A list of node selector requirements by node's labels.",
                                                "type": "array",
                                                "items": {
                                                  "description": "A node selector requirement is a selector that contains values, a key, and an operator\nthat relates the key and values.",
                                                  "type": "object",
                                                  "required": [
                                                    "key",
                                                    "operator"
                                                  ],
                                                  "properties": {
                                                    "key": {
                                                      "description": "The label key that the selector applies to.",
                                                      "type": "string"
                                                    },
                                                    "operator": {
                                                      "description": "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                      "type": "string"
                                                    },
                                                    "values": {
                                                      "description": "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.",
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  },
                                                  "additionalProperties": false
                                                }
                                              },
                                              "matchFields": {
                                                "description": "A list of node selector requirements by node's fields.",
                                                "type": "array",
                                                "items": {
                                                  "description": "A node selector requirement is a selector that contains values, a key, and an operator\nthat relates the key and values.",
                                                  "type": "object",
                                                  "required": [
                                                    "key",
                                                    "operator"
                                                  ],
                                                  "properties": {
                                                    "key": {
                                                      "description": "The label key that the selector applies to.",
                                                      "type": "string"
                                                    },
                                                    "operator": {
                                                      "description": "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                      "type": "string"
                                                    },
                                                    "values": {
                                                      "description": "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.",
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  },
                                                  "additionalProperties": false
                                                }
                                              }
                                            },
                                            "additionalProperties": false,
                                            "x-kubernetes-map-type": "atomic"
                                          }
                                        }
                                      },
                                      "additionalProperties": false,
                                      "x-kubernetes-map-type": "atomic"
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "podAffinity": {
                                  "description": "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).",
                                  "type": "object",
                                  "properties": {
                                    "preferredDuringSchedulingIgnoredDuringExecution": {
                                      "description": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\nnode(s) with the highest sum are the most preferred.",
                                      "type": "array",
                                      "items": {
                                        "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
                                        "type": "object",
                                        "required": [
                                          "podAffinityTerm",
                                          "weight"
                                        ],
                                        "properties": {
                                          "podAffinityTerm": {
                                            "description": "Required. A pod affinity term, associated with the corresponding weight.",
                                            "type": "object",
                                            "required": [
                                              "topologyKey"
                                            ],
                                            "properties": {
                                              "labelSelector": {
                                                "description": "A label query over a set of resources, in this case pods.\nIf it's null, this PodAffinityTerm matches with no Pods.",
                                                "type": "object",
                                                "properties": {
                                                  "matchExpressions": {
                                                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                    "type": "array",
                                                    "items": {
                                                      "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                                      "type": "object",
                                                      "required": [
                                                        "key",
                                                        "operator"
                                                      ],
                                                      "properties": {
                                                        "key": {
                                                          "description": "key is the label key that the selector applies to.",
                                                          "type": "string"
                                                        },
                                                        "operator": {
                                                          "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                                          "type": "string"
                                                        },
                                                        "values": {
                                                          "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                                          "type": "array",
                                                          "items": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      },
                                                      "additionalProperties": false
                                                    }
                                                  },
                                                  "matchLabels": {
                                                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                    "type": "object",
                                                    "additionalProperties": {
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "additionalProperties": false,
                                                "x-kubernetes-map-type": "atomic"
                                              },
                                              "matchLabelKeys": {
                                                "description": "MatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both MatchLabelKeys and LabelSelector.\nAlso, MatchLabelKeys cannot be set when LabelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.",
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                },
                                                "x-kubernetes-list-type": "atomic"
                                              },
                                              "mismatchLabelKeys": {
                                                "description": "MismatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both MismatchLabelKeys and LabelSelector.\nAlso, MismatchLabelKeys cannot be set when LabelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.",
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                },
                                                "x-kubernetes-list-type": "atomic"
                                              },
                                              "namespaceSelector": {
                                                "description": "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.",
                                                "type": "object",
                                                "properties": {
                                                  "matchExpressions": {
                                                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                    "type": "array",
                                                    "items": {
                                                      "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                                      "type": "object",
                                                      "required": [
                                                        "key",
                                                        "operator"
                                                      ],
                                                      "properties": {
                                                        "key": {
                                                          "description": "key is the label key that the selector applies to.",
                                                          "type": "string"
                                                        },
                                                        "operator": {
                                                          "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                                          "type": "string"
                                                        },
                                                        "values": {
                                                          "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                                          "type": "array",
                                                          "items": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      },
                                                      "additionalProperties": false
                                                    }
                                                  },
                                                  "matchLabels": {
                                                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                    "type": "object",
                                                    "additionalProperties": {
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "additionalProperties": false,
                                                "x-kubernetes-map-type": "atomic"
                                              },
                                              "namespaces": {
                                                "description": "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                }
                                              },
                                              "topologyKey": {
                                                "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.",
                                                "type": "string"
                                              }
                                            },
                                            "additionalProperties": false
                                          },
                                          "weight": {
                                            "description": "weight associated with matching the corresponding podAffinityTerm,\nin the range 1-100.",
                                            "type": "integer",
                                            "format": "int32"
                                          }
                                        },
                                        "additionalProperties": false
                                      }
                                    },
                                    "requiredDuringSchedulingIgnoredDuringExecution": {
                                      "description": "If the affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to a pod label update), the\nsystem may or may not try to eventually evict the pod from its node.\nWhen there are multiple elements, the lists of nodes corresponding to each\npodAffinityTerm are intersected, i.e. all terms must be satisfied.",
                                      "type": "array",
                                      "items": {
                                        "description": "Defines a set of pods (namely those matching the labelSelector\nrelative to the given namespace(s)) that this pod should be\nco-located (affinity) or not co-located (anti-affinity) with,\nwhere co-located is defined as running on a node whose value of\nthe label with key \u003ctopologyKey\u003e matches that of any node on which\na pod of the set of pods is running",
                                        "type": "object",
                                        "required": [
                                          "topologyKey"
                                        ],
                                        "properties": {
                                          "labelSelector": {
                                            "description": "A label query over a set of resources, in this case pods.\nIf it's null, this PodAffinityTerm matches with no Pods.",
                                            "type": "object",
                                            "properties": {
                                              "matchExpressions": {
                                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                "type": "array",
                                                "items": {
                                                  "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                                  "type": "object",
                                                  "required": [
                                                    "key",
                                                    "operator"
                                                  ],
                                                  "properties": {
                                                    "key": {
                                                      "description": "key is the label key that the selector applies to.",
                                                      "type": "string"
                                                    },
                                                    "operator": {
                                                      "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                                      "type": "string"
                                                    },
                                                    "values": {
                                                      "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  },
                                                  "additionalProperties": false
                                                }
                                              },
                                              "matchLabels": {
                                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                "type": "object",
                                                "additionalProperties": {
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "additionalProperties": false,
                                            "x-kubernetes-map-type": "atomic"
                                          },
                                          "matchLabelKeys": {
                                            "description": "MatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both MatchLabelKeys and LabelSelector.\nAlso, MatchLabelKeys cannot be set when LabelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.",
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            },
                                            "x-kubernetes-list-type": "atomic"
                                          },
                                          "mismatchLabelKeys": {
                                            "description": "MismatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both MismatchLabelKeys and LabelSelector.\nAlso, MismatchLabelKeys cannot be set when LabelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.",
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            },
                                            "x-kubernetes-list-type": "atomic"
                                          },
                                          "namespaceSelector": {
                                            "description": "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.",
                                            "type": "object",
                                            "properties": {
                                              "matchExpressions": {
                                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                "type": "array",
                                                "items": {
                                                  "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                                  "type": "object",
                                                  "required": [
                                                    "key",
                                                    "operator"
                                                  ],
                                                  "properties": {
                                                    "key": {
                                                      "description": "key is the label key that the selector applies to.",
                                                      "type": "string"
                                                    },
                                                    "operator": {
                                                      "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                                      "type": "string"
                                                    },
                                                    "values": {
                                                      "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  },
                                                  "additionalProperties": false
                                                }
                                              },
                                              "matchLabels": {
                                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                "type": "object",
                                                "additionalProperties": {
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "additionalProperties": false,
                                            "x-kubernetes-map-type": "atomic"
                                          },
                                          "namespaces": {
                                            "description": "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            }
                                          },
                                          "topologyKey": {
                                            "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.",
                                            "type": "string"
                                          }
                                        },
                                        "additionalProperties": false
                                      }
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "podAntiAffinity": {
                                  "description": "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).",
                                  "type": "object",
                                  "properties": {
                                    "preferredDuringSchedulingIgnoredDuringExecution": {
                                      "description": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe anti-affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling anti-affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\nnode(s) with the highest sum are the most preferred.",
                                      "type": "array",
                                      "items": {
                                        "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
                                        "type": "object",
                                        "required": [
                                          "podAffinityTerm",
                                          "weight"
                                        ],
                                        "properties": {
                                          "podAffinityTerm": {
                                            "description": "Required. A pod affinity term, associated with the corresponding weight.",
                                            "type": "object",
                                            "required": [
                                              "topologyKey"
                                            ],
                                            "properties": {
                                              "labelSelector": {
                                                "description": "A label query over a set of resources, in this case pods.\nIf it's null, this PodAffinityTerm matches with no Pods.",
                                                "type": "object",
                                                "properties": {
                                                  "matchExpressions": {
                                                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                    "type": "array",
                                                    "items": {
                                                      "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                                      "type": "object",
                                                      "required": [
                                                        "key",
                                                        "operator"
                                                      ],
                                                      "properties": {
                                                        "key": {
                                                          "description": "key is the label key that the selector applies to.",
                                                          "type": "string"
                                                        },
                                                        "operator": {
                                                          "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                                          "type": "string"
                                                        },
                                                        "values": {
                                                          "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                                          "type": "array",
                                                          "items": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      },
                                                      "additionalProperties": false
                                                    }
                                                  },
                                                  "matchLabels": {
                                                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                    "type": "object",
                                                    "additionalProperties": {
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "additionalProperties": false,
                                                "x-kubernetes-map-type": "atomic"
                                              },
                                              "matchLabelKeys": {
                                                "description": "MatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both MatchLabelKeys and LabelSelector.\nAlso, MatchLabelKeys cannot be set when LabelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.",
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                },
                                                "x-kubernetes-list-type": "atomic"
                                              },
                                              "mismatchLabelKeys": {
                                                "description": "MismatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both MismatchLabelKeys and LabelSelector.\nAlso, MismatchLabelKeys cannot be set when LabelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.",
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                },
                                                "x-kubernetes-list-type": "atomic"
                                              },
                                              "namespaceSelector": {
                                                "description": "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.",
                                                "type": "object",
                                                "properties": {
                                                  "matchExpressions": {
                                                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                    "type": "array",
                                                    "items": {
                                                      "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                                      "type": "object",
                                                      "required": [
                                                        "key",
                                                        "operator"
                                                      ],
                                                      "properties": {
                                                        "key": {
                                                          "description": "key is the label key that the selector applies to.",
                                                          "type": "string"
                                                        },
                                                        "operator": {
                                                          "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                                          "type": "string"
                                                        },
                                                        "values": {
                                                          "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                                          "type": "array",
                                                          "items": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      },
                                                      "additionalProperties": false
                                                    }
                                                  },
                                                  "matchLabels": {
                                                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                    "type": "object",
                                                    "additionalProperties": {
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "additionalProperties": false,
                                                "x-kubernetes-map-type": "atomic"
                                              },
                                              "namespaces": {
                                                "description": "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                }
                                              },
                                              "topologyKey": {
                                                "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.",
                                                "type": "string"
                                              }
                                            },
                                            "additionalProperties": false
                                          },
                                          "weight": {
                                            "description": "weight associated with matching the corresponding podAffinityTerm,\nin the range 1-100.",
                                            "type": "integer",
                                            "format": "int32"
                                          }
                                        },
                                        "additionalProperties": false
                                      }
                                    },
                                    "requiredDuringSchedulingIgnoredDuringExecution": {
                                      "description": "If the anti-affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the anti-affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to a pod label update), the\nsystem may or may not try to eventually evict the pod from its node.\nWhen there are multiple elements, the lists of nodes corresponding to each\npodAffinityTerm are intersected, i.e. all terms must be satisfied.",
                                      "type": "array",
                                      "items": {
                                        "description": "Defines a set of pods (namely those matching the labelSelector\nrelative to the given namespace(s)) that this pod should be\nco-located (affinity) or not co-located (anti-affinity) with,\nwhere co-located is defined as running on a node whose value of\nthe label with key \u003ctopologyKey\u003e matches that of any node on which\na pod of the set of pods is running",
                                        "type": "object",
                                        "required": [
                                          "topologyKey"
                                        ],
                                        "properties": {
                                          "labelSelector": {
                                            "description": "A label query over a set of resources, in this case pods.\nIf it's null, this PodAffinityTerm matches with no Pods.",
                                            "type": "object",
                                            "properties": {
                                              "matchExpressions": {
                                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                "type": "array",
                                                "items": {
                                                  "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                                  "type": "object",
                                                  "required": [
                                                    "key",
                                                    "operator"
                                                  ],
                                                  "properties": {
                                                    "key": {
                                                      "description": "key is the label key that the selector applies to.",
                                                      "type": "string"
                                                    },
                                                    "operator": {
                                                      "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                                      "type": "string"
                                                    },
                                                    "values": {
                                                      "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  },
                                                  "additionalProperties": false
                                                }
                                              },
                                              "matchLabels": {
                                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                "type": "object",
                                                "additionalProperties": {
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "additionalProperties": false,
                                            "x-kubernetes-map-type": "atomic"
                                          },
                                          "matchLabelKeys": {
                                            "description": "MatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both MatchLabelKeys and LabelSelector.\nAlso, MatchLabelKeys cannot be set when LabelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.",
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            },
                                            "x-kubernetes-list-type": "atomic"
                                          },
                                          "mismatchLabelKeys": {
                                            "description": "MismatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both MismatchLabelKeys and LabelSelector.\nAlso, MismatchLabelKeys cannot be set when LabelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.",
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            },
                                            "x-kubernetes-list-type": "atomic"
                                          },
                                          "namespaceSelector": {
                                            "description": "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.",
                                            "type": "object",
                                            "properties": {
                                              "matchExpressions": {
                                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                "type": "array",
                                                "items": {
                                                  "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                                  "type": "object",
                                                  "required": [
                                                    "key",
                                                    "operator"
                                                  ],
                                                  "properties": {
                                                    "key": {
                                                      "description": "key is the label key that the selector applies to.",
                                                      "type": "string"
                                                    },
                                                    "operator": {
                                                      "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                                      "type": "string"
                                                    },
                                                    "values": {
                                                      "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  },
                                                  "additionalProperties": false
                                                }
                                              },
                                              "matchLabels": {
                                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                "type": "object",
                                                "additionalProperties": {
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "additionalProperties": false,
                                            "x-kubernetes-map-type": "atomic"
                                          },
                                          "namespaces": {
                                            "description": "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            }
                                          },
                                          "topologyKey": {
                                            "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.",
                                            "type": "string"
                                          }
                                        },
                                        "additionalProperties": false
                                      }
                                    }
                                  },
                                  "additionalProperties": false
                                }
                              },
                              "additionalProperties": false
                            },
                            "nodeName": {
                              "description": "NodeName is a request to schedule this Pod onto a specific node. If it is non-empty,\nthe scheduler simply schedules this Pod onto that node, assuming that it fits resource\nrequirements.",
                              "type": "string"
                            },
                            "nodeSelector": {
                              "description": "NodeSelector is a selector which must be true for the Pod to fit on a node.\nSelector which must match a node's labels for the Pod to be scheduled on that node.\nMore info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              },
                              "x-kubernetes-map-type": "atomic"
                            },
                            "schedulerName": {
                              "description": "If specified, the Pod will be dispatched by specified scheduler.\nIf not specified, the Pod will be dispatched by default scheduler.",
                              "type": "string"
                            },
                            "tolerations": {
                              "description": "Allows Pods to be scheduled onto nodes with matching taints.\nEach toleration in the array allows the Pod to tolerate node taints based on\nspecified `key`, `value`, `effect`, and `operator`.\n\n\n- The `key`, `value`, and `effect` identify the taint that the toleration matches.\n- The `operator` determines how the toleration matches the taint.\n\n\nPods with matching tolerations are allowed to be scheduled on tainted nodes, typically reserved for specific purposes.",
                              "type": "array",
                              "items": {
                                "description": "The pod this Toleration is attached to tolerates any taint that matches\nthe triple \u003ckey,value,effect\u003e using the matching operator \u003coperator\u003e.",
                                "type": "object",
                                "properties": {
                                  "effect": {
                                    "description": "Effect indicates the taint effect to match. Empty means match all taint effects.\nWhen specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
                                    "type": "string"
                                  },
                                  "key": {
                                    "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys.\nIf the key is empty, operator must be Exists; this combination means to match all values and all keys.",
                                    "type": "string"
                                  },
                                  "operator": {
                                    "description": "Operator represents a key's relationship to the value.\nValid operators are Exists and Equal. Defaults to Equal.\nExists is equivalent to wildcard for value, so that a pod can\ntolerate all taints of a particular category.",
                                    "type": "string"
                                  },
                                  "tolerationSeconds": {
                                    "description": "TolerationSeconds represents the period of time the toleration (which must be\nof effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,\nit is not set, which means tolerate the taint forever (do not evict). Zero and\nnegative values will be treated as 0 (evict immediately) by the system.",
                                    "type": "integer",
                                    "format": "int64"
                                  },
                                  "value": {
                                    "description": "Value is the taint value the toleration matches to.\nIf the operator is Exists, the value should be empty, otherwise just a regular string.",
                                    "type": "string"
                                  }
                                },
                                "additionalProperties": false
                              }
                            },
                            "topologySpreadConstraints": {
                              "description": "TopologySpreadConstraints describes how a group of Pods ought to spread across topology\ndomains. Scheduler will schedule Pods in a way which abides by the constraints.\nAll topologySpreadConstraints are ANDed.",
                              "type": "array",
                              "items": {
                                "description": "TopologySpreadConstraint specifies how to spread matching pods among the given topology.",
                                "type": "object",
                                "required": [
                                  "maxSkew",
                                  "topologyKey",
                                  "whenUnsatisfiable"
                                ],
                                "properties": {
                                  "labelSelector": {
                                    "description": "LabelSelector is used to find matching pods.\nPods that match this label selector are counted to determine the number of pods\nin their corresponding topology domain.",
                                    "type": "object",
                                    "properties": {
                                      "matchExpressions": {
                                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                        "type": "array",
                                        "items": {
                                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                          "type": "object",
                                          "required": [
                                            "key",
                                            "operator"
                                          ],
                                          "properties": {
                                            "key": {
                                              "description": "key is the label key that the selector applies to.",
                                              "type": "string"
                                            },
                                            "operator": {
                                              "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                              "type": "string"
                                            },
                                            "values": {
                                              "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              }
                                            }
                                          },
                                          "additionalProperties": false
                                        }
                                      },
                                      "matchLabels": {
                                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                        "type": "object",
                                        "additionalProperties": {
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "additionalProperties": false,
                                    "x-kubernetes-map-type": "atomic"
                                  },
                                  "matchLabelKeys": {
                                    "description": "MatchLabelKeys is a set of pod label keys to select the pods over which\nspreading will be calculated. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are ANDed with labelSelector\nto select the group of existing pods over which spreading will be calculated\nfor the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.\nMatchLabelKeys cannot be set when LabelSelector isn't set.\nKeys that don't exist in the incoming pod labels will\nbe ignored. A null or empty list means only match against labelSelector.\n\n\nThis is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    },
                                    "x-kubernetes-list-type": "atomic"
                                  },
                                  "maxSkew": {
                                    "description": "MaxSkew describes the degree to which pods may be unevenly distributed.\nWhen `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference\nbetween the number of matching pods in the target topology and the global minimum.\nThe global minimum is the minimum number of matching pods in an eligible domain\nor zero if the number of eligible domains is less than MinDomains.\nFor example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same\nlabelSelector spread as 2/2/1:\nIn this case, the global minimum is 1.\n| zone1 | zone2 | zone3 |\n|  P P  |  P P  |   P   |\n- if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2;\nscheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2)\nviolate MaxSkew(1).\n- if MaxSkew is 2, incoming pod can be scheduled onto any zone.\nWhen `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence\nto topologies that satisfy it.\nIt's a required field. Default value is 1 and 0 is not allowed.",
                                    "type": "integer",
                                    "format": "int32"
                                  },
                                  "minDomains": {
                                    "description": "MinDomains indicates a minimum number of eligible domains.\nWhen the number of eligible domains with matching topology keys is less than minDomains,\nPod Topology Spread treats \"global minimum\" as 0, and then the calculation of Skew is performed.\nAnd when the number of eligible domains with matching topology keys equals or greater than minDomains,\nthis value has no effect on scheduling.\nAs a result, when the number of eligible domains is less than minDomains,\nscheduler won't schedule more than maxSkew Pods to those domains.\nIf value is nil, the constraint behaves as if MinDomains is equal to 1.\nValid values are integers greater than 0.\nWhen value is not nil, WhenUnsatisfiable must be DoNotSchedule.\n\n\nFor example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same\nlabelSelector spread as 2/2/2:\n| zone1 | zone2 | zone3 |\n|  P P  |  P P  |  P P  |\nThe number of domains is less than 5(MinDomains), so \"global minimum\" is treated as 0.\nIn this situation, new pod with the same labelSelector cannot be scheduled,\nbecause computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones,\nit will violate MaxSkew.\n\n\nThis is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).",
                                    "type": "integer",
                                    "format": "int32"
                                  },
                                  "nodeAffinityPolicy": {
                                    "description": "NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector\nwhen calculating pod topology spread skew. Options are:\n- Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations.\n- Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.\n\n\nIf this value is nil, the behavior is equivalent to the Honor policy.\nThis is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.",
                                    "type": "string"
                                  },
                                  "nodeTaintsPolicy": {
                                    "description": "NodeTaintsPolicy indicates how we will treat node taints when calculating\npod topology spread skew. Options are:\n- Honor: nodes without taints, along with tainted nodes for which the incoming pod\nhas a toleration, are included.\n- Ignore: node taints are ignored. All nodes are included.\n\n\nIf this value is nil, the behavior is equivalent to the Ignore policy.\nThis is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.",
                                    "type": "string"
                                  },
                                  "topologyKey": {
                                    "description": "TopologyKey is the key of node labels. Nodes that have a label with this key\nand identical values are considered to be in the same topology.\nWe consider each \u003ckey, value\u003e as a \"bucket\", and try to put balanced number\nof pods into each bucket.\nWe define a domain as a particular instance of a topology.\nAlso, we define an eligible domain as a domain whose nodes meet the requirements of\nnodeAffinityPolicy and nodeTaintsPolicy.\ne.g. If TopologyKey is \"kubernetes.io/hostname\", each Node is a domain of that topology.\nAnd, if TopologyKey is \"topology.kubernetes.io/zone\", each zone is a domain of that topology.\nIt's a required field.",
                                    "type": "string"
                                  },
                                  "whenUnsatisfiable": {
                                    "description": "WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy\nthe spread constraint.\n- DoNotSchedule (default) tells the scheduler not to schedule it.\n- ScheduleAnyway tells the scheduler to schedule the pod in any location,\n  but giving higher precedence to topologies that would help reduce the\n  skew.\nA constraint is considered \"Unsatisfiable\" for an incoming pod\nif and only if every possible node assignment for that pod would violate\n\"MaxSkew\" on some topology.\nFor example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same\nlabelSelector spread as 3/1/1:\n| zone1 | zone2 | zone3 |\n| P P P |   P   |   P   |\nIf WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled\nto zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies\nMaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler\nwon't make it *more* imbalanced.\nIt's a required field.",
                                    "type": "string"
                                  }
                                },
                                "additionalProperties": false
                              }
                            }
                          },
                          "additionalProperties": false
                        },
                        "volumeClaimTemplates": {
                          "description": "Specifies an override for the storage requirements of the instances.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "annotations": {
                                "description": "Specifies the annotations for the PVC of the volume.",
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              },
                              "labels": {
                                "description": "Specifies the labels for the PVC of the volume.",
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              },
                              "name": {
                                "description": "Refers to the name of a volumeMount defined in either:\n\n\n- `componentDefinition.spec.runtime.containers[*].volumeMounts`\n- `clusterDefinition.spec.componentDefs[*].podSpec.containers[*].volumeMounts` (deprecated)\n\n\nThe value of `name` must match the `name` field of a volumeMount specified in the corresponding `volumeMounts` array.",
                                "type": "string"
                              },
                              "spec": {
                                "description": "Defines the desired characteristics of a PersistentVolumeClaim that will be created for the volume\nwith the mount name specified in the `name` field.\n\n\nWhen a Pod is created for this ClusterComponent, a new PVC will be created based on the specification\ndefined in the `spec` field. The PVC will be associated with the volume mount specified by the `name` field.",
                                "type": "object",
                                "properties": {
                                  "accessModes": {
                                    "description": "Contains the desired access modes the volume should have.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1.",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    },
                                    "x-kubernetes-preserve-unknown-fields": true
                                  },
                                  "resources": {
                                    "description": "Represents the minimum resources the volume should have.\nIf the RecoverVolumeExpansionFailure feature is enabled, users are allowed to specify resource requirements that\nare lower than the previous value but must still be higher than the capacity recorded in the status field of the claim.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources.",
                                    "type": "object",
                                    "properties": {
                                      "limits": {
                                        "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                        "type": "object",
                                        "additionalProperties": {
                                          "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                          "anyOf": [
                                            {
                                              "type": "integer"
                                            },
                                            {
                                              "type": "string"
                                            }
                                          ],
                                          "x-kubernetes-int-or-string": true
                                        }
                                      },
                                      "requests": {
                                        "description": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                        "type": "object",
                                        "additionalProperties": {
                                          "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                          "anyOf": [
                                            {
                                              "type": "integer"
                                            },
                                            {
                                              "type": "string"
                                            }
                                          ],
                                          "x-kubernetes-int-or-string": true
                                        }
                                      }
                                    },
                                    "additionalProperties": false,
                                    "x-kubernetes-preserve-unknown-fields": true
                                  },
                                  "storageClassName": {
                                    "description": "The name of the StorageClass required by the claim.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1.",
                                    "type": "string"
                                  },
                                  "volumeAttributesClassName": {
                                    "description": "volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.\n\n\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#volumeattributesclass",
                                    "type": "string"
                                  },
                                  "volumeMode": {
                                    "description": "Defines what type of volume is required by the claim, either Block or Filesystem.",
                                    "type": "string"
                                  }
                                },
                                "additionalProperties": false
                              }
                            },
                            "additionalProperties": false
                          }
                        }
                      },
                      "additionalProperties": false
                    },
                    "x-kubernetes-list-map-keys": [
                      "name"
                    ],
                    "x-kubernetes-list-type": "map"
                  },
                  "offlineInstancesToOnline": {
                    "description": "Specifies the instances in the offline list to bring back online.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "replicaChanges": {
                    "description": "Specifies the replica changes for the component.",
                    "type": "integer",
                    "format": "int32",
                    "minimum": 0
                  }
                },
                "additionalProperties": false
              },
              "shards": {
                "description": "Specifies the desired number of shards for the component.\nThis parameter is mutually exclusive with other parameters.",
                "type": "integer",
                "format": "int32"
              }
            },
            "additionalProperties": false,
            "x-kubernetes-validations": [
              {
                "rule": "has(self.shards) ? (!has(self.scaleOut) \u0026\u0026 !has(self.scaleIn)) : true",
                "message": "shards field cannot be used together with scaleOut or scaleIn"
              }
            ]
          },
          "x-kubernetes-list-map-keys": [
            "componentName"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-validations": [
            {
              "rule": "self == oldSelf",
              "message": "forbidden to update spec.horizontalScaling"
            }
          ]
        },
        "preConditionDeadlineSeconds": {
          "description": "Specifies the maximum time in seconds that the OpsRequest will wait for its pre-conditions to be met\nbefore it aborts the operation.\nIf set to 0 (default), pre-conditions must be satisfied immediately for the OpsRequest to proceed.",
          "type": "integer",
          "format": "int32",
          "default": 0
        },
        "rebuildFrom": {
          "description": "Specifies the parameters to rebuild some instances.\nRebuilding an instance involves restoring its data from a backup or another database replica.\nThe instances being rebuilt usually serve as standby in the cluster.\nHence, rebuilding instances is often also referred to as \"standby reconstruction\".",
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "componentName",
              "inPlace",
              "instances"
            ],
            "properties": {
              "backupName": {
                "description": "Indicates the name of the Backup custom resource from which to recover the instance.\nDefaults to an empty PersistentVolume if unspecified.\n\n\nNote:\n- Only full physical backups are supported for multi-replica Components (e.g., 'xtrabackup' for MySQL).\n- Logical backups (e.g., 'mysqldump' for MySQL) are unsupported in the current version.",
                "type": "string"
              },
              "componentName": {
                "description": "Specifies the name of the Component as defined in the cluster.spec",
                "type": "string"
              },
              "inPlace": {
                "description": "When it is set to true, the instance will be rebuilt in-place.\nIf false, a new pod will be created. Once the new pod is ready to serve,\nthe instance that require rebuilding will be taken offline.",
                "type": "boolean"
              },
              "instances": {
                "description": "Specifies the instances (Pods) that need to be rebuilt, typically operating as standbys.",
                "type": "array",
                "minItems": 1,
                "items": {
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "Pod name of the instance.",
                      "type": "string"
                    },
                    "targetNodeName": {
                      "description": "The instance will rebuild on the specified node.\nIf not set, it will rebuild on a random node.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "restoreEnv": {
                "description": "Defines container environment variables for the restore process.\nmerged with the ones specified in the Backup and ActionSet resources.\n\n\nMerge priority: Restore env \u003e Backup env \u003e ActionSet env.\n\n\nPurpose: Some databases require different configurations when being restored as a standby\ncompared to being restored as a primary.\nFor example, when restoring MySQL as a replica, you need to set `skip_slave_start=\"ON\"` for 5.7\nor `skip_replica_start=\"ON\"` for 8.0.\nAllowing environment variables to be passed in makes it more convenient to control these behavioral differences\nduring the restore process.",
                "type": "array",
                "items": {
                  "description": "EnvVar represents an environment variable present in a Container.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
                      "type": "string"
                    },
                    "value": {
                      "description": "Variable references $(VAR_NAME) are expanded\nusing the previously defined environment variables in the container and\nany service environment variables. If a variable cannot be resolved,\nthe reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.\n\"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\".\nEscaped references will never be expanded, regardless of whether the variable\nexists or not.\nDefaults to \"\".",
                      "type": "string"
                    },
                    "valueFrom": {
                      "description": "Source for the environment variable's value. Cannot be used if value is not empty.",
                      "type": "object",
                      "properties": {
                        "configMapKeyRef": {
                          "description": "Selects a key of a ConfigMap.",
                          "type": "object",
                          "required": [
                            "key"
                          ],
                          "properties": {
                            "key": {
                              "description": "The key to select.",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                              "type": "string"
                            },
                            "optional": {
                              "description": "Specify whether the ConfigMap or its key must be defined",
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false,
                          "x-kubernetes-map-type": "atomic"
                        },
                        "fieldRef": {
                          "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['\u003cKEY\u003e']`, `metadata.annotations['\u003cKEY\u003e']`,\nspec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
                          "type": "object",
                          "required": [
                            "fieldPath"
                          ],
                          "properties": {
                            "apiVersion": {
                              "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                              "type": "string"
                            },
                            "fieldPath": {
                              "description": "Path of the field to select in the specified API version.",
                              "type": "string"
                            }
                          },
                          "additionalProperties": false,
                          "x-kubernetes-map-type": "atomic"
                        },
                        "resourceFieldRef": {
                          "description": "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.",
                          "type": "object",
                          "required": [
                            "resource"
                          ],
                          "properties": {
                            "containerName": {
                              "description": "Container name: required for volumes, optional for env vars",
                              "type": "string"
                            },
                            "divisor": {
                              "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                              "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                              "anyOf": [
                                {
                                  "type": "integer"
                                },
                                {
                                  "type": "string"
                                }
                              ],
                              "x-kubernetes-int-or-string": true
                            },
                            "resource": {
                              "description": "Required: resource to select",
                              "type": "string"
                            }
                          },
                          "additionalProperties": false,
                          "x-kubernetes-map-type": "atomic"
                        },
                        "secretKeyRef": {
                          "description": "Selects a key of a secret in the pod's namespace",
                          "type": "object",
                          "required": [
                            "key"
                          ],
                          "properties": {
                            "key": {
                              "description": "The key of the secret to select from.  Must be a valid secret key.",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                              "type": "string"
                            },
                            "optional": {
                              "description": "Specify whether the Secret or its key must be defined",
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false,
                          "x-kubernetes-map-type": "atomic"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "x-kubernetes-preserve-unknown-fields": true
              },
              "sourceBackupTargetName": {
                "description": "When multiple source targets exist of the backup, you must specify the source target to restore.",
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "componentName"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-validations": [
            {
              "rule": "self == oldSelf",
              "message": "forbidden to update spec.rebuildFrom"
            }
          ]
        },
        "reconfigures": {
          "description": "Lists Reconfigure objects, each specifying a Component and its configuration updates.",
          "type": "array",
          "items": {
            "description": "Reconfigure defines the parameters for updating a Component's configuration.",
            "type": "object",
            "required": [
              "componentName"
            ],
            "properties": {
              "componentName": {
                "description": "Specifies the name of the Component as defined in the cluster.spec",
                "type": "string"
              },
              "parameters": {
                "description": "Specifies a list of key-value pairs representing parameters and their corresponding values\nwithin a single configuration file.\nThis field is used to override or set the values of parameters without modifying the entire configuration file.",
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "key"
                  ],
                  "properties": {
                    "key": {
                      "description": "Represents the name of the parameter that is to be updated.",
                      "type": "string"
                    },
                    "value": {
                      "description": "Represents the parameter values that are to be updated.\nIf set to nil, the parameter defined by the Key field will be removed from the configuration file.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "componentName"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-validations": [
            {
              "rule": "self == oldSelf",
              "message": "forbidden to update spec.reconfigure"
            }
          ]
        },
        "restart": {
          "description": "Lists Components to be restarted.",
          "type": "array",
          "maxItems": 1024,
          "items": {
            "description": "ComponentOps specifies the Component to be operated on.",
            "type": "object",
            "required": [
              "componentName"
            ],
            "properties": {
              "componentName": {
                "description": "Specifies the name of the Component as defined in the cluster.spec",
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "componentName"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-validations": [
            {
              "rule": "self == oldSelf",
              "message": "forbidden to update spec.restart"
            }
          ]
        },
        "restore": {
          "description": "Specifies the parameters to restore a Cluster.\nNote that this restore operation will roll back cluster services.",
          "type": "object",
          "required": [
            "backupName"
          ],
          "properties": {
            "backupName": {
              "description": "Specifies the name of the Backup custom resource.",
              "type": "string"
            },
            "backupNamespace": {
              "description": "Specifies the namespace of the backup custom resource. If not specified, the namespace of the opsRequest will be used.",
              "type": "string"
            },
            "deferPostReadyUntilClusterRunning": {
              "description": "Controls the timing of PostReady actions during the recovery process.\n\n\nIf false (default), PostReady actions execute when the Component reaches the \"Running\" state.\nIf true, PostReady actions are delayed until the entire Cluster is \"Running,\"\nensuring the cluster's overall stability before proceeding.\n\n\nThis setting is useful for coordinating PostReady operations across the Cluster for optimal cluster conditions.",
              "type": "boolean"
            },
            "env": {
              "description": "Specifies a list of environment variables to be set in the container.",
              "type": "array",
              "items": {
                "description": "EnvVar represents an environment variable present in a Container.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Variable references $(VAR_NAME) are expanded\nusing the previously defined environment variables in the container and\nany service environment variables. If a variable cannot be resolved,\nthe reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.\n\"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\".\nEscaped references will never be expanded, regardless of whether the variable\nexists or not.\nDefaults to \"\".",
                    "type": "string"
                  },
                  "valueFrom": {
                    "description": "Source for the environment variable's value. Cannot be used if value is not empty.",
                    "type": "object",
                    "properties": {
                      "configMapKeyRef": {
                        "description": "Selects a key of a ConfigMap.",
                        "type": "object",
                        "required": [
                          "key"
                        ],
                        "properties": {
                          "key": {
                            "description": "The key to select.",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                            "type": "string"
                          },
                          "optional": {
                            "description": "Specify whether the ConfigMap or its key must be defined",
                            "type": "boolean"
                          }
                        },
                        "additionalProperties": false,
                        "x-kubernetes-map-type": "atomic"
                      },
                      "fieldRef": {
                        "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['\u003cKEY\u003e']`, `metadata.annotations['\u003cKEY\u003e']`,\nspec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
                        "type": "object",
                        "required": [
                          "fieldPath"
                        ],
                        "properties": {
                          "apiVersion": {
                            "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                            "type": "string"
                          },
                          "fieldPath": {
                            "description": "Path of the field to select in the specified API version.",
                            "type": "string"
                          }
                        },
                        "additionalProperties": false,
                        "x-kubernetes-map-type": "atomic"
                      },
                      "resourceFieldRef": {
                        "description": "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.",
                        "type": "object",
                        "required": [
                          "resource"
                        ],
                        "properties": {
                          "containerName": {
                            "description": "Container name: required for volumes, optional for env vars",
                            "type": "string"
                          },
                          "divisor": {
                            "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                            "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                            "anyOf": [
                              {
                                "type": "integer"
                              },
                              {
                                "type": "string"
                              }
                            ],
                            "x-kubernetes-int-or-string": true
                          },
                          "resource": {
                            "description": "Required: resource to select",
                            "type": "string"
                          }
                        },
                        "additionalProperties": false,
                        "x-kubernetes-map-type": "atomic"
                      },
                      "secretKeyRef": {
                        "description": "Selects a key of a secret in the pod's namespace",
                        "type": "object",
                        "required": [
                          "key"
                        ],
                        "properties": {
                          "key": {
                            "description": "The key of the secret to select from.  Must be a valid secret key.",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                            "type": "string"
                          },
                          "optional": {
                            "description": "Specify whether the Secret or its key must be defined",
                            "type": "boolean"
                          }
                        },
                        "additionalProperties": false,
                        "x-kubernetes-map-type": "atomic"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              },
              "x-kubernetes-preserve-unknown-fields": true
            },
            "parameters": {
              "description": "Specifies a list of name-value pairs representing parameters and their corresponding values.\nParameters match the schema specified in the `actionset.spec.parametersSchema`",
              "type": "array",
              "maxItems": 128,
              "items": {
                "type": "object",
                "required": [
                  "name",
                  "value"
                ],
                "properties": {
                  "name": {
                    "description": "Represents the name of the parameter.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Represents the parameter values.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              },
              "x-kubernetes-list-map-keys": [
                "name"
              ],
              "x-kubernetes-list-type": "map",
              "x-kubernetes-validations": [
                {
                  "rule": "self == oldSelf",
                  "message": "forbidden to update parameters"
                }
              ]
            },
            "restorePointInTime": {
              "description": "Specifies the point in time to which the restore should be performed.\nSupported time formats:\n\n\n- RFC3339 format, e.g. \"2023-11-25T18:52:53Z\"\n- A human-readable date-time format, e.g. \"Jul 25,2023 18:52:53 UTC+0800\"",
              "type": "string"
            },
            "volumeRestorePolicy": {
              "description": "Specifies the policy for restoring volume claims of a Component's Pods.\nIt determines whether the volume claims should be restored sequentially (one by one) or in parallel (all at once).\nSupport values:\n\n\n- \"Serial\"\n- \"Parallel\"",
              "type": "string",
              "default": "Parallel",
              "enum": [
                "Serial",
                "Parallel"
              ]
            }
          },
          "additionalProperties": false,
          "x-kubernetes-validations": [
            {
              "rule": "has(oldSelf.parameters) == has(self.parameters)",
              "message": "forbidden to update restore.parameters"
            }
          ]
        },
        "start": {
          "description": "Lists Components to be started. If empty, all components will be started.",
          "type": "array",
          "maxItems": 1024,
          "items": {
            "description": "ComponentOps specifies the Component to be operated on.",
            "type": "object",
            "required": [
              "componentName"
            ],
            "properties": {
              "componentName": {
                "description": "Specifies the name of the Component as defined in the cluster.spec",
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "componentName"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-validations": [
            {
              "rule": "self == oldSelf",
              "message": "forbidden to update spec.start"
            }
          ]
        },
        "stop": {
          "description": "Lists Components to be stopped. If empty, all components will be stopped.",
          "type": "array",
          "maxItems": 1024,
          "items": {
            "description": "ComponentOps specifies the Component to be operated on.",
            "type": "object",
            "required": [
              "componentName"
            ],
            "properties": {
              "componentName": {
                "description": "Specifies the name of the Component as defined in the cluster.spec",
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "componentName"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-validations": [
            {
              "rule": "self == oldSelf",
              "message": "forbidden to update spec.stop"
            }
          ]
        },
        "switchover": {
          "description": "Lists Switchover objects, each specifying a Component to perform the switchover operation.",
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "instanceName"
            ],
            "properties": {
              "candidateName": {
                "description": "If CandidateName is specified, the role will be transferred to this instance.\nThe name must match one of the pods in the component.\nRefer to ComponentDefinition's Swtichover lifecycle action for more details.",
                "type": "string"
              },
              "componentName": {
                "description": "Specifies the name of the Component as defined in the cluster.spec.",
                "type": "string"
              },
              "componentObjectName": {
                "description": "Specifies the name of the Component object.",
                "type": "string"
              },
              "instanceName": {
                "description": "Specifies the instance whose role will be transferred. A typical usage is to transfer the leader role\nin a consensus system.",
                "type": "string"
              }
            },
            "additionalProperties": false,
            "x-kubernetes-validations": [
              {
                "rule": "(has(self.componentName) \u0026\u0026 !has(self.componentObjectName)) || (!has(self.componentName) \u0026\u0026 has(self.componentObjectName))",
                "message": "need to specified only componentName or componentObjectName"
              }
            ]
          },
          "x-kubernetes-validations": [
            {
              "rule": "self == oldSelf",
              "message": "forbidden to update spec.switchover"
            }
          ]
        },
        "timeoutSeconds": {
          "description": "Specifies the maximum duration (in seconds) that an opsRequest is allowed to run.\nIf the opsRequest runs longer than this duration, its phase will be marked as Aborted.\nIf this value is not set or set to 0, the timeout will be ignored and the opsRequest will run indefinitely.",
          "type": "integer",
          "format": "int32"
        },
        "ttlSecondsAfterSucceed": {
          "description": "Specifies the duration in seconds that an OpsRequest will remain in the system after successfully completing\n(when `opsRequest.status.phase` is \"Succeed\") before automatic deletion.",
          "type": "integer",
          "format": "int32"
        },
        "ttlSecondsAfterUnsuccessfulCompletion": {
          "description": "Specifies the duration in seconds that an OpsRequest will remain in the system after completion\nfor any phase other than \"Succeed\" (e.g., \"Failed\", \"Cancelled\", \"Aborted\") before automatic deletion.",
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "description": "Specifies the type of this operation. Supported types include \"Start\", \"Stop\", \"Restart\", \"Switchover\",\n\"VerticalScaling\", \"HorizontalScaling\", \"VolumeExpansion\", \"Reconfiguring\", \"Upgrade\", \"Backup\", \"Restore\",\n\"Expose\", \"RebuildInstance\", \"Custom\".\n\n\nNote: This field is immutable once set.",
          "type": "string",
          "enum": [
            "Upgrade",
            "VerticalScaling",
            "VolumeExpansion",
            "HorizontalScaling",
            "Restart",
            "Reconfiguring",
            "Start",
            "Stop",
            "Expose",
            "Switchover",
            "Backup",
            "Restore",
            "RebuildInstance",
            "Custom"
          ],
          "x-kubernetes-validations": [
            {
              "rule": "self == oldSelf",
              "message": "forbidden to update spec.type"
            }
          ]
        },
        "upgrade": {
          "description": "Specifies the desired new version of the Cluster.\n\n\nNote: This field is immutable once set.",
          "type": "object",
          "properties": {
            "components": {
              "description": "Lists components to be upgrade based on desired ComponentDefinition and ServiceVersion.\nFrom the perspective of cluster API, the reasonable combinations should be:\n1. (comp-def, service-ver) - upgrade to the specified service version and component definition, the user takes the responsibility to ensure that they are compatible.\n2. (\"\", service-ver) - upgrade to the specified service version, let the operator choose the latest compatible component definition.\n3. (comp-def, \"\") - upgrade to the specified component definition, let the operator choose the latest compatible service version.\n4. (\"\", \"\") - upgrade to the latest service version and component definition, the operator will ensure the compatibility between the selected versions.",
              "type": "array",
              "maxItems": 1024,
              "items": {
                "type": "object",
                "required": [
                  "componentName"
                ],
                "properties": {
                  "componentDefinitionName": {
                    "description": "Specifies the name of the ComponentDefinition, only exact matches are supported.",
                    "type": "string",
                    "maxLength": 64
                  },
                  "componentName": {
                    "description": "Specifies the name of the Component as defined in the cluster.spec",
                    "type": "string"
                  },
                  "serviceVersion": {
                    "description": "Specifies the version of the Service expected to be provisioned by this Component.\nReferring to the ServiceVersion defined by the ComponentDefinition and ComponentVersion.\nAnd ServiceVersion in ClusterComponentSpec is optional, when no version is specified,\nuse the latest available version in ComponentVersion.",
                    "type": "string",
                    "maxLength": 32
                  }
                },
                "additionalProperties": false,
                "x-kubernetes-validations": [
                  {
                    "rule": "has(self.componentDefinitionName) || has(self.serviceVersion)",
                    "message": "at least one componentDefinitionName or serviceVersion"
                  }
                ]
              },
              "x-kubernetes-list-map-keys": [
                "componentName"
              ],
              "x-kubernetes-list-type": "map"
            }
          },
          "additionalProperties": false,
          "x-kubernetes-validations": [
            {
              "rule": "self == oldSelf",
              "message": "forbidden to update spec.upgrade"
            }
          ]
        },
        "verticalScaling": {
          "description": "Lists VerticalScaling objects, each specifying a component and its desired compute resources for vertical scaling.",
          "type": "array",
          "maxItems": 1024,
          "items": {
            "description": "VerticalScaling refers to the process of adjusting compute resources (e.g., CPU, memory) allocated to a Component.\nIt defines the parameters required for the operation.",
            "type": "object",
            "required": [
              "componentName"
            ],
            "properties": {
              "claims": {
                "description": "Claims lists the names of resources, defined in spec.resourceClaims,\nthat are used by this container.\n\n\nThis is an alpha field and requires enabling the\nDynamicResourceAllocation feature gate.\n\n\nThis field is immutable. It can only be set for containers.",
                "type": "array",
                "items": {
                  "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name must match the name of one entry in pod.spec.resourceClaims of\nthe Pod where this field is used. It makes that resource available\ninside a container.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "x-kubernetes-list-map-keys": [
                  "name"
                ],
                "x-kubernetes-list-type": "map"
              },
              "componentName": {
                "description": "Specifies the name of the Component as defined in the cluster.spec",
                "type": "string"
              },
              "instances": {
                "description": "Specifies the desired compute resources of the instance template that need to vertical scale.",
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "claims": {
                      "description": "Claims lists the names of resources, defined in spec.resourceClaims,\nthat are used by this container.\n\n\nThis is an alpha field and requires enabling the\nDynamicResourceAllocation feature gate.\n\n\nThis field is immutable. It can only be set for containers.",
                      "type": "array",
                      "items": {
                        "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name must match the name of one entry in pod.spec.resourceClaims of\nthe Pod where this field is used. It makes that resource available\ninside a container.",
                            "type": "string"
                          }
                        },
                        "additionalProperties": false
                      },
                      "x-kubernetes-list-map-keys": [
                        "name"
                      ],
                      "x-kubernetes-list-type": "map"
                    },
                    "limits": {
                      "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                      "type": "object",
                      "additionalProperties": {
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "string"
                          }
                        ],
                        "x-kubernetes-int-or-string": true
                      }
                    },
                    "name": {
                      "description": "Refer to the instance template name of the component or sharding.",
                      "type": "string"
                    },
                    "requests": {
                      "description": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                      "type": "object",
                      "additionalProperties": {
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "string"
                          }
                        ],
                        "x-kubernetes-int-or-string": true
                      }
                    }
                  },
                  "additionalProperties": false,
                  "x-kubernetes-preserve-unknown-fields": true
                },
                "x-kubernetes-list-map-keys": [
                  "name"
                ],
                "x-kubernetes-list-type": "map"
              },
              "limits": {
                "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                "type": "object",
                "additionalProperties": {
                  "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                  "anyOf": [
                    {
                      "type": "integer"
                    },
                    {
                      "type": "string"
                    }
                  ],
                  "x-kubernetes-int-or-string": true
                }
              },
              "requests": {
                "description": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                "type": "object",
                "additionalProperties": {
                  "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                  "anyOf": [
                    {
                      "type": "integer"
                    },
                    {
                      "type": "string"
                    }
                  ],
                  "x-kubernetes-int-or-string": true
                }
              }
            },
            "additionalProperties": false,
            "x-kubernetes-preserve-unknown-fields": true
          },
          "x-kubernetes-list-map-keys": [
            "componentName"
          ],
          "x-kubernetes-list-type": "map"
        },
        "volumeExpansion": {
          "description": "Lists VolumeExpansion objects, each specifying a component and its corresponding volumeClaimTemplates\nthat requires storage expansion.",
          "type": "array",
          "items": {
            "description": "VolumeExpansion encapsulates the parameters required for a volume expansion operation.",
            "type": "object",
            "required": [
              "componentName",
              "volumeClaimTemplates"
            ],
            "properties": {
              "componentName": {
                "description": "Specifies the name of the Component as defined in the cluster.spec",
                "type": "string"
              },
              "volumeClaimTemplates": {
                "description": "Specifies a list of OpsRequestVolumeClaimTemplate objects, defining the volumeClaimTemplates\nthat are used to expand the storage and the desired storage size for each one.",
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "name",
                    "storage"
                  ],
                  "properties": {
                    "name": {
                      "description": "Specify the name of the volumeClaimTemplate in the Component.\nThe specified name must match one of the volumeClaimTemplates defined\nin the `clusterComponentSpec.volumeClaimTemplates` field.",
                      "type": "string"
                    },
                    "storage": {
                      "description": "Specifies the desired storage size for the volume.",
                      "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                      "anyOf": [
                        {
                          "type": "integer"
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "x-kubernetes-int-or-string": true
                    }
                  },
                  "additionalProperties": false
                },
                "x-kubernetes-list-map-keys": [
                  "name"
                ],
                "x-kubernetes-list-type": "map"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "componentName"
          ],
          "x-kubernetes-list-type": "map"
        }
      },
      "additionalProperties": false,
      "x-kubernetes-validations": [
        {
          "rule": "has(self.cancel) \u0026\u0026 self.cancel ? (self.type in ['VerticalScaling', 'HorizontalScaling']) : true",
          "message": "forbidden to cancel the opsRequest which type not in ['VerticalScaling','HorizontalScaling']"
        }
      ]
    },
    "status": {
      "description": "OpsRequestStatus represents the observed state of an OpsRequest.",
      "type": "object",
      "required": [
        "progress"
      ],
      "properties": {
        "cancelTimestamp": {
          "description": "Records the time when the OpsRequest was cancelled.",
          "type": "string",
          "format": "date-time"
        },
        "clusterGeneration": {
          "description": "Records the cluster generation after the OpsRequest action has been handled.",
          "type": "integer",
          "format": "int64"
        },
        "completionTimestamp": {
          "description": "Records the time when the OpsRequest was completed.",
          "type": "string",
          "format": "date-time"
        },
        "components": {
          "description": "Records the status information of Components changed due to the OpsRequest.",
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "properties": {
              "lastFailedTime": {
                "description": "Records the timestamp when the Component last transitioned to a \"Failed\" phase.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "Provides a human-readable message indicating details about this operation.",
                "type": "string",
                "maxLength": 32768
              },
              "phase": {
                "description": "Records the current phase of the Component, mirroring `cluster.status.components[componentName].phase`.",
                "type": "string",
                "enum": [
                  "Creating",
                  "Deleting",
                  "Updating",
                  "Stopping",
                  "Starting",
                  "Running",
                  "Stopped",
                  "Failed"
                ]
              },
              "preCheck": {
                "description": "Records the result of the preConditions check of the opsRequest, which determines subsequent steps.",
                "type": "object",
                "required": [
                  "pass"
                ],
                "properties": {
                  "message": {
                    "description": "Provides explanations related to the preCheck result in a human-readable format.",
                    "type": "string"
                  },
                  "pass": {
                    "description": "Indicates whether the preCheck operation passed or failed.",
                    "type": "boolean"
                  }
                }
              },
              "progressDetails": {
                "description": "Describes the progress details of objects or actions associated with the Component.",
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "status"
                  ],
                  "properties": {
                    "actionName": {
                      "description": "Indicates the name of an OpsAction, as defined in `opsDefinition.spec.actions[*].name`.\nEither `objectKey` or `actionName` must be provided.",
                      "type": "string"
                    },
                    "actionTasks": {
                      "description": "Lists the tasks, such as Jobs or Pods, that carry out the action.",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "namespace",
                          "objectKey",
                          "status"
                        ],
                        "properties": {
                          "namespace": {
                            "description": "Represents the namespace where the task is deployed.",
                            "type": "string"
                          },
                          "objectKey": {
                            "description": "Represents the name of the task.",
                            "type": "string"
                          },
                          "retries": {
                            "description": "The count of retry attempts made for this task.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "status": {
                            "description": "Indicates the current status of the task, including \"Processing\", \"Failed\", \"Succeed\".",
                            "type": "string",
                            "enum": [
                              "Processing",
                              "Failed",
                              "Succeed"
                            ]
                          },
                          "targetPodName": {
                            "description": "The name of the Pod that the task is associated with or operates on.",
                            "type": "string"
                          }
                        }
                      }
                    },
                    "endTime": {
                      "description": "Records the completion time of object processing.",
                      "type": "string",
                      "format": "date-time"
                    },
                    "group": {
                      "description": "Specifies the group to which the current object belongs to.",
                      "type": "string"
                    },
                    "message": {
                      "description": "Provides a human-readable explanation of the object's condition.",
                      "type": "string"
                    },
                    "objectKey": {
                      "description": "`objectKey` uniquely identifies the object, which can be any K8s object, like a Pod, Job, Component, or PVC.\nEither `objectKey` or `actionName` must be provided.",
                      "type": "string"
                    },
                    "startTime": {
                      "description": "Records the start time of object processing.",
                      "type": "string",
                      "format": "date-time"
                    },
                    "status": {
                      "description": "Represents the current processing state of the object, including \"Processing\", \"Pending\", \"Failed\", \"Succeed\"",
                      "type": "string",
                      "enum": [
                        "Processing",
                        "Pending",
                        "Failed",
                        "Succeed"
                      ]
                    }
                  },
                  "x-kubernetes-validations": [
                    {
                      "rule": "has(self.objectKey) || has(self.actionName)",
                      "message": "at least one objectKey or actionName."
                    }
                  ]
                }
              },
              "reason": {
                "description": "Provides an explanation for the Component being in its current state.",
                "type": "string",
                "maxLength": 1024
              }
            }
          }
        },
        "conditions": {
          "description": "Describes the detailed status of the OpsRequest.\nPossible condition types include \"Cancelled\", \"WaitForProgressing\", \"Validated\", \"Succeed\", \"Failed\", \"Restarting\",\n\"VerticalScaling\", \"HorizontalScaling\", \"VolumeExpanding\", \"Reconfigure\", \"Switchover\", \"Stopping\", \"Starting\",\n\"VersionUpgrading\", \"Exposing\", \"Backup\", \"InstancesRebuilding\", \"CustomOperation\".",
          "type": "array",
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource.\n---\nThis struct is intended for direct use as an array at the field path .status.conditions.  For example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the observations of a foo's current state.\n\t    // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    // +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t    // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t    // other fields\n\t}",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                "type": "string",
                "maxLength": 32768
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64",
                "minimum": 0
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                "type": "string",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "type": "string",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ]
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase.\n---\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions can be\nuseful (see .node.status.conditions), the ability to deconflict is important.\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                "type": "string",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "extras": {
          "description": "A collection of additional key-value pairs that provide supplementary information for the OpsRequest.",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "lastConfiguration": {
          "description": "Records the configuration prior to any changes.",
          "type": "object",
          "properties": {
            "components": {
              "description": "Records the configuration of each Component prior to any changes.",
              "type": "object",
              "additionalProperties": {
                "description": "LastComponentConfiguration can be used to track and compare the desired state of the Component over time.",
                "type": "object",
                "properties": {
                  "claims": {
                    "description": "Claims lists the names of resources, defined in spec.resourceClaims,\nthat are used by this container.\n\n\nThis is an alpha field and requires enabling the\nDynamicResourceAllocation feature gate.\n\n\nThis field is immutable. It can only be set for containers.",
                    "type": "array",
                    "items": {
                      "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "name": {
                          "description": "Name must match the name of one entry in pod.spec.resourceClaims of\nthe Pod where this field is used. It makes that resource available\ninside a container.",
                          "type": "string"
                        }
                      }
                    },
                    "x-kubernetes-list-map-keys": [
                      "name"
                    ],
                    "x-kubernetes-list-type": "map"
                  },
                  "componentDefinitionName": {
                    "description": "Records the name of the ComponentDefinition prior to any changes.",
                    "type": "string"
                  },
                  "instances": {
                    "description": "Records the InstanceTemplate list of the Component prior to any changes.",
                    "type": "array",
                    "items": {
                      "description": "InstanceTemplate allows customization of individual replica configurations in a Component.",
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "annotations": {
                          "description": "Specifies a map of key-value pairs to be merged into the Pod's existing annotations.\nExisting keys will have their values overwritten, while new keys will be added to the annotations.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "env": {
                          "description": "Defines Env to override.\nAdd new or override existing envs.",
                          "type": "array",
                          "items": {
                            "description": "EnvVar represents an environment variable present in a Container.",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
                                "type": "string"
                              },
                              "value": {
                                "description": "Variable references $(VAR_NAME) are expanded\nusing the previously defined environment variables in the container and\nany service environment variables. If a variable cannot be resolved,\nthe reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.\n\"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\".\nEscaped references will never be expanded, regardless of whether the variable\nexists or not.\nDefaults to \"\".",
                                "type": "string"
                              },
                              "valueFrom": {
                                "description": "Source for the environment variable's value. Cannot be used if value is not empty.",
                                "type": "object",
                                "properties": {
                                  "configMapKeyRef": {
                                    "description": "Selects a key of a ConfigMap.",
                                    "type": "object",
                                    "required": [
                                      "key"
                                    ],
                                    "properties": {
                                      "key": {
                                        "description": "The key to select.",
                                        "type": "string"
                                      },
                                      "name": {
                                        "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                                        "type": "string"
                                      },
                                      "optional": {
                                        "description": "Specify whether the ConfigMap or its key must be defined",
                                        "type": "boolean"
                                      }
                                    },
                                    "x-kubernetes-map-type": "atomic"
                                  },
                                  "fieldRef": {
                                    "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['\u003cKEY\u003e']`, `metadata.annotations['\u003cKEY\u003e']`,\nspec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
                                    "type": "object",
                                    "required": [
                                      "fieldPath"
                                    ],
                                    "properties": {
                                      "apiVersion": {
                                        "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                                        "type": "string"
                                      },
                                      "fieldPath": {
                                        "description": "Path of the field to select in the specified API version.",
                                        "type": "string"
                                      }
                                    },
                                    "x-kubernetes-map-type": "atomic"
                                  },
                                  "resourceFieldRef": {
                                    "description": "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.",
                                    "type": "object",
                                    "required": [
                                      "resource"
                                    ],
                                    "properties": {
                                      "containerName": {
                                        "description": "Container name: required for volumes, optional for env vars",
                                        "type": "string"
                                      },
                                      "divisor": {
                                        "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                        "anyOf": [
                                          {
                                            "type": "integer"
                                          },
                                          {
                                            "type": "string"
                                          }
                                        ],
                                        "x-kubernetes-int-or-string": true
                                      },
                                      "resource": {
                                        "description": "Required: resource to select",
                                        "type": "string"
                                      }
                                    },
                                    "x-kubernetes-map-type": "atomic"
                                  },
                                  "secretKeyRef": {
                                    "description": "Selects a key of a secret in the pod's namespace",
                                    "type": "object",
                                    "required": [
                                      "key"
                                    ],
                                    "properties": {
                                      "key": {
                                        "description": "The key of the secret to select from.  Must be a valid secret key.",
                                        "type": "string"
                                      },
                                      "name": {
                                        "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                                        "type": "string"
                                      },
                                      "optional": {
                                        "description": "Specify whether the Secret or its key must be defined",
                                        "type": "boolean"
                                      }
                                    },
                                    "x-kubernetes-map-type": "atomic"
                                  }
                                }
                              }
                            }
                          }
                        },
                        "labels": {
                          "description": "Specifies a map of key-value pairs that will be merged into the Pod's existing labels.\nValues for existing keys will be overwritten, and new keys will be added.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "name": {
                          "description": "Name specifies the unique name of the instance Pod created using this InstanceTemplate.\nThis name is constructed by concatenating the Component's name, the template's name, and the instance's ordinal\nusing the pattern: $(cluster.name)-$(component.name)-$(template.name)-$(ordinal). Ordinals start from 0.\nThe specified name overrides any default naming conventions or patterns.",
                          "type": "string",
                          "maxLength": 54,
                          "pattern": "^[a-z0-9]([a-z0-9\\.\\-]*[a-z0-9])?$"
                        },
                        "ordinals": {
                          "description": "Specifies the desired Ordinals of this InstanceTemplate.\nThe Ordinals used to specify the ordinal of the instance (pod) names to be generated under this InstanceTemplate.\n\n\nFor example, if Ordinals is {ranges: [{start: 0, end: 1}], discrete: [7]},\nthen the instance names generated under this InstanceTemplate would be\n$(cluster.name)-$(component.name)-$(template.name)-0、$(cluster.name)-$(component.name)-$(template.name)-1 and\n$(cluster.name)-$(component.name)-$(template.name)-7",
                          "type": "object",
                          "properties": {
                            "discrete": {
                              "type": "array",
                              "items": {
                                "type": "integer",
                                "format": "int32"
                              }
                            },
                            "ranges": {
                              "type": "array",
                              "items": {
                                "description": "Range represents a range with a start and an end value.\nIt is used to define a continuous segment.",
                                "type": "object",
                                "required": [
                                  "end",
                                  "start"
                                ],
                                "properties": {
                                  "end": {
                                    "type": "integer",
                                    "format": "int32"
                                  },
                                  "start": {
                                    "type": "integer",
                                    "format": "int32"
                                  }
                                }
                              }
                            }
                          }
                        },
                        "replicas": {
                          "description": "Specifies the number of instances (Pods) to create from this InstanceTemplate.\nThis field allows setting how many replicated instances of the Component,\nwith the specific overrides in the InstanceTemplate, are created.\nThe default value is 1. A value of 0 disables instance creation.",
                          "type": "integer",
                          "format": "int32",
                          "default": 1,
                          "minimum": 0
                        },
                        "resources": {
                          "description": "Specifies an override for the resource requirements of the first container in the Pod.\nThis field allows for customizing resource allocation (CPU, memory, etc.) for the container.",
                          "type": "object",
                          "properties": {
                            "claims": {
                              "description": "Claims lists the names of resources, defined in spec.resourceClaims,\nthat are used by this container.\n\n\nThis is an alpha field and requires enabling the\nDynamicResourceAllocation feature gate.\n\n\nThis field is immutable. It can only be set for containers.",
                              "type": "array",
                              "items": {
                                "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                                "type": "object",
                                "required": [
                                  "name"
                                ],
                                "properties": {
                                  "name": {
                                    "description": "Name must match the name of one entry in pod.spec.resourceClaims of\nthe Pod where this field is used. It makes that resource available\ninside a container.",
                                    "type": "string"
                                  }
                                }
                              },
                              "x-kubernetes-list-map-keys": [
                                "name"
                              ],
                              "x-kubernetes-list-type": "map"
                            },
                            "limits": {
                              "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                              "type": "object",
                              "additionalProperties": {
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "anyOf": [
                                  {
                                    "type": "integer"
                                  },
                                  {
                                    "type": "string"
                                  }
                                ],
                                "x-kubernetes-int-or-string": true
                              }
                            },
                            "requests": {
                              "description": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                              "type": "object",
                              "additionalProperties": {
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "anyOf": [
                                  {
                                    "type": "integer"
                                  },
                                  {
                                    "type": "string"
                                  }
                                ],
                                "x-kubernetes-int-or-string": true
                              }
                            }
                          }
                        },
                        "schedulingPolicy": {
                          "description": "Specifies the scheduling policy for the instance.\nIf defined, it will overwrite the scheduling policy defined in ClusterSpec and/or ClusterComponentSpec.",
                          "type": "object",
                          "properties": {
                            "affinity": {
                              "description": "Specifies a group of affinity scheduling rules of the Cluster, including NodeAffinity, PodAffinity, and PodAntiAffinity.",
                              "type": "object",
                              "properties": {
                                "nodeAffinity": {
                                  "description": "Describes node affinity scheduling rules for the pod.",
                                  "type": "object",
                                  "properties": {
                                    "preferredDuringSchedulingIgnoredDuringExecution": {
                                      "description": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node matches the corresponding matchExpressions; the\nnode(s) with the highest sum are the most preferred.",
                                      "type": "array",
                                      "items": {
                                        "description": "An empty preferred scheduling term matches all objects with implicit weight 0\n(i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
                                        "type": "object",
                                        "required": [
                                          "preference",
                                          "weight"
                                        ],
                                        "properties": {
                                          "preference": {
                                            "description": "A node selector term, associated with the corresponding weight.",
                                            "type": "object",
                                            "properties": {
                                              "matchExpressions": {
                                                "description": "A list of node selector requirements by node's labels.",
                                                "type": "array",
                                                "items": {
                                                  "description": "A node selector requirement is a selector that contains values, a key, and an operator\nthat relates the key and values.",
                                                  "type": "object",
                                                  "required": [
                                                    "key",
                                                    "operator"
                                                  ],
                                                  "properties": {
                                                    "key": {
                                                      "description": "The label key that the selector applies to.",
                                                      "type": "string"
                                                    },
                                                    "operator": {
                                                      "description": "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                      "type": "string"
                                                    },
                                                    "values": {
                                                      "description": "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.",
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              "matchFields": {
                                                "description": "A list of node selector requirements by node's fields.",
                                                "type": "array",
                                                "items": {
                                                  "description": "A node selector requirement is a selector that contains values, a key, and an operator\nthat relates the key and values.",
                                                  "type": "object",
                                                  "required": [
                                                    "key",
                                                    "operator"
                                                  ],
                                                  "properties": {
                                                    "key": {
                                                      "description": "The label key that the selector applies to.",
                                                      "type": "string"
                                                    },
                                                    "operator": {
                                                      "description": "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                      "type": "string"
                                                    },
                                                    "values": {
                                                      "description": "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.",
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "x-kubernetes-map-type": "atomic"
                                          },
                                          "weight": {
                                            "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
                                            "type": "integer",
                                            "format": "int32"
                                          }
                                        }
                                      }
                                    },
                                    "requiredDuringSchedulingIgnoredDuringExecution": {
                                      "description": "If the affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to an update), the system\nmay or may not try to eventually evict the pod from its node.",
                                      "type": "object",
                                      "required": [
                                        "nodeSelectorTerms"
                                      ],
                                      "properties": {
                                        "nodeSelectorTerms": {
                                          "description": "Required. A list of node selector terms. The terms are ORed.",
                                          "type": "array",
                                          "items": {
                                            "description": "A null or empty node selector term matches no objects. The requirements of\nthem are ANDed.\nThe TopologySelectorTerm type implements a subset of the NodeSelectorTerm.",
                                            "type": "object",
                                            "properties": {
                                              "matchExpressions": {
                                                "description": "A list of node selector requirements by node's labels.",
                                                "type": "array",
                                                "items": {
                                                  "description": "A node selector requirement is a selector that contains values, a key, and an operator\nthat relates the key and values.",
                                                  "type": "object",
                                                  "required": [
                                                    "key",
                                                    "operator"
                                                  ],
                                                  "properties": {
                                                    "key": {
                                                      "description": "The label key that the selector applies to.",
                                                      "type": "string"
                                                    },
                                                    "operator": {
                                                      "description": "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                      "type": "string"
                                                    },
                                                    "values": {
                                                      "description": "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.",
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              "matchFields": {
                                                "description": "A list of node selector requirements by node's fields.",
                                                "type": "array",
                                                "items": {
                                                  "description": "A node selector requirement is a selector that contains values, a key, and an operator\nthat relates the key and values.",
                                                  "type": "object",
                                                  "required": [
                                                    "key",
                                                    "operator"
                                                  ],
                                                  "properties": {
                                                    "key": {
                                                      "description": "The label key that the selector applies to.",
                                                      "type": "string"
                                                    },
                                                    "operator": {
                                                      "description": "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                      "type": "string"
                                                    },
                                                    "values": {
                                                      "description": "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.",
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "x-kubernetes-map-type": "atomic"
                                          }
                                        }
                                      },
                                      "x-kubernetes-map-type": "atomic"
                                    }
                                  }
                                },
                                "podAffinity": {
                                  "description": "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).",
                                  "type": "object",
                                  "properties": {
                                    "preferredDuringSchedulingIgnoredDuringExecution": {
                                      "description": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\nnode(s) with the highest sum are the most preferred.",
                                      "type": "array",
                                      "items": {
                                        "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
                                        "type": "object",
                                        "required": [
                                          "podAffinityTerm",
                                          "weight"
                                        ],
                                        "properties": {
                                          "podAffinityTerm": {
                                            "description": "Required. A pod affinity term, associated with the corresponding weight.",
                                            "type": "object",
                                            "required": [
                                              "topologyKey"
                                            ],
                                            "properties": {
                                              "labelSelector": {
                                                "description": "A label query over a set of resources, in this case pods.\nIf it's null, this PodAffinityTerm matches with no Pods.",
                                                "type": "object",
                                                "properties": {
                                                  "matchExpressions": {
                                                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                    "type": "array",
                                                    "items": {
                                                      "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                                      "type": "object",
                                                      "required": [
                                                        "key",
                                                        "operator"
                                                      ],
                                                      "properties": {
                                                        "key": {
                                                          "description": "key is the label key that the selector applies to.",
                                                          "type": "string"
                                                        },
                                                        "operator": {
                                                          "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                                          "type": "string"
                                                        },
                                                        "values": {
                                                          "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                                          "type": "array",
                                                          "items": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "matchLabels": {
                                                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                    "type": "object",
                                                    "additionalProperties": {
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "x-kubernetes-map-type": "atomic"
                                              },
                                              "matchLabelKeys": {
                                                "description": "MatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both MatchLabelKeys and LabelSelector.\nAlso, MatchLabelKeys cannot be set when LabelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.",
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                },
                                                "x-kubernetes-list-type": "atomic"
                                              },
                                              "mismatchLabelKeys": {
                                                "description": "MismatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both MismatchLabelKeys and LabelSelector.\nAlso, MismatchLabelKeys cannot be set when LabelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.",
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                },
                                                "x-kubernetes-list-type": "atomic"
                                              },
                                              "namespaceSelector": {
                                                "description": "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.",
                                                "type": "object",
                                                "properties": {
                                                  "matchExpressions": {
                                                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                    "type": "array",
                                                    "items": {
                                                      "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                                      "type": "object",
                                                      "required": [
                                                        "key",
                                                        "operator"
                                                      ],
                                                      "properties": {
                                                        "key": {
                                                          "description": "key is the label key that the selector applies to.",
                                                          "type": "string"
                                                        },
                                                        "operator": {
                                                          "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                                          "type": "string"
                                                        },
                                                        "values": {
                                                          "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                                          "type": "array",
                                                          "items": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "matchLabels": {
                                                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                    "type": "object",
                                                    "additionalProperties": {
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "x-kubernetes-map-type": "atomic"
                                              },
                                              "namespaces": {
                                                "description": "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                }
                                              },
                                              "topologyKey": {
                                                "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.",
                                                "type": "string"
                                              }
                                            }
                                          },
                                          "weight": {
                                            "description": "weight associated with matching the corresponding podAffinityTerm,\nin the range 1-100.",
                                            "type": "integer",
                                            "format": "int32"
                                          }
                                        }
                                      }
                                    },
                                    "requiredDuringSchedulingIgnoredDuringExecution": {
                                      "description": "If the affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to a pod label update), the\nsystem may or may not try to eventually evict the pod from its node.\nWhen there are multiple elements, the lists of nodes corresponding to each\npodAffinityTerm are intersected, i.e. all terms must be satisfied.",
                                      "type": "array",
                                      "items": {
                                        "description": "Defines a set of pods (namely those matching the labelSelector\nrelative to the given namespace(s)) that this pod should be\nco-located (affinity) or not co-located (anti-affinity) with,\nwhere co-located is defined as running on a node whose value of\nthe label with key \u003ctopologyKey\u003e matches that of any node on which\na pod of the set of pods is running",
                                        "type": "object",
                                        "required": [
                                          "topologyKey"
                                        ],
                                        "properties": {
                                          "labelSelector": {
                                            "description": "A label query over a set of resources, in this case pods.\nIf it's null, this PodAffinityTerm matches with no Pods.",
                                            "type": "object",
                                            "properties": {
                                              "matchExpressions": {
                                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                "type": "array",
                                                "items": {
                                                  "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                                  "type": "object",
                                                  "required": [
                                                    "key",
                                                    "operator"
                                                  ],
                                                  "properties": {
                                                    "key": {
                                                      "description": "key is the label key that the selector applies to.",
                                                      "type": "string"
                                                    },
                                                    "operator": {
                                                      "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                                      "type": "string"
                                                    },
                                                    "values": {
                                                      "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              "matchLabels": {
                                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                "type": "object",
                                                "additionalProperties": {
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "x-kubernetes-map-type": "atomic"
                                          },
                                          "matchLabelKeys": {
                                            "description": "MatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both MatchLabelKeys and LabelSelector.\nAlso, MatchLabelKeys cannot be set when LabelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.",
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            },
                                            "x-kubernetes-list-type": "atomic"
                                          },
                                          "mismatchLabelKeys": {
                                            "description": "MismatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both MismatchLabelKeys and LabelSelector.\nAlso, MismatchLabelKeys cannot be set when LabelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.",
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            },
                                            "x-kubernetes-list-type": "atomic"
                                          },
                                          "namespaceSelector": {
                                            "description": "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.",
                                            "type": "object",
                                            "properties": {
                                              "matchExpressions": {
                                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                "type": "array",
                                                "items": {
                                                  "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                                  "type": "object",
                                                  "required": [
                                                    "key",
                                                    "operator"
                                                  ],
                                                  "properties": {
                                                    "key": {
                                                      "description": "key is the label key that the selector applies to.",
                                                      "type": "string"
                                                    },
                                                    "operator": {
                                                      "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                                      "type": "string"
                                                    },
                                                    "values": {
                                                      "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              "matchLabels": {
                                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                "type": "object",
                                                "additionalProperties": {
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "x-kubernetes-map-type": "atomic"
                                          },
                                          "namespaces": {
                                            "description": "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            }
                                          },
                                          "topologyKey": {
                                            "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.",
                                            "type": "string"
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                "podAntiAffinity": {
                                  "description": "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).",
                                  "type": "object",
                                  "properties": {
                                    "preferredDuringSchedulingIgnoredDuringExecution": {
                                      "description": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe anti-affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling anti-affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\nnode(s) with the highest sum are the most preferred.",
                                      "type": "array",
                                      "items": {
                                        "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
                                        "type": "object",
                                        "required": [
                                          "podAffinityTerm",
                                          "weight"
                                        ],
                                        "properties": {
                                          "podAffinityTerm": {
                                            "description": "Required. A pod affinity term, associated with the corresponding weight.",
                                            "type": "object",
                                            "required": [
                                              "topologyKey"
                                            ],
                                            "properties": {
                                              "labelSelector": {
                                                "description": "A label query over a set of resources, in this case pods.\nIf it's null, this PodAffinityTerm matches with no Pods.",
                                                "type": "object",
                                                "properties": {
                                                  "matchExpressions": {
                                                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                    "type": "array",
                                                    "items": {
                                                      "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                                      "type": "object",
                                                      "required": [
                                                        "key",
                                                        "operator"
                                                      ],
                                                      "properties": {
                                                        "key": {
                                                          "description": "key is the label key that the selector applies to.",
                                                          "type": "string"
                                                        },
                                                        "operator": {
                                                          "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                                          "type": "string"
                                                        },
                                                        "values": {
                                                          "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                                          "type": "array",
                                                          "items": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "matchLabels": {
                                                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                    "type": "object",
                                                    "additionalProperties": {
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "x-kubernetes-map-type": "atomic"
                                              },
                                              "matchLabelKeys": {
                                                "description": "MatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both MatchLabelKeys and LabelSelector.\nAlso, MatchLabelKeys cannot be set when LabelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.",
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                },
                                                "x-kubernetes-list-type": "atomic"
                                              },
                                              "mismatchLabelKeys": {
                                                "description": "MismatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both MismatchLabelKeys and LabelSelector.\nAlso, MismatchLabelKeys cannot be set when LabelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.",
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                },
                                                "x-kubernetes-list-type": "atomic"
                                              },
                                              "namespaceSelector": {
                                                "description": "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.",
                                                "type": "object",
                                                "properties": {
                                                  "matchExpressions": {
                                                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                    "type": "array",
                                                    "items": {
                                                      "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                                      "type": "object",
                                                      "required": [
                                                        "key",
                                                        "operator"
                                                      ],
                                                      "properties": {
                                                        "key": {
                                                          "description": "key is the label key that the selector applies to.",
                                                          "type": "string"
                                                        },
                                                        "operator": {
                                                          "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                                          "type": "string"
                                                        },
                                                        "values": {
                                                          "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                                          "type": "array",
                                                          "items": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "matchLabels": {
                                                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                    "type": "object",
                                                    "additionalProperties": {
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "x-kubernetes-map-type": "atomic"
                                              },
                                              "namespaces": {
                                                "description": "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                }
                                              },
                                              "topologyKey": {
                                                "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.",
                                                "type": "string"
                                              }
                                            }
                                          },
                                          "weight": {
                                            "description": "weight associated with matching the corresponding podAffinityTerm,\nin the range 1-100.",
                                            "type": "integer",
                                            "format": "int32"
                                          }
                                        }
                                      }
                                    },
                                    "requiredDuringSchedulingIgnoredDuringExecution": {
                                      "description": "If the anti-affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the anti-affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to a pod label update), the\nsystem may or may not try to eventually evict the pod from its node.\nWhen there are multiple elements, the lists of nodes corresponding to each\npodAffinityTerm are intersected, i.e. all terms must be satisfied.",
                                      "type": "array",
                                      "items": {
                                        "description": "Defines a set of pods (namely those matching the labelSelector\nrelative to the given namespace(s)) that this pod should be\nco-located (affinity) or not co-located (anti-affinity) with,\nwhere co-located is defined as running on a node whose value of\nthe label with key \u003ctopologyKey\u003e matches that of any node on which\na pod of the set of pods is running",
                                        "type": "object",
                                        "required": [
                                          "topologyKey"
                                        ],
                                        "properties": {
                                          "labelSelector": {
                                            "description": "A label query over a set of resources, in this case pods.\nIf it's null, this PodAffinityTerm matches with no Pods.",
                                            "type": "object",
                                            "properties": {
                                              "matchExpressions": {
                                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                "type": "array",
                                                "items": {
                                                  "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                                  "type": "object",
                                                  "required": [
                                                    "key",
                                                    "operator"
                                                  ],
                                                  "properties": {
                                                    "key": {
                                                      "description": "key is the label key that the selector applies to.",
                                                      "type": "string"
                                                    },
                                                    "operator": {
                                                      "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                                      "type": "string"
                                                    },
                                                    "values": {
                                                      "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              "matchLabels": {
                                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                "type": "object",
                                                "additionalProperties": {
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "x-kubernetes-map-type": "atomic"
                                          },
                                          "matchLabelKeys": {
                                            "description": "MatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both MatchLabelKeys and LabelSelector.\nAlso, MatchLabelKeys cannot be set when LabelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.",
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            },
                                            "x-kubernetes-list-type": "atomic"
                                          },
                                          "mismatchLabelKeys": {
                                            "description": "MismatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both MismatchLabelKeys and LabelSelector.\nAlso, MismatchLabelKeys cannot be set when LabelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.",
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            },
                                            "x-kubernetes-list-type": "atomic"
                                          },
                                          "namespaceSelector": {
                                            "description": "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.",
                                            "type": "object",
                                            "properties": {
                                              "matchExpressions": {
                                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                "type": "array",
                                                "items": {
                                                  "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                                  "type": "object",
                                                  "required": [
                                                    "key",
                                                    "operator"
                                                  ],
                                                  "properties": {
                                                    "key": {
                                                      "description": "key is the label key that the selector applies to.",
                                                      "type": "string"
                                                    },
                                                    "operator": {
                                                      "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                                      "type": "string"
                                                    },
                                                    "values": {
                                                      "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              "matchLabels": {
                                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                "type": "object",
                                                "additionalProperties": {
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "x-kubernetes-map-type": "atomic"
                                          },
                                          "namespaces": {
                                            "description": "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            }
                                          },
                                          "topologyKey": {
                                            "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.",
                                            "type": "string"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "nodeName": {
                              "description": "NodeName is a request to schedule this Pod onto a specific node. If it is non-empty,\nthe scheduler simply schedules this Pod onto that node, assuming that it fits resource\nrequirements.",
                              "type": "string"
                            },
                            "nodeSelector": {
                              "description": "NodeSelector is a selector which must be true for the Pod to fit on a node.\nSelector which must match a node's labels for the Pod to be scheduled on that node.\nMore info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              },
                              "x-kubernetes-map-type": "atomic"
                            },
                            "schedulerName": {
                              "description": "If specified, the Pod will be dispatched by specified scheduler.\nIf not specified, the Pod will be dispatched by default scheduler.",
                              "type": "string"
                            },
                            "tolerations": {
                              "description": "Allows Pods to be scheduled onto nodes with matching taints.\nEach toleration in the array allows the Pod to tolerate node taints based on\nspecified `key`, `value`, `effect`, and `operator`.\n\n\n- The `key`, `value`, and `effect` identify the taint that the toleration matches.\n- The `operator` determines how the toleration matches the taint.\n\n\nPods with matching tolerations are allowed to be scheduled on tainted nodes, typically reserved for specific purposes.",
                              "type": "array",
                              "items": {
                                "description": "The pod this Toleration is attached to tolerates any taint that matches\nthe triple \u003ckey,value,effect\u003e using the matching operator \u003coperator\u003e.",
                                "type": "object",
                                "properties": {
                                  "effect": {
                                    "description": "Effect indicates the taint effect to match. Empty means match all taint effects.\nWhen specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
                                    "type": "string"
                                  },
                                  "key": {
                                    "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys.\nIf the key is empty, operator must be Exists; this combination means to match all values and all keys.",
                                    "type": "string"
                                  },
                                  "operator": {
                                    "description": "Operator represents a key's relationship to the value.\nValid operators are Exists and Equal. Defaults to Equal.\nExists is equivalent to wildcard for value, so that a pod can\ntolerate all taints of a particular category.",
                                    "type": "string"
                                  },
                                  "tolerationSeconds": {
                                    "description": "TolerationSeconds represents the period of time the toleration (which must be\nof effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,\nit is not set, which means tolerate the taint forever (do not evict). Zero and\nnegative values will be treated as 0 (evict immediately) by the system.",
                                    "type": "integer",
                                    "format": "int64"
                                  },
                                  "value": {
                                    "description": "Value is the taint value the toleration matches to.\nIf the operator is Exists, the value should be empty, otherwise just a regular string.",
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "topologySpreadConstraints": {
                              "description": "TopologySpreadConstraints describes how a group of Pods ought to spread across topology\ndomains. Scheduler will schedule Pods in a way which abides by the constraints.\nAll topologySpreadConstraints are ANDed.",
                              "type": "array",
                              "items": {
                                "description": "TopologySpreadConstraint specifies how to spread matching pods among the given topology.",
                                "type": "object",
                                "required": [
                                  "maxSkew",
                                  "topologyKey",
                                  "whenUnsatisfiable"
                                ],
                                "properties": {
                                  "labelSelector": {
                                    "description": "LabelSelector is used to find matching pods.\nPods that match this label selector are counted to determine the number of pods\nin their corresponding topology domain.",
                                    "type": "object",
                                    "properties": {
                                      "matchExpressions": {
                                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                        "type": "array",
                                        "items": {
                                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                          "type": "object",
                                          "required": [
                                            "key",
                                            "operator"
                                          ],
                                          "properties": {
                                            "key": {
                                              "description": "key is the label key that the selector applies to.",
                                              "type": "string"
                                            },
                                            "operator": {
                                              "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                              "type": "string"
                                            },
                                            "values": {
                                              "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "matchLabels": {
                                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                        "type": "object",
                                        "additionalProperties": {
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "x-kubernetes-map-type": "atomic"
                                  },
                                  "matchLabelKeys": {
                                    "description": "MatchLabelKeys is a set of pod label keys to select the pods over which\nspreading will be calculated. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are ANDed with labelSelector\nto select the group of existing pods over which spreading will be calculated\nfor the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.\nMatchLabelKeys cannot be set when LabelSelector isn't set.\nKeys that don't exist in the incoming pod labels will\nbe ignored. A null or empty list means only match against labelSelector.\n\n\nThis is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    },
                                    "x-kubernetes-list-type": "atomic"
                                  },
                                  "maxSkew": {
                                    "description": "MaxSkew describes the degree to which pods may be unevenly distributed.\nWhen `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference\nbetween the number of matching pods in the target topology and the global minimum.\nThe global minimum is the minimum number of matching pods in an eligible domain\nor zero if the number of eligible domains is less than MinDomains.\nFor example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same\nlabelSelector spread as 2/2/1:\nIn this case, the global minimum is 1.\n| zone1 | zone2 | zone3 |\n|  P P  |  P P  |   P   |\n- if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2;\nscheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2)\nviolate MaxSkew(1).\n- if MaxSkew is 2, incoming pod can be scheduled onto any zone.\nWhen `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence\nto topologies that satisfy it.\nIt's a required field. Default value is 1 and 0 is not allowed.",
                                    "type": "integer",
                                    "format": "int32"
                                  },
                                  "minDomains": {
                                    "description": "MinDomains indicates a minimum number of eligible domains.\nWhen the number of eligible domains with matching topology keys is less than minDomains,\nPod Topology Spread treats \"global minimum\" as 0, and then the calculation of Skew is performed.\nAnd when the number of eligible domains with matching topology keys equals or greater than minDomains,\nthis value has no effect on scheduling.\nAs a result, when the number of eligible domains is less than minDomains,\nscheduler won't schedule more than maxSkew Pods to those domains.\nIf value is nil, the constraint behaves as if MinDomains is equal to 1.\nValid values are integers greater than 0.\nWhen value is not nil, WhenUnsatisfiable must be DoNotSchedule.\n\n\nFor example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same\nlabelSelector spread as 2/2/2:\n| zone1 | zone2 | zone3 |\n|  P P  |  P P  |  P P  |\nThe number of domains is less than 5(MinDomains), so \"global minimum\" is treated as 0.\nIn this situation, new pod with the same labelSelector cannot be scheduled,\nbecause computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones,\nit will violate MaxSkew.\n\n\nThis is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).",
                                    "type": "integer",
                                    "format": "int32"
                                  },
                                  "nodeAffinityPolicy": {
                                    "description": "NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector\nwhen calculating pod topology spread skew. Options are:\n- Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations.\n- Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.\n\n\nIf this value is nil, the behavior is equivalent to the Honor policy.\nThis is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.",
                                    "type": "string"
                                  },
                                  "nodeTaintsPolicy": {
                                    "description": "NodeTaintsPolicy indicates how we will treat node taints when calculating\npod topology spread skew. Options are:\n- Honor: nodes without taints, along with tainted nodes for which the incoming pod\nhas a toleration, are included.\n- Ignore: node taints are ignored. All nodes are included.\n\n\nIf this value is nil, the behavior is equivalent to the Ignore policy.\nThis is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.",
                                    "type": "string"
                                  },
                                  "topologyKey": {
                                    "description": "TopologyKey is the key of node labels. Nodes that have a label with this key\nand identical values are considered to be in the same topology.\nWe consider each \u003ckey, value\u003e as a \"bucket\", and try to put balanced number\nof pods into each bucket.\nWe define a domain as a particular instance of a topology.\nAlso, we define an eligible domain as a domain whose nodes meet the requirements of\nnodeAffinityPolicy and nodeTaintsPolicy.\ne.g. If TopologyKey is \"kubernetes.io/hostname\", each Node is a domain of that topology.\nAnd, if TopologyKey is \"topology.kubernetes.io/zone\", each zone is a domain of that topology.\nIt's a required field.",
                                    "type": "string"
                                  },
                                  "whenUnsatisfiable": {
                                    "description": "WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy\nthe spread constraint.\n- DoNotSchedule (default) tells the scheduler not to schedule it.\n- ScheduleAnyway tells the scheduler to schedule the pod in any location,\n  but giving higher precedence to topologies that would help reduce the\n  skew.\nA constraint is considered \"Unsatisfiable\" for an incoming pod\nif and only if every possible node assignment for that pod would violate\n\"MaxSkew\" on some topology.\nFor example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same\nlabelSelector spread as 3/1/1:\n| zone1 | zone2 | zone3 |\n| P P P |   P   |   P   |\nIf WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled\nto zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies\nMaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler\nwon't make it *more* imbalanced.\nIt's a required field.",
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          }
                        },
                        "volumeClaimTemplates": {
                          "description": "Specifies an override for the storage requirements of the instances.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "annotations": {
                                "description": "Specifies the annotations for the PVC of the volume.",
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              },
                              "labels": {
                                "description": "Specifies the labels for the PVC of the volume.",
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              },
                              "name": {
                                "description": "Refers to the name of a volumeMount defined in either:\n\n\n- `componentDefinition.spec.runtime.containers[*].volumeMounts`\n- `clusterDefinition.spec.componentDefs[*].podSpec.containers[*].volumeMounts` (deprecated)\n\n\nThe value of `name` must match the `name` field of a volumeMount specified in the corresponding `volumeMounts` array.",
                                "type": "string"
                              },
                              "spec": {
                                "description": "Defines the desired characteristics of a PersistentVolumeClaim that will be created for the volume\nwith the mount name specified in the `name` field.\n\n\nWhen a Pod is created for this ClusterComponent, a new PVC will be created based on the specification\ndefined in the `spec` field. The PVC will be associated with the volume mount specified by the `name` field.",
                                "type": "object",
                                "properties": {
                                  "accessModes": {
                                    "description": "Contains the desired access modes the volume should have.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1.",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    },
                                    "x-kubernetes-preserve-unknown-fields": true
                                  },
                                  "resources": {
                                    "description": "Represents the minimum resources the volume should have.\nIf the RecoverVolumeExpansionFailure feature is enabled, users are allowed to specify resource requirements that\nare lower than the previous value but must still be higher than the capacity recorded in the status field of the claim.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources.",
                                    "type": "object",
                                    "properties": {
                                      "limits": {
                                        "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                        "type": "object",
                                        "additionalProperties": {
                                          "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                          "anyOf": [
                                            {
                                              "type": "integer"
                                            },
                                            {
                                              "type": "string"
                                            }
                                          ],
                                          "x-kubernetes-int-or-string": true
                                        }
                                      },
                                      "requests": {
                                        "description": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                        "type": "object",
                                        "additionalProperties": {
                                          "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                          "anyOf": [
                                            {
                                              "type": "integer"
                                            },
                                            {
                                              "type": "string"
                                            }
                                          ],
                                          "x-kubernetes-int-or-string": true
                                        }
                                      }
                                    },
                                    "x-kubernetes-preserve-unknown-fields": true
                                  },
                                  "storageClassName": {
                                    "description": "The name of the StorageClass required by the claim.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1.",
                                    "type": "string"
                                  },
                                  "volumeAttributesClassName": {
                                    "description": "volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.\n\n\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#volumeattributesclass",
                                    "type": "string"
                                  },
                                  "volumeMode": {
                                    "description": "Defines what type of volume is required by the claim, either Block or Filesystem.",
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "limits": {
                    "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                    "type": "object",
                    "additionalProperties": {
                      "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                      "anyOf": [
                        {
                          "type": "integer"
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "x-kubernetes-int-or-string": true
                    }
                  },
                  "offlineInstances": {
                    "description": "Records the offline instances of the Component prior to any changes.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "replicas": {
                    "description": "Records the `replicas` of the Component prior to any changes.",
                    "type": "integer",
                    "format": "int32"
                  },
                  "requests": {
                    "description": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                    "type": "object",
                    "additionalProperties": {
                      "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                      "anyOf": [
                        {
                          "type": "integer"
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "x-kubernetes-int-or-string": true
                    }
                  },
                  "serviceVersion": {
                    "description": "Records the version of the Service expected to be provisioned by this Component prior to any changes.",
                    "type": "string"
                  },
                  "services": {
                    "description": "Records the ClusterComponentService list of the Component prior to any changes.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "annotations": {
                          "description": "If ServiceType is LoadBalancer, cloud provider related parameters can be put here.\nMore info: https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "name": {
                          "description": "References the ComponentService name defined in the `componentDefinition.spec.services[*].name`.",
                          "type": "string",
                          "maxLength": 25
                        },
                        "podService": {
                          "description": "Indicates whether to generate individual Services for each Pod.\nIf set to true, a separate Service will be created for each Pod in the Cluster.",
                          "type": "boolean",
                          "default": false
                        },
                        "serviceType": {
                          "description": "Determines how the Service is exposed. Valid options are `ClusterIP`, `NodePort`, and `LoadBalancer`.\n\n\n- `ClusterIP` allocates a Cluster-internal IP address for load-balancing to endpoints.\n   Endpoints are determined by the selector or if that is not specified,\n   they are determined by manual construction of an Endpoints object or EndpointSlice objects.\n- `NodePort` builds on ClusterIP and allocates a port on every node which routes to the same endpoints as the ClusterIP.\n- `LoadBalancer` builds on NodePort and creates an external load-balancer (if supported in the current cloud)\n   which routes to the same endpoints as the ClusterIP.\n\n\nNote: although K8s Service type allows the 'ExternalName' type, it is not a valid option for ClusterComponentService.\n\n\nFor more info, see:\nhttps://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types.",
                          "type": "string",
                          "default": "ClusterIP",
                          "enum": [
                            "ClusterIP",
                            "NodePort",
                            "LoadBalancer"
                          ],
                          "x-kubernetes-preserve-unknown-fields": true
                        }
                      }
                    }
                  },
                  "shards": {
                    "description": "Records the `shards` of the Component prior to any changes.",
                    "type": "integer",
                    "format": "int32"
                  },
                  "volumeClaimTemplates": {
                    "description": "Records volumes' storage size of the Component prior to any changes.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "storage"
                      ],
                      "properties": {
                        "name": {
                          "description": "Specify the name of the volumeClaimTemplate in the Component.\nThe specified name must match one of the volumeClaimTemplates defined\nin the `clusterComponentSpec.volumeClaimTemplates` field.",
                          "type": "string"
                        },
                        "storage": {
                          "description": "Specifies the desired storage size for the volume.",
                          "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                          "anyOf": [
                            {
                              "type": "integer"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "x-kubernetes-int-or-string": true
                        }
                      }
                    }
                  }
                },
                "x-kubernetes-preserve-unknown-fields": true
              }
            }
          },
          "additionalProperties": false
        },
        "phase": {
          "description": "Represents the phase of the OpsRequest.\nPossible values include \"Pending\", \"Creating\", \"Running\", \"Cancelling\", \"Cancelled\", \"Failed\", \"Succeed\".",
          "type": "string",
          "enum": [
            "Pending",
            "Creating",
            "Running",
            "Cancelling",
            "Cancelled",
            "Aborted",
            "Failed",
            "Succeed"
          ]
        },
        "progress": {
          "description": "Represents the progress of the OpsRequest.",
          "type": "string",
          "default": "-/-",
          "pattern": "^(\\d+|\\-)/(\\d+|\\-)$"
        },
        "startTimestamp": {
          "description": "Records the time when the OpsRequest started processing.",
          "type": "string",
          "format": "date-time"
        }
      },
      "additionalProperties": false
    }
  }
}
