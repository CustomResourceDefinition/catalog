{
  "description": "Output is the Schema for the outputs API",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "OutputSpec defines the desired state of Output",
      "type": "object",
      "properties": {
        "authentication": {
          "description": "Output Authentication configuration.",
          "type": "object",
          "properties": {
            "basicAuth": {
              "type": "object",
              "properties": {
                "passwordField": {
                  "type": "string"
                },
                "secretRef": {
                  "description": "SecretReference represents a Secret Reference. It has enough information to retrieve secret\nin any namespace",
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "name is unique within a namespace to reference a secret resource.",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "namespace defines the space within which the secret name must be unique.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false,
                  "x-kubernetes-map-type": "atomic"
                },
                "usernameField": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "bearerAuth": {
              "type": "object",
              "properties": {
                "secretRef": {
                  "description": "SecretReference represents a Secret Reference. It has enough information to retrieve secret\nin any namespace",
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "name is unique within a namespace to reference a secret resource.",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "namespace defines the space within which the secret name must be unique.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false,
                  "x-kubernetes-map-type": "atomic"
                },
                "tokenField": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false,
          "x-kubernetes-validations": [
            {
              "rule": "(has(self.basicAuth) \u0026\u0026 has(self.bearerAuth)) == false",
              "message": "Only one authentication method can be specified: either basicAuth or bearerAuth, not both"
            }
          ]
        },
        "batch": {
          "description": "Batch processor configuration.",
          "type": "object",
          "properties": {
            "metadata_cardinality_limit": {
              "description": "MetadataCardinalityLimit indicates the maximum number of\nbatcher instances that will be created through a distinct\ncombination of MetadataKeys.",
              "type": "integer",
              "format": "int32"
            },
            "metadata_keys": {
              "description": "MetadataKeys is a list of client.Metadata keys that will be\nused to form distinct batchers.  If this setting is empty,\na single batcher instance will be used.  When this setting\nis not empty, one batcher will be used per distinct\ncombination of values for the listed metadata keys.\n\nEmpty value and unset metadata are treated as distinct cases.\n\nEntries are case-insensitive.  Duplicated entries will\ntrigger a validation error.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "send_batch_max_size": {
              "description": "SendBatchMaxSize is the maximum size of a batch. It must be larger than SendBatchSize.\nLarger batches are split into smaller units.\nDefault value is 0, that means no maximum size.",
              "type": "integer",
              "format": "int32"
            },
            "send_batch_size": {
              "description": "SendBatchSize is the size of a batch which after hit, will trigger it to be sent.\nWhen this is set to zero, the batch size is ignored and data will be sent immediately\nsubject to only send_batch_max_size.",
              "type": "integer",
              "format": "int32"
            },
            "timeout": {
              "description": "Timeout sets the time after which a batch will be sent regardless of size.\nWhen this is set to zero, batched data will be sent immediately.",
              "type": "string",
              "format": "duration"
            }
          },
          "additionalProperties": false
        },
        "fluentforward": {
          "description": "Configuration for the fluentforward exporter.",
          "type": "object",
          "required": [
            "endpoint"
          ],
          "properties": {
            "compress_gzip": {
              "description": "CompressGzip enables gzip compression for the payload.",
              "type": "boolean"
            },
            "connection_timeout": {
              "description": "Connection Timeout parameter configures `net.Dialer`.",
              "type": "string",
              "format": "duration"
            },
            "default_labels_enabled": {
              "description": "DefaultLabelsEnabled is a map of default attributes to be added to each log record.",
              "type": "object",
              "additionalProperties": {
                "type": "boolean"
              }
            },
            "endpoint": {
              "description": "Endpoint to send logs to.",
              "type": "object",
              "required": [
                "tcp_addr"
              ],
              "properties": {
                "tcp_addr": {
                  "description": "TCPAddr is the address of the server to connect to.",
                  "type": "string"
                },
                "validate_tcp_resolution": {
                  "description": "Controls whether to validate the tcp address.\nTurning this ON may result in the collector failing to start if it came up faster then the endpoint.\ndefault is false.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "kubernetes_metadata": {
              "type": "object",
              "required": [
                "include_pod_labels",
                "key"
              ],
              "properties": {
                "include_pod_labels": {
                  "type": "boolean"
                },
                "key": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "require_ack": {
              "description": "RequireAck enables the acknowledgement feature.",
              "type": "boolean"
            },
            "retry_on_failure": {
              "description": "BackOffConfig defines configuration for retrying batches in case of export failure.\nThe current supported strategy is exponential backoff.",
              "type": "object",
              "properties": {
                "initial_interval": {
                  "description": "InitialInterval the time to wait after the first failure before retrying.",
                  "type": "integer",
                  "format": "int64"
                },
                "max_elapsed_time": {
                  "description": "MaxElapsedTime is the maximum amount of time (including retries) spent trying to send a request/batch.\nOnce this value is reached, the data is discarded. If set to 0, the retries are never stopped.\nDefault value is 0 to ensure that the data is never discarded.",
                  "type": "integer",
                  "format": "int64"
                },
                "max_interval": {
                  "description": "MaxInterval is the upper bound on backoff interval. Once this value is reached the delay between\nconsecutive retries will always be `MaxInterval`.",
                  "type": "integer",
                  "format": "int64"
                },
                "multiplier": {
                  "description": "Multiplier is the value multiplied by the backoff interval bounds",
                  "type": "string"
                },
                "randomization_factor": {
                  "description": "RandomizationFactor is a random factor used to calculate next backoffs\nRandomized interval = RetryInterval * (1 Â± RandomizationFactor)",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "sending_queue": {
              "description": "QueueSettings defines configuration for queueing batches before sending to the consumerSender.",
              "type": "object",
              "properties": {
                "blocking": {
                  "description": "Blocking controls the queue behavior when full.\nIf true it blocks until enough space to add the new request to the queue.",
                  "type": "boolean"
                },
                "num_consumers": {
                  "description": "NumConsumers is the number of consumers from the queue. Defaults to 10.\nIf batching is enabled, a combined batch cannot contain more requests than the number of consumers.\nSo it's recommended to set higher number of consumers if batching is enabled.",
                  "type": "integer"
                },
                "queue_size": {
                  "description": "QueueSize is the maximum number of batches allowed in queue at a given time.\nDefault value is 100.",
                  "type": "integer"
                }
              },
              "additionalProperties": false
            },
            "shared_key": {
              "description": "SharedKey is used for authorization with the server that knows it.",
              "type": "string"
            },
            "tag": {
              "description": "The Fluent tag parameter used for routing",
              "type": "string"
            },
            "tls": {
              "description": "TLSSetting struct exposes TLS client configuration.",
              "type": "object",
              "properties": {
                "ca_file": {
                  "description": "Path to the CA cert. For a client this verifies the server certificate.\nFor a server this verifies client certificates. If empty uses system root CA.\n(optional)",
                  "type": "string"
                },
                "ca_pem": {
                  "description": "In memory PEM encoded cert. (optional)",
                  "type": "string"
                },
                "cert_file": {
                  "description": "Path to the TLS cert to use for TLS required connections. (optional)",
                  "type": "string"
                },
                "cert_pem": {
                  "description": "In memory PEM encoded TLS cert to use for TLS required connections. (optional)",
                  "type": "string"
                },
                "cipher_suites": {
                  "description": "CipherSuites is a list of TLS cipher suites that the TLS transport can use.\nIf left blank, a safe default list is used.\nSee https://go.dev/src/crypto/tls/cipher_suites.go for a list of supported cipher suites.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "curve_preferences": {
                  "description": "contains the elliptic curves that will be used in\nan ECDHE handshake, in preference order\nDefaults to empty list and \"crypto/tls\" defaults are used, internally.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "include_system_ca_certs_pool": {
                  "description": "If true, load system CA certificates pool in addition to the certificates\nconfigured in this struct.",
                  "type": "boolean"
                },
                "insecure": {
                  "description": "In gRPC and HTTP when set to true, this is used to disable the client transport security.\nSee https://godoc.org/google.golang.org/grpc#WithInsecure for gRPC.\nPlease refer to https://godoc.org/crypto/tls#Config for more information.\n(optional, default false)",
                  "type": "boolean"
                },
                "insecure_skip_verify": {
                  "description": "InsecureSkipVerify will enable TLS but not verify the certificate.",
                  "type": "boolean"
                },
                "key_file": {
                  "description": "Path to the TLS key to use for TLS required connections. (optional)",
                  "type": "string"
                },
                "key_pem": {
                  "description": "In memory PEM encoded TLS key to use for TLS required connections. (optional)",
                  "type": "string"
                },
                "max_version": {
                  "description": "MaxVersion sets the maximum TLS version that is acceptable.\nIf not set, refer to crypto/tls for defaults. (optional)",
                  "type": "string"
                },
                "min_version": {
                  "description": "MinVersion sets the minimum TLS version that is acceptable.\nIf not set, TLS 1.2 will be used. (optional)",
                  "type": "string"
                },
                "reload_interval": {
                  "description": "ReloadInterval specifies the duration after which the certificate will be reloaded\nIf not set, it will never be reloaded (optional)",
                  "type": "integer",
                  "format": "int64"
                },
                "server_name_override": {
                  "description": "ServerName requested by client for virtual hosting.\nThis sets the ServerName in the TLSConfig. Please refer to\nhttps://godoc.org/crypto/tls#Config for more information. (optional)",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "otlp": {
          "description": "Configuration for the OTLP gRPC exporter.\nref: https://github.com/open-telemetry/opentelemetry-collector/blob/main/exporter/otlpexporter/config.go",
          "type": "object",
          "required": [
            "endpoint"
          ],
          "properties": {
            "auth": {
              "description": "Auth configuration for outgoing RPCs.",
              "type": "object",
              "properties": {
                "authenticator": {
                  "description": "AuthenticatorID specifies the name of the extension to use in order to authenticate the incoming data point.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "authority": {
              "description": "WithAuthority parameter configures client to rewrite \":authority\" header\n(godoc.org/google.golang.org/grpc#WithAuthority)",
              "type": "string"
            },
            "balancer_name": {
              "description": "Sets the balancer in grpclb_policy to discover the servers. Default is pick_first.\nhttps://github.com/grpc/grpc-go/blob/master/examples/features/load_balancing/README.md",
              "type": "string"
            },
            "compression": {
              "description": "The compression key for supported compression types within collector.",
              "type": "string"
            },
            "endpoint": {
              "description": "The target to which the exporter is going to send traces or metrics,\nusing the gRPC protocol. The valid syntax is described at\nhttps://github.com/grpc/grpc/blob/master/doc/naming.md.",
              "type": "string"
            },
            "headers": {
              "description": "The headers associated with gRPC requests.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "keepalive": {
              "description": "The keepalive parameters for gRPC client. See grpc.WithKeepaliveParams.\n(https://godoc.org/google.golang.org/grpc#WithKeepaliveParams).",
              "type": "object",
              "properties": {
                "permit_without_stream": {
                  "type": "boolean"
                },
                "time": {
                  "description": "A Duration represents the elapsed time between two instants\nas an int64 nanosecond count. The representation limits the\nlargest representable duration to approximately 290 years.",
                  "type": "integer",
                  "format": "int64"
                },
                "timeout": {
                  "description": "A Duration represents the elapsed time between two instants\nas an int64 nanosecond count. The representation limits the\nlargest representable duration to approximately 290 years.",
                  "type": "integer",
                  "format": "int64"
                }
              },
              "additionalProperties": false
            },
            "read_buffer_size": {
              "description": "ReadBufferSize for gRPC client. See grpc.WithReadBufferSize.\n(https://godoc.org/google.golang.org/grpc#WithReadBufferSize).",
              "type": "integer"
            },
            "retry_on_failure": {
              "description": "BackOffConfig defines configuration for retrying batches in case of export failure.\nThe current supported strategy is exponential backoff.",
              "type": "object",
              "properties": {
                "initial_interval": {
                  "description": "InitialInterval the time to wait after the first failure before retrying.",
                  "type": "integer",
                  "format": "int64"
                },
                "max_elapsed_time": {
                  "description": "MaxElapsedTime is the maximum amount of time (including retries) spent trying to send a request/batch.\nOnce this value is reached, the data is discarded. If set to 0, the retries are never stopped.\nDefault value is 0 to ensure that the data is never discarded.",
                  "type": "integer",
                  "format": "int64"
                },
                "max_interval": {
                  "description": "MaxInterval is the upper bound on backoff interval. Once this value is reached the delay between\nconsecutive retries will always be `MaxInterval`.",
                  "type": "integer",
                  "format": "int64"
                },
                "multiplier": {
                  "description": "Multiplier is the value multiplied by the backoff interval bounds",
                  "type": "string"
                },
                "randomization_factor": {
                  "description": "RandomizationFactor is a random factor used to calculate next backoffs\nRandomized interval = RetryInterval * (1 Â± RandomizationFactor)",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "sending_queue": {
              "description": "QueueSettings defines configuration for queueing batches before sending to the consumerSender.",
              "type": "object",
              "properties": {
                "blocking": {
                  "description": "Blocking controls the queue behavior when full.\nIf true it blocks until enough space to add the new request to the queue.",
                  "type": "boolean"
                },
                "num_consumers": {
                  "description": "NumConsumers is the number of consumers from the queue. Defaults to 10.\nIf batching is enabled, a combined batch cannot contain more requests than the number of consumers.\nSo it's recommended to set higher number of consumers if batching is enabled.",
                  "type": "integer"
                },
                "queue_size": {
                  "description": "QueueSize is the maximum number of batches allowed in queue at a given time.\nDefault value is 100.",
                  "type": "integer"
                }
              },
              "additionalProperties": false
            },
            "timeout": {
              "description": "Timeout is the timeout for every attempt to send data to the backend.\nA zero timeout means no timeout.",
              "type": "integer",
              "format": "int64"
            },
            "tls": {
              "description": "TLSSetting struct exposes TLS client configuration.",
              "type": "object",
              "properties": {
                "ca_file": {
                  "description": "Path to the CA cert. For a client this verifies the server certificate.\nFor a server this verifies client certificates. If empty uses system root CA.\n(optional)",
                  "type": "string"
                },
                "ca_pem": {
                  "description": "In memory PEM encoded cert. (optional)",
                  "type": "string"
                },
                "cert_file": {
                  "description": "Path to the TLS cert to use for TLS required connections. (optional)",
                  "type": "string"
                },
                "cert_pem": {
                  "description": "In memory PEM encoded TLS cert to use for TLS required connections. (optional)",
                  "type": "string"
                },
                "cipher_suites": {
                  "description": "CipherSuites is a list of TLS cipher suites that the TLS transport can use.\nIf left blank, a safe default list is used.\nSee https://go.dev/src/crypto/tls/cipher_suites.go for a list of supported cipher suites.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "curve_preferences": {
                  "description": "contains the elliptic curves that will be used in\nan ECDHE handshake, in preference order\nDefaults to empty list and \"crypto/tls\" defaults are used, internally.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "include_system_ca_certs_pool": {
                  "description": "If true, load system CA certificates pool in addition to the certificates\nconfigured in this struct.",
                  "type": "boolean"
                },
                "insecure": {
                  "description": "In gRPC and HTTP when set to true, this is used to disable the client transport security.\nSee https://godoc.org/google.golang.org/grpc#WithInsecure for gRPC.\nPlease refer to https://godoc.org/crypto/tls#Config for more information.\n(optional, default false)",
                  "type": "boolean"
                },
                "insecure_skip_verify": {
                  "description": "InsecureSkipVerify will enable TLS but not verify the certificate.",
                  "type": "boolean"
                },
                "key_file": {
                  "description": "Path to the TLS key to use for TLS required connections. (optional)",
                  "type": "string"
                },
                "key_pem": {
                  "description": "In memory PEM encoded TLS key to use for TLS required connections. (optional)",
                  "type": "string"
                },
                "max_version": {
                  "description": "MaxVersion sets the maximum TLS version that is acceptable.\nIf not set, refer to crypto/tls for defaults. (optional)",
                  "type": "string"
                },
                "min_version": {
                  "description": "MinVersion sets the minimum TLS version that is acceptable.\nIf not set, TLS 1.2 will be used. (optional)",
                  "type": "string"
                },
                "reload_interval": {
                  "description": "ReloadInterval specifies the duration after which the certificate will be reloaded\nIf not set, it will never be reloaded (optional)",
                  "type": "integer",
                  "format": "int64"
                },
                "server_name_override": {
                  "description": "ServerName requested by client for virtual hosting.\nThis sets the ServerName in the TLSConfig. Please refer to\nhttps://godoc.org/crypto/tls#Config for more information. (optional)",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "wait_for_ready": {
              "description": "WaitForReady parameter configures client to wait for ready state before sending data.\n(https://github.com/grpc/grpc/blob/master/doc/wait-for-ready.md)",
              "type": "boolean"
            },
            "write_buffer_size": {
              "description": "WriteBufferSize for gRPC gRPC. See grpc.WithWriteBufferSize.\n(https://godoc.org/google.golang.org/grpc#WithWriteBufferSize).",
              "type": "integer"
            }
          },
          "additionalProperties": false
        },
        "otlphttp": {
          "description": "Configuration for the OTLP HTTP exporter.",
          "type": "object",
          "properties": {
            "auth": {
              "description": "Auth configuration for outgoing HTTP calls.",
              "type": "object",
              "properties": {
                "authenticator": {
                  "description": "AuthenticatorID specifies the name of the extension to use in order to authenticate the incoming data point.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "compression": {
              "description": "The compression key for supported compression types within collector.",
              "type": "string"
            },
            "compression_params": {
              "description": "Advanced configuration options for the Compression",
              "type": "object",
              "properties": {
                "level": {
                  "type": "integer"
                }
              },
              "additionalProperties": false
            },
            "cookies": {
              "description": "Cookies configures the cookie management of the HTTP client.",
              "type": "object",
              "properties": {
                "enabled": {
                  "description": "Enabled if true, cookies from HTTP responses will be reused in further HTTP requests with the same server.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "disable_keep_alives": {
              "description": "DisableKeepAlives, if true, disables HTTP keep-alives and will only use the connection to the server\nfor a single HTTP request.\n\nWARNING: enabling this option can result in significant overhead establishing a new HTTP(S)\nconnection for every request. Before enabling this option please consider whether changes\nto idle connection settings can achieve your goal.",
              "type": "boolean"
            },
            "encoding": {
              "description": "The encoding to export telemetry (default: \"proto\")",
              "type": "string",
              "enum": [
                "proto",
                "json"
              ]
            },
            "endpoint": {
              "description": "The target URL to send data to (e.g.: http://some.url:9411/v1/traces).",
              "type": "string"
            },
            "headers": {
              "description": "Additional headers attached to each HTTP request sent by the client.\nExisting header values are overwritten if collision happens.\nHeader values are opaque since they may be sensitive.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "http2_ping_timeout": {
              "description": "HTTP2PingTimeout if there's no response to the ping within the configured value, the connection will be closed.\nIf not set or set to 0, it defaults to 15s.",
              "type": "integer",
              "format": "int64"
            },
            "http2_read_idle_timeout": {
              "description": "This is needed in case you run into\nhttps://github.com/golang/go/issues/59690\nhttps://github.com/golang/go/issues/36026\nHTTP2ReadIdleTimeout if the connection has been idle for the configured value send a ping frame for health check\n0s means no health check will be performed.",
              "type": "integer",
              "format": "int64"
            },
            "idle_conn_timeout": {
              "description": "IdleConnTimeout is the maximum amount of time a connection will remain open before closing itself.\nBy default, it is set to [http.DefaultTransport.IdleConnTimeout]",
              "type": "integer",
              "format": "int64"
            },
            "max_conns_per_host": {
              "description": "MaxConnsPerHost limits the total number of connections per host, including connections in the dialing,\nactive, and idle states.\nBy default, it is set to [http.DefaultTransport.MaxConnsPerHost].",
              "type": "integer"
            },
            "max_idle_conns": {
              "description": "MaxIdleConns is used to set a limit to the maximum idle HTTP connections the client can keep open.\nBy default, it is set to 100.",
              "type": "integer"
            },
            "max_idle_conns_per_host": {
              "description": "MaxIdleConnsPerHost is used to set a limit to the maximum idle HTTP connections the host can keep open.\nBy default, it is set to [http.DefaultTransport.MaxIdleConnsPerHost].",
              "type": "integer"
            },
            "proxy_url": {
              "description": "ProxyURL setting for the collector",
              "type": "string"
            },
            "read_buffer_size": {
              "description": "ReadBufferSize for HTTP client. See http.Transport.ReadBufferSize.\nDefault is 0.",
              "type": "integer"
            },
            "retry_on_failure": {
              "description": "BackOffConfig defines configuration for retrying batches in case of export failure.\nThe current supported strategy is exponential backoff.",
              "type": "object",
              "properties": {
                "initial_interval": {
                  "description": "InitialInterval the time to wait after the first failure before retrying.",
                  "type": "integer",
                  "format": "int64"
                },
                "max_elapsed_time": {
                  "description": "MaxElapsedTime is the maximum amount of time (including retries) spent trying to send a request/batch.\nOnce this value is reached, the data is discarded. If set to 0, the retries are never stopped.\nDefault value is 0 to ensure that the data is never discarded.",
                  "type": "integer",
                  "format": "int64"
                },
                "max_interval": {
                  "description": "MaxInterval is the upper bound on backoff interval. Once this value is reached the delay between\nconsecutive retries will always be `MaxInterval`.",
                  "type": "integer",
                  "format": "int64"
                },
                "multiplier": {
                  "description": "Multiplier is the value multiplied by the backoff interval bounds",
                  "type": "string"
                },
                "randomization_factor": {
                  "description": "RandomizationFactor is a random factor used to calculate next backoffs\nRandomized interval = RetryInterval * (1 Â± RandomizationFactor)",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "sending_queue": {
              "description": "QueueSettings defines configuration for queueing batches before sending to the consumerSender.",
              "type": "object",
              "properties": {
                "blocking": {
                  "description": "Blocking controls the queue behavior when full.\nIf true it blocks until enough space to add the new request to the queue.",
                  "type": "boolean"
                },
                "num_consumers": {
                  "description": "NumConsumers is the number of consumers from the queue. Defaults to 10.\nIf batching is enabled, a combined batch cannot contain more requests than the number of consumers.\nSo it's recommended to set higher number of consumers if batching is enabled.",
                  "type": "integer"
                },
                "queue_size": {
                  "description": "QueueSize is the maximum number of batches allowed in queue at a given time.\nDefault value is 100.",
                  "type": "integer"
                }
              },
              "additionalProperties": false
            },
            "timeout": {
              "description": "Timeout parameter configures `http.Client.Timeout`.\nDefault is 0 (unlimited).",
              "type": "integer",
              "format": "int64"
            },
            "tls": {
              "description": "TLSSetting struct exposes TLS client configuration.",
              "type": "object",
              "properties": {
                "ca_file": {
                  "description": "Path to the CA cert. For a client this verifies the server certificate.\nFor a server this verifies client certificates. If empty uses system root CA.\n(optional)",
                  "type": "string"
                },
                "ca_pem": {
                  "description": "In memory PEM encoded cert. (optional)",
                  "type": "string"
                },
                "cert_file": {
                  "description": "Path to the TLS cert to use for TLS required connections. (optional)",
                  "type": "string"
                },
                "cert_pem": {
                  "description": "In memory PEM encoded TLS cert to use for TLS required connections. (optional)",
                  "type": "string"
                },
                "cipher_suites": {
                  "description": "CipherSuites is a list of TLS cipher suites that the TLS transport can use.\nIf left blank, a safe default list is used.\nSee https://go.dev/src/crypto/tls/cipher_suites.go for a list of supported cipher suites.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "curve_preferences": {
                  "description": "contains the elliptic curves that will be used in\nan ECDHE handshake, in preference order\nDefaults to empty list and \"crypto/tls\" defaults are used, internally.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "include_system_ca_certs_pool": {
                  "description": "If true, load system CA certificates pool in addition to the certificates\nconfigured in this struct.",
                  "type": "boolean"
                },
                "insecure": {
                  "description": "In gRPC and HTTP when set to true, this is used to disable the client transport security.\nSee https://godoc.org/google.golang.org/grpc#WithInsecure for gRPC.\nPlease refer to https://godoc.org/crypto/tls#Config for more information.\n(optional, default false)",
                  "type": "boolean"
                },
                "insecure_skip_verify": {
                  "description": "InsecureSkipVerify will enable TLS but not verify the certificate.",
                  "type": "boolean"
                },
                "key_file": {
                  "description": "Path to the TLS key to use for TLS required connections. (optional)",
                  "type": "string"
                },
                "key_pem": {
                  "description": "In memory PEM encoded TLS key to use for TLS required connections. (optional)",
                  "type": "string"
                },
                "max_version": {
                  "description": "MaxVersion sets the maximum TLS version that is acceptable.\nIf not set, refer to crypto/tls for defaults. (optional)",
                  "type": "string"
                },
                "min_version": {
                  "description": "MinVersion sets the minimum TLS version that is acceptable.\nIf not set, TLS 1.2 will be used. (optional)",
                  "type": "string"
                },
                "reload_interval": {
                  "description": "ReloadInterval specifies the duration after which the certificate will be reloaded\nIf not set, it will never be reloaded (optional)",
                  "type": "integer",
                  "format": "int64"
                },
                "server_name_override": {
                  "description": "ServerName requested by client for virtual hosting.\nThis sets the ServerName in the TLSConfig. Please refer to\nhttps://godoc.org/crypto/tls#Config for more information. (optional)",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "write_buffer_size": {
              "description": "WriteBufferSize for HTTP client. See http.Transport.WriteBufferSize.\nDefault is 0.",
              "type": "integer"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "OutputStatus defines the observed state of Output",
      "type": "object",
      "properties": {
        "problems": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "problemsCount": {
          "type": "integer"
        },
        "state": {
          "type": "string"
        },
        "tenant": {
          "type": "string"
        }
      },
      "additionalProperties": false
    }
  }
}
