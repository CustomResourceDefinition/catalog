{
  "description": "Tenant is the Schema for the tenants API",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "TenantSpec defines the desired state of Tenant",
      "type": "object",
      "properties": {
        "logSourceNamespaceSelectors": {
          "description": "Determines the namespaces from which logs are collected by this tenant.\nCannot be used together with SelectFromAllNamespaces.",
          "type": "array",
          "items": {
            "description": "A label selector is a label query over a set of resources. The result of matchLabels and\nmatchExpressions are ANDed. An empty label selector matches all objects. A null\nlabel selector matches no objects.",
            "type": "object",
            "properties": {
              "matchExpressions": {
                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                "type": "array",
                "items": {
                  "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                  "type": "object",
                  "required": [
                    "key",
                    "operator"
                  ],
                  "properties": {
                    "key": {
                      "description": "key is the label key that the selector applies to.",
                      "type": "string"
                    },
                    "operator": {
                      "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                      "type": "string"
                    },
                    "values": {
                      "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "x-kubernetes-list-type": "atomic"
                    }
                  },
                  "additionalProperties": false
                },
                "x-kubernetes-list-type": "atomic"
              },
              "matchLabels": {
                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false,
            "x-kubernetes-map-type": "atomic"
          }
        },
        "persistenceConfig": {
          "description": "Configuration for persistence, will be used to generate\nthe filestorage extension.",
          "type": "object",
          "properties": {
            "directory": {
              "description": "The directory where logs will be persisted.\nIf unset or an invalid path is given, then an OS specific\ndefault value will be used.\nThe cluster administrator must ensure that the directory\nis unique for each tenant.\nIf unset /var/lib/otelcol/file_storage/\u003ctenant_name\u003e will be used.",
              "type": "string"
            },
            "enableFileStorage": {
              "description": "Determines whether file storage is enabled or not.",
              "type": "boolean"
            }
          },
          "additionalProperties": false
        },
        "routeConfig": {
          "description": "RouteConfig defines the routing configuration for a tenant\nit will be used to generate routing connectors.",
          "type": "object",
          "properties": {
            "defaultPipelines": {
              "description": "DefaultPipelines contains the list of pipelines to use when a more specific record can't be\nfound in the routing table.\nOptional.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "errorMode": {
              "description": "ErrorMode determines how the processor reacts to errors that occur while processing an OTTL\ncondition.\nValid values are `ignore` and `propagate`.\n`ignore` means the processor ignores errors returned by conditions and continues on to the\nnext condition. This is the recommended mode. If `ignore` is used and a statement's\ncondition has an error then the payload will be routed to the default exporter. `propagate`\nmeans the processor returns the error up the pipeline.  This will result in the payload being\ndropped from the collector.\nThe default value is `propagate`.",
              "type": "string",
              "enum": [
                "ignore",
                "silent",
                "propagate"
              ]
            }
          },
          "additionalProperties": false
        },
        "selectFromAllNamespaces": {
          "description": "If true, logs are collected from all namespaces.\nCannot be used together with LogSourceNamespaceSelectors.",
          "type": "boolean"
        },
        "subscriptionNamespaceSelectors": {
          "description": "Determines the namespaces from which subscriptions and outputs are collected by this tenant.",
          "type": "array",
          "items": {
            "description": "A label selector is a label query over a set of resources. The result of matchLabels and\nmatchExpressions are ANDed. An empty label selector matches all objects. A null\nlabel selector matches no objects.",
            "type": "object",
            "properties": {
              "matchExpressions": {
                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                "type": "array",
                "items": {
                  "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                  "type": "object",
                  "required": [
                    "key",
                    "operator"
                  ],
                  "properties": {
                    "key": {
                      "description": "key is the label key that the selector applies to.",
                      "type": "string"
                    },
                    "operator": {
                      "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                      "type": "string"
                    },
                    "values": {
                      "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "x-kubernetes-list-type": "atomic"
                    }
                  },
                  "additionalProperties": false
                },
                "x-kubernetes-list-type": "atomic"
              },
              "matchLabels": {
                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false,
            "x-kubernetes-map-type": "atomic"
          }
        },
        "transform": {
          "description": "Transform represents the Transform processor, which modifies telemetry based on its configuration.",
          "type": "object",
          "properties": {
            "errorMode": {
              "description": "ErrorMode determines how the processor reacts to errors that occur while processing a statement.\nValid values are `ignore` and `propagate`.\n`ignore` means the processor ignores errors returned by statements and continues on to the next statement. This is the recommended mode.\n`propagate` means the processor returns the error up the pipeline.  This will result in the payload being dropped from the collector.\nThe default value is `propagate`.",
              "type": "string",
              "enum": [
                "ignore",
                "silent",
                "propagate"
              ]
            },
            "flattenData": {
              "description": "When FlattenData is true, the processor provides each log record with\na distinct copy of its resource and scope. Then, after applying all transformations,\nthe log records are regrouped by resource and scope.",
              "type": "boolean"
            },
            "logStatements": {
              "type": "array",
              "items": {
                "description": "TransformStatement represents a single statement in a Transform processor.\nref: https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/transformprocessor",
                "type": "object",
                "properties": {
                  "conditions": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "context": {
                    "type": "string",
                    "enum": [
                      "resource",
                      "scope",
                      "span",
                      "spanevent",
                      "metric",
                      "datapoint",
                      "log"
                    ]
                  },
                  "errorMode": {
                    "description": "ErrorMode determines how the processor reacts to errors that occur while processing\nthis group of statements. When provided, it overrides the default Config ErrorMode.",
                    "type": "string",
                    "enum": [
                      "ignore",
                      "silent",
                      "propagate"
                    ]
                  },
                  "statements": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "metricStatements": {
              "type": "array",
              "items": {
                "description": "TransformStatement represents a single statement in a Transform processor.\nref: https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/transformprocessor",
                "type": "object",
                "properties": {
                  "conditions": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "context": {
                    "type": "string",
                    "enum": [
                      "resource",
                      "scope",
                      "span",
                      "spanevent",
                      "metric",
                      "datapoint",
                      "log"
                    ]
                  },
                  "errorMode": {
                    "description": "ErrorMode determines how the processor reacts to errors that occur while processing\nthis group of statements. When provided, it overrides the default Config ErrorMode.",
                    "type": "string",
                    "enum": [
                      "ignore",
                      "silent",
                      "propagate"
                    ]
                  },
                  "statements": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "name": {
              "description": "Name of the Transform processor",
              "type": "string"
            },
            "traceStatements": {
              "type": "array",
              "items": {
                "description": "TransformStatement represents a single statement in a Transform processor.\nref: https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/transformprocessor",
                "type": "object",
                "properties": {
                  "conditions": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "context": {
                    "type": "string",
                    "enum": [
                      "resource",
                      "scope",
                      "span",
                      "spanevent",
                      "metric",
                      "datapoint",
                      "log"
                    ]
                  },
                  "errorMode": {
                    "description": "ErrorMode determines how the processor reacts to errors that occur while processing\nthis group of statements. When provided, it overrides the default Config ErrorMode.",
                    "type": "string",
                    "enum": [
                      "ignore",
                      "silent",
                      "propagate"
                    ]
                  },
                  "statements": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false,
      "x-kubernetes-validations": [
        {
          "rule": "!(has(self.logSourceNamespaceSelectors) \u0026\u0026 self.logSourceNamespaceSelectors.size() \u003e 0 \u0026\u0026 has(self.selectFromAllNamespaces) \u0026\u0026 self.selectFromAllNamespaces == true)",
          "message": "LogSourceNamespaceSelectors and SelectFromAllNamespaces cannot be set at the same time"
        }
      ]
    },
    "status": {
      "description": "TenantStatus defines the observed state of Tenant",
      "type": "object",
      "properties": {
        "connectedBridges": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "logSourceNamespaces": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "problems": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "problemsCount": {
          "type": "integer"
        },
        "state": {
          "type": "string"
        },
        "subscriptions": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "name",
              "namespace"
            ],
            "properties": {
              "name": {
                "type": "string"
              },
              "namespace": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        }
      },
      "additionalProperties": false
    }
  }
}
