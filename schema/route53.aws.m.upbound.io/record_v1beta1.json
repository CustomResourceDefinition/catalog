{
  "description": "Record is the Schema for the Records API. Provides a Route53 record resource.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "RecordSpec defines the desired state of Record",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "forProvider": {
          "type": "object",
          "properties": {
            "alias": {
              "description": "An alias block. Conflicts with ttl \u0026 records.\nDocumented below.",
              "type": "object",
              "properties": {
                "evaluateTargetHealth": {
                  "description": "Set to true if you want Route 53 to determine whether to respond to DNS queries using this resource record set by checking the health of the resource record set. Some resources have special requirements, see related part of documentation.",
                  "type": "boolean"
                },
                "name": {
                  "description": "The name of the record.",
                  "type": "string"
                },
                "zoneId": {
                  "description": "The ID of the hosted zone to contain this record.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "allowOverwrite": {
              "description": "false by default. This configuration is not recommended for most environments.",
              "type": "boolean"
            },
            "cidrRoutingPolicy": {
              "description": "A block indicating a routing policy based on the IP network ranges of requestors. Conflicts with any other routing policy. Documented below.",
              "type": "object",
              "properties": {
                "collectionId": {
                  "description": "The CIDR collection ID. See the aws_route53_cidr_collection resource for more details.",
                  "type": "string"
                },
                "locationName": {
                  "description": "The CIDR collection location name. See the aws_route53_cidr_location resource for more details. A location_name with an asterisk \"*\" can be used to create a default CIDR record. collection_id is still required for default record.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "failoverRoutingPolicy": {
              "description": "A block indicating the routing behavior when associated health check fails. Conflicts with any other routing policy. Documented below.",
              "type": "object",
              "properties": {
                "type": {
                  "description": "The record type. Valid values are A, AAAA, CAA, CNAME, DS, HTTPS, MX, NAPTR, NS, PTR, SOA, SPF, SRV, SSHFP, SVCB, TLSA, and TXT.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "geolocationRoutingPolicy": {
              "description": "A block indicating a routing policy based on the geolocation of the requestor. Conflicts with any other routing policy. Documented below.",
              "type": "object",
              "properties": {
                "continent": {
                  "description": "A two-letter continent code. See http://docs.aws.amazon.com/Route53/latest/APIReference/API_GetGeoLocation.html for code details. Either continent or country must be specified.",
                  "type": "string"
                },
                "country": {
                  "description": "A two-character country code or * to indicate a default resource record set.",
                  "type": "string"
                },
                "subdivision": {
                  "description": "A subdivision code for a country.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "geoproximityRoutingPolicy": {
              "description": "A block indicating a routing policy based on the geoproximity of the requestor. Conflicts with any other routing policy. Documented below.",
              "type": "object",
              "properties": {
                "awsRegion": {
                  "description": "A AWS region where the resource is present.",
                  "type": "string"
                },
                "bias": {
                  "description": "Route more traffic or less traffic to the resource by specifying a value ranges between -90 to 90. See https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy-geoproximity.html for bias details.",
                  "type": "number"
                },
                "coordinates": {
                  "description": "Specify latitude and longitude for routing traffic to non-AWS resources.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "latitude": {
                        "type": "string"
                      },
                      "longitude": {
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "localZoneGroup": {
                  "description": "A AWS local zone group where the resource is present. See https://docs.aws.amazon.com/local-zones/latest/ug/available-local-zones.html for local zone group list.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "healthCheckId": {
              "description": "The health check the record should be associated with.",
              "type": "string"
            },
            "healthCheckIdRef": {
              "description": "Reference to a HealthCheck in route53 to populate healthCheckId.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referenced object",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "healthCheckIdSelector": {
              "description": "Selector for a HealthCheck in route53 to populate healthCheckId.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "namespace": {
                  "description": "Namespace for the selector",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "latencyRoutingPolicy": {
              "description": "A block indicating a routing policy based on the latency between the requestor and an AWS region. Conflicts with any other routing policy. Documented below.",
              "type": "object",
              "required": [
                "region"
              ],
              "properties": {
                "region": {
                  "description": "An AWS region from which to measure latency. See http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html#routing-policy-latency",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "multivalueAnswerRoutingPolicy": {
              "description": "Set to true to indicate a multivalue answer routing policy. Conflicts with any other routing policy.",
              "type": "boolean"
            },
            "name": {
              "description": "The name of the record.",
              "type": "string"
            },
            "records": {
              "description": "A string list of records.g., \"first255characters\\\"\\\"morecharacters\").",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-kubernetes-list-type": "set"
            },
            "recordsRefs": {
              "description": "References to EIP in ec2 to populate records.",
              "type": "array",
              "items": {
                "description": "A NamespacedReference to a named object.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Name of the referenced object.",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "Namespace of the referenced object",
                    "type": "string"
                  },
                  "policy": {
                    "description": "Policies for referencing.",
                    "type": "object",
                    "properties": {
                      "resolution": {
                        "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                        "type": "string",
                        "default": "Required",
                        "enum": [
                          "Required",
                          "Optional"
                        ]
                      },
                      "resolve": {
                        "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                        "type": "string",
                        "enum": [
                          "Always",
                          "IfNotPresent"
                        ]
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              }
            },
            "recordsSelector": {
              "description": "Selector for a list of EIP in ec2 to populate records.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "namespace": {
                  "description": "Namespace for the selector",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "setIdentifier": {
              "description": "Unique identifier to differentiate records with routing policies from one another. Required if using cidr_routing_policy, failover_routing_policy, geolocation_routing_policy,geoproximity_routing_policy, latency_routing_policy, multivalue_answer_routing_policy, or weighted_routing_policy.",
              "type": "string"
            },
            "ttl": {
              "description": "The TTL of the record.",
              "type": "number"
            },
            "type": {
              "description": "The record type. Valid values are A, AAAA, CAA, CNAME, DS, HTTPS, MX, NAPTR, NS, PTR, SOA, SPF, SRV, SSHFP, SVCB, TLSA, and TXT.",
              "type": "string"
            },
            "weightedRoutingPolicy": {
              "description": "A block indicating a weighted routing policy. Conflicts with any other routing policy. Documented below.",
              "type": "object",
              "properties": {
                "weight": {
                  "description": "A numeric value indicating the relative weight of the record. See http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html#routing-policy-weighted.",
                  "type": "number"
                }
              },
              "additionalProperties": false
            },
            "zoneId": {
              "description": "The ID of the hosted zone to contain this record.",
              "type": "string"
            },
            "zoneIdRef": {
              "description": "Reference to a Zone in route53 to populate zoneId.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referenced object",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "zoneIdSelector": {
              "description": "Selector for a Zone in route53 to populate zoneId.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "namespace": {
                  "description": "Namespace for the selector",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored\nunless the Management Policies feature flag is disabled.\nInitProvider holds the same fields as ForProvider, with the exception\nof Identifier and other resource reference fields. The fields that are\nin InitProvider are merged into ForProvider when the resource is created.\nThe same fields are also added to the terraform ignore_changes hook, to\navoid updating them after creation. This is useful for fields that are\nrequired on creation, but we do not desire to update them after creation,\nfor example because of an external controller is managing them, like an\nautoscaler.",
          "type": "object",
          "properties": {
            "alias": {
              "description": "An alias block. Conflicts with ttl \u0026 records.\nDocumented below.",
              "type": "object",
              "properties": {
                "evaluateTargetHealth": {
                  "description": "Set to true if you want Route 53 to determine whether to respond to DNS queries using this resource record set by checking the health of the resource record set. Some resources have special requirements, see related part of documentation.",
                  "type": "boolean"
                },
                "name": {
                  "description": "The name of the record.",
                  "type": "string"
                },
                "zoneId": {
                  "description": "The ID of the hosted zone to contain this record.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "allowOverwrite": {
              "description": "false by default. This configuration is not recommended for most environments.",
              "type": "boolean"
            },
            "cidrRoutingPolicy": {
              "description": "A block indicating a routing policy based on the IP network ranges of requestors. Conflicts with any other routing policy. Documented below.",
              "type": "object",
              "properties": {
                "collectionId": {
                  "description": "The CIDR collection ID. See the aws_route53_cidr_collection resource for more details.",
                  "type": "string"
                },
                "locationName": {
                  "description": "The CIDR collection location name. See the aws_route53_cidr_location resource for more details. A location_name with an asterisk \"*\" can be used to create a default CIDR record. collection_id is still required for default record.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "failoverRoutingPolicy": {
              "description": "A block indicating the routing behavior when associated health check fails. Conflicts with any other routing policy. Documented below.",
              "type": "object",
              "properties": {
                "type": {
                  "description": "The record type. Valid values are A, AAAA, CAA, CNAME, DS, HTTPS, MX, NAPTR, NS, PTR, SOA, SPF, SRV, SSHFP, SVCB, TLSA, and TXT.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "geolocationRoutingPolicy": {
              "description": "A block indicating a routing policy based on the geolocation of the requestor. Conflicts with any other routing policy. Documented below.",
              "type": "object",
              "properties": {
                "continent": {
                  "description": "A two-letter continent code. See http://docs.aws.amazon.com/Route53/latest/APIReference/API_GetGeoLocation.html for code details. Either continent or country must be specified.",
                  "type": "string"
                },
                "country": {
                  "description": "A two-character country code or * to indicate a default resource record set.",
                  "type": "string"
                },
                "subdivision": {
                  "description": "A subdivision code for a country.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "geoproximityRoutingPolicy": {
              "description": "A block indicating a routing policy based on the geoproximity of the requestor. Conflicts with any other routing policy. Documented below.",
              "type": "object",
              "properties": {
                "awsRegion": {
                  "description": "A AWS region where the resource is present.",
                  "type": "string"
                },
                "bias": {
                  "description": "Route more traffic or less traffic to the resource by specifying a value ranges between -90 to 90. See https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy-geoproximity.html for bias details.",
                  "type": "number"
                },
                "coordinates": {
                  "description": "Specify latitude and longitude for routing traffic to non-AWS resources.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "latitude": {
                        "type": "string"
                      },
                      "longitude": {
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "localZoneGroup": {
                  "description": "A AWS local zone group where the resource is present. See https://docs.aws.amazon.com/local-zones/latest/ug/available-local-zones.html for local zone group list.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "healthCheckId": {
              "description": "The health check the record should be associated with.",
              "type": "string"
            },
            "healthCheckIdRef": {
              "description": "Reference to a HealthCheck in route53 to populate healthCheckId.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referenced object",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "healthCheckIdSelector": {
              "description": "Selector for a HealthCheck in route53 to populate healthCheckId.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "namespace": {
                  "description": "Namespace for the selector",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "latencyRoutingPolicy": {
              "description": "A block indicating a routing policy based on the latency between the requestor and an AWS region. Conflicts with any other routing policy. Documented below.",
              "type": "object"
            },
            "multivalueAnswerRoutingPolicy": {
              "description": "Set to true to indicate a multivalue answer routing policy. Conflicts with any other routing policy.",
              "type": "boolean"
            },
            "name": {
              "description": "The name of the record.",
              "type": "string"
            },
            "records": {
              "description": "A string list of records.g., \"first255characters\\\"\\\"morecharacters\").",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-kubernetes-list-type": "set"
            },
            "recordsRefs": {
              "description": "References to EIP in ec2 to populate records.",
              "type": "array",
              "items": {
                "description": "A NamespacedReference to a named object.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Name of the referenced object.",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "Namespace of the referenced object",
                    "type": "string"
                  },
                  "policy": {
                    "description": "Policies for referencing.",
                    "type": "object",
                    "properties": {
                      "resolution": {
                        "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                        "type": "string",
                        "default": "Required",
                        "enum": [
                          "Required",
                          "Optional"
                        ]
                      },
                      "resolve": {
                        "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                        "type": "string",
                        "enum": [
                          "Always",
                          "IfNotPresent"
                        ]
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              }
            },
            "recordsSelector": {
              "description": "Selector for a list of EIP in ec2 to populate records.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "namespace": {
                  "description": "Namespace for the selector",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "setIdentifier": {
              "description": "Unique identifier to differentiate records with routing policies from one another. Required if using cidr_routing_policy, failover_routing_policy, geolocation_routing_policy,geoproximity_routing_policy, latency_routing_policy, multivalue_answer_routing_policy, or weighted_routing_policy.",
              "type": "string"
            },
            "ttl": {
              "description": "The TTL of the record.",
              "type": "number"
            },
            "type": {
              "description": "The record type. Valid values are A, AAAA, CAA, CNAME, DS, HTTPS, MX, NAPTR, NS, PTR, SOA, SPF, SRV, SSHFP, SVCB, TLSA, and TXT.",
              "type": "string"
            },
            "weightedRoutingPolicy": {
              "description": "A block indicating a weighted routing policy. Conflicts with any other routing policy. Documented below.",
              "type": "object",
              "properties": {
                "weight": {
                  "description": "A numeric value indicating the relative weight of the record. See http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html#routing-policy-weighted.",
                  "type": "number"
                }
              },
              "additionalProperties": false
            },
            "zoneId": {
              "description": "The ID of the hosted zone to contain this record.",
              "type": "string"
            },
            "zoneIdRef": {
              "description": "Reference to a Zone in route53 to populate zoneId.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referenced object",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "zoneIdSelector": {
              "description": "Selector for a Zone in route53 to populate zoneId.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "namespace": {
                  "description": "Namespace for the selector",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "managementPolicies": {
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out\nthrough a Crossplane feature flag.\nManagementPolicies specify the array of actions Crossplane is allowed to\ntake on the managed and external resources.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223\nand this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers\ncan take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to\ncreate, observe, update, and delete this managed resource should be\nconfigured.",
          "type": "object",
          "default": {
            "kind": "ClusterProviderConfig",
            "name": "default"
          },
          "required": [
            "kind",
            "name"
          ],
          "properties": {
            "kind": {
              "description": "Kind of the referenced object.",
              "type": "string"
            },
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a\nSecret to which any connection details for this managed resource should\nbe written. Connection details frequently include the endpoint, username,\nand password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false,
      "x-kubernetes-validations": [
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.name))",
          "message": "spec.forProvider.name is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.type))",
          "message": "spec.forProvider.type is a required parameter"
        }
      ]
    },
    "status": {
      "description": "RecordStatus defines the observed state of Record.",
      "type": "object",
      "properties": {
        "atProvider": {
          "type": "object",
          "properties": {
            "alias": {
              "description": "An alias block. Conflicts with ttl \u0026 records.\nDocumented below.",
              "type": "object",
              "properties": {
                "evaluateTargetHealth": {
                  "description": "Set to true if you want Route 53 to determine whether to respond to DNS queries using this resource record set by checking the health of the resource record set. Some resources have special requirements, see related part of documentation.",
                  "type": "boolean"
                },
                "name": {
                  "description": "The name of the record.",
                  "type": "string"
                },
                "zoneId": {
                  "description": "The ID of the hosted zone to contain this record.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "allowOverwrite": {
              "description": "false by default. This configuration is not recommended for most environments.",
              "type": "boolean"
            },
            "cidrRoutingPolicy": {
              "description": "A block indicating a routing policy based on the IP network ranges of requestors. Conflicts with any other routing policy. Documented below.",
              "type": "object",
              "properties": {
                "collectionId": {
                  "description": "The CIDR collection ID. See the aws_route53_cidr_collection resource for more details.",
                  "type": "string"
                },
                "locationName": {
                  "description": "The CIDR collection location name. See the aws_route53_cidr_location resource for more details. A location_name with an asterisk \"*\" can be used to create a default CIDR record. collection_id is still required for default record.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "failoverRoutingPolicy": {
              "description": "A block indicating the routing behavior when associated health check fails. Conflicts with any other routing policy. Documented below.",
              "type": "object",
              "properties": {
                "type": {
                  "description": "The record type. Valid values are A, AAAA, CAA, CNAME, DS, HTTPS, MX, NAPTR, NS, PTR, SOA, SPF, SRV, SSHFP, SVCB, TLSA, and TXT.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "fqdn": {
              "description": "FQDN built using the zone domain and name.",
              "type": "string"
            },
            "geolocationRoutingPolicy": {
              "description": "A block indicating a routing policy based on the geolocation of the requestor. Conflicts with any other routing policy. Documented below.",
              "type": "object",
              "properties": {
                "continent": {
                  "description": "A two-letter continent code. See http://docs.aws.amazon.com/Route53/latest/APIReference/API_GetGeoLocation.html for code details. Either continent or country must be specified.",
                  "type": "string"
                },
                "country": {
                  "description": "A two-character country code or * to indicate a default resource record set.",
                  "type": "string"
                },
                "subdivision": {
                  "description": "A subdivision code for a country.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "geoproximityRoutingPolicy": {
              "description": "A block indicating a routing policy based on the geoproximity of the requestor. Conflicts with any other routing policy. Documented below.",
              "type": "object",
              "properties": {
                "awsRegion": {
                  "description": "A AWS region where the resource is present.",
                  "type": "string"
                },
                "bias": {
                  "description": "Route more traffic or less traffic to the resource by specifying a value ranges between -90 to 90. See https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy-geoproximity.html for bias details.",
                  "type": "number"
                },
                "coordinates": {
                  "description": "Specify latitude and longitude for routing traffic to non-AWS resources.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "latitude": {
                        "type": "string"
                      },
                      "longitude": {
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "localZoneGroup": {
                  "description": "A AWS local zone group where the resource is present. See https://docs.aws.amazon.com/local-zones/latest/ug/available-local-zones.html for local zone group list.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "healthCheckId": {
              "description": "The health check the record should be associated with.",
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "latencyRoutingPolicy": {
              "description": "A block indicating a routing policy based on the latency between the requestor and an AWS region. Conflicts with any other routing policy. Documented below.",
              "type": "object",
              "properties": {
                "region": {
                  "description": "An AWS region from which to measure latency. See http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html#routing-policy-latency",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "multivalueAnswerRoutingPolicy": {
              "description": "Set to true to indicate a multivalue answer routing policy. Conflicts with any other routing policy.",
              "type": "boolean"
            },
            "name": {
              "description": "The name of the record.",
              "type": "string"
            },
            "records": {
              "description": "A string list of records.g., \"first255characters\\\"\\\"morecharacters\").",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-kubernetes-list-type": "set"
            },
            "setIdentifier": {
              "description": "Unique identifier to differentiate records with routing policies from one another. Required if using cidr_routing_policy, failover_routing_policy, geolocation_routing_policy,geoproximity_routing_policy, latency_routing_policy, multivalue_answer_routing_policy, or weighted_routing_policy.",
              "type": "string"
            },
            "ttl": {
              "description": "The TTL of the record.",
              "type": "number"
            },
            "type": {
              "description": "The record type. Valid values are A, AAAA, CAA, CNAME, DS, HTTPS, MX, NAPTR, NS, PTR, SOA, SPF, SRV, SSHFP, SVCB, TLSA, and TXT.",
              "type": "string"
            },
            "weightedRoutingPolicy": {
              "description": "A block indicating a weighted routing policy. Conflicts with any other routing policy. Documented below.",
              "type": "object",
              "properties": {
                "weight": {
                  "description": "A numeric value indicating the relative weight of the record. See http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html#routing-policy-weighted.",
                  "type": "number"
                }
              },
              "additionalProperties": false
            },
            "zoneId": {
              "description": "The ID of the hosted zone to contain this record.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "type": "array",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one\nstatus to another.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from\none status to another, if any.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to\na resource at any point in time.",
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest metadata.generation\nwhich resulted in either a ready state, or stalled due to error\nit can not recover from without human intervention.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    }
  }
}
