{
  "description": "ConfigConnector is the Schema for the configconnectors API",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "ConfigConnectorSpec defines the desired state of ConfigConnector",
      "type": "object",
      "anyOf": [
        {
          "oneOf": [
            {
              "required": [
                "credentialSecretName"
              ],
              "not": {
                "required": [
                  "googleServiceAccount"
                ]
              }
            },
            {
              "required": [
                "googleServiceAccount"
              ],
              "not": {
                "required": [
                  "credentialSecretName"
                ]
              }
            }
          ],
          "properties": {
            "mode": {
              "enum": [
                "cluster"
              ]
            }
          },
          "additionalProperties": false
        },
        {
          "not": {
            "anyOf": [
              {
                "required": [
                  "googleServiceAccount"
                ]
              },
              {
                "required": [
                  "credentialSecretName"
                ]
              }
            ]
          },
          "properties": {
            "mode": {
              "enum": [
                "namespaced"
              ]
            }
          },
          "additionalProperties": false
        }
      ],
      "properties": {
        "actuationMode": {
          "description": "The actuation mode of Config Connector controls how resources are actuated onto the cloud provider.\nThis can be either 'Reconciling' or 'Paused'.\nIn 'Paused', k8s resources are still reconciled with the api server but not actuated onto the cloud provider.\nIf Config Connector is running in 'namespaced' mode, then the value in ConfigConnectorContext (CCC) takes precedence.\nIf CCC doesn't define a value but ConfigConnector (CC) does, we defer to that value. Otherwise,\nthe default is 'Reconciling' where resources get actuated.",
          "type": "string",
          "enum": [
            "Reconciling",
            "Paused"
          ]
        },
        "credentialSecretName": {
          "description": "The Kubernetes secret that contains the Google Service Account Key's credentials to be used by ConfigConnector to authenticate with Google Cloud APIs. This field is used only when in cluster mode.\nIt's recommended to use `googleServiceAccount` when running ConfigConnector in Google Kubernetes Engine (GKE) clusters with Workload Identity enabled.\nThis field cannot be specified together with `googleServiceAccount`.",
          "type": "string"
        },
        "googleServiceAccount": {
          "description": "The Google Service Account to be used by Config Connector to authenticate with Google Cloud APIs. This field is used only when running in cluster mode with Workload Identity enabled.\nSee Google Kubernetes Engine (GKE) workload-identity (https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity) for details. This field cannot be specified together with `credentialSecretName`.\nFor namespaced mode, use `googleServiceAccount` in ConfigConnectorContext CRD to specify the Google Service Account to be used to authenticate with Google Cloud APIs per namespace.",
          "type": "string"
        },
        "mode": {
          "description": "The mode that Config Connector will run in. This can be either 'cluster' or 'namespaced'. The default is 'namespaced'.\nCluster mode uses a single Google Service Account to create and manage resources, even if you are using Config Connector to manage multiple Projects.\nYou must specify either `credentialSecretName` or `googleServiceAccount` when in cluster mode, but not both.\nNamespaced mode allows you to use different Google service accounts for different Projects.\nWhen in namespaced mode, you must create a ConfigConnectorContext object per namespace that you want to enable Config Connector in, and each must set `googleServiceAccount` to specify the Google Service Account to be used to authenticate with Google Cloud APIs for the namespace.",
          "type": "string",
          "enum": [
            "cluster",
            "namespaced"
          ]
        },
        "stateIntoSpec": {
          "description": "StateIntoSpec is the user override of the default value for the\n'cnrm.cloud.google.com/state-into-spec' annotation if the annotation is\nunset for a resource.\nIf the field is set in both the ConfigConnector object and the\nConfigConnectorContext object is in the namespaced mode, then the value\nin the ConfigConnectorContext object will be used.\n'Absent' means that unspecified fields in the resource spec stay\nunspecified after successful reconciliation.\n'Merge' means that unspecified fields in the resource spec are populated\nafter a successful reconciliation if those unspecified fields are\ncomputed/defaulted by the API. It is only applicable to resources\nsupporting the 'Merge' option.",
          "type": "string",
          "enum": [
            "Absent",
            "Merge"
          ]
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "ConfigConnectorStatus defines the observed state of ConfigConnector",
      "type": "object",
      "required": [
        "healthy",
        "observedGeneration"
      ],
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "healthy": {
          "type": "boolean"
        },
        "observedGeneration": {
          "type": "integer",
          "format": "int64",
          "default": 0
        },
        "phase": {
          "type": "string"
        }
      },
      "additionalProperties": false
    }
  }
}
