{
  "description": "ConfigRule is the Schema for the ConfigRules API. Provides an AWS Config Rule.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "ConfigRuleSpec defines the desired state of ConfigRule",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "forProvider": {
          "type": "object",
          "required": [
            "region"
          ],
          "properties": {
            "description": {
              "description": "Description of the rule",
              "type": "string"
            },
            "evaluationMode": {
              "description": "The modes the Config rule can be evaluated in. See Evaluation Mode for more details.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "mode": {
                    "description": "The mode of an evaluation.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "inputParameters": {
              "description": "A string in JSON format that is passed to the AWS Config rule Lambda function.",
              "type": "string"
            },
            "maximumExecutionFrequency": {
              "description": "The maximum frequency with which AWS Config runs evaluations for a rule.",
              "type": "string"
            },
            "region": {
              "description": "Region where this resource will be managed. Defaults to the Region set in the provider configuration.\nRegion is the region you'd like your resource to be created in.",
              "type": "string"
            },
            "scope": {
              "description": "Scope defines which resources can trigger an evaluation for the rule. See Scope Below.",
              "type": "object",
              "properties": {
                "complianceResourceId": {
                  "description": "The IDs of the only AWS resource that you want to trigger an evaluation for the rule. If you specify a resource ID, you must specify one resource type for compliance_resource_types.",
                  "type": "string"
                },
                "complianceResourceTypes": {
                  "description": "A list of resource types of only those AWS resources that you want to trigger an evaluation for the ruleE.g., AWS::EC2::Instance. You can only specify one type if you also specify a resource ID for compliance_resource_id. See relevant part of AWS Docs for available types.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "x-kubernetes-list-type": "set"
                },
                "tagKey": {
                  "description": "The tag key that is applied to only those AWS resources that you want you want to trigger an evaluation for the rule.",
                  "type": "string"
                },
                "tagValue": {
                  "description": "The tag value applied to only those AWS resources that you want to trigger an evaluation for the rule.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "source": {
              "description": "Source specifies the rule owner, the rule identifier, and the notifications that cause the function to evaluate your AWS resources. See Source Below.",
              "type": "object",
              "properties": {
                "customPolicyDetails": {
                  "description": "Provides the runtime system, policy definition, and whether debug logging is enabled. Required when owner is set to CUSTOM_POLICY. See Custom Policy Details Below.",
                  "type": "object",
                  "properties": {
                    "enableDebugLogDelivery": {
                      "description": "The boolean expression for enabling debug logging for your Config Custom Policy rule. The default value is false.",
                      "type": "boolean"
                    },
                    "policyRuntime": {
                      "description": "The runtime system for your Config Custom Policy rule. Guard is a policy-as-code language that allows you to write policies that are enforced by Config Custom Policy rules. For more information about Guard, see the Guard GitHub Repository.",
                      "type": "string"
                    },
                    "policyText": {
                      "description": "The policy definition containing the logic for your Config Custom Policy rule.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "owner": {
                  "description": "Indicates whether AWS or the customer owns and manages the AWS Config rule. Valid values are AWS, CUSTOM_LAMBDA or CUSTOM_POLICY. For more information about managed rules, see the AWS Config Managed Rules documentation. For more information about custom rules, see the AWS Config Custom Rules documentation. Custom Lambda Functions require permissions to allow the AWS Config service to invoke them, e.g., via the aws_lambda_permission resource.",
                  "type": "string"
                },
                "sourceDetail": {
                  "description": "Provides the source and type of the event that causes AWS Config to evaluate your AWS resources. Only valid if owner is CUSTOM_LAMBDA or CUSTOM_POLICY. See Source Detail Below.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "eventSource": {
                        "description": "The source of the event, such as an AWS service, that triggers AWS Config to evaluate your AWSresources. This defaults to aws.config and is the only valid value.",
                        "type": "string"
                      },
                      "maximumExecutionFrequency": {
                        "description": "The maximum frequency with which AWS Config runs evaluations for a rule.",
                        "type": "string"
                      },
                      "messageType": {
                        "description": "The type of notification that triggers AWS Config to run an evaluation for a rule. You canspecify the following notification types:",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "sourceIdentifier": {
                  "description": "For AWS Config managed rules, a predefined identifier, e.g IAM_PASSWORD_POLICY. For custom Lambda rules, the identifier is the ARN of the Lambda Function, such as arn:aws:lambda:us-east-1:123456789012:function:custom_rule_name or the arn attribute of the aws_lambda_function resource.",
                  "type": "string"
                },
                "sourceIdentifierRef": {
                  "description": "Reference to a Function in lambda to populate sourceIdentifier.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name of the referenced object.",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace of the referenced object",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for referencing.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "sourceIdentifierSelector": {
                  "description": "Selector for a Function in lambda to populate sourceIdentifier.",
                  "type": "object",
                  "properties": {
                    "matchControllerRef": {
                      "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                      "type": "boolean"
                    },
                    "matchLabels": {
                      "description": "MatchLabels ensures an object with matching labels is selected.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "namespace": {
                      "description": "Namespace for the selector",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for selection.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "tags": {
              "description": "Key-value map of resource tags.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            }
          },
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored\nunless the Management Policies feature flag is disabled.\nInitProvider holds the same fields as ForProvider, with the exception\nof Identifier and other resource reference fields. The fields that are\nin InitProvider are merged into ForProvider when the resource is created.\nThe same fields are also added to the terraform ignore_changes hook, to\navoid updating them after creation. This is useful for fields that are\nrequired on creation, but we do not desire to update them after creation,\nfor example because of an external controller is managing them, like an\nautoscaler.",
          "type": "object",
          "properties": {
            "description": {
              "description": "Description of the rule",
              "type": "string"
            },
            "evaluationMode": {
              "description": "The modes the Config rule can be evaluated in. See Evaluation Mode for more details.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "mode": {
                    "description": "The mode of an evaluation.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "inputParameters": {
              "description": "A string in JSON format that is passed to the AWS Config rule Lambda function.",
              "type": "string"
            },
            "maximumExecutionFrequency": {
              "description": "The maximum frequency with which AWS Config runs evaluations for a rule.",
              "type": "string"
            },
            "scope": {
              "description": "Scope defines which resources can trigger an evaluation for the rule. See Scope Below.",
              "type": "object",
              "properties": {
                "complianceResourceId": {
                  "description": "The IDs of the only AWS resource that you want to trigger an evaluation for the rule. If you specify a resource ID, you must specify one resource type for compliance_resource_types.",
                  "type": "string"
                },
                "complianceResourceTypes": {
                  "description": "A list of resource types of only those AWS resources that you want to trigger an evaluation for the ruleE.g., AWS::EC2::Instance. You can only specify one type if you also specify a resource ID for compliance_resource_id. See relevant part of AWS Docs for available types.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "x-kubernetes-list-type": "set"
                },
                "tagKey": {
                  "description": "The tag key that is applied to only those AWS resources that you want you want to trigger an evaluation for the rule.",
                  "type": "string"
                },
                "tagValue": {
                  "description": "The tag value applied to only those AWS resources that you want to trigger an evaluation for the rule.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "source": {
              "description": "Source specifies the rule owner, the rule identifier, and the notifications that cause the function to evaluate your AWS resources. See Source Below.",
              "type": "object",
              "properties": {
                "customPolicyDetails": {
                  "description": "Provides the runtime system, policy definition, and whether debug logging is enabled. Required when owner is set to CUSTOM_POLICY. See Custom Policy Details Below.",
                  "type": "object",
                  "properties": {
                    "enableDebugLogDelivery": {
                      "description": "The boolean expression for enabling debug logging for your Config Custom Policy rule. The default value is false.",
                      "type": "boolean"
                    },
                    "policyRuntime": {
                      "description": "The runtime system for your Config Custom Policy rule. Guard is a policy-as-code language that allows you to write policies that are enforced by Config Custom Policy rules. For more information about Guard, see the Guard GitHub Repository.",
                      "type": "string"
                    },
                    "policyText": {
                      "description": "The policy definition containing the logic for your Config Custom Policy rule.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "owner": {
                  "description": "Indicates whether AWS or the customer owns and manages the AWS Config rule. Valid values are AWS, CUSTOM_LAMBDA or CUSTOM_POLICY. For more information about managed rules, see the AWS Config Managed Rules documentation. For more information about custom rules, see the AWS Config Custom Rules documentation. Custom Lambda Functions require permissions to allow the AWS Config service to invoke them, e.g., via the aws_lambda_permission resource.",
                  "type": "string"
                },
                "sourceDetail": {
                  "description": "Provides the source and type of the event that causes AWS Config to evaluate your AWS resources. Only valid if owner is CUSTOM_LAMBDA or CUSTOM_POLICY. See Source Detail Below.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "eventSource": {
                        "description": "The source of the event, such as an AWS service, that triggers AWS Config to evaluate your AWSresources. This defaults to aws.config and is the only valid value.",
                        "type": "string"
                      },
                      "maximumExecutionFrequency": {
                        "description": "The maximum frequency with which AWS Config runs evaluations for a rule.",
                        "type": "string"
                      },
                      "messageType": {
                        "description": "The type of notification that triggers AWS Config to run an evaluation for a rule. You canspecify the following notification types:",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "sourceIdentifier": {
                  "description": "For AWS Config managed rules, a predefined identifier, e.g IAM_PASSWORD_POLICY. For custom Lambda rules, the identifier is the ARN of the Lambda Function, such as arn:aws:lambda:us-east-1:123456789012:function:custom_rule_name or the arn attribute of the aws_lambda_function resource.",
                  "type": "string"
                },
                "sourceIdentifierRef": {
                  "description": "Reference to a Function in lambda to populate sourceIdentifier.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name of the referenced object.",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace of the referenced object",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for referencing.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "sourceIdentifierSelector": {
                  "description": "Selector for a Function in lambda to populate sourceIdentifier.",
                  "type": "object",
                  "properties": {
                    "matchControllerRef": {
                      "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                      "type": "boolean"
                    },
                    "matchLabels": {
                      "description": "MatchLabels ensures an object with matching labels is selected.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "namespace": {
                      "description": "Namespace for the selector",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for selection.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "tags": {
              "description": "Key-value map of resource tags.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            }
          },
          "additionalProperties": false
        },
        "managementPolicies": {
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out\nthrough a Crossplane feature flag.\nManagementPolicies specify the array of actions Crossplane is allowed to\ntake on the managed and external resources.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223\nand this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers\ncan take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to\ncreate, observe, update, and delete this managed resource should be\nconfigured.",
          "type": "object",
          "default": {
            "kind": "ClusterProviderConfig",
            "name": "default"
          },
          "required": [
            "kind",
            "name"
          ],
          "properties": {
            "kind": {
              "description": "Kind of the referenced object.",
              "type": "string"
            },
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a\nSecret to which any connection details for this managed resource should\nbe written. Connection details frequently include the endpoint, username,\nand password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false,
      "x-kubernetes-validations": [
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.source) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.source))",
          "message": "spec.forProvider.source is a required parameter"
        }
      ]
    },
    "status": {
      "description": "ConfigRuleStatus defines the observed state of ConfigRule.",
      "type": "object",
      "properties": {
        "atProvider": {
          "type": "object",
          "properties": {
            "arn": {
              "description": "The ARN of the config rule",
              "type": "string"
            },
            "description": {
              "description": "Description of the rule",
              "type": "string"
            },
            "evaluationMode": {
              "description": "The modes the Config rule can be evaluated in. See Evaluation Mode for more details.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "mode": {
                    "description": "The mode of an evaluation.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "id": {
              "type": "string"
            },
            "inputParameters": {
              "description": "A string in JSON format that is passed to the AWS Config rule Lambda function.",
              "type": "string"
            },
            "maximumExecutionFrequency": {
              "description": "The maximum frequency with which AWS Config runs evaluations for a rule.",
              "type": "string"
            },
            "region": {
              "description": "Region where this resource will be managed. Defaults to the Region set in the provider configuration.\nRegion is the region you'd like your resource to be created in.",
              "type": "string"
            },
            "ruleId": {
              "description": "The ID of the config rule",
              "type": "string"
            },
            "scope": {
              "description": "Scope defines which resources can trigger an evaluation for the rule. See Scope Below.",
              "type": "object",
              "properties": {
                "complianceResourceId": {
                  "description": "The IDs of the only AWS resource that you want to trigger an evaluation for the rule. If you specify a resource ID, you must specify one resource type for compliance_resource_types.",
                  "type": "string"
                },
                "complianceResourceTypes": {
                  "description": "A list of resource types of only those AWS resources that you want to trigger an evaluation for the ruleE.g., AWS::EC2::Instance. You can only specify one type if you also specify a resource ID for compliance_resource_id. See relevant part of AWS Docs for available types.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "x-kubernetes-list-type": "set"
                },
                "tagKey": {
                  "description": "The tag key that is applied to only those AWS resources that you want you want to trigger an evaluation for the rule.",
                  "type": "string"
                },
                "tagValue": {
                  "description": "The tag value applied to only those AWS resources that you want to trigger an evaluation for the rule.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "source": {
              "description": "Source specifies the rule owner, the rule identifier, and the notifications that cause the function to evaluate your AWS resources. See Source Below.",
              "type": "object",
              "properties": {
                "customPolicyDetails": {
                  "description": "Provides the runtime system, policy definition, and whether debug logging is enabled. Required when owner is set to CUSTOM_POLICY. See Custom Policy Details Below.",
                  "type": "object",
                  "properties": {
                    "enableDebugLogDelivery": {
                      "description": "The boolean expression for enabling debug logging for your Config Custom Policy rule. The default value is false.",
                      "type": "boolean"
                    },
                    "policyRuntime": {
                      "description": "The runtime system for your Config Custom Policy rule. Guard is a policy-as-code language that allows you to write policies that are enforced by Config Custom Policy rules. For more information about Guard, see the Guard GitHub Repository.",
                      "type": "string"
                    },
                    "policyText": {
                      "description": "The policy definition containing the logic for your Config Custom Policy rule.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "owner": {
                  "description": "Indicates whether AWS or the customer owns and manages the AWS Config rule. Valid values are AWS, CUSTOM_LAMBDA or CUSTOM_POLICY. For more information about managed rules, see the AWS Config Managed Rules documentation. For more information about custom rules, see the AWS Config Custom Rules documentation. Custom Lambda Functions require permissions to allow the AWS Config service to invoke them, e.g., via the aws_lambda_permission resource.",
                  "type": "string"
                },
                "sourceDetail": {
                  "description": "Provides the source and type of the event that causes AWS Config to evaluate your AWS resources. Only valid if owner is CUSTOM_LAMBDA or CUSTOM_POLICY. See Source Detail Below.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "eventSource": {
                        "description": "The source of the event, such as an AWS service, that triggers AWS Config to evaluate your AWSresources. This defaults to aws.config and is the only valid value.",
                        "type": "string"
                      },
                      "maximumExecutionFrequency": {
                        "description": "The maximum frequency with which AWS Config runs evaluations for a rule.",
                        "type": "string"
                      },
                      "messageType": {
                        "description": "The type of notification that triggers AWS Config to run an evaluation for a rule. You canspecify the following notification types:",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "sourceIdentifier": {
                  "description": "For AWS Config managed rules, a predefined identifier, e.g IAM_PASSWORD_POLICY. For custom Lambda rules, the identifier is the ARN of the Lambda Function, such as arn:aws:lambda:us-east-1:123456789012:function:custom_rule_name or the arn attribute of the aws_lambda_function resource.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "tags": {
              "description": "Key-value map of resource tags.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "tagsAll": {
              "description": "A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            }
          },
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "type": "array",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one\nstatus to another.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from\none status to another, if any.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to\na resource at any point in time.",
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest metadata.generation\nwhich resulted in either a ready state, or stalled due to error\nit can not recover from without human intervention.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    }
  }
}
