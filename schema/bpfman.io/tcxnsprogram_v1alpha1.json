{
  "description": "TcxNsProgram is the Schema for the TcxNsProgram API",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "TcxNsProgramSpec defines the desired state of TcxNsProgram",
      "type": "object",
      "required": [
        "bpffunctionname",
        "bytecode",
        "containers",
        "direction",
        "interfaceselector",
        "nodeselector",
        "priority"
      ],
      "properties": {
        "bpffunctionname": {
          "description": "BpfFunctionName is the name of the function that is the entry point for the BPF\nprogram",
          "type": "string"
        },
        "bytecode": {
          "description": "Bytecode configures where the bpf program's bytecode should be loaded\nfrom.",
          "type": "object",
          "properties": {
            "image": {
              "description": "Image used to specify a bytecode container image.",
              "type": "object",
              "required": [
                "url"
              ],
              "properties": {
                "imagepullpolicy": {
                  "description": "PullPolicy describes a policy for if/when to pull a bytecode image. Defaults to IfNotPresent.",
                  "type": "string",
                  "default": "IfNotPresent",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                "imagepullsecret": {
                  "description": "ImagePullSecret is the name of the secret bpfman should use to get remote image\nrepository secrets.",
                  "type": "object",
                  "required": [
                    "name",
                    "namespace"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name of the secret which contains the credentials to access the image repository.",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace of the secret which contains the credentials to access the image repository.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "url": {
                  "description": "Valid container image URL used to reference a remote bytecode image.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "path": {
              "description": "Path is used to specify a bytecode object via filepath.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "containers": {
          "description": "Containers identifies the set of containers in which to attach the eBPF\nprogram.",
          "type": "object",
          "required": [
            "pods"
          ],
          "properties": {
            "containernames": {
              "description": "Name(s) of container(s).  If none are specified, all containers in the\npod are selected.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "pods": {
              "description": "Target pods. This field must be specified, to select all pods use\nstandard metav1.LabelSelector semantics and make it empty.",
              "type": "object",
              "properties": {
                "matchExpressions": {
                  "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                  "type": "array",
                  "items": {
                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                    "type": "object",
                    "required": [
                      "key",
                      "operator"
                    ],
                    "properties": {
                      "key": {
                        "description": "key is the label key that the selector applies to.",
                        "type": "string"
                      },
                      "operator": {
                        "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                        "type": "string"
                      },
                      "values": {
                        "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "x-kubernetes-list-type": "atomic"
                      }
                    },
                    "additionalProperties": false
                  },
                  "x-kubernetes-list-type": "atomic"
                },
                "matchLabels": {
                  "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              },
              "additionalProperties": false,
              "x-kubernetes-map-type": "atomic"
            }
          },
          "additionalProperties": false
        },
        "direction": {
          "description": "Direction specifies the direction of traffic the tcx program should\nattach to for a given network device.",
          "type": "string",
          "enum": [
            "ingress",
            "egress"
          ]
        },
        "globaldata": {
          "description": "GlobalData allows the user to set global variables when the program is loaded\nwith an array of raw bytes. This is a very low level primitive. The caller\nis responsible for formatting the byte string appropriately considering\nsuch things as size, endianness, alignment and packing of data structures.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "byte"
          }
        },
        "interfaceselector": {
          "description": "Selector to determine the network interface (or interfaces)",
          "type": "object",
          "maxProperties": 1,
          "minProperties": 1,
          "properties": {
            "interfaces": {
              "description": "Interfaces refers to a list of network interfaces to attach the BPF\nprogram to.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "primarynodeinterface": {
              "description": "Attach BPF program to the primary interface on the node. Only 'true' accepted.",
              "type": "boolean"
            }
          },
          "additionalProperties": false
        },
        "mapownerselector": {
          "description": "MapOwnerSelector is used to select the loaded eBPF program this eBPF program\nwill share a map with. The value is a label applied to the BpfProgram to select.\nThe selector must resolve to exactly one instance of a BpfProgram on a given node\nor the eBPF program will not load.",
          "type": "object",
          "properties": {
            "matchExpressions": {
              "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
              "type": "array",
              "items": {
                "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                "type": "object",
                "required": [
                  "key",
                  "operator"
                ],
                "properties": {
                  "key": {
                    "description": "key is the label key that the selector applies to.",
                    "type": "string"
                  },
                  "operator": {
                    "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                    "type": "string"
                  },
                  "values": {
                    "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "x-kubernetes-list-type": "atomic"
                  }
                },
                "additionalProperties": false
              },
              "x-kubernetes-list-type": "atomic"
            },
            "matchLabels": {
              "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false,
          "x-kubernetes-map-type": "atomic"
        },
        "nodeselector": {
          "description": "NodeSelector allows the user to specify which nodes to deploy the\nbpf program to. This field must be specified, to select all nodes\nuse standard metav1.LabelSelector semantics and make it empty.",
          "type": "object",
          "properties": {
            "matchExpressions": {
              "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
              "type": "array",
              "items": {
                "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                "type": "object",
                "required": [
                  "key",
                  "operator"
                ],
                "properties": {
                  "key": {
                    "description": "key is the label key that the selector applies to.",
                    "type": "string"
                  },
                  "operator": {
                    "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                    "type": "string"
                  },
                  "values": {
                    "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "x-kubernetes-list-type": "atomic"
                  }
                },
                "additionalProperties": false
              },
              "x-kubernetes-list-type": "atomic"
            },
            "matchLabels": {
              "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false,
          "x-kubernetes-map-type": "atomic"
        },
        "priority": {
          "description": "Priority specifies the priority of the tc program in relation to\nother programs of the same type with the same attach point. It is a value\nfrom 0 to 1000 where lower values have higher precedence.",
          "type": "integer",
          "format": "int32",
          "maximum": 1000,
          "minimum": 0
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "TcxProgramStatus defines the observed state of TcxProgram",
      "type": "object",
      "properties": {
        "conditions": {
          "description": "Conditions houses the global cluster state for the eBPFProgram. The explicit\ncondition types are defined internally.",
          "type": "array",
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource.\n---\nThis struct is intended for direct use as an array at the field path .status.conditions.  For example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the observations of a foo's current state.\n\t    // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    // +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t    // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t    // other fields\n\t}",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                "type": "string",
                "maxLength": 32768
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64",
                "minimum": 0
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                "type": "string",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "type": "string",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ]
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase.\n---\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions can be\nuseful (see .node.status.conditions), the ability to deconflict is important.\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                "type": "string",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        }
      },
      "additionalProperties": false
    }
  }
}
