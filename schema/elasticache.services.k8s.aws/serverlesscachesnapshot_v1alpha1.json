{
  "description": "ServerlessCacheSnapshot is the Schema for the ServerlessCacheSnapshots API",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "ServerlessCacheSnapshotSpec defines the desired state of ServerlessCacheSnapshot.\n\nThe resource representing a serverless cache snapshot. Available for Valkey,\nRedis OSS and Serverless Memcached only.",
      "type": "object",
      "required": [
        "serverlessCacheSnapshotName"
      ],
      "properties": {
        "kmsKeyID": {
          "description": "The ID of the KMS key used to encrypt the snapshot. Available for Valkey,\nRedis OSS and Serverless Memcached only. Default: NULL",
          "type": "string",
          "x-kubernetes-validations": [
            {
              "rule": "self == oldSelf",
              "message": "Value is immutable once set"
            }
          ]
        },
        "kmsKeyRef": {
          "description": "AWSResourceReferenceWrapper provides a wrapper around *AWSResourceReference\ntype to provide more user friendly syntax for references using 'from' field\nEx:\nAPIIDRef:\n\n\tfrom:\n\t  name: my-api",
          "type": "object",
          "properties": {
            "from": {
              "description": "AWSResourceReference provides all the values necessary to reference another\nk8s resource for finding the identifier(Id/ARN/Name)",
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "namespace": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "serverlessCacheName": {
          "description": "The name of an existing serverless cache. The snapshot is created from this\ncache. Available for Valkey, Redis OSS and Serverless Memcached only.",
          "type": "string",
          "x-kubernetes-validations": [
            {
              "rule": "self == oldSelf",
              "message": "Value is immutable once set"
            }
          ]
        },
        "serverlessCacheRef": {
          "description": "AWSResourceReferenceWrapper provides a wrapper around *AWSResourceReference\ntype to provide more user friendly syntax for references using 'from' field\nEx:\nAPIIDRef:\n\n\tfrom:\n\t  name: my-api",
          "type": "object",
          "properties": {
            "from": {
              "description": "AWSResourceReference provides all the values necessary to reference another\nk8s resource for finding the identifier(Id/ARN/Name)",
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "namespace": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "serverlessCacheSnapshotName": {
          "description": "The name for the snapshot being created. Must be unique for the customer\naccount. Available for Valkey, Redis OSS and Serverless Memcached only. Must\nbe between 1 and 255 characters.",
          "type": "string",
          "x-kubernetes-validations": [
            {
              "rule": "self == oldSelf",
              "message": "Value is immutable once set"
            }
          ]
        },
        "tags": {
          "description": "A list of tags to be added to the snapshot resource. A tag is a key-value\npair. Available for Valkey, Redis OSS and Serverless Memcached only.",
          "type": "array",
          "items": {
            "description": "A tag that can be added to an ElastiCache cluster or replication group. Tags\nare composed of a Key/Value pair. You can use tags to categorize and track\nall your ElastiCache resources, with the exception of global replication\ngroup. When you add or remove tags on replication groups, those actions will\nbe replicated to all nodes in the replication group. A tag with a null Value\nis permitted.",
            "type": "object",
            "properties": {
              "key": {
                "type": "string"
              },
              "value": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "ServerlessCacheSnapshotStatus defines the observed state of ServerlessCacheSnapshot",
      "type": "object",
      "properties": {
        "ackResourceMetadata": {
          "description": "All CRs managed by ACK have a common `Status.ACKResourceMetadata` member\nthat is used to contain resource sync state, account ownership,\nconstructed ARN for the resource",
          "type": "object",
          "required": [
            "ownerAccountID",
            "region"
          ],
          "properties": {
            "arn": {
              "description": "ARN is the Amazon Resource Name for the resource. This is a\nglobally-unique identifier and is set only by the ACK service controller\nonce the controller has orchestrated the creation of the resource OR\nwhen it has verified that an \"adopted\" resource (a resource where the\nARN annotation was set by the Kubernetes user on the CR) exists and\nmatches the supplied CR's Spec field values.\nhttps://github.com/aws/aws-controllers-k8s/issues/270",
              "type": "string"
            },
            "ownerAccountID": {
              "description": "OwnerAccountID is the AWS Account ID of the account that owns the\nbackend AWS service API resource.",
              "type": "string"
            },
            "region": {
              "description": "Region is the AWS region in which the resource exists or will exist.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "bytesUsedForCache": {
          "description": "The total size of a serverless cache snapshot, in bytes. Available for Valkey,\nRedis OSS and Serverless Memcached only.",
          "type": "string"
        },
        "conditions": {
          "description": "All CRs managed by ACK have a common `Status.Conditions` member that\ncontains a collection of `ackv1alpha1.Condition` objects that describe\nthe various terminal states of the CR and its backend AWS service API\nresource",
          "type": "array",
          "items": {
            "description": "Condition is the common struct used by all CRDs managed by ACK service\ncontrollers to indicate terminal states  of the CR and its backend AWS\nservice API resource",
            "type": "object",
            "required": [
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "Last time the condition transitioned from one status to another.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "A human readable message indicating details about the transition.",
                "type": "string"
              },
              "reason": {
                "description": "The reason for the condition's last transition.",
                "type": "string"
              },
              "status": {
                "description": "Status of the condition, one of True, False, Unknown.",
                "type": "string"
              },
              "type": {
                "description": "Type is the type of the Condition",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "createTime": {
          "description": "The date and time that the source serverless cache's metadata and cache data\nset was obtained for the snapshot. Available for Valkey, Redis OSS and Serverless\nMemcached only.",
          "type": "string",
          "format": "date-time"
        },
        "expiryTime": {
          "description": "The time that the serverless cache snapshot will expire. Available for Valkey,\nRedis OSS and Serverless Memcached only.",
          "type": "string",
          "format": "date-time"
        },
        "serverlessCacheConfiguration": {
          "description": "The configuration of the serverless cache, at the time the snapshot was taken.\nAvailable for Valkey, Redis OSS and Serverless Memcached only.",
          "type": "object",
          "properties": {
            "engine": {
              "type": "string"
            },
            "majorEngineVersion": {
              "type": "string"
            },
            "serverlessCacheName": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "snapshotType": {
          "description": "The type of snapshot of serverless cache. Available for Valkey, Redis OSS\nand Serverless Memcached only.",
          "type": "string"
        },
        "status": {
          "description": "The current status of the serverless cache. Available for Valkey, Redis OSS\nand Serverless Memcached only.",
          "type": "string"
        }
      },
      "additionalProperties": false
    }
  }
}
