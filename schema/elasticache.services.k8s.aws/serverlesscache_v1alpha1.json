{
  "description": "ServerlessCache is the Schema for the ServerlessCaches API",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "ServerlessCacheSpec defines the desired state of ServerlessCache.\n\nThe resource representing a serverless cache.",
      "type": "object",
      "required": [
        "engine",
        "serverlessCacheName"
      ],
      "properties": {
        "cacheUsageLimits": {
          "description": "Sets the cache usage limits for storage and ElastiCache Processing Units\nfor the cache.",
          "type": "object",
          "properties": {
            "dataStorage": {
              "description": "The data storage limit.",
              "type": "object",
              "properties": {
                "maximum": {
                  "type": "integer",
                  "format": "int64"
                },
                "minimum": {
                  "type": "integer",
                  "format": "int64"
                },
                "unit": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "eCPUPerSecond": {
              "description": "The configuration for the number of ElastiCache Processing Units (ECPU) the\ncache can consume per second.",
              "type": "object",
              "properties": {
                "maximum": {
                  "type": "integer",
                  "format": "int64"
                },
                "minimum": {
                  "type": "integer",
                  "format": "int64"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "dailySnapshotTime": {
          "description": "The daily time that snapshots will be created from the new serverless cache.\nBy default this number is populated with 0, i.e. no snapshots will be created\non an automatic daily basis. Available for Valkey, Redis OSS and Serverless\nMemcached only.",
          "type": "string"
        },
        "description": {
          "description": "User-provided description for the serverless cache. The default is NULL,\ni.e. if no description is provided then an empty string will be returned.\nThe maximum length is 255 characters.",
          "type": "string"
        },
        "engine": {
          "description": "The name of the cache engine to be used for creating the serverless cache.",
          "type": "string"
        },
        "kmsKeyID": {
          "description": "ARN of the customer managed key for encrypting the data at rest. If no KMS\nkey is provided, a default service key is used.",
          "type": "string"
        },
        "majorEngineVersion": {
          "description": "The version of the cache engine that will be used to create the serverless\ncache.",
          "type": "string"
        },
        "securityGroupIDs": {
          "description": "A list of the one or more VPC security groups to be associated with the serverless\ncache. The security group will authorize traffic access for the VPC end-point\n(private-link). If no other information is given this will be the VPCâ€™s\nDefault Security Group that is associated with the cluster VPC end-point.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "securityGroupRefs": {
          "type": "array",
          "items": {
            "description": "AWSResourceReferenceWrapper provides a wrapper around *AWSResourceReference\ntype to provide more user friendly syntax for references using 'from' field\nEx:\nAPIIDRef:\n\n\tfrom:\n\t  name: my-api",
            "type": "object",
            "properties": {
              "from": {
                "description": "AWSResourceReference provides all the values necessary to reference another\nk8s resource for finding the identifier(Id/ARN/Name)",
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "namespace": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        },
        "serverlessCacheName": {
          "description": "User-provided identifier for the serverless cache. This parameter is stored\nas a lowercase string.",
          "type": "string"
        },
        "snapshotARNsToRestore": {
          "description": "The ARN(s) of the snapshot that the new serverless cache will be created\nfrom. Available for Valkey, Redis OSS and Serverless Memcached only.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "snapshotRetentionLimit": {
          "description": "The number of snapshots that will be retained for the serverless cache that\nis being created. As new snapshots beyond this limit are added, the oldest\nsnapshots will be deleted on a rolling basis. Available for Valkey, Redis\nOSS and Serverless Memcached only.",
          "type": "integer",
          "format": "int64"
        },
        "subnetIDs": {
          "description": "A list of the identifiers of the subnets where the VPC endpoint for the serverless\ncache will be deployed. All the subnetIds must belong to the same VPC.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "subnetRefs": {
          "type": "array",
          "items": {
            "description": "AWSResourceReferenceWrapper provides a wrapper around *AWSResourceReference\ntype to provide more user friendly syntax for references using 'from' field\nEx:\nAPIIDRef:\n\n\tfrom:\n\t  name: my-api",
            "type": "object",
            "properties": {
              "from": {
                "description": "AWSResourceReference provides all the values necessary to reference another\nk8s resource for finding the identifier(Id/ARN/Name)",
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "namespace": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        },
        "tags": {
          "description": "The list of tags (key, value) pairs to be added to the serverless cache resource.\nDefault is NULL.",
          "type": "array",
          "items": {
            "description": "A tag that can be added to an ElastiCache cluster or replication group. Tags\nare composed of a Key/Value pair. You can use tags to categorize and track\nall your ElastiCache resources, with the exception of global replication\ngroup. When you add or remove tags on replication groups, those actions will\nbe replicated to all nodes in the replication group. A tag with a null Value\nis permitted.",
            "type": "object",
            "properties": {
              "key": {
                "type": "string"
              },
              "value": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "userGroupID": {
          "description": "The identifier of the UserGroup to be associated with the serverless cache.\nAvailable for Valkey and Redis OSS only. Default is NULL.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "ServerlessCacheStatus defines the observed state of ServerlessCache",
      "type": "object",
      "properties": {
        "ackResourceMetadata": {
          "description": "All CRs managed by ACK have a common `Status.ACKResourceMetadata` member\nthat is used to contain resource sync state, account ownership,\nconstructed ARN for the resource",
          "type": "object",
          "required": [
            "ownerAccountID",
            "region"
          ],
          "properties": {
            "arn": {
              "description": "ARN is the Amazon Resource Name for the resource. This is a\nglobally-unique identifier and is set only by the ACK service controller\nonce the controller has orchestrated the creation of the resource OR\nwhen it has verified that an \"adopted\" resource (a resource where the\nARN annotation was set by the Kubernetes user on the CR) exists and\nmatches the supplied CR's Spec field values.\nhttps://github.com/aws/aws-controllers-k8s/issues/270",
              "type": "string"
            },
            "ownerAccountID": {
              "description": "OwnerAccountID is the AWS Account ID of the account that owns the\nbackend AWS service API resource.",
              "type": "string"
            },
            "region": {
              "description": "Region is the AWS region in which the resource exists or will exist.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "conditions": {
          "description": "All CRs managed by ACK have a common `Status.Conditions` member that\ncontains a collection of `ackv1alpha1.Condition` objects that describe\nthe various terminal states of the CR and its backend AWS service API\nresource",
          "type": "array",
          "items": {
            "description": "Condition is the common struct used by all CRDs managed by ACK service\ncontrollers to indicate terminal states  of the CR and its backend AWS\nservice API resource",
            "type": "object",
            "required": [
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "Last time the condition transitioned from one status to another.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "A human readable message indicating details about the transition.",
                "type": "string"
              },
              "reason": {
                "description": "The reason for the condition's last transition.",
                "type": "string"
              },
              "status": {
                "description": "Status of the condition, one of True, False, Unknown.",
                "type": "string"
              },
              "type": {
                "description": "Type is the type of the Condition",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "createTime": {
          "description": "When the serverless cache was created.",
          "type": "string",
          "format": "date-time"
        },
        "endpoint": {
          "description": "Represents the information required for client programs to connect to a cache\nnode. This value is read-only.",
          "type": "object",
          "properties": {
            "address": {
              "type": "string"
            },
            "port": {
              "type": "integer",
              "format": "int64"
            }
          },
          "additionalProperties": false
        },
        "fullEngineVersion": {
          "description": "The name and version number of the engine the serverless cache is compatible\nwith.",
          "type": "string"
        },
        "readerEndpoint": {
          "description": "Represents the information required for client programs to connect to a cache\nnode. This value is read-only.",
          "type": "object",
          "properties": {
            "address": {
              "type": "string"
            },
            "port": {
              "type": "integer",
              "format": "int64"
            }
          },
          "additionalProperties": false
        },
        "status": {
          "description": "The current status of the serverless cache. The allowed values are CREATING,\nAVAILABLE, DELETING, CREATE-FAILED and MODIFYING.",
          "type": "string"
        }
      },
      "additionalProperties": false
    }
  }
}
