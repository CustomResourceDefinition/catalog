{
  "description": "Broker is the Schema for the Brokers API. Manages an AWS MQ broker",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "BrokerSpec defines the desired state of Broker",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "forProvider": {
          "type": "object",
          "required": [
            "region"
          ],
          "properties": {
            "applyImmediately": {
              "description": "Whether to apply broker modifications immediately. Default is false.",
              "type": "boolean"
            },
            "authenticationStrategy": {
              "description": "Authentication strategy used to secure the broker. Valid values are simple and ldap. ldap is not supported for engine_type RabbitMQ.",
              "type": "string"
            },
            "autoMinorVersionUpgrade": {
              "description": "Whether to automatically upgrade to new minor versions of brokers as Amazon MQ makes releases available.",
              "type": "boolean"
            },
            "brokerName": {
              "description": "Name of the broker.",
              "type": "string"
            },
            "configuration": {
              "description": "Configuration block for broker configuration. Applies to engine_type of ActiveMQ and RabbitMQ only. Detailed below.",
              "type": "object",
              "properties": {
                "id": {
                  "description": "Configuration ID.",
                  "type": "string"
                },
                "idRef": {
                  "description": "Reference to a Configuration in mq to populate id.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name of the referenced object.",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace of the referenced object",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for referencing.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "idSelector": {
                  "description": "Selector for a Configuration in mq to populate id.",
                  "type": "object",
                  "properties": {
                    "matchControllerRef": {
                      "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                      "type": "boolean"
                    },
                    "matchLabels": {
                      "description": "MatchLabels ensures an object with matching labels is selected.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "namespace": {
                      "description": "Namespace for the selector",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for selection.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "revision": {
                  "description": "Revision of the Configuration.",
                  "type": "number"
                }
              },
              "additionalProperties": false
            },
            "dataReplicationMode": {
              "description": "Whether this broker is part of a data replication pair. Valid values are CRDR and NONE.",
              "type": "string"
            },
            "dataReplicationPrimaryBrokerArn": {
              "description": "ARN of the primary broker used to replicate data in a data replication pair. Required when data_replication_mode is CRDR.",
              "type": "string"
            },
            "dataReplicationPrimaryBrokerArnRef": {
              "description": "Reference to a Broker in mq to populate dataReplicationPrimaryBrokerArn.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referenced object",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "dataReplicationPrimaryBrokerArnSelector": {
              "description": "Selector for a Broker in mq to populate dataReplicationPrimaryBrokerArn.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "namespace": {
                  "description": "Namespace for the selector",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "deploymentMode": {
              "description": "Deployment mode of the broker. Valid values are SINGLE_INSTANCE, ACTIVE_STANDBY_MULTI_AZ, and CLUSTER_MULTI_AZ. Default is SINGLE_INSTANCE.",
              "type": "string"
            },
            "encryptionOptions": {
              "description": "Configuration block containing encryption options. Detailed below.",
              "type": "object",
              "properties": {
                "kmsKeyId": {
                  "description": "ARN of KMS CMK to use for encryption at rest. Requires setting use_aws_owned_key to false. To perform drift detection when AWS-managed CMKs or customer-managed CMKs are in use, this value must be configured.",
                  "type": "string"
                },
                "useAwsOwnedKey": {
                  "description": "Whether to enable an AWS-owned KMS CMK not in your account. Defaults to true. Setting to false without configuring kms_key_id creates an AWS-managed CMK aliased to aws/mq in your account.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "engineType": {
              "description": "Type of broker engine. Valid values are ActiveMQ and RabbitMQ.",
              "type": "string"
            },
            "engineVersion": {
              "description": "Version of the broker engine.",
              "type": "string"
            },
            "hostInstanceType": {
              "description": "Broker's instance type. For example, mq.t3.micro, mq.m5.large.",
              "type": "string"
            },
            "ldapServerMetadata": {
              "description": "Configuration block for the LDAP server used to authenticate and authorize connections. Not supported for engine_type RabbitMQ. Detailed below.",
              "type": "object",
              "properties": {
                "hosts": {
                  "description": "List of fully qualified domain names of the LDAP server and optional failover server.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "roleBase": {
                  "description": "Fully qualified name of the directory to search for a user's groups.",
                  "type": "string"
                },
                "roleName": {
                  "description": "LDAP attribute that identifies the group name attribute in the object returned from the group membership query.",
                  "type": "string"
                },
                "roleSearchMatching": {
                  "description": "Search criteria for groups.",
                  "type": "string"
                },
                "roleSearchSubtree": {
                  "description": "Whether the directory search scope is the entire sub-tree.",
                  "type": "boolean"
                },
                "serviceAccountPasswordSecretRef": {
                  "description": "Service account password.",
                  "type": "object",
                  "required": [
                    "key",
                    "name"
                  ],
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the secret.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "serviceAccountUsername": {
                  "description": "Service account username.",
                  "type": "string"
                },
                "userBase": {
                  "description": "Fully qualified name of the directory where you want to search for users.",
                  "type": "string"
                },
                "userRoleName": {
                  "description": "Name of the LDAP attribute for the user group membership.",
                  "type": "string"
                },
                "userSearchMatching": {
                  "description": "Search criteria for users.",
                  "type": "string"
                },
                "userSearchSubtree": {
                  "description": "Whether the directory search scope is the entire sub-tree.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "logs": {
              "description": "Configuration block for the logging configuration. Detailed below.",
              "type": "object",
              "properties": {
                "audit": {
                  "description": "Whether to enable audit logging. Only possible for engine_type of ActiveMQ. Logs user management actions via JMX or ActiveMQ Web Console. Defaults to false.",
                  "type": "string"
                },
                "general": {
                  "description": "Whether to enable general logging via CloudWatch. Defaults to false.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "maintenanceWindowStartTime": {
              "description": "Configuration block for the maintenance window start time. Detailed below.",
              "type": "object",
              "properties": {
                "dayOfWeek": {
                  "description": "Day of the week, e.g., MONDAY, TUESDAY, or WEDNESDAY.",
                  "type": "string"
                },
                "timeOfDay": {
                  "description": "Time, in 24-hour format, e.g., 02:00.",
                  "type": "string"
                },
                "timeZone": {
                  "description": "Time zone in either the Country/City format or the UTC offset format, e.g., CET.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "publiclyAccessible": {
              "description": "Whether to enable connections from applications outside of the VPC that hosts the broker's subnets.",
              "type": "boolean"
            },
            "region": {
              "description": "Region where this resource will be managed. Defaults to the Region set in the provider configuration.\nRegion is the region you'd like your resource to be created in.",
              "type": "string"
            },
            "securityGroupRefs": {
              "description": "References to SecurityGroup in ec2 to populate securityGroups.",
              "type": "array",
              "items": {
                "description": "A NamespacedReference to a named object.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Name of the referenced object.",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "Namespace of the referenced object",
                    "type": "string"
                  },
                  "policy": {
                    "description": "Policies for referencing.",
                    "type": "object",
                    "properties": {
                      "resolution": {
                        "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                        "type": "string",
                        "default": "Required",
                        "enum": [
                          "Required",
                          "Optional"
                        ]
                      },
                      "resolve": {
                        "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                        "type": "string",
                        "enum": [
                          "Always",
                          "IfNotPresent"
                        ]
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              }
            },
            "securityGroupSelector": {
              "description": "Selector for a list of SecurityGroup in ec2 to populate securityGroups.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "namespace": {
                  "description": "Namespace for the selector",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "securityGroups": {
              "description": "List of security group IDs assigned to the broker.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-kubernetes-list-type": "set"
            },
            "storageType": {
              "description": "Storage type of the broker. For engine_type ActiveMQ, valid values are efs and ebs (AWS-default is efs). For engine_type RabbitMQ, only ebs is supported. When using ebs, only the mq.m5 broker instance type family is supported.",
              "type": "string"
            },
            "subnetIdRefs": {
              "description": "References to Subnet in ec2 to populate subnetIds.",
              "type": "array",
              "items": {
                "description": "A NamespacedReference to a named object.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Name of the referenced object.",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "Namespace of the referenced object",
                    "type": "string"
                  },
                  "policy": {
                    "description": "Policies for referencing.",
                    "type": "object",
                    "properties": {
                      "resolution": {
                        "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                        "type": "string",
                        "default": "Required",
                        "enum": [
                          "Required",
                          "Optional"
                        ]
                      },
                      "resolve": {
                        "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                        "type": "string",
                        "enum": [
                          "Always",
                          "IfNotPresent"
                        ]
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              }
            },
            "subnetIdSelector": {
              "description": "Selector for a list of Subnet in ec2 to populate subnetIds.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "namespace": {
                  "description": "Namespace for the selector",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "subnetIds": {
              "description": "List of subnet IDs in which to launch the broker. A SINGLE_INSTANCE deployment requires one subnet. An ACTIVE_STANDBY_MULTI_AZ deployment requires multiple subnets.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-kubernetes-list-type": "set"
            },
            "tags": {
              "description": "Key-value map of resource tags.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "user": {
              "description": "Configuration block for broker users. For engine_type of RabbitMQ, Amazon MQ does not return broker users preventing this resource from making user updates and drift detection. Detailed below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "consoleAccess": {
                    "description": "Whether to enable access to the ActiveMQ Web Console for the user. Applies to engine_type of ActiveMQ only.",
                    "type": "boolean"
                  },
                  "groups": {
                    "description": "List of groups (20 maximum) to which the ActiveMQ user belongs. Applies to engine_type of ActiveMQ only.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "x-kubernetes-list-type": "set"
                  },
                  "passwordSecretRef": {
                    "description": "Password of the user. Must be 12 to 250 characters long, contain at least 4 unique characters, and must not contain commas.",
                    "type": "object",
                    "required": [
                      "key",
                      "name"
                    ],
                    "properties": {
                      "key": {
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the secret.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "replicationUser": {
                    "description": "Whether to set replication user. Defaults to false.",
                    "type": "boolean"
                  },
                  "username": {
                    "description": "Username of the user.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored\nunless the Management Policies feature flag is disabled.\nInitProvider holds the same fields as ForProvider, with the exception\nof Identifier and other resource reference fields. The fields that are\nin InitProvider are merged into ForProvider when the resource is created.\nThe same fields are also added to the terraform ignore_changes hook, to\navoid updating them after creation. This is useful for fields that are\nrequired on creation, but we do not desire to update them after creation,\nfor example because of an external controller is managing them, like an\nautoscaler.",
          "type": "object",
          "properties": {
            "applyImmediately": {
              "description": "Whether to apply broker modifications immediately. Default is false.",
              "type": "boolean"
            },
            "authenticationStrategy": {
              "description": "Authentication strategy used to secure the broker. Valid values are simple and ldap. ldap is not supported for engine_type RabbitMQ.",
              "type": "string"
            },
            "autoMinorVersionUpgrade": {
              "description": "Whether to automatically upgrade to new minor versions of brokers as Amazon MQ makes releases available.",
              "type": "boolean"
            },
            "brokerName": {
              "description": "Name of the broker.",
              "type": "string"
            },
            "configuration": {
              "description": "Configuration block for broker configuration. Applies to engine_type of ActiveMQ and RabbitMQ only. Detailed below.",
              "type": "object",
              "properties": {
                "id": {
                  "description": "Configuration ID.",
                  "type": "string"
                },
                "idRef": {
                  "description": "Reference to a Configuration in mq to populate id.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name of the referenced object.",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace of the referenced object",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for referencing.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "idSelector": {
                  "description": "Selector for a Configuration in mq to populate id.",
                  "type": "object",
                  "properties": {
                    "matchControllerRef": {
                      "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                      "type": "boolean"
                    },
                    "matchLabels": {
                      "description": "MatchLabels ensures an object with matching labels is selected.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "namespace": {
                      "description": "Namespace for the selector",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for selection.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "revision": {
                  "description": "Revision of the Configuration.",
                  "type": "number"
                }
              },
              "additionalProperties": false
            },
            "dataReplicationMode": {
              "description": "Whether this broker is part of a data replication pair. Valid values are CRDR and NONE.",
              "type": "string"
            },
            "dataReplicationPrimaryBrokerArn": {
              "description": "ARN of the primary broker used to replicate data in a data replication pair. Required when data_replication_mode is CRDR.",
              "type": "string"
            },
            "dataReplicationPrimaryBrokerArnRef": {
              "description": "Reference to a Broker in mq to populate dataReplicationPrimaryBrokerArn.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referenced object",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "dataReplicationPrimaryBrokerArnSelector": {
              "description": "Selector for a Broker in mq to populate dataReplicationPrimaryBrokerArn.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "namespace": {
                  "description": "Namespace for the selector",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "deploymentMode": {
              "description": "Deployment mode of the broker. Valid values are SINGLE_INSTANCE, ACTIVE_STANDBY_MULTI_AZ, and CLUSTER_MULTI_AZ. Default is SINGLE_INSTANCE.",
              "type": "string"
            },
            "encryptionOptions": {
              "description": "Configuration block containing encryption options. Detailed below.",
              "type": "object",
              "properties": {
                "kmsKeyId": {
                  "description": "ARN of KMS CMK to use for encryption at rest. Requires setting use_aws_owned_key to false. To perform drift detection when AWS-managed CMKs or customer-managed CMKs are in use, this value must be configured.",
                  "type": "string"
                },
                "useAwsOwnedKey": {
                  "description": "Whether to enable an AWS-owned KMS CMK not in your account. Defaults to true. Setting to false without configuring kms_key_id creates an AWS-managed CMK aliased to aws/mq in your account.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "engineType": {
              "description": "Type of broker engine. Valid values are ActiveMQ and RabbitMQ.",
              "type": "string"
            },
            "engineVersion": {
              "description": "Version of the broker engine.",
              "type": "string"
            },
            "hostInstanceType": {
              "description": "Broker's instance type. For example, mq.t3.micro, mq.m5.large.",
              "type": "string"
            },
            "ldapServerMetadata": {
              "description": "Configuration block for the LDAP server used to authenticate and authorize connections. Not supported for engine_type RabbitMQ. Detailed below.",
              "type": "object",
              "properties": {
                "hosts": {
                  "description": "List of fully qualified domain names of the LDAP server and optional failover server.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "roleBase": {
                  "description": "Fully qualified name of the directory to search for a user's groups.",
                  "type": "string"
                },
                "roleName": {
                  "description": "LDAP attribute that identifies the group name attribute in the object returned from the group membership query.",
                  "type": "string"
                },
                "roleSearchMatching": {
                  "description": "Search criteria for groups.",
                  "type": "string"
                },
                "roleSearchSubtree": {
                  "description": "Whether the directory search scope is the entire sub-tree.",
                  "type": "boolean"
                },
                "serviceAccountPasswordSecretRef": {
                  "description": "Service account password.",
                  "type": "object",
                  "required": [
                    "key",
                    "name"
                  ],
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the secret.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "serviceAccountUsername": {
                  "description": "Service account username.",
                  "type": "string"
                },
                "userBase": {
                  "description": "Fully qualified name of the directory where you want to search for users.",
                  "type": "string"
                },
                "userRoleName": {
                  "description": "Name of the LDAP attribute for the user group membership.",
                  "type": "string"
                },
                "userSearchMatching": {
                  "description": "Search criteria for users.",
                  "type": "string"
                },
                "userSearchSubtree": {
                  "description": "Whether the directory search scope is the entire sub-tree.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "logs": {
              "description": "Configuration block for the logging configuration. Detailed below.",
              "type": "object",
              "properties": {
                "audit": {
                  "description": "Whether to enable audit logging. Only possible for engine_type of ActiveMQ. Logs user management actions via JMX or ActiveMQ Web Console. Defaults to false.",
                  "type": "string"
                },
                "general": {
                  "description": "Whether to enable general logging via CloudWatch. Defaults to false.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "maintenanceWindowStartTime": {
              "description": "Configuration block for the maintenance window start time. Detailed below.",
              "type": "object",
              "properties": {
                "dayOfWeek": {
                  "description": "Day of the week, e.g., MONDAY, TUESDAY, or WEDNESDAY.",
                  "type": "string"
                },
                "timeOfDay": {
                  "description": "Time, in 24-hour format, e.g., 02:00.",
                  "type": "string"
                },
                "timeZone": {
                  "description": "Time zone in either the Country/City format or the UTC offset format, e.g., CET.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "publiclyAccessible": {
              "description": "Whether to enable connections from applications outside of the VPC that hosts the broker's subnets.",
              "type": "boolean"
            },
            "securityGroupRefs": {
              "description": "References to SecurityGroup in ec2 to populate securityGroups.",
              "type": "array",
              "items": {
                "description": "A NamespacedReference to a named object.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Name of the referenced object.",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "Namespace of the referenced object",
                    "type": "string"
                  },
                  "policy": {
                    "description": "Policies for referencing.",
                    "type": "object",
                    "properties": {
                      "resolution": {
                        "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                        "type": "string",
                        "default": "Required",
                        "enum": [
                          "Required",
                          "Optional"
                        ]
                      },
                      "resolve": {
                        "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                        "type": "string",
                        "enum": [
                          "Always",
                          "IfNotPresent"
                        ]
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              }
            },
            "securityGroupSelector": {
              "description": "Selector for a list of SecurityGroup in ec2 to populate securityGroups.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "namespace": {
                  "description": "Namespace for the selector",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "securityGroups": {
              "description": "List of security group IDs assigned to the broker.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-kubernetes-list-type": "set"
            },
            "storageType": {
              "description": "Storage type of the broker. For engine_type ActiveMQ, valid values are efs and ebs (AWS-default is efs). For engine_type RabbitMQ, only ebs is supported. When using ebs, only the mq.m5 broker instance type family is supported.",
              "type": "string"
            },
            "subnetIdRefs": {
              "description": "References to Subnet in ec2 to populate subnetIds.",
              "type": "array",
              "items": {
                "description": "A NamespacedReference to a named object.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Name of the referenced object.",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "Namespace of the referenced object",
                    "type": "string"
                  },
                  "policy": {
                    "description": "Policies for referencing.",
                    "type": "object",
                    "properties": {
                      "resolution": {
                        "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                        "type": "string",
                        "default": "Required",
                        "enum": [
                          "Required",
                          "Optional"
                        ]
                      },
                      "resolve": {
                        "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                        "type": "string",
                        "enum": [
                          "Always",
                          "IfNotPresent"
                        ]
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              }
            },
            "subnetIdSelector": {
              "description": "Selector for a list of Subnet in ec2 to populate subnetIds.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "namespace": {
                  "description": "Namespace for the selector",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "subnetIds": {
              "description": "List of subnet IDs in which to launch the broker. A SINGLE_INSTANCE deployment requires one subnet. An ACTIVE_STANDBY_MULTI_AZ deployment requires multiple subnets.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-kubernetes-list-type": "set"
            },
            "tags": {
              "description": "Key-value map of resource tags.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "user": {
              "description": "Configuration block for broker users. For engine_type of RabbitMQ, Amazon MQ does not return broker users preventing this resource from making user updates and drift detection. Detailed below.",
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "passwordSecretRef"
                ],
                "properties": {
                  "consoleAccess": {
                    "description": "Whether to enable access to the ActiveMQ Web Console for the user. Applies to engine_type of ActiveMQ only.",
                    "type": "boolean"
                  },
                  "groups": {
                    "description": "List of groups (20 maximum) to which the ActiveMQ user belongs. Applies to engine_type of ActiveMQ only.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "x-kubernetes-list-type": "set"
                  },
                  "passwordSecretRef": {
                    "description": "Password of the user. Must be 12 to 250 characters long, contain at least 4 unique characters, and must not contain commas.",
                    "type": "object",
                    "required": [
                      "key",
                      "name"
                    ],
                    "properties": {
                      "key": {
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the secret.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "replicationUser": {
                    "description": "Whether to set replication user. Defaults to false.",
                    "type": "boolean"
                  },
                  "username": {
                    "description": "Username of the user.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "additionalProperties": false
        },
        "managementPolicies": {
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out\nthrough a Crossplane feature flag.\nManagementPolicies specify the array of actions Crossplane is allowed to\ntake on the managed and external resources.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223\nand this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers\ncan take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to\ncreate, observe, update, and delete this managed resource should be\nconfigured.",
          "type": "object",
          "default": {
            "kind": "ClusterProviderConfig",
            "name": "default"
          },
          "required": [
            "kind",
            "name"
          ],
          "properties": {
            "kind": {
              "description": "Kind of the referenced object.",
              "type": "string"
            },
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a\nSecret to which any connection details for this managed resource should\nbe written. Connection details frequently include the endpoint, username,\nand password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false,
      "x-kubernetes-validations": [
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.brokerName) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.brokerName))",
          "message": "spec.forProvider.brokerName is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.engineType) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.engineType))",
          "message": "spec.forProvider.engineType is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.engineVersion) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.engineVersion))",
          "message": "spec.forProvider.engineVersion is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.hostInstanceType) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.hostInstanceType))",
          "message": "spec.forProvider.hostInstanceType is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.user) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.user))",
          "message": "spec.forProvider.user is a required parameter"
        }
      ]
    },
    "status": {
      "description": "BrokerStatus defines the observed state of Broker.",
      "type": "object",
      "properties": {
        "atProvider": {
          "type": "object",
          "properties": {
            "applyImmediately": {
              "description": "Whether to apply broker modifications immediately. Default is false.",
              "type": "boolean"
            },
            "arn": {
              "description": "ARN of the broker.",
              "type": "string"
            },
            "authenticationStrategy": {
              "description": "Authentication strategy used to secure the broker. Valid values are simple and ldap. ldap is not supported for engine_type RabbitMQ.",
              "type": "string"
            },
            "autoMinorVersionUpgrade": {
              "description": "Whether to automatically upgrade to new minor versions of brokers as Amazon MQ makes releases available.",
              "type": "boolean"
            },
            "brokerName": {
              "description": "Name of the broker.",
              "type": "string"
            },
            "configuration": {
              "description": "Configuration block for broker configuration. Applies to engine_type of ActiveMQ and RabbitMQ only. Detailed below.",
              "type": "object",
              "properties": {
                "id": {
                  "description": "Configuration ID.",
                  "type": "string"
                },
                "revision": {
                  "description": "Revision of the Configuration.",
                  "type": "number"
                }
              },
              "additionalProperties": false
            },
            "dataReplicationMode": {
              "description": "Whether this broker is part of a data replication pair. Valid values are CRDR and NONE.",
              "type": "string"
            },
            "dataReplicationPrimaryBrokerArn": {
              "description": "ARN of the primary broker used to replicate data in a data replication pair. Required when data_replication_mode is CRDR.",
              "type": "string"
            },
            "deploymentMode": {
              "description": "Deployment mode of the broker. Valid values are SINGLE_INSTANCE, ACTIVE_STANDBY_MULTI_AZ, and CLUSTER_MULTI_AZ. Default is SINGLE_INSTANCE.",
              "type": "string"
            },
            "encryptionOptions": {
              "description": "Configuration block containing encryption options. Detailed below.",
              "type": "object",
              "properties": {
                "kmsKeyId": {
                  "description": "ARN of KMS CMK to use for encryption at rest. Requires setting use_aws_owned_key to false. To perform drift detection when AWS-managed CMKs or customer-managed CMKs are in use, this value must be configured.",
                  "type": "string"
                },
                "useAwsOwnedKey": {
                  "description": "Whether to enable an AWS-owned KMS CMK not in your account. Defaults to true. Setting to false without configuring kms_key_id creates an AWS-managed CMK aliased to aws/mq in your account.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "engineType": {
              "description": "Type of broker engine. Valid values are ActiveMQ and RabbitMQ.",
              "type": "string"
            },
            "engineVersion": {
              "description": "Version of the broker engine.",
              "type": "string"
            },
            "hostInstanceType": {
              "description": "Broker's instance type. For example, mq.t3.micro, mq.m5.large.",
              "type": "string"
            },
            "id": {
              "description": "Unique ID that Amazon MQ generates for the broker.",
              "type": "string"
            },
            "instances": {
              "description": "List of information about allocated brokers (both active \u0026 standby).",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "consoleUrl": {
                    "description": "URL of the ActiveMQ Web Console or the RabbitMQ Management UI depending on engine_type.",
                    "type": "string"
                  },
                  "endpoints": {
                    "description": "Broker's wire-level protocol endpoints in the following order \u0026 format referenceable e.g., as instances.0.endpoints.0 (SSL):",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "ipAddress": {
                    "description": "IP Address of the broker.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "ldapServerMetadata": {
              "description": "Configuration block for the LDAP server used to authenticate and authorize connections. Not supported for engine_type RabbitMQ. Detailed below.",
              "type": "object",
              "properties": {
                "hosts": {
                  "description": "List of fully qualified domain names of the LDAP server and optional failover server.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "roleBase": {
                  "description": "Fully qualified name of the directory to search for a user's groups.",
                  "type": "string"
                },
                "roleName": {
                  "description": "LDAP attribute that identifies the group name attribute in the object returned from the group membership query.",
                  "type": "string"
                },
                "roleSearchMatching": {
                  "description": "Search criteria for groups.",
                  "type": "string"
                },
                "roleSearchSubtree": {
                  "description": "Whether the directory search scope is the entire sub-tree.",
                  "type": "boolean"
                },
                "serviceAccountUsername": {
                  "description": "Service account username.",
                  "type": "string"
                },
                "userBase": {
                  "description": "Fully qualified name of the directory where you want to search for users.",
                  "type": "string"
                },
                "userRoleName": {
                  "description": "Name of the LDAP attribute for the user group membership.",
                  "type": "string"
                },
                "userSearchMatching": {
                  "description": "Search criteria for users.",
                  "type": "string"
                },
                "userSearchSubtree": {
                  "description": "Whether the directory search scope is the entire sub-tree.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "logs": {
              "description": "Configuration block for the logging configuration. Detailed below.",
              "type": "object",
              "properties": {
                "audit": {
                  "description": "Whether to enable audit logging. Only possible for engine_type of ActiveMQ. Logs user management actions via JMX or ActiveMQ Web Console. Defaults to false.",
                  "type": "string"
                },
                "general": {
                  "description": "Whether to enable general logging via CloudWatch. Defaults to false.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "maintenanceWindowStartTime": {
              "description": "Configuration block for the maintenance window start time. Detailed below.",
              "type": "object",
              "properties": {
                "dayOfWeek": {
                  "description": "Day of the week, e.g., MONDAY, TUESDAY, or WEDNESDAY.",
                  "type": "string"
                },
                "timeOfDay": {
                  "description": "Time, in 24-hour format, e.g., 02:00.",
                  "type": "string"
                },
                "timeZone": {
                  "description": "Time zone in either the Country/City format or the UTC offset format, e.g., CET.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "pendingDataReplicationMode": {
              "description": "Data replication mode that will be applied after reboot.",
              "type": "string"
            },
            "publiclyAccessible": {
              "description": "Whether to enable connections from applications outside of the VPC that hosts the broker's subnets.",
              "type": "boolean"
            },
            "region": {
              "description": "Region where this resource will be managed. Defaults to the Region set in the provider configuration.\nRegion is the region you'd like your resource to be created in.",
              "type": "string"
            },
            "securityGroups": {
              "description": "List of security group IDs assigned to the broker.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-kubernetes-list-type": "set"
            },
            "storageType": {
              "description": "Storage type of the broker. For engine_type ActiveMQ, valid values are efs and ebs (AWS-default is efs). For engine_type RabbitMQ, only ebs is supported. When using ebs, only the mq.m5 broker instance type family is supported.",
              "type": "string"
            },
            "subnetIds": {
              "description": "List of subnet IDs in which to launch the broker. A SINGLE_INSTANCE deployment requires one subnet. An ACTIVE_STANDBY_MULTI_AZ deployment requires multiple subnets.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-kubernetes-list-type": "set"
            },
            "tags": {
              "description": "Key-value map of resource tags.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "tagsAll": {
              "description": "Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "user": {
              "description": "Configuration block for broker users. For engine_type of RabbitMQ, Amazon MQ does not return broker users preventing this resource from making user updates and drift detection. Detailed below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "consoleAccess": {
                    "description": "Whether to enable access to the ActiveMQ Web Console for the user. Applies to engine_type of ActiveMQ only.",
                    "type": "boolean"
                  },
                  "groups": {
                    "description": "List of groups (20 maximum) to which the ActiveMQ user belongs. Applies to engine_type of ActiveMQ only.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "x-kubernetes-list-type": "set"
                  },
                  "replicationUser": {
                    "description": "Whether to set replication user. Defaults to false.",
                    "type": "boolean"
                  },
                  "username": {
                    "description": "Username of the user.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "type": "array",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one\nstatus to another.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from\none status to another, if any.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to\na resource at any point in time.",
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest metadata.generation\nwhich resulted in either a ready state, or stalled due to error\nit can not recover from without human intervention.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    }
  }
}
