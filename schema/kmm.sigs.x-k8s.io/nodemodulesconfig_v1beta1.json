{
  "description": "NodeModulesConfig keeps spec and state of the KMM modules on a node.",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "NodeModulesConfigSpec describes the desired state of modules on the node\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
      "type": "object",
      "properties": {
        "modules": {
          "description": "Modules list the spec of all the modules that need to be executed\non the node",
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "config",
              "name",
              "namespace",
              "serviceAccountName"
            ],
            "properties": {
              "config": {
                "type": "object",
                "required": [
                  "containerImage",
                  "insecurePull",
                  "kernelVersion",
                  "modprobe"
                ],
                "properties": {
                  "containerImage": {
                    "type": "string"
                  },
                  "imagePullPolicy": {
                    "description": "PullPolicy describes a policy for if/when to pull a container image",
                    "type": "string",
                    "default": "IfNotPresent"
                  },
                  "inTreeModuleToRemove": {
                    "type": "string"
                  },
                  "inTreeModulesToRemove": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "insecurePull": {
                    "description": "When InsecurePull is true, the container image can be pulled without TLS.",
                    "type": "boolean"
                  },
                  "kernelVersion": {
                    "type": "string"
                  },
                  "modprobe": {
                    "type": "object",
                    "properties": {
                      "args": {
                        "description": "Args is an optional list of arguments to be passed to modprobe before the name of the kernel module.\nThe resulting commands will be: `modprobe ${Args} module_name`.",
                        "type": "object",
                        "properties": {
                          "load": {
                            "description": "Load is an optional list of arguments to be used when loading the kernel module.",
                            "type": "array",
                            "minItems": 1,
                            "items": {
                              "type": "string"
                            }
                          },
                          "unload": {
                            "description": "Unload is an optional list of arguments to be used when unloading the kernel module.",
                            "type": "array",
                            "minItems": 1,
                            "items": {
                              "type": "string"
                            }
                          }
                        },
                        "additionalProperties": false
                      },
                      "dirName": {
                        "description": "DirName is the root directory for modules.\nIt adds `-d ${DirName}` to the modprobe command-line.",
                        "type": "string",
                        "default": "/opt"
                      },
                      "firmwarePath": {
                        "description": "FirmwarePath is the path of the firmware(s).\nThe firmware(s) will be copied to the host for the kernel to find them.",
                        "type": "string"
                      },
                      "moduleName": {
                        "description": "ModuleName is the name of the Module to be loaded.\nThis field can only be unset if rawArgs is set.",
                        "type": "string"
                      },
                      "modulesLoadingOrder": {
                        "description": "ModulesLoadingOrder defines the dependency between kernel modules loading, in case\nit was not created by depmod (independent kernel modules).\nThe list order should be: upmost module, then the module it depends on and so on.\nExample: if moduleA depends on first loading moduleB, and moduleB depends on first loading moduleC\nthe entry should look:\nModulesLoadingOrder:\n   - moduleA\n   - moduleB\n   - moduleC\nIn order to load all 3 modules, moduleA shoud be defined in the ModuleName parameter of this struct",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "parameters": {
                        "description": "Parameters is an optional list of kernel module parameters to be provided to modprobe.\nThey should be in the form of key=value and will be separated by spaces in the modprobe command.\nThe resulting loading command will be: `modprobe module_name ${Parameters}`.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "rawArgs": {
                        "description": "If RawArgs are specified, they are passed straight to the modprobe binary; all other properties in this\nobject are ignored.\nThe resulting commands will be: `modprobe ${RawArgs}`.",
                        "type": "object",
                        "properties": {
                          "load": {
                            "description": "Load is an optional list of arguments to be used when loading the kernel module.",
                            "type": "array",
                            "minItems": 1,
                            "items": {
                              "type": "string"
                            }
                          },
                          "unload": {
                            "description": "Unload is an optional list of arguments to be used when unloading the kernel module.",
                            "type": "array",
                            "minItems": 1,
                            "items": {
                              "type": "string"
                            }
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              },
              "imageRepoSecret": {
                "description": "LocalObjectReference contains enough information to let you locate the\nreferenced object inside the same namespace.",
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                    "type": "string",
                    "default": ""
                  }
                },
                "additionalProperties": false,
                "x-kubernetes-map-type": "atomic"
              },
              "name": {
                "type": "string"
              },
              "namespace": {
                "type": "string"
              },
              "serviceAccountName": {
                "type": "string"
              },
              "tolerations": {
                "description": "tolerations define which tolerations should be added for every load/unload pod running on the node",
                "type": "array",
                "items": {
                  "description": "The pod this Toleration is attached to tolerates any taint that matches\nthe triple \u003ckey,value,effect\u003e using the matching operator \u003coperator\u003e.",
                  "type": "object",
                  "properties": {
                    "effect": {
                      "description": "Effect indicates the taint effect to match. Empty means match all taint effects.\nWhen specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
                      "type": "string"
                    },
                    "key": {
                      "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys.\nIf the key is empty, operator must be Exists; this combination means to match all values and all keys.",
                      "type": "string"
                    },
                    "operator": {
                      "description": "Operator represents a key's relationship to the value.\nValid operators are Exists and Equal. Defaults to Equal.\nExists is equivalent to wildcard for value, so that a pod can\ntolerate all taints of a particular category.",
                      "type": "string"
                    },
                    "tolerationSeconds": {
                      "description": "TolerationSeconds represents the period of time the toleration (which must be\nof effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,\nit is not set, which means tolerate the taint forever (do not evict). Zero and\nnegative values will be treated as 0 (evict immediately) by the system.",
                      "type": "integer",
                      "format": "int64"
                    },
                    "value": {
                      "description": "Value is the taint value the toleration matches to.\nIf the operator is Exists, the value should be empty, otherwise just a regular string.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              }
            },
            "additionalProperties": false
          }
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "NodeModuleConfigStatus is the most recently observed status of the KMM modules on node.\nIt is populated by the system and is read-only.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
      "type": "object",
      "properties": {
        "modules": {
          "description": "Modules contain observations about each Module's node state status",
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "name",
              "namespace",
              "serviceAccountName"
            ],
            "properties": {
              "bootId": {
                "type": "string"
              },
              "config": {
                "type": "object",
                "required": [
                  "containerImage",
                  "insecurePull",
                  "kernelVersion",
                  "modprobe"
                ],
                "properties": {
                  "containerImage": {
                    "type": "string"
                  },
                  "imagePullPolicy": {
                    "description": "PullPolicy describes a policy for if/when to pull a container image",
                    "type": "string",
                    "default": "IfNotPresent"
                  },
                  "inTreeModuleToRemove": {
                    "type": "string"
                  },
                  "inTreeModulesToRemove": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "insecurePull": {
                    "description": "When InsecurePull is true, the container image can be pulled without TLS.",
                    "type": "boolean"
                  },
                  "kernelVersion": {
                    "type": "string"
                  },
                  "modprobe": {
                    "type": "object",
                    "properties": {
                      "args": {
                        "description": "Args is an optional list of arguments to be passed to modprobe before the name of the kernel module.\nThe resulting commands will be: `modprobe ${Args} module_name`.",
                        "type": "object",
                        "properties": {
                          "load": {
                            "description": "Load is an optional list of arguments to be used when loading the kernel module.",
                            "type": "array",
                            "minItems": 1,
                            "items": {
                              "type": "string"
                            }
                          },
                          "unload": {
                            "description": "Unload is an optional list of arguments to be used when unloading the kernel module.",
                            "type": "array",
                            "minItems": 1,
                            "items": {
                              "type": "string"
                            }
                          }
                        },
                        "additionalProperties": false
                      },
                      "dirName": {
                        "description": "DirName is the root directory for modules.\nIt adds `-d ${DirName}` to the modprobe command-line.",
                        "type": "string",
                        "default": "/opt"
                      },
                      "firmwarePath": {
                        "description": "FirmwarePath is the path of the firmware(s).\nThe firmware(s) will be copied to the host for the kernel to find them.",
                        "type": "string"
                      },
                      "moduleName": {
                        "description": "ModuleName is the name of the Module to be loaded.\nThis field can only be unset if rawArgs is set.",
                        "type": "string"
                      },
                      "modulesLoadingOrder": {
                        "description": "ModulesLoadingOrder defines the dependency between kernel modules loading, in case\nit was not created by depmod (independent kernel modules).\nThe list order should be: upmost module, then the module it depends on and so on.\nExample: if moduleA depends on first loading moduleB, and moduleB depends on first loading moduleC\nthe entry should look:\nModulesLoadingOrder:\n   - moduleA\n   - moduleB\n   - moduleC\nIn order to load all 3 modules, moduleA shoud be defined in the ModuleName parameter of this struct",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "parameters": {
                        "description": "Parameters is an optional list of kernel module parameters to be provided to modprobe.\nThey should be in the form of key=value and will be separated by spaces in the modprobe command.\nThe resulting loading command will be: `modprobe module_name ${Parameters}`.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "rawArgs": {
                        "description": "If RawArgs are specified, they are passed straight to the modprobe binary; all other properties in this\nobject are ignored.\nThe resulting commands will be: `modprobe ${RawArgs}`.",
                        "type": "object",
                        "properties": {
                          "load": {
                            "description": "Load is an optional list of arguments to be used when loading the kernel module.",
                            "type": "array",
                            "minItems": 1,
                            "items": {
                              "type": "string"
                            }
                          },
                          "unload": {
                            "description": "Unload is an optional list of arguments to be used when unloading the kernel module.",
                            "type": "array",
                            "minItems": 1,
                            "items": {
                              "type": "string"
                            }
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              },
              "imageRepoSecret": {
                "description": "LocalObjectReference contains enough information to let you locate the\nreferenced object inside the same namespace.",
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                    "type": "string",
                    "default": ""
                  }
                },
                "additionalProperties": false,
                "x-kubernetes-map-type": "atomic"
              },
              "name": {
                "type": "string"
              },
              "namespace": {
                "type": "string"
              },
              "serviceAccountName": {
                "type": "string"
              },
              "tolerations": {
                "description": "tolerations define which tolerations should be added for every load/unload pod running on the node",
                "type": "array",
                "items": {
                  "description": "The pod this Toleration is attached to tolerates any taint that matches\nthe triple \u003ckey,value,effect\u003e using the matching operator \u003coperator\u003e.",
                  "type": "object",
                  "properties": {
                    "effect": {
                      "description": "Effect indicates the taint effect to match. Empty means match all taint effects.\nWhen specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
                      "type": "string"
                    },
                    "key": {
                      "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys.\nIf the key is empty, operator must be Exists; this combination means to match all values and all keys.",
                      "type": "string"
                    },
                    "operator": {
                      "description": "Operator represents a key's relationship to the value.\nValid operators are Exists and Equal. Defaults to Equal.\nExists is equivalent to wildcard for value, so that a pod can\ntolerate all taints of a particular category.",
                      "type": "string"
                    },
                    "tolerationSeconds": {
                      "description": "TolerationSeconds represents the period of time the toleration (which must be\nof effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,\nit is not set, which means tolerate the taint forever (do not evict). Zero and\nnegative values will be treated as 0 (evict immediately) by the system.",
                      "type": "integer",
                      "format": "int64"
                    },
                    "value": {
                      "description": "Value is the taint value the toleration matches to.\nIf the operator is Exists, the value should be empty, otherwise just a regular string.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              }
            },
            "additionalProperties": false
          }
        }
      },
      "additionalProperties": false
    }
  }
}
