{
  "description": "Certificate is the Schema for the Certificates API. Manages a Key Vault Certificate.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "CertificateSpec defines the desired state of Certificate",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "deletionPolicy": {
          "description": "DeletionPolicy specifies what will happen to the underlying external\nwhen this managed resource is deleted - either \"Delete\" or \"Orphan\" the\nexternal resource.\nThis field is planned to be deprecated in favor of the ManagementPolicies\nfield in a future release. Currently, both could be set independently and\nnon-default values would be honored if the feature flag is enabled.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "type": "string",
          "default": "Delete",
          "enum": [
            "Orphan",
            "Delete"
          ]
        },
        "forProvider": {
          "type": "object",
          "properties": {
            "certificate": {
              "description": "A certificate block as defined below, used to Import an existing certificate. Changing this will create a new version of the Key Vault Certificate.",
              "type": "object",
              "properties": {
                "contentsSecretRef": {
                  "description": "The base64-encoded certificate contents.",
                  "type": "object",
                  "required": [
                    "key",
                    "name",
                    "namespace"
                  ],
                  "properties": {
                    "key": {
                      "description": "The key to select.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the secret.",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace of the secret.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "passwordSecretRef": {
                  "description": "The password associated with the certificate.",
                  "type": "object",
                  "required": [
                    "key",
                    "name",
                    "namespace"
                  ],
                  "properties": {
                    "key": {
                      "description": "The key to select.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the secret.",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace of the secret.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "certificatePolicy": {
              "description": "A certificate_policy block as defined below. Changing this (except the lifetime_action field) will create a new version of the Key Vault Certificate.",
              "type": "object",
              "properties": {
                "issuerParameters": {
                  "description": "A issuer_parameters block as defined below.",
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "The name of the Certificate Issuer. Possible values include Self (for self-signed certificate), or Unknown (for a certificate issuing authority like Let's Encrypt and Azure direct supported ones).",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "keyProperties": {
                  "description": "A key_properties block as defined below.",
                  "type": "object",
                  "properties": {
                    "curve": {
                      "description": "Specifies the curve to use when creating an EC key. Possible values are P-256, P-256K, P-384, and P-521. This field will be required in a future release if key_type is EC or EC-HSM.",
                      "type": "string"
                    },
                    "exportable": {
                      "description": "Is this certificate exportable?",
                      "type": "boolean"
                    },
                    "keySize": {
                      "description": "The size of the key used in the certificate. Possible values include 2048, 3072, and 4096 for RSA keys, or 256, 384, and 521 for EC keys. This property is required when using RSA keys.",
                      "type": "number"
                    },
                    "keyType": {
                      "description": "Specifies the type of key. Possible values are EC, EC-HSM, RSA, RSA-HSM and oct.",
                      "type": "string"
                    },
                    "reuseKey": {
                      "description": "Is the key reusable?",
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "lifetimeAction": {
                  "description": "A lifetime_action block as defined below.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "action": {
                        "description": "A action block as defined below.",
                        "type": "object",
                        "properties": {
                          "actionType": {
                            "description": "The Type of action to be performed when the lifetime trigger is triggerec. Possible values include AutoRenew and EmailContacts.",
                            "type": "string"
                          }
                        },
                        "additionalProperties": false
                      },
                      "trigger": {
                        "description": "A trigger block as defined below.",
                        "type": "object",
                        "properties": {
                          "daysBeforeExpiry": {
                            "description": "The number of days before the Certificate expires that the action associated with this Trigger should run. Conflicts with lifetime_percentage.",
                            "type": "number"
                          },
                          "lifetimePercentage": {
                            "description": "The percentage at which during the Certificates Lifetime the action associated with this Trigger should run. Conflicts with days_before_expiry.",
                            "type": "number"
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "secretProperties": {
                  "description": "A secret_properties block as defined below.",
                  "type": "object",
                  "properties": {
                    "contentType": {
                      "description": "The Content-Type of the Certificate, such as application/x-pkcs12 for a PFX or application/x-pem-file for a PEM.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "x509CertificateProperties": {
                  "description": "A x509_certificate_properties block as defined below. Required when certificate block is not specified.",
                  "type": "object",
                  "properties": {
                    "extendedKeyUsage": {
                      "description": "A list of Extended/Enhanced Key Usages.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "keyUsage": {
                      "description": "A list of uses associated with this Key. Possible values include cRLSign, dataEncipherment, decipherOnly, digitalSignature, encipherOnly, keyAgreement, keyCertSign, keyEncipherment and nonRepudiation and are case-sensitive.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "x-kubernetes-list-type": "set"
                    },
                    "subject": {
                      "description": "The Certificate's Subject.",
                      "type": "string"
                    },
                    "subjectAlternativeNames": {
                      "description": "A subject_alternative_names block as defined below.",
                      "type": "object",
                      "properties": {
                        "dnsNames": {
                          "description": "A list of alternative DNS names (FQDNs) identified by the Certificate.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "x-kubernetes-list-type": "set"
                        },
                        "emails": {
                          "description": "A list of email addresses identified by this Certificate.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "x-kubernetes-list-type": "set"
                        },
                        "upns": {
                          "description": "A list of User Principal Names identified by the Certificate.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "x-kubernetes-list-type": "set"
                        }
                      },
                      "additionalProperties": false
                    },
                    "validityInMonths": {
                      "description": "The Certificates Validity Period in Months.",
                      "type": "number"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "keyVaultId": {
              "description": "The ID of the Key Vault where the Certificate should be created. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "keyVaultIdRef": {
              "description": "Reference to a Vault in keyvault to populate keyVaultId.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "keyVaultIdSelector": {
              "description": "Selector for a Vault in keyvault to populate keyVaultId.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "name": {
              "description": "Specifies the name of the Key Vault Certificate. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "tags": {
              "description": "A mapping of tags to assign to the resource.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            }
          },
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored\nunless the Management Policies feature flag is disabled.\nInitProvider holds the same fields as ForProvider, with the exception\nof Identifier and other resource reference fields. The fields that are\nin InitProvider are merged into ForProvider when the resource is created.\nThe same fields are also added to the terraform ignore_changes hook, to\navoid updating them after creation. This is useful for fields that are\nrequired on creation, but we do not desire to update them after creation,\nfor example because of an external controller is managing them, like an\nautoscaler.",
          "type": "object",
          "properties": {
            "certificate": {
              "description": "A certificate block as defined below, used to Import an existing certificate. Changing this will create a new version of the Key Vault Certificate.",
              "type": "object",
              "required": [
                "contentsSecretRef"
              ],
              "properties": {
                "contentsSecretRef": {
                  "description": "The base64-encoded certificate contents.",
                  "type": "object",
                  "required": [
                    "key",
                    "name",
                    "namespace"
                  ],
                  "properties": {
                    "key": {
                      "description": "The key to select.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the secret.",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace of the secret.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "passwordSecretRef": {
                  "description": "The password associated with the certificate.",
                  "type": "object",
                  "required": [
                    "key",
                    "name",
                    "namespace"
                  ],
                  "properties": {
                    "key": {
                      "description": "The key to select.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the secret.",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace of the secret.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "certificatePolicy": {
              "description": "A certificate_policy block as defined below. Changing this (except the lifetime_action field) will create a new version of the Key Vault Certificate.",
              "type": "object",
              "properties": {
                "issuerParameters": {
                  "description": "A issuer_parameters block as defined below.",
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "The name of the Certificate Issuer. Possible values include Self (for self-signed certificate), or Unknown (for a certificate issuing authority like Let's Encrypt and Azure direct supported ones).",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "keyProperties": {
                  "description": "A key_properties block as defined below.",
                  "type": "object",
                  "properties": {
                    "curve": {
                      "description": "Specifies the curve to use when creating an EC key. Possible values are P-256, P-256K, P-384, and P-521. This field will be required in a future release if key_type is EC or EC-HSM.",
                      "type": "string"
                    },
                    "exportable": {
                      "description": "Is this certificate exportable?",
                      "type": "boolean"
                    },
                    "keySize": {
                      "description": "The size of the key used in the certificate. Possible values include 2048, 3072, and 4096 for RSA keys, or 256, 384, and 521 for EC keys. This property is required when using RSA keys.",
                      "type": "number"
                    },
                    "keyType": {
                      "description": "Specifies the type of key. Possible values are EC, EC-HSM, RSA, RSA-HSM and oct.",
                      "type": "string"
                    },
                    "reuseKey": {
                      "description": "Is the key reusable?",
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "lifetimeAction": {
                  "description": "A lifetime_action block as defined below.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "action": {
                        "description": "A action block as defined below.",
                        "type": "object",
                        "properties": {
                          "actionType": {
                            "description": "The Type of action to be performed when the lifetime trigger is triggerec. Possible values include AutoRenew and EmailContacts.",
                            "type": "string"
                          }
                        },
                        "additionalProperties": false
                      },
                      "trigger": {
                        "description": "A trigger block as defined below.",
                        "type": "object",
                        "properties": {
                          "daysBeforeExpiry": {
                            "description": "The number of days before the Certificate expires that the action associated with this Trigger should run. Conflicts with lifetime_percentage.",
                            "type": "number"
                          },
                          "lifetimePercentage": {
                            "description": "The percentage at which during the Certificates Lifetime the action associated with this Trigger should run. Conflicts with days_before_expiry.",
                            "type": "number"
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "secretProperties": {
                  "description": "A secret_properties block as defined below.",
                  "type": "object",
                  "properties": {
                    "contentType": {
                      "description": "The Content-Type of the Certificate, such as application/x-pkcs12 for a PFX or application/x-pem-file for a PEM.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "x509CertificateProperties": {
                  "description": "A x509_certificate_properties block as defined below. Required when certificate block is not specified.",
                  "type": "object",
                  "properties": {
                    "extendedKeyUsage": {
                      "description": "A list of Extended/Enhanced Key Usages.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "keyUsage": {
                      "description": "A list of uses associated with this Key. Possible values include cRLSign, dataEncipherment, decipherOnly, digitalSignature, encipherOnly, keyAgreement, keyCertSign, keyEncipherment and nonRepudiation and are case-sensitive.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "x-kubernetes-list-type": "set"
                    },
                    "subject": {
                      "description": "The Certificate's Subject.",
                      "type": "string"
                    },
                    "subjectAlternativeNames": {
                      "description": "A subject_alternative_names block as defined below.",
                      "type": "object",
                      "properties": {
                        "dnsNames": {
                          "description": "A list of alternative DNS names (FQDNs) identified by the Certificate.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "x-kubernetes-list-type": "set"
                        },
                        "emails": {
                          "description": "A list of email addresses identified by this Certificate.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "x-kubernetes-list-type": "set"
                        },
                        "upns": {
                          "description": "A list of User Principal Names identified by the Certificate.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "x-kubernetes-list-type": "set"
                        }
                      },
                      "additionalProperties": false
                    },
                    "validityInMonths": {
                      "description": "The Certificates Validity Period in Months.",
                      "type": "number"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "keyVaultId": {
              "description": "The ID of the Key Vault where the Certificate should be created. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "keyVaultIdRef": {
              "description": "Reference to a Vault in keyvault to populate keyVaultId.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "keyVaultIdSelector": {
              "description": "Selector for a Vault in keyvault to populate keyVaultId.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "name": {
              "description": "Specifies the name of the Key Vault Certificate. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "tags": {
              "description": "A mapping of tags to assign to the resource.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            }
          },
          "additionalProperties": false
        },
        "managementPolicies": {
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out\nthrough a Crossplane feature flag.\nManagementPolicies specify the array of actions Crossplane is allowed to\ntake on the managed and external resources.\nThis field is planned to replace the DeletionPolicy field in a future\nrelease. Currently, both could be set independently and non-default\nvalues would be honored if the feature flag is enabled. If both are\ncustom, the DeletionPolicy field will be ignored.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223\nand this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers\ncan take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to\ncreate, observe, update, and delete this managed resource should be\nconfigured.",
          "type": "object",
          "default": {
            "name": "default"
          },
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "type": "object",
              "properties": {
                "resolution": {
                  "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                  "type": "string",
                  "default": "Required",
                  "enum": [
                    "Required",
                    "Optional"
                  ]
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                  "type": "string",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a\nSecret to which any connection details for this managed resource should\nbe written. Connection details frequently include the endpoint, username,\nand password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name",
            "namespace"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false,
      "x-kubernetes-validations": [
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.name))",
          "message": "spec.forProvider.name is a required parameter"
        }
      ]
    },
    "status": {
      "description": "CertificateStatus defines the observed state of Certificate.",
      "type": "object",
      "properties": {
        "atProvider": {
          "type": "object",
          "properties": {
            "certificate": {
              "description": "A certificate block as defined below, used to Import an existing certificate. Changing this will create a new version of the Key Vault Certificate.",
              "type": "object",
              "properties": {
                "contentsSecretRef": {
                  "description": "The base64-encoded certificate contents.",
                  "type": "object",
                  "required": [
                    "key",
                    "name",
                    "namespace"
                  ],
                  "properties": {
                    "key": {
                      "description": "The key to select.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the secret.",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace of the secret.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "passwordSecretRef": {
                  "description": "The password associated with the certificate.",
                  "type": "object",
                  "required": [
                    "key",
                    "name",
                    "namespace"
                  ],
                  "properties": {
                    "key": {
                      "description": "The key to select.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the secret.",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace of the secret.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "certificateAttribute": {
              "description": "A certificate_attribute block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "created": {
                    "description": "The create time of the Key Vault Certificate.",
                    "type": "string"
                  },
                  "enabled": {
                    "description": "whether the Key Vault Certificate is enabled.",
                    "type": "boolean"
                  },
                  "expires": {
                    "description": "The expires time of the Key Vault Certificate.",
                    "type": "string"
                  },
                  "notBefore": {
                    "description": "The not before valid time of the Key Vault Certificate.",
                    "type": "string"
                  },
                  "recoveryLevel": {
                    "description": "The deletion recovery level of the Key Vault Certificate.",
                    "type": "string"
                  },
                  "updated": {
                    "description": "The recent update time of the Key Vault Certificate.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "certificateData": {
              "description": "The raw Key Vault Certificate data represented as a hexadecimal string.",
              "type": "string"
            },
            "certificateDataBase64": {
              "description": "The Base64 encoded Key Vault Certificate data.",
              "type": "string"
            },
            "certificatePolicy": {
              "description": "A certificate_policy block as defined below. Changing this (except the lifetime_action field) will create a new version of the Key Vault Certificate.",
              "type": "object",
              "properties": {
                "issuerParameters": {
                  "description": "A issuer_parameters block as defined below.",
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "The name of the Certificate Issuer. Possible values include Self (for self-signed certificate), or Unknown (for a certificate issuing authority like Let's Encrypt and Azure direct supported ones).",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "keyProperties": {
                  "description": "A key_properties block as defined below.",
                  "type": "object",
                  "properties": {
                    "curve": {
                      "description": "Specifies the curve to use when creating an EC key. Possible values are P-256, P-256K, P-384, and P-521. This field will be required in a future release if key_type is EC or EC-HSM.",
                      "type": "string"
                    },
                    "exportable": {
                      "description": "Is this certificate exportable?",
                      "type": "boolean"
                    },
                    "keySize": {
                      "description": "The size of the key used in the certificate. Possible values include 2048, 3072, and 4096 for RSA keys, or 256, 384, and 521 for EC keys. This property is required when using RSA keys.",
                      "type": "number"
                    },
                    "keyType": {
                      "description": "Specifies the type of key. Possible values are EC, EC-HSM, RSA, RSA-HSM and oct.",
                      "type": "string"
                    },
                    "reuseKey": {
                      "description": "Is the key reusable?",
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "lifetimeAction": {
                  "description": "A lifetime_action block as defined below.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "action": {
                        "description": "A action block as defined below.",
                        "type": "object",
                        "properties": {
                          "actionType": {
                            "description": "The Type of action to be performed when the lifetime trigger is triggerec. Possible values include AutoRenew and EmailContacts.",
                            "type": "string"
                          }
                        },
                        "additionalProperties": false
                      },
                      "trigger": {
                        "description": "A trigger block as defined below.",
                        "type": "object",
                        "properties": {
                          "daysBeforeExpiry": {
                            "description": "The number of days before the Certificate expires that the action associated with this Trigger should run. Conflicts with lifetime_percentage.",
                            "type": "number"
                          },
                          "lifetimePercentage": {
                            "description": "The percentage at which during the Certificates Lifetime the action associated with this Trigger should run. Conflicts with days_before_expiry.",
                            "type": "number"
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "secretProperties": {
                  "description": "A secret_properties block as defined below.",
                  "type": "object",
                  "properties": {
                    "contentType": {
                      "description": "The Content-Type of the Certificate, such as application/x-pkcs12 for a PFX or application/x-pem-file for a PEM.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "x509CertificateProperties": {
                  "description": "A x509_certificate_properties block as defined below. Required when certificate block is not specified.",
                  "type": "object",
                  "properties": {
                    "extendedKeyUsage": {
                      "description": "A list of Extended/Enhanced Key Usages.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "keyUsage": {
                      "description": "A list of uses associated with this Key. Possible values include cRLSign, dataEncipherment, decipherOnly, digitalSignature, encipherOnly, keyAgreement, keyCertSign, keyEncipherment and nonRepudiation and are case-sensitive.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "x-kubernetes-list-type": "set"
                    },
                    "subject": {
                      "description": "The Certificate's Subject.",
                      "type": "string"
                    },
                    "subjectAlternativeNames": {
                      "description": "A subject_alternative_names block as defined below.",
                      "type": "object",
                      "properties": {
                        "dnsNames": {
                          "description": "A list of alternative DNS names (FQDNs) identified by the Certificate.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "x-kubernetes-list-type": "set"
                        },
                        "emails": {
                          "description": "A list of email addresses identified by this Certificate.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "x-kubernetes-list-type": "set"
                        },
                        "upns": {
                          "description": "A list of User Principal Names identified by the Certificate.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "x-kubernetes-list-type": "set"
                        }
                      },
                      "additionalProperties": false
                    },
                    "validityInMonths": {
                      "description": "The Certificates Validity Period in Months.",
                      "type": "number"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "id": {
              "description": "The Key Vault Certificate ID.",
              "type": "string"
            },
            "keyVaultId": {
              "description": "The ID of the Key Vault where the Certificate should be created. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "name": {
              "description": "Specifies the name of the Key Vault Certificate. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "resourceManagerId": {
              "description": "The (Versioned) ID for this Key Vault Certificate. This property points to a specific version of a Key Vault Certificate, as such using this won't auto-rotate values if used in other Azure Services.",
              "type": "string"
            },
            "resourceManagerVersionlessId": {
              "description": "The Versionless ID of the Key Vault Certificate. This property allows other Azure Services (that support it) to auto-rotate their value when the Key Vault Certificate is updated.",
              "type": "string"
            },
            "secretId": {
              "description": "The ID of the associated Key Vault Secret.",
              "type": "string"
            },
            "tags": {
              "description": "A mapping of tags to assign to the resource.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "thumbprint": {
              "description": "The X509 Thumbprint of the Key Vault Certificate represented as a hexadecimal string.",
              "type": "string"
            },
            "version": {
              "description": "The current version of the Key Vault Certificate.",
              "type": "string"
            },
            "versionlessId": {
              "description": "The Base ID of the Key Vault Certificate.",
              "type": "string"
            },
            "versionlessSecretId": {
              "description": "The Base ID of the Key Vault Secret.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "type": "array",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one\nstatus to another.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from\none status to another, if any.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to\na resource at any point in time.",
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest metadata.generation\nwhich resulted in either a ready state, or stalled due to error\nit can not recover from without human intervention.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    }
  }
}
