{
  "description": "ImagePolicy is the Schema for the imagepolicies API",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "ImagePolicySpec defines the parameters for calculating the\nImagePolicy",
      "type": "object",
      "required": [
        "imageRepositoryRef",
        "policy"
      ],
      "properties": {
        "filterTags": {
          "description": "FilterTags enables filtering for only a subset of tags based on a set of\nrules. If no rules are provided, all the tags from the repository will be\nordered and compared.",
          "type": "object",
          "properties": {
            "extract": {
              "description": "Extract allows a capture group to be extracted from the specified regular\nexpression pattern, useful before tag evaluation.",
              "type": "string"
            },
            "pattern": {
              "description": "Pattern specifies a regular expression pattern used to filter for image\ntags.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "imageRepositoryRef": {
          "description": "ImageRepositoryRef points at the object specifying the image\nbeing scanned",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the referent.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the referent, when not specified it acts as LocalObjectReference.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "policy": {
          "description": "Policy gives the particulars of the policy to be followed in\nselecting the most recent image",
          "type": "object",
          "properties": {
            "alphabetical": {
              "description": "Alphabetical set of rules to use for alphabetical ordering of the tags.",
              "type": "object",
              "properties": {
                "order": {
                  "description": "Order specifies the sorting order of the tags. Given the letters of the\nalphabet as tags, ascending order would select Z, and descending order\nwould select A.",
                  "type": "string",
                  "default": "asc",
                  "enum": [
                    "asc",
                    "desc"
                  ]
                }
              },
              "additionalProperties": false
            },
            "numerical": {
              "description": "Numerical set of rules to use for numerical ordering of the tags.",
              "type": "object",
              "properties": {
                "order": {
                  "description": "Order specifies the sorting order of the tags. Given the integer values\nfrom 0 to 9 as tags, ascending order would select 9, and descending order\nwould select 0.",
                  "type": "string",
                  "default": "asc",
                  "enum": [
                    "asc",
                    "desc"
                  ]
                }
              },
              "additionalProperties": false
            },
            "semver": {
              "description": "SemVer gives a semantic version range to check against the tags\navailable.",
              "type": "object",
              "required": [
                "range"
              ],
              "properties": {
                "range": {
                  "description": "Range gives a semver range for the image tag; the highest\nversion within the range that's a tag yields the latest image.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "ImagePolicyStatus defines the observed state of ImagePolicy",
      "type": "object",
      "default": {
        "observedGeneration": -1
      },
      "properties": {
        "conditions": {
          "type": "array",
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                "type": "string",
                "maxLength": 32768
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64",
                "minimum": 0
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                "type": "string",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "type": "string",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ]
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                "type": "string",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
              }
            },
            "additionalProperties": false
          }
        },
        "latestImage": {
          "description": "LatestImage gives the first in the list of images scanned by\nthe image repository, when filtered and ordered according to\nthe policy.",
          "type": "string"
        },
        "observedGeneration": {
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    }
  }
}
