{
  "description": "ImageUpdateAutomation is the Schema for the imageupdateautomations API",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "ImageUpdateAutomationSpec defines the desired state of ImageUpdateAutomation",
      "type": "object",
      "required": [
        "interval",
        "sourceRef"
      ],
      "properties": {
        "git": {
          "description": "GitSpec contains all the git-specific definitions. This is\ntechnically optional, but in practice mandatory until there are\nother kinds of source allowed.",
          "type": "object",
          "required": [
            "commit"
          ],
          "properties": {
            "checkout": {
              "description": "Checkout gives the parameters for cloning the git repository,\nready to make changes. If not present, the `spec.ref` field from the\nreferenced `GitRepository` or its default will be used.",
              "type": "object",
              "required": [
                "ref"
              ],
              "properties": {
                "ref": {
                  "description": "Reference gives a branch, tag or commit to clone from the Git\nrepository.",
                  "type": "object",
                  "properties": {
                    "branch": {
                      "description": "Branch to check out, defaults to 'master' if no other field is defined.",
                      "type": "string"
                    },
                    "commit": {
                      "description": "Commit SHA to check out, takes precedence over all reference fields.\n\nThis can be combined with Branch to shallow clone the branch, in which\nthe commit is expected to exist.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the reference to check out; takes precedence over Branch, Tag and SemVer.\n\nIt must be a valid Git reference: https://git-scm.com/docs/git-check-ref-format#_description\nExamples: \"refs/heads/main\", \"refs/tags/v0.1.0\", \"refs/pull/420/head\", \"refs/merge-requests/1/head\"",
                      "type": "string"
                    },
                    "semver": {
                      "description": "SemVer tag expression to check out, takes precedence over Tag.",
                      "type": "string"
                    },
                    "tag": {
                      "description": "Tag to check out, takes precedence over Branch.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "commit": {
              "description": "Commit specifies how to commit to the git repository.",
              "type": "object",
              "required": [
                "author"
              ],
              "properties": {
                "author": {
                  "description": "Author gives the email and optionally the name to use as the\nauthor of commits.",
                  "type": "object",
                  "required": [
                    "email"
                  ],
                  "properties": {
                    "email": {
                      "description": "Email gives the email to provide when making a commit.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name gives the name to provide when making a commit.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "messageTemplate": {
                  "description": "MessageTemplate provides a template for the commit message,\ninto which will be interpolated the details of the change made.",
                  "type": "string"
                },
                "signingKey": {
                  "description": "SigningKey provides the option to sign commits with a GPG key",
                  "type": "object",
                  "required": [
                    "secretRef"
                  ],
                  "properties": {
                    "secretRef": {
                      "description": "SecretRef holds the name to a secret that contains a 'git.asc' key\ncorresponding to the ASCII Armored file containing the GPG signing\nkeypair as the value. It must be in the same namespace as the\nImageUpdateAutomation.",
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "name": {
                          "description": "Name of the referent.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "push": {
              "description": "Push specifies how and where to push commits made by the\nautomation. If missing, commits are pushed (back) to\n`.spec.checkout.branch` or its default.",
              "type": "object",
              "properties": {
                "branch": {
                  "description": "Branch specifies that commits should be pushed to the branch\nnamed. The branch is created using `.spec.checkout.branch` as the\nstarting point, if it doesn't already exist.",
                  "type": "string"
                },
                "options": {
                  "description": "Options specifies the push options that are sent to the Git\nserver when performing a push operation. For details, see:\nhttps://git-scm.com/docs/git-push#Documentation/git-push.txt---push-optionltoptiongt",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "refspec": {
                  "description": "Refspec specifies the Git Refspec to use for a push operation.\nIf both Branch and Refspec are provided, then the commit is pushed\nto the branch and also using the specified refspec.\nFor more details about Git Refspecs, see:\nhttps://git-scm.com/book/en/v2/Git-Internals-The-Refspec",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "interval": {
          "description": "Interval gives an lower bound for how often the automation\nrun should be attempted.",
          "type": "string",
          "pattern": "^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$"
        },
        "sourceRef": {
          "description": "SourceRef refers to the resource giving access details\nto a git repository.",
          "type": "object",
          "required": [
            "kind",
            "name"
          ],
          "properties": {
            "apiVersion": {
              "description": "API version of the referent.",
              "type": "string"
            },
            "kind": {
              "description": "Kind of the referent.",
              "type": "string",
              "default": "GitRepository",
              "enum": [
                "GitRepository"
              ]
            },
            "name": {
              "description": "Name of the referent.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the referent, defaults to the namespace of the Kubernetes resource object that contains the reference.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "suspend": {
          "description": "Suspend tells the controller to not run this automation, until\nit is unset (or set to false). Defaults to false.",
          "type": "boolean"
        },
        "update": {
          "description": "Update gives the specification for how to update the files in\nthe repository. This can be left empty, to use the default\nvalue.",
          "type": "object",
          "default": {
            "strategy": "Setters"
          },
          "required": [
            "strategy"
          ],
          "properties": {
            "path": {
              "description": "Path to the directory containing the manifests to be updated.\nDefaults to 'None', which translates to the root path\nof the GitRepositoryRef.",
              "type": "string"
            },
            "strategy": {
              "description": "Strategy names the strategy to be used.",
              "type": "string",
              "default": "Setters",
              "enum": [
                "Setters"
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "ImageUpdateAutomationStatus defines the observed state of ImageUpdateAutomation",
      "type": "object",
      "default": {
        "observedGeneration": -1
      },
      "properties": {
        "conditions": {
          "type": "array",
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                "type": "string",
                "maxLength": 32768
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64",
                "minimum": 0
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                "type": "string",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "type": "string",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ]
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                "type": "string",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
              }
            },
            "additionalProperties": false
          }
        },
        "lastAutomationRunTime": {
          "description": "LastAutomationRunTime records the last time the controller ran\nthis automation through to completion (even if no updates were\nmade).",
          "type": "string",
          "format": "date-time"
        },
        "lastHandledReconcileAt": {
          "description": "LastHandledReconcileAt holds the value of the most recent\nreconcile request value, so a change of the annotation value\ncan be detected.",
          "type": "string"
        },
        "lastPushCommit": {
          "description": "LastPushCommit records the SHA1 of the last commit made by the\ncontroller, for this automation object",
          "type": "string"
        },
        "lastPushTime": {
          "description": "LastPushTime records the time of the last pushed change.",
          "type": "string",
          "format": "date-time"
        },
        "observedGeneration": {
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    }
  }
}
