{
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "PushSecretSpec configures the behavior of the PushSecret.",
      "type": "object",
      "required": [
        "secretStoreRefs",
        "selector"
      ],
      "properties": {
        "data": {
          "description": "Secret Data that should be pushed to providers",
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "match"
            ],
            "properties": {
              "conversionStrategy": {
                "description": "Used to define a conversion Strategy for the secret keys",
                "type": "string",
                "default": "None",
                "enum": [
                  "None",
                  "ReverseUnicode"
                ]
              },
              "match": {
                "description": "Match a given Secret Key to be pushed to the provider.",
                "type": "object",
                "required": [
                  "remoteRef"
                ],
                "properties": {
                  "remoteRef": {
                    "description": "Remote Refs to push to providers.",
                    "type": "object",
                    "required": [
                      "remoteKey"
                    ],
                    "properties": {
                      "property": {
                        "description": "Name of the property in the resulting secret",
                        "type": "string"
                      },
                      "remoteKey": {
                        "description": "Name of the resulting provider secret.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "secretKey": {
                    "description": "Secret Key to be pushed",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              },
              "metadata": {
                "description": "Metadata is metadata attached to the secret.\nThe structure of metadata is provider specific, please look it up in the provider documentation.",
                "x-kubernetes-preserve-unknown-fields": true
              }
            },
            "additionalProperties": false
          }
        },
        "deletionPolicy": {
          "description": "Deletion Policy to handle Secrets in the provider.",
          "type": "string",
          "default": "None",
          "enum": [
            "Delete",
            "None"
          ]
        },
        "refreshInterval": {
          "description": "The Interval to which External Secrets will try to push a secret definition",
          "type": "string",
          "default": "1h"
        },
        "secretStoreRefs": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "kind": {
                "description": "Kind of the SecretStore resource (SecretStore or ClusterSecretStore)",
                "type": "string",
                "default": "SecretStore",
                "enum": [
                  "SecretStore",
                  "ClusterSecretStore"
                ]
              },
              "labelSelector": {
                "description": "Optionally, sync to secret stores with label selector",
                "type": "object",
                "properties": {
                  "matchExpressions": {
                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                    "type": "array",
                    "items": {
                      "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                      "type": "object",
                      "required": [
                        "key",
                        "operator"
                      ],
                      "properties": {
                        "key": {
                          "description": "key is the label key that the selector applies to.",
                          "type": "string"
                        },
                        "operator": {
                          "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                          "type": "string"
                        },
                        "values": {
                          "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "x-kubernetes-list-type": "atomic"
                        }
                      },
                      "additionalProperties": false
                    },
                    "x-kubernetes-list-type": "atomic"
                  },
                  "matchLabels": {
                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                },
                "additionalProperties": false,
                "x-kubernetes-map-type": "atomic"
              },
              "name": {
                "description": "Optionally, sync to the SecretStore of the given name",
                "type": "string",
                "maxLength": 253,
                "minLength": 1,
                "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
              }
            },
            "additionalProperties": false
          }
        },
        "selector": {
          "description": "The Secret Selector (k8s source) for the Push Secret",
          "type": "object",
          "maxProperties": 1,
          "minProperties": 1,
          "properties": {
            "generatorRef": {
              "description": "Point to a generator to create a Secret.",
              "type": "object",
              "required": [
                "kind",
                "name"
              ],
              "properties": {
                "apiVersion": {
                  "description": "Specify the apiVersion of the generator resource",
                  "type": "string",
                  "default": "generators.external-secrets.io/v1alpha1"
                },
                "kind": {
                  "description": "Specify the Kind of the generator resource",
                  "type": "string",
                  "enum": [
                    "ACRAccessToken",
                    "ClusterGenerator",
                    "CloudsmithAccessToken",
                    "ECRAuthorizationToken",
                    "Fake",
                    "GCRAccessToken",
                    "GithubAccessToken",
                    "QuayAccessToken",
                    "Password",
                    "SSHKey",
                    "STSSessionToken",
                    "UUID",
                    "VaultDynamicSecret",
                    "Webhook",
                    "Grafana",
                    "MFA"
                  ]
                },
                "name": {
                  "description": "Specify the name of the generator resource",
                  "type": "string",
                  "maxLength": 253,
                  "minLength": 1,
                  "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
                }
              },
              "additionalProperties": false
            },
            "secret": {
              "description": "Select a Secret to Push.",
              "type": "object",
              "properties": {
                "name": {
                  "description": "Name of the Secret.\nThe Secret must exist in the same namespace as the PushSecret manifest.",
                  "type": "string",
                  "maxLength": 253,
                  "minLength": 1,
                  "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
                },
                "selector": {
                  "description": "Selector chooses secrets using a labelSelector.",
                  "type": "object",
                  "properties": {
                    "matchExpressions": {
                      "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                      "type": "array",
                      "items": {
                        "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                        "type": "object",
                        "required": [
                          "key",
                          "operator"
                        ],
                        "properties": {
                          "key": {
                            "description": "key is the label key that the selector applies to.",
                            "type": "string"
                          },
                          "operator": {
                            "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                            "type": "string"
                          },
                          "values": {
                            "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "x-kubernetes-list-type": "atomic"
                          }
                        },
                        "additionalProperties": false
                      },
                      "x-kubernetes-list-type": "atomic"
                    },
                    "matchLabels": {
                      "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    }
                  },
                  "additionalProperties": false,
                  "x-kubernetes-map-type": "atomic"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "template": {
          "description": "Template defines a blueprint for the created Secret resource.",
          "type": "object",
          "properties": {
            "data": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "engineVersion": {
              "description": "EngineVersion specifies the template engine version\nthat should be used to compile/execute the\ntemplate specified in .data and .templateFrom[].",
              "type": "string",
              "default": "v2",
              "enum": [
                "v2"
              ]
            },
            "mergePolicy": {
              "type": "string",
              "default": "Replace",
              "enum": [
                "Replace",
                "Merge"
              ]
            },
            "metadata": {
              "description": "ExternalSecretTemplateMetadata defines metadata fields for the Secret blueprint.",
              "type": "object",
              "properties": {
                "annotations": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "finalizers": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "labels": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              },
              "additionalProperties": false
            },
            "templateFrom": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "configMap": {
                    "type": "object",
                    "required": [
                      "items",
                      "name"
                    ],
                    "properties": {
                      "items": {
                        "description": "A list of keys in the ConfigMap/Secret to use as templates for Secret data",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "key"
                          ],
                          "properties": {
                            "key": {
                              "description": "A key in the ConfigMap/Secret",
                              "type": "string",
                              "maxLength": 253,
                              "minLength": 1,
                              "pattern": "^[-._a-zA-Z0-9]+$"
                            },
                            "templateAs": {
                              "type": "string",
                              "default": "Values",
                              "enum": [
                                "Values",
                                "KeysAndValues"
                              ]
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "name": {
                        "description": "The name of the ConfigMap/Secret resource",
                        "type": "string",
                        "maxLength": 253,
                        "minLength": 1,
                        "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
                      }
                    },
                    "additionalProperties": false
                  },
                  "literal": {
                    "type": "string"
                  },
                  "secret": {
                    "type": "object",
                    "required": [
                      "items",
                      "name"
                    ],
                    "properties": {
                      "items": {
                        "description": "A list of keys in the ConfigMap/Secret to use as templates for Secret data",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "key"
                          ],
                          "properties": {
                            "key": {
                              "description": "A key in the ConfigMap/Secret",
                              "type": "string",
                              "maxLength": 253,
                              "minLength": 1,
                              "pattern": "^[-._a-zA-Z0-9]+$"
                            },
                            "templateAs": {
                              "type": "string",
                              "default": "Values",
                              "enum": [
                                "Values",
                                "KeysAndValues"
                              ]
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "name": {
                        "description": "The name of the ConfigMap/Secret resource",
                        "type": "string",
                        "maxLength": 253,
                        "minLength": 1,
                        "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
                      }
                    },
                    "additionalProperties": false
                  },
                  "target": {
                    "type": "string",
                    "default": "Data",
                    "enum": [
                      "Data",
                      "Annotations",
                      "Labels"
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "type": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "updatePolicy": {
          "description": "UpdatePolicy to handle Secrets in the provider.",
          "type": "string",
          "default": "Replace",
          "enum": [
            "Replace",
            "IfNotExists"
          ]
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "PushSecretStatus indicates the history of the status of PushSecret.",
      "type": "object",
      "properties": {
        "conditions": {
          "type": "array",
          "items": {
            "description": "PushSecretStatusCondition indicates the status of the PushSecret.",
            "type": "object",
            "required": [
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "type": "string"
              },
              "reason": {
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "type": {
                "description": "PushSecretConditionType indicates the condition of the PushSecret.",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "refreshTime": {
          "description": "refreshTime is the time and date the external secret was fetched and\nthe target secret updated",
          "type": "string",
          "format": "date-time",
          "nullable": true
        },
        "syncedPushSecrets": {
          "description": "Synced PushSecrets, including secrets that already exist in provider.\nMatches secret stores to PushSecretData that was stored to that secret store.",
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "required": [
                "match"
              ],
              "properties": {
                "conversionStrategy": {
                  "description": "Used to define a conversion Strategy for the secret keys",
                  "type": "string",
                  "default": "None",
                  "enum": [
                    "None",
                    "ReverseUnicode"
                  ]
                },
                "match": {
                  "description": "Match a given Secret Key to be pushed to the provider.",
                  "type": "object",
                  "required": [
                    "remoteRef"
                  ],
                  "properties": {
                    "remoteRef": {
                      "description": "Remote Refs to push to providers.",
                      "type": "object",
                      "required": [
                        "remoteKey"
                      ],
                      "properties": {
                        "property": {
                          "description": "Name of the property in the resulting secret",
                          "type": "string"
                        },
                        "remoteKey": {
                          "description": "Name of the resulting provider secret.",
                          "type": "string"
                        }
                      }
                    },
                    "secretKey": {
                      "description": "Secret Key to be pushed",
                      "type": "string"
                    }
                  }
                },
                "metadata": {
                  "description": "Metadata is metadata attached to the secret.\nThe structure of metadata is provider specific, please look it up in the provider documentation.",
                  "x-kubernetes-preserve-unknown-fields": true
                }
              }
            }
          }
        },
        "syncedResourceVersion": {
          "description": "SyncedResourceVersion keeps track of the last synced version.",
          "type": "string"
        }
      },
      "additionalProperties": false
    }
  }
}
