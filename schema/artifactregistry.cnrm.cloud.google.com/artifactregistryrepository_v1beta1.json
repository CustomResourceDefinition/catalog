{
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "apiVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "type": "object",
      "required": [
        "format",
        "location"
      ],
      "properties": {
        "cleanupPolicies": {
          "description": "Cleanup policies for this repository. Cleanup policies indicate when\ncertain package versions can be automatically deleted.\nMap keys are policy IDs supplied by users during policy creation. They must\nunique within a repository and be under 128 characters in length.",
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "action": {
                "description": "Policy action. Possible values: [\"DELETE\", \"KEEP\"].",
                "type": "string"
              },
              "condition": {
                "description": "Policy condition for matching versions.",
                "type": "object",
                "properties": {
                  "newerThan": {
                    "description": "Match versions newer than a duration.",
                    "type": "string"
                  },
                  "olderThan": {
                    "description": "Match versions older than a duration.",
                    "type": "string"
                  },
                  "packageNamePrefixes": {
                    "description": "Match versions by package prefix. Applied on any prefix match.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "tagPrefixes": {
                    "description": "Match versions by tag prefix. Applied on any prefix match.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "tagState": {
                    "description": "Match versions by tag status. Default value: \"ANY\" Possible values: [\"TAGGED\", \"UNTAGGED\", \"ANY\"].",
                    "type": "string"
                  },
                  "versionNamePrefixes": {
                    "description": "Match versions by version name prefix. Applied on any prefix match.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "additionalProperties": false
              },
              "id": {
                "type": "string"
              },
              "mostRecentVersions": {
                "description": "Policy condition for retaining a minimum number of versions. May only be\nspecified with a Keep action.",
                "type": "object",
                "properties": {
                  "keepCount": {
                    "description": "Minimum number of versions to keep.",
                    "type": "integer"
                  },
                  "packageNamePrefixes": {
                    "description": "Match versions by package prefix. Applied on any prefix match.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        },
        "cleanupPolicyDryRun": {
          "description": "If true, the cleanup pipeline is prevented from deleting versions in this\nrepository.",
          "type": "boolean"
        },
        "description": {
          "description": "The user-provided description of the repository.",
          "type": "string"
        },
        "dockerConfig": {
          "description": "Docker repository config contains repository level configuration for the repositories of docker type.",
          "type": "object",
          "properties": {
            "immutableTags": {
              "description": "The repository which enabled this flag prevents all tags from being modified, moved or deleted. This does not prevent tags from being created.",
              "type": "boolean"
            }
          },
          "additionalProperties": false
        },
        "format": {
          "description": "Immutable. The format of packages that are stored in the repository. Supported formats\ncan be found [here](https://cloud.google.com/artifact-registry/docs/supported-formats).\nYou can only create alpha formats if you are a member of the\n[alpha user group](https://cloud.google.com/artifact-registry/docs/supported-formats#alpha-access).",
          "type": "string"
        },
        "kmsKeyRef": {
          "description": "The customer managed encryption key thatâ€™s used to encrypt the\ncontents of the Repository.",
          "type": "object",
          "oneOf": [
            {
              "required": [
                "name"
              ],
              "not": {
                "required": [
                  "external"
                ]
              }
            },
            {
              "required": [
                "external"
              ],
              "not": {
                "anyOf": [
                  {
                    "required": [
                      "name"
                    ]
                  },
                  {
                    "required": [
                      "namespace"
                    ]
                  }
                ]
              }
            }
          ],
          "properties": {
            "external": {
              "description": "Allowed value: The `selfLink` field of a `KMSCryptoKey` resource.",
              "type": "string"
            },
            "name": {
              "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "location": {
          "description": "Immutable. The name of the location this repository is located in.",
          "type": "string"
        },
        "mavenConfig": {
          "description": "MavenRepositoryConfig is maven related repository details.\nProvides additional configuration details for repositories of the maven\nformat type.",
          "type": "object",
          "properties": {
            "allowSnapshotOverwrites": {
              "description": "Immutable. The repository with this flag will allow publishing the same\nsnapshot versions.",
              "type": "boolean"
            },
            "versionPolicy": {
              "description": "Immutable. Version policy defines the versions that the registry will accept. Default value: \"VERSION_POLICY_UNSPECIFIED\" Possible values: [\"VERSION_POLICY_UNSPECIFIED\", \"RELEASE\", \"SNAPSHOT\"].",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "mode": {
          "description": "Immutable. The mode configures the repository to serve artifacts from different sources. Default value: \"STANDARD_REPOSITORY\" Possible values: [\"STANDARD_REPOSITORY\", \"VIRTUAL_REPOSITORY\", \"REMOTE_REPOSITORY\"].",
          "type": "string"
        },
        "remoteRepositoryConfig": {
          "description": "Immutable. Configuration specific for a Remote Repository.",
          "type": "object",
          "properties": {
            "description": {
              "description": "Immutable. The description of the remote source.",
              "type": "string"
            },
            "dockerRepository": {
              "description": "Immutable. Specific settings for a Docker remote repository.",
              "type": "object",
              "properties": {
                "publicRepository": {
                  "description": "Immutable. Address of the remote repository. Default value: \"DOCKER_HUB\" Possible values: [\"DOCKER_HUB\"].",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "mavenRepository": {
              "description": "Immutable. Specific settings for a Maven remote repository.",
              "type": "object",
              "properties": {
                "publicRepository": {
                  "description": "Immutable. Address of the remote repository. Default value: \"MAVEN_CENTRAL\" Possible values: [\"MAVEN_CENTRAL\"].",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "npmRepository": {
              "description": "Immutable. Specific settings for an Npm remote repository.",
              "type": "object",
              "properties": {
                "publicRepository": {
                  "description": "Immutable. Address of the remote repository. Default value: \"NPMJS\" Possible values: [\"NPMJS\"].",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "pythonRepository": {
              "description": "Immutable. Specific settings for a Python remote repository.",
              "type": "object",
              "properties": {
                "publicRepository": {
                  "description": "Immutable. Address of the remote repository. Default value: \"PYPI\" Possible values: [\"PYPI\"].",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "resourceID": {
          "description": "Immutable. Optional. The repositoryId of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.",
          "type": "string"
        },
        "virtualRepositoryConfig": {
          "description": "Configuration specific for a Virtual Repository.",
          "type": "object",
          "properties": {
            "upstreamPolicies": {
              "description": "Policies that configure the upstream artifacts distributed by the Virtual\nRepository. Upstream policies cannot be set on a standard repository.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "description": "The user-provided ID of the upstream policy.",
                    "type": "string"
                  },
                  "priority": {
                    "description": "Entries with a greater priority value take precedence in the pull order.",
                    "type": "integer"
                  },
                  "repositoryRef": {
                    "description": "A reference to the repository resource, for example:\n\"projects/p1/locations/us-central1/repositories/repo1\".",
                    "type": "object",
                    "oneOf": [
                      {
                        "required": [
                          "name"
                        ],
                        "not": {
                          "required": [
                            "external"
                          ]
                        }
                      },
                      {
                        "required": [
                          "external"
                        ],
                        "not": {
                          "anyOf": [
                            {
                              "required": [
                                "name"
                              ]
                            },
                            {
                              "required": [
                                "namespace"
                              ]
                            }
                          ]
                        }
                      }
                    ],
                    "properties": {
                      "external": {
                        "description": "Allowed value: string of the format `projects/{{project}}/locations/{{location}}/repositories/{{value}}`, where {{value}} is the `name` field of an `ArtifactRegistryRepository` resource.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "status": {
      "type": "object",
      "properties": {
        "conditions": {
          "description": "Conditions represent the latest available observation of the resource's current state.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "lastTransitionTime": {
                "description": "Last time the condition transitioned from one status to another.",
                "type": "string"
              },
              "message": {
                "description": "Human-readable message indicating details about last transition.",
                "type": "string"
              },
              "reason": {
                "description": "Unique, one-word, CamelCase reason for the condition's last transition.",
                "type": "string"
              },
              "status": {
                "description": "Status is the status of the condition. Can be True, False, Unknown.",
                "type": "string"
              },
              "type": {
                "description": "Type is the type of the condition.",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "createTime": {
          "description": "The time when the repository was created.",
          "type": "string"
        },
        "name": {
          "description": "The name of the repository, for example:\n\"repo1\".",
          "type": "string"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.",
          "type": "integer"
        },
        "updateTime": {
          "description": "The time when the repository was last updated.",
          "type": "string"
        }
      },
      "additionalProperties": false
    }
  }
}
