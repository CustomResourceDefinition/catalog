{
  "description": "MSSQLDatabase is the Schema for the MSSQLDatabases API. Manages a MS SQL Database.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "MSSQLDatabaseSpec defines the desired state of MSSQLDatabase",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "deletionPolicy": {
          "description": "DeletionPolicy specifies what will happen to the underlying external\nwhen this managed resource is deleted - either \"Delete\" or \"Orphan\" the\nexternal resource.\nThis field is planned to be deprecated in favor of the ManagementPolicies\nfield in a future release. Currently, both could be set independently and\nnon-default values would be honored if the feature flag is enabled.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "type": "string",
          "default": "Delete",
          "enum": [
            "Orphan",
            "Delete"
          ]
        },
        "forProvider": {
          "type": "object",
          "properties": {
            "autoPauseDelayInMinutes": {
              "description": "Time in minutes after which database is automatically paused. A value of -1 means that automatic pause is disabled. This property is only settable for Serverless databases.",
              "type": "number"
            },
            "collation": {
              "description": "Specifies the collation of the database. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "createMode": {
              "description": "The create mode of the database. Possible values are Copy, Default, OnlineSecondary, PointInTimeRestore, Recovery, Restore, RestoreExternalBackup, RestoreExternalBackupSecondary, RestoreLongTermRetentionBackup and Secondary. Mutually exclusive with import. Changing this forces a new resource to be created. Defaults to Default.",
              "type": "string"
            },
            "creationSourceDatabaseId": {
              "description": "The ID of the source database from which to create the new database. This should only be used for databases with create_mode values that use another database as reference. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "elasticPoolId": {
              "description": "Specifies the ID of the elastic pool containing this database.",
              "type": "string"
            },
            "enclaveType": {
              "description": "Specifies the type of enclave to be used by the elastic pool. When enclave_type is not specified (e.g., the default) enclaves are not enabled on the database. Once enabled (e.g., by specifying Default or VBS) removing the enclave_type field from the configuration file will force the creation of a new resource. Possible values are Default or VBS.",
              "type": "string"
            },
            "geoBackupEnabled": {
              "description": "A boolean that specifies if the Geo Backup Policy is enabled. Defaults to true.",
              "type": "boolean"
            },
            "identity": {
              "description": "An identity block as defined below.",
              "type": "object",
              "properties": {
                "identityIds": {
                  "description": "Specifies a list of User Assigned Managed Identity IDs to be assigned to this SQL Database.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "x-kubernetes-list-type": "set"
                },
                "identityIdsRefs": {
                  "description": "References to UserAssignedIdentity in managedidentity to populate identityIds.",
                  "type": "array",
                  "items": {
                    "description": "A Reference to a named object.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "identityIdsSelector": {
                  "description": "Selector for a list of UserAssignedIdentity in managedidentity to populate identityIds.",
                  "type": "object",
                  "properties": {
                    "matchControllerRef": {
                      "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                      "type": "boolean"
                    },
                    "matchLabels": {
                      "description": "MatchLabels ensures an object with matching labels is selected.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "policy": {
                      "description": "Policies for selection.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "type": {
                  "description": "Specifies the type of Managed Service Identity that should be configured on this SQL Database. Possible value is UserAssigned.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "import": {
              "description": "A import block as documented below. Mutually exclusive with create_mode.",
              "type": "object",
              "properties": {
                "administratorLogin": {
                  "description": "Specifies the name of the SQL administrator.",
                  "type": "string"
                },
                "administratorLoginPasswordSecretRef": {
                  "description": "Specifies the password of the SQL administrator.",
                  "type": "object",
                  "required": [
                    "key",
                    "name",
                    "namespace"
                  ],
                  "properties": {
                    "key": {
                      "description": "The key to select.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the secret.",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace of the secret.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "authenticationType": {
                  "description": "Specifies the type of authentication used to access the server. Valid values are SQL or ADPassword.",
                  "type": "string"
                },
                "storageAccountId": {
                  "description": "The resource id for the storage account used to store BACPAC file. If set, private endpoint connection will be created for the storage account. Must match storage account used for storage_uri parameter.",
                  "type": "string"
                },
                "storageKeySecretRef": {
                  "description": "Specifies the access key for the storage account.",
                  "type": "object",
                  "required": [
                    "key",
                    "name",
                    "namespace"
                  ],
                  "properties": {
                    "key": {
                      "description": "The key to select.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the secret.",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace of the secret.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "storageKeyType": {
                  "description": "Specifies the type of access key for the storage account. Valid values are StorageAccessKey or SharedAccessKey.",
                  "type": "string"
                },
                "storageUri": {
                  "description": "Specifies the blob URI of the .bacpac file.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "ledgerEnabled": {
              "description": "A boolean that specifies if this is a ledger database. Defaults to false. Changing this forces a new resource to be created.",
              "type": "boolean"
            },
            "licenseType": {
              "description": "Specifies the license type applied to this database. Possible values are LicenseIncluded and BasePrice.",
              "type": "string"
            },
            "longTermRetentionPolicy": {
              "description": "A long_term_retention_policy block as defined below.",
              "type": "object",
              "properties": {
                "immutableBackupsEnabled": {
                  "type": "boolean"
                },
                "monthlyRetention": {
                  "description": "The monthly retention policy for an LTR backup in an ISO 8601 format. Valid value is between 1 to 120 months. e.g. P1Y, P1M, P4W or P30D. Defaults to PT0S.",
                  "type": "string"
                },
                "weekOfYear": {
                  "description": "The week of year to take the yearly backup. Value has to be between 1 and 52.",
                  "type": "number"
                },
                "weeklyRetention": {
                  "description": "The weekly retention policy for an LTR backup in an ISO 8601 format. Valid value is between 1 to 520 weeks. e.g. P1Y, P1M, P1W or P7D. Defaults to PT0S.",
                  "type": "string"
                },
                "yearlyRetention": {
                  "description": "The yearly retention policy for an LTR backup in an ISO 8601 format. Valid value is between 1 to 10 years. e.g. P1Y, P12M, P52W or P365D. Defaults to PT0S.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "maintenanceConfigurationName": {
              "description": "The name of the Public Maintenance Configuration window to apply to the database. Valid values include SQL_Default, SQL_EastUS_DB_1, SQL_EastUS2_DB_1, SQL_SoutheastAsia_DB_1, SQL_AustraliaEast_DB_1, SQL_NorthEurope_DB_1, SQL_SouthCentralUS_DB_1, SQL_WestUS2_DB_1, SQL_UKSouth_DB_1, SQL_WestEurope_DB_1, SQL_EastUS_DB_2, SQL_EastUS2_DB_2, SQL_WestUS2_DB_2, SQL_SoutheastAsia_DB_2, SQL_AustraliaEast_DB_2, SQL_NorthEurope_DB_2, SQL_SouthCentralUS_DB_2, SQL_UKSouth_DB_2, SQL_WestEurope_DB_2, SQL_AustraliaSoutheast_DB_1, SQL_BrazilSouth_DB_1, SQL_CanadaCentral_DB_1, SQL_CanadaEast_DB_1, SQL_CentralUS_DB_1, SQL_EastAsia_DB_1, SQL_FranceCentral_DB_1, SQL_GermanyWestCentral_DB_1, SQL_CentralIndia_DB_1, SQL_SouthIndia_DB_1, SQL_JapanEast_DB_1, SQL_JapanWest_DB_1, SQL_NorthCentralUS_DB_1, SQL_UKWest_DB_1, SQL_WestUS_DB_1, SQL_AustraliaSoutheast_DB_2, SQL_BrazilSouth_DB_2, SQL_CanadaCentral_DB_2, SQL_CanadaEast_DB_2, SQL_CentralUS_DB_2, SQL_EastAsia_DB_2, SQL_FranceCentral_DB_2, SQL_GermanyWestCentral_DB_2, SQL_CentralIndia_DB_2, SQL_SouthIndia_DB_2, SQL_JapanEast_DB_2, SQL_JapanWest_DB_2, SQL_NorthCentralUS_DB_2, SQL_UKWest_DB_2, SQL_WestUS_DB_2, SQL_WestCentralUS_DB_1, SQL_FranceSouth_DB_1, SQL_WestCentralUS_DB_2, SQL_FranceSouth_DB_2, SQL_SwitzerlandNorth_DB_1, SQL_SwitzerlandNorth_DB_2, SQL_BrazilSoutheast_DB_1, SQL_UAENorth_DB_1, SQL_BrazilSoutheast_DB_2, SQL_UAENorth_DB_2, SQL_SouthAfricaNorth_DB_1, SQL_SouthAfricaNorth_DB_2, SQL_WestUS3_DB_1, SQL_WestUS3_DB_2, SQL_SwedenCentral_DB_1, SQL_SwedenCentral_DB_2. Defaults to SQL_Default.",
              "type": "string"
            },
            "maxSizeGb": {
              "description": "The max size of the database in gigabytes.",
              "type": "number"
            },
            "minCapacity": {
              "description": "Minimal capacity that database will always have allocated, if not paused. This property is only settable for Serverless databases.",
              "type": "number"
            },
            "readReplicaCount": {
              "description": "The number of readonly secondary replicas associated with the database to which readonly application intent connections may be routed. This property is only settable for Hyperscale edition databases.",
              "type": "number"
            },
            "readScale": {
              "description": "If enabled, connections that have application intent set to readonly in their connection string may be routed to a readonly secondary replica. This property is only settable for Premium and Business Critical databases.",
              "type": "boolean"
            },
            "recoverDatabaseId": {
              "description": "The ID of the database to be recovered. This property is only applicable when the create_mode is Recovery.",
              "type": "string"
            },
            "recoveryPointId": {
              "description": "The ID of the Recovery Services Recovery Point Id to be restored. This property is only applicable when the create_mode is Recovery.",
              "type": "string"
            },
            "restoreDroppedDatabaseId": {
              "description": "The ID of the database to be restored. This property is only applicable when the create_mode is Restore.",
              "type": "string"
            },
            "restoreLongTermRetentionBackupId": {
              "description": "The ID of the long term retention backup to be restored. This property is only applicable when the create_mode is RestoreLongTermRetentionBackup.",
              "type": "string"
            },
            "restorePointInTime": {
              "description": "Specifies the point in time (ISO8601 format) of the source database that will be restored to create the new database. This property is only settable for create_mode= PointInTimeRestore databases.",
              "type": "string"
            },
            "sampleName": {
              "description": "Specifies the name of the sample schema to apply when creating this database. Possible value is AdventureWorksLT.",
              "type": "string"
            },
            "secondaryType": {
              "description": "How do you want your replica to be made? Valid values include Geo and Named. Defaults to Geo. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "serverId": {
              "description": "The id of the MS SQL Server on which to create the database. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "serverIdRef": {
              "description": "Reference to a MSSQLServer in sql to populate serverId.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "serverIdSelector": {
              "description": "Selector for a MSSQLServer in sql to populate serverId.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "shortTermRetentionPolicy": {
              "description": "A short_term_retention_policy block as defined below.",
              "type": "object",
              "properties": {
                "backupIntervalInHours": {
                  "description": "The hours between each differential backup. This is only applicable to live databases but not dropped databases. Value has to be 12 or 24. Defaults to 12 hours.",
                  "type": "number"
                },
                "retentionDays": {
                  "description": "Point In Time Restore configuration. Value has to be between 1 and 35.",
                  "type": "number"
                }
              },
              "additionalProperties": false
            },
            "skuName": {
              "description": "Specifies the name of the SKU used by the database. For example, GP_S_Gen5_2,HS_Gen4_1,BC_Gen5_2, ElasticPool, Basic,S0, P2 ,DW100c, DS100. Changing this from the HyperScale service tier to another service tier will create a new resource.",
              "type": "string"
            },
            "storageAccountType": {
              "description": "Specifies the storage account type used to store backups for this database. Possible values are Geo, GeoZone, Local and Zone. Defaults to Geo.",
              "type": "string"
            },
            "tags": {
              "description": "A mapping of tags to assign to the resource.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "threatDetectionPolicy": {
              "description": "Threat detection policy configuration. The threat_detection_policy block supports fields documented below.",
              "type": "object",
              "properties": {
                "disabledAlerts": {
                  "description": "Specifies a list of alerts which should be disabled. Possible values include Access_Anomaly, Sql_Injection and Sql_Injection_Vulnerability.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "x-kubernetes-list-type": "set"
                },
                "emailAccountAdmins": {
                  "description": "Should the account administrators be emailed when this alert is triggered? Possible values are Enabled or Disabled. Defaults to Disabled.",
                  "type": "string"
                },
                "emailAddresses": {
                  "description": "A list of email addresses which alerts should be sent to.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "x-kubernetes-list-type": "set"
                },
                "retentionDays": {
                  "description": "Specifies the number of days to keep in the Threat Detection audit logs.",
                  "type": "number"
                },
                "state": {
                  "description": "The State of the Policy. Possible values are Enabled or Disabled. Defaults to Disabled.",
                  "type": "string"
                },
                "storageAccountAccessKeySecretRef": {
                  "description": "Specifies the identifier key of the Threat Detection audit storage account. Required if state is Enabled.",
                  "type": "object",
                  "required": [
                    "key",
                    "name",
                    "namespace"
                  ],
                  "properties": {
                    "key": {
                      "description": "The key to select.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the secret.",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace of the secret.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "storageEndpoint": {
                  "description": "Specifies the blob storage endpoint (e.g. https://example.blob.core.windows.net). This blob storage will hold all Threat Detection audit logs. Required if state is Enabled.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "transparentDataEncryptionEnabled": {
              "description": "If set to true, Transparent Data Encryption will be enabled on the database. Defaults to true.",
              "type": "boolean"
            },
            "transparentDataEncryptionKeyAutomaticRotationEnabled": {
              "description": "Boolean flag to specify whether TDE automatically rotates the encryption Key to latest version or not. Possible values are true or false. Defaults to false.",
              "type": "boolean"
            },
            "transparentDataEncryptionKeyVaultKeyId": {
              "description": "The fully versioned Key Vault Key URL (e.g. 'https://\u003cYourVaultName\u003e.vault.azure.net/keys/\u003cYourKeyName\u003e/\u003cYourKeyVersion\u003e) to be used as the Customer Managed Key(CMK/BYOK) for the Transparent Data Encryption(TDE) layer.",
              "type": "string"
            },
            "transparentDataEncryptionKeyVaultKeyIdRef": {
              "description": "Reference to a Key in keyvault to populate transparentDataEncryptionKeyVaultKeyId.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "transparentDataEncryptionKeyVaultKeyIdSelector": {
              "description": "Selector for a Key in keyvault to populate transparentDataEncryptionKeyVaultKeyId.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "zoneRedundant": {
              "description": "Whether or not this database is zone redundant, which means the replicas of this database will be spread across multiple availability zones. This property is only settable for Premium and Business Critical databases.",
              "type": "boolean"
            }
          },
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored\nunless the Management Policies feature flag is disabled.\nInitProvider holds the same fields as ForProvider, with the exception\nof Identifier and other resource reference fields. The fields that are\nin InitProvider are merged into ForProvider when the resource is created.\nThe same fields are also added to the terraform ignore_changes hook, to\navoid updating them after creation. This is useful for fields that are\nrequired on creation, but we do not desire to update them after creation,\nfor example because of an external controller is managing them, like an\nautoscaler.",
          "type": "object",
          "properties": {
            "autoPauseDelayInMinutes": {
              "description": "Time in minutes after which database is automatically paused. A value of -1 means that automatic pause is disabled. This property is only settable for Serverless databases.",
              "type": "number"
            },
            "collation": {
              "description": "Specifies the collation of the database. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "createMode": {
              "description": "The create mode of the database. Possible values are Copy, Default, OnlineSecondary, PointInTimeRestore, Recovery, Restore, RestoreExternalBackup, RestoreExternalBackupSecondary, RestoreLongTermRetentionBackup and Secondary. Mutually exclusive with import. Changing this forces a new resource to be created. Defaults to Default.",
              "type": "string"
            },
            "creationSourceDatabaseId": {
              "description": "The ID of the source database from which to create the new database. This should only be used for databases with create_mode values that use another database as reference. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "elasticPoolId": {
              "description": "Specifies the ID of the elastic pool containing this database.",
              "type": "string"
            },
            "enclaveType": {
              "description": "Specifies the type of enclave to be used by the elastic pool. When enclave_type is not specified (e.g., the default) enclaves are not enabled on the database. Once enabled (e.g., by specifying Default or VBS) removing the enclave_type field from the configuration file will force the creation of a new resource. Possible values are Default or VBS.",
              "type": "string"
            },
            "geoBackupEnabled": {
              "description": "A boolean that specifies if the Geo Backup Policy is enabled. Defaults to true.",
              "type": "boolean"
            },
            "identity": {
              "description": "An identity block as defined below.",
              "type": "object",
              "properties": {
                "identityIds": {
                  "description": "Specifies a list of User Assigned Managed Identity IDs to be assigned to this SQL Database.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "x-kubernetes-list-type": "set"
                },
                "identityIdsRefs": {
                  "description": "References to UserAssignedIdentity in managedidentity to populate identityIds.",
                  "type": "array",
                  "items": {
                    "description": "A Reference to a named object.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "identityIdsSelector": {
                  "description": "Selector for a list of UserAssignedIdentity in managedidentity to populate identityIds.",
                  "type": "object",
                  "properties": {
                    "matchControllerRef": {
                      "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                      "type": "boolean"
                    },
                    "matchLabels": {
                      "description": "MatchLabels ensures an object with matching labels is selected.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "policy": {
                      "description": "Policies for selection.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "type": {
                  "description": "Specifies the type of Managed Service Identity that should be configured on this SQL Database. Possible value is UserAssigned.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "import": {
              "description": "A import block as documented below. Mutually exclusive with create_mode.",
              "type": "object",
              "required": [
                "administratorLoginPasswordSecretRef",
                "storageKeySecretRef"
              ],
              "properties": {
                "administratorLogin": {
                  "description": "Specifies the name of the SQL administrator.",
                  "type": "string"
                },
                "administratorLoginPasswordSecretRef": {
                  "description": "Specifies the password of the SQL administrator.",
                  "type": "object",
                  "required": [
                    "key",
                    "name",
                    "namespace"
                  ],
                  "properties": {
                    "key": {
                      "description": "The key to select.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the secret.",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace of the secret.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "authenticationType": {
                  "description": "Specifies the type of authentication used to access the server. Valid values are SQL or ADPassword.",
                  "type": "string"
                },
                "storageAccountId": {
                  "description": "The resource id for the storage account used to store BACPAC file. If set, private endpoint connection will be created for the storage account. Must match storage account used for storage_uri parameter.",
                  "type": "string"
                },
                "storageKeySecretRef": {
                  "description": "Specifies the access key for the storage account.",
                  "type": "object",
                  "required": [
                    "key",
                    "name",
                    "namespace"
                  ],
                  "properties": {
                    "key": {
                      "description": "The key to select.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the secret.",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace of the secret.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "storageKeyType": {
                  "description": "Specifies the type of access key for the storage account. Valid values are StorageAccessKey or SharedAccessKey.",
                  "type": "string"
                },
                "storageUri": {
                  "description": "Specifies the blob URI of the .bacpac file.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "ledgerEnabled": {
              "description": "A boolean that specifies if this is a ledger database. Defaults to false. Changing this forces a new resource to be created.",
              "type": "boolean"
            },
            "licenseType": {
              "description": "Specifies the license type applied to this database. Possible values are LicenseIncluded and BasePrice.",
              "type": "string"
            },
            "longTermRetentionPolicy": {
              "description": "A long_term_retention_policy block as defined below.",
              "type": "object",
              "properties": {
                "immutableBackupsEnabled": {
                  "type": "boolean"
                },
                "monthlyRetention": {
                  "description": "The monthly retention policy for an LTR backup in an ISO 8601 format. Valid value is between 1 to 120 months. e.g. P1Y, P1M, P4W or P30D. Defaults to PT0S.",
                  "type": "string"
                },
                "weekOfYear": {
                  "description": "The week of year to take the yearly backup. Value has to be between 1 and 52.",
                  "type": "number"
                },
                "weeklyRetention": {
                  "description": "The weekly retention policy for an LTR backup in an ISO 8601 format. Valid value is between 1 to 520 weeks. e.g. P1Y, P1M, P1W or P7D. Defaults to PT0S.",
                  "type": "string"
                },
                "yearlyRetention": {
                  "description": "The yearly retention policy for an LTR backup in an ISO 8601 format. Valid value is between 1 to 10 years. e.g. P1Y, P12M, P52W or P365D. Defaults to PT0S.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "maintenanceConfigurationName": {
              "description": "The name of the Public Maintenance Configuration window to apply to the database. Valid values include SQL_Default, SQL_EastUS_DB_1, SQL_EastUS2_DB_1, SQL_SoutheastAsia_DB_1, SQL_AustraliaEast_DB_1, SQL_NorthEurope_DB_1, SQL_SouthCentralUS_DB_1, SQL_WestUS2_DB_1, SQL_UKSouth_DB_1, SQL_WestEurope_DB_1, SQL_EastUS_DB_2, SQL_EastUS2_DB_2, SQL_WestUS2_DB_2, SQL_SoutheastAsia_DB_2, SQL_AustraliaEast_DB_2, SQL_NorthEurope_DB_2, SQL_SouthCentralUS_DB_2, SQL_UKSouth_DB_2, SQL_WestEurope_DB_2, SQL_AustraliaSoutheast_DB_1, SQL_BrazilSouth_DB_1, SQL_CanadaCentral_DB_1, SQL_CanadaEast_DB_1, SQL_CentralUS_DB_1, SQL_EastAsia_DB_1, SQL_FranceCentral_DB_1, SQL_GermanyWestCentral_DB_1, SQL_CentralIndia_DB_1, SQL_SouthIndia_DB_1, SQL_JapanEast_DB_1, SQL_JapanWest_DB_1, SQL_NorthCentralUS_DB_1, SQL_UKWest_DB_1, SQL_WestUS_DB_1, SQL_AustraliaSoutheast_DB_2, SQL_BrazilSouth_DB_2, SQL_CanadaCentral_DB_2, SQL_CanadaEast_DB_2, SQL_CentralUS_DB_2, SQL_EastAsia_DB_2, SQL_FranceCentral_DB_2, SQL_GermanyWestCentral_DB_2, SQL_CentralIndia_DB_2, SQL_SouthIndia_DB_2, SQL_JapanEast_DB_2, SQL_JapanWest_DB_2, SQL_NorthCentralUS_DB_2, SQL_UKWest_DB_2, SQL_WestUS_DB_2, SQL_WestCentralUS_DB_1, SQL_FranceSouth_DB_1, SQL_WestCentralUS_DB_2, SQL_FranceSouth_DB_2, SQL_SwitzerlandNorth_DB_1, SQL_SwitzerlandNorth_DB_2, SQL_BrazilSoutheast_DB_1, SQL_UAENorth_DB_1, SQL_BrazilSoutheast_DB_2, SQL_UAENorth_DB_2, SQL_SouthAfricaNorth_DB_1, SQL_SouthAfricaNorth_DB_2, SQL_WestUS3_DB_1, SQL_WestUS3_DB_2, SQL_SwedenCentral_DB_1, SQL_SwedenCentral_DB_2. Defaults to SQL_Default.",
              "type": "string"
            },
            "maxSizeGb": {
              "description": "The max size of the database in gigabytes.",
              "type": "number"
            },
            "minCapacity": {
              "description": "Minimal capacity that database will always have allocated, if not paused. This property is only settable for Serverless databases.",
              "type": "number"
            },
            "readReplicaCount": {
              "description": "The number of readonly secondary replicas associated with the database to which readonly application intent connections may be routed. This property is only settable for Hyperscale edition databases.",
              "type": "number"
            },
            "readScale": {
              "description": "If enabled, connections that have application intent set to readonly in their connection string may be routed to a readonly secondary replica. This property is only settable for Premium and Business Critical databases.",
              "type": "boolean"
            },
            "recoverDatabaseId": {
              "description": "The ID of the database to be recovered. This property is only applicable when the create_mode is Recovery.",
              "type": "string"
            },
            "recoveryPointId": {
              "description": "The ID of the Recovery Services Recovery Point Id to be restored. This property is only applicable when the create_mode is Recovery.",
              "type": "string"
            },
            "restoreDroppedDatabaseId": {
              "description": "The ID of the database to be restored. This property is only applicable when the create_mode is Restore.",
              "type": "string"
            },
            "restoreLongTermRetentionBackupId": {
              "description": "The ID of the long term retention backup to be restored. This property is only applicable when the create_mode is RestoreLongTermRetentionBackup.",
              "type": "string"
            },
            "restorePointInTime": {
              "description": "Specifies the point in time (ISO8601 format) of the source database that will be restored to create the new database. This property is only settable for create_mode= PointInTimeRestore databases.",
              "type": "string"
            },
            "sampleName": {
              "description": "Specifies the name of the sample schema to apply when creating this database. Possible value is AdventureWorksLT.",
              "type": "string"
            },
            "secondaryType": {
              "description": "How do you want your replica to be made? Valid values include Geo and Named. Defaults to Geo. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "shortTermRetentionPolicy": {
              "description": "A short_term_retention_policy block as defined below.",
              "type": "object",
              "properties": {
                "backupIntervalInHours": {
                  "description": "The hours between each differential backup. This is only applicable to live databases but not dropped databases. Value has to be 12 or 24. Defaults to 12 hours.",
                  "type": "number"
                },
                "retentionDays": {
                  "description": "Point In Time Restore configuration. Value has to be between 1 and 35.",
                  "type": "number"
                }
              },
              "additionalProperties": false
            },
            "skuName": {
              "description": "Specifies the name of the SKU used by the database. For example, GP_S_Gen5_2,HS_Gen4_1,BC_Gen5_2, ElasticPool, Basic,S0, P2 ,DW100c, DS100. Changing this from the HyperScale service tier to another service tier will create a new resource.",
              "type": "string"
            },
            "storageAccountType": {
              "description": "Specifies the storage account type used to store backups for this database. Possible values are Geo, GeoZone, Local and Zone. Defaults to Geo.",
              "type": "string"
            },
            "tags": {
              "description": "A mapping of tags to assign to the resource.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "threatDetectionPolicy": {
              "description": "Threat detection policy configuration. The threat_detection_policy block supports fields documented below.",
              "type": "object",
              "properties": {
                "disabledAlerts": {
                  "description": "Specifies a list of alerts which should be disabled. Possible values include Access_Anomaly, Sql_Injection and Sql_Injection_Vulnerability.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "x-kubernetes-list-type": "set"
                },
                "emailAccountAdmins": {
                  "description": "Should the account administrators be emailed when this alert is triggered? Possible values are Enabled or Disabled. Defaults to Disabled.",
                  "type": "string"
                },
                "emailAddresses": {
                  "description": "A list of email addresses which alerts should be sent to.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "x-kubernetes-list-type": "set"
                },
                "retentionDays": {
                  "description": "Specifies the number of days to keep in the Threat Detection audit logs.",
                  "type": "number"
                },
                "state": {
                  "description": "The State of the Policy. Possible values are Enabled or Disabled. Defaults to Disabled.",
                  "type": "string"
                },
                "storageAccountAccessKeySecretRef": {
                  "description": "Specifies the identifier key of the Threat Detection audit storage account. Required if state is Enabled.",
                  "type": "object",
                  "required": [
                    "key",
                    "name",
                    "namespace"
                  ],
                  "properties": {
                    "key": {
                      "description": "The key to select.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the secret.",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace of the secret.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "storageEndpoint": {
                  "description": "Specifies the blob storage endpoint (e.g. https://example.blob.core.windows.net). This blob storage will hold all Threat Detection audit logs. Required if state is Enabled.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "transparentDataEncryptionEnabled": {
              "description": "If set to true, Transparent Data Encryption will be enabled on the database. Defaults to true.",
              "type": "boolean"
            },
            "transparentDataEncryptionKeyAutomaticRotationEnabled": {
              "description": "Boolean flag to specify whether TDE automatically rotates the encryption Key to latest version or not. Possible values are true or false. Defaults to false.",
              "type": "boolean"
            },
            "transparentDataEncryptionKeyVaultKeyId": {
              "description": "The fully versioned Key Vault Key URL (e.g. 'https://\u003cYourVaultName\u003e.vault.azure.net/keys/\u003cYourKeyName\u003e/\u003cYourKeyVersion\u003e) to be used as the Customer Managed Key(CMK/BYOK) for the Transparent Data Encryption(TDE) layer.",
              "type": "string"
            },
            "transparentDataEncryptionKeyVaultKeyIdRef": {
              "description": "Reference to a Key in keyvault to populate transparentDataEncryptionKeyVaultKeyId.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "transparentDataEncryptionKeyVaultKeyIdSelector": {
              "description": "Selector for a Key in keyvault to populate transparentDataEncryptionKeyVaultKeyId.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "zoneRedundant": {
              "description": "Whether or not this database is zone redundant, which means the replicas of this database will be spread across multiple availability zones. This property is only settable for Premium and Business Critical databases.",
              "type": "boolean"
            }
          },
          "additionalProperties": false
        },
        "managementPolicies": {
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out\nthrough a Crossplane feature flag.\nManagementPolicies specify the array of actions Crossplane is allowed to\ntake on the managed and external resources.\nThis field is planned to replace the DeletionPolicy field in a future\nrelease. Currently, both could be set independently and non-default\nvalues would be honored if the feature flag is enabled. If both are\ncustom, the DeletionPolicy field will be ignored.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223\nand this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers\ncan take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to\ncreate, observe, update, and delete this managed resource should be\nconfigured.",
          "type": "object",
          "default": {
            "name": "default"
          },
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "type": "object",
              "properties": {
                "resolution": {
                  "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                  "type": "string",
                  "default": "Required",
                  "enum": [
                    "Required",
                    "Optional"
                  ]
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                  "type": "string",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a\nSecret to which any connection details for this managed resource should\nbe written. Connection details frequently include the endpoint, username,\nand password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name",
            "namespace"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "MSSQLDatabaseStatus defines the observed state of MSSQLDatabase.",
      "type": "object",
      "properties": {
        "atProvider": {
          "type": "object",
          "properties": {
            "autoPauseDelayInMinutes": {
              "description": "Time in minutes after which database is automatically paused. A value of -1 means that automatic pause is disabled. This property is only settable for Serverless databases.",
              "type": "number"
            },
            "collation": {
              "description": "Specifies the collation of the database. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "createMode": {
              "description": "The create mode of the database. Possible values are Copy, Default, OnlineSecondary, PointInTimeRestore, Recovery, Restore, RestoreExternalBackup, RestoreExternalBackupSecondary, RestoreLongTermRetentionBackup and Secondary. Mutually exclusive with import. Changing this forces a new resource to be created. Defaults to Default.",
              "type": "string"
            },
            "creationSourceDatabaseId": {
              "description": "The ID of the source database from which to create the new database. This should only be used for databases with create_mode values that use another database as reference. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "elasticPoolId": {
              "description": "Specifies the ID of the elastic pool containing this database.",
              "type": "string"
            },
            "enclaveType": {
              "description": "Specifies the type of enclave to be used by the elastic pool. When enclave_type is not specified (e.g., the default) enclaves are not enabled on the database. Once enabled (e.g., by specifying Default or VBS) removing the enclave_type field from the configuration file will force the creation of a new resource. Possible values are Default or VBS.",
              "type": "string"
            },
            "geoBackupEnabled": {
              "description": "A boolean that specifies if the Geo Backup Policy is enabled. Defaults to true.",
              "type": "boolean"
            },
            "id": {
              "description": "The ID of the MS SQL Database.",
              "type": "string"
            },
            "identity": {
              "description": "An identity block as defined below.",
              "type": "object",
              "properties": {
                "identityIds": {
                  "description": "Specifies a list of User Assigned Managed Identity IDs to be assigned to this SQL Database.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "x-kubernetes-list-type": "set"
                },
                "type": {
                  "description": "Specifies the type of Managed Service Identity that should be configured on this SQL Database. Possible value is UserAssigned.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "import": {
              "description": "A import block as documented below. Mutually exclusive with create_mode.",
              "type": "object",
              "properties": {
                "administratorLogin": {
                  "description": "Specifies the name of the SQL administrator.",
                  "type": "string"
                },
                "authenticationType": {
                  "description": "Specifies the type of authentication used to access the server. Valid values are SQL or ADPassword.",
                  "type": "string"
                },
                "storageAccountId": {
                  "description": "The resource id for the storage account used to store BACPAC file. If set, private endpoint connection will be created for the storage account. Must match storage account used for storage_uri parameter.",
                  "type": "string"
                },
                "storageKeyType": {
                  "description": "Specifies the type of access key for the storage account. Valid values are StorageAccessKey or SharedAccessKey.",
                  "type": "string"
                },
                "storageUri": {
                  "description": "Specifies the blob URI of the .bacpac file.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "ledgerEnabled": {
              "description": "A boolean that specifies if this is a ledger database. Defaults to false. Changing this forces a new resource to be created.",
              "type": "boolean"
            },
            "licenseType": {
              "description": "Specifies the license type applied to this database. Possible values are LicenseIncluded and BasePrice.",
              "type": "string"
            },
            "longTermRetentionPolicy": {
              "description": "A long_term_retention_policy block as defined below.",
              "type": "object",
              "properties": {
                "immutableBackupsEnabled": {
                  "type": "boolean"
                },
                "monthlyRetention": {
                  "description": "The monthly retention policy for an LTR backup in an ISO 8601 format. Valid value is between 1 to 120 months. e.g. P1Y, P1M, P4W or P30D. Defaults to PT0S.",
                  "type": "string"
                },
                "weekOfYear": {
                  "description": "The week of year to take the yearly backup. Value has to be between 1 and 52.",
                  "type": "number"
                },
                "weeklyRetention": {
                  "description": "The weekly retention policy for an LTR backup in an ISO 8601 format. Valid value is between 1 to 520 weeks. e.g. P1Y, P1M, P1W or P7D. Defaults to PT0S.",
                  "type": "string"
                },
                "yearlyRetention": {
                  "description": "The yearly retention policy for an LTR backup in an ISO 8601 format. Valid value is between 1 to 10 years. e.g. P1Y, P12M, P52W or P365D. Defaults to PT0S.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "maintenanceConfigurationName": {
              "description": "The name of the Public Maintenance Configuration window to apply to the database. Valid values include SQL_Default, SQL_EastUS_DB_1, SQL_EastUS2_DB_1, SQL_SoutheastAsia_DB_1, SQL_AustraliaEast_DB_1, SQL_NorthEurope_DB_1, SQL_SouthCentralUS_DB_1, SQL_WestUS2_DB_1, SQL_UKSouth_DB_1, SQL_WestEurope_DB_1, SQL_EastUS_DB_2, SQL_EastUS2_DB_2, SQL_WestUS2_DB_2, SQL_SoutheastAsia_DB_2, SQL_AustraliaEast_DB_2, SQL_NorthEurope_DB_2, SQL_SouthCentralUS_DB_2, SQL_UKSouth_DB_2, SQL_WestEurope_DB_2, SQL_AustraliaSoutheast_DB_1, SQL_BrazilSouth_DB_1, SQL_CanadaCentral_DB_1, SQL_CanadaEast_DB_1, SQL_CentralUS_DB_1, SQL_EastAsia_DB_1, SQL_FranceCentral_DB_1, SQL_GermanyWestCentral_DB_1, SQL_CentralIndia_DB_1, SQL_SouthIndia_DB_1, SQL_JapanEast_DB_1, SQL_JapanWest_DB_1, SQL_NorthCentralUS_DB_1, SQL_UKWest_DB_1, SQL_WestUS_DB_1, SQL_AustraliaSoutheast_DB_2, SQL_BrazilSouth_DB_2, SQL_CanadaCentral_DB_2, SQL_CanadaEast_DB_2, SQL_CentralUS_DB_2, SQL_EastAsia_DB_2, SQL_FranceCentral_DB_2, SQL_GermanyWestCentral_DB_2, SQL_CentralIndia_DB_2, SQL_SouthIndia_DB_2, SQL_JapanEast_DB_2, SQL_JapanWest_DB_2, SQL_NorthCentralUS_DB_2, SQL_UKWest_DB_2, SQL_WestUS_DB_2, SQL_WestCentralUS_DB_1, SQL_FranceSouth_DB_1, SQL_WestCentralUS_DB_2, SQL_FranceSouth_DB_2, SQL_SwitzerlandNorth_DB_1, SQL_SwitzerlandNorth_DB_2, SQL_BrazilSoutheast_DB_1, SQL_UAENorth_DB_1, SQL_BrazilSoutheast_DB_2, SQL_UAENorth_DB_2, SQL_SouthAfricaNorth_DB_1, SQL_SouthAfricaNorth_DB_2, SQL_WestUS3_DB_1, SQL_WestUS3_DB_2, SQL_SwedenCentral_DB_1, SQL_SwedenCentral_DB_2. Defaults to SQL_Default.",
              "type": "string"
            },
            "maxSizeGb": {
              "description": "The max size of the database in gigabytes.",
              "type": "number"
            },
            "minCapacity": {
              "description": "Minimal capacity that database will always have allocated, if not paused. This property is only settable for Serverless databases.",
              "type": "number"
            },
            "readReplicaCount": {
              "description": "The number of readonly secondary replicas associated with the database to which readonly application intent connections may be routed. This property is only settable for Hyperscale edition databases.",
              "type": "number"
            },
            "readScale": {
              "description": "If enabled, connections that have application intent set to readonly in their connection string may be routed to a readonly secondary replica. This property is only settable for Premium and Business Critical databases.",
              "type": "boolean"
            },
            "recoverDatabaseId": {
              "description": "The ID of the database to be recovered. This property is only applicable when the create_mode is Recovery.",
              "type": "string"
            },
            "recoveryPointId": {
              "description": "The ID of the Recovery Services Recovery Point Id to be restored. This property is only applicable when the create_mode is Recovery.",
              "type": "string"
            },
            "restoreDroppedDatabaseId": {
              "description": "The ID of the database to be restored. This property is only applicable when the create_mode is Restore.",
              "type": "string"
            },
            "restoreLongTermRetentionBackupId": {
              "description": "The ID of the long term retention backup to be restored. This property is only applicable when the create_mode is RestoreLongTermRetentionBackup.",
              "type": "string"
            },
            "restorePointInTime": {
              "description": "Specifies the point in time (ISO8601 format) of the source database that will be restored to create the new database. This property is only settable for create_mode= PointInTimeRestore databases.",
              "type": "string"
            },
            "sampleName": {
              "description": "Specifies the name of the sample schema to apply when creating this database. Possible value is AdventureWorksLT.",
              "type": "string"
            },
            "secondaryType": {
              "description": "How do you want your replica to be made? Valid values include Geo and Named. Defaults to Geo. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "serverId": {
              "description": "The id of the MS SQL Server on which to create the database. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "shortTermRetentionPolicy": {
              "description": "A short_term_retention_policy block as defined below.",
              "type": "object",
              "properties": {
                "backupIntervalInHours": {
                  "description": "The hours between each differential backup. This is only applicable to live databases but not dropped databases. Value has to be 12 or 24. Defaults to 12 hours.",
                  "type": "number"
                },
                "retentionDays": {
                  "description": "Point In Time Restore configuration. Value has to be between 1 and 35.",
                  "type": "number"
                }
              },
              "additionalProperties": false
            },
            "skuName": {
              "description": "Specifies the name of the SKU used by the database. For example, GP_S_Gen5_2,HS_Gen4_1,BC_Gen5_2, ElasticPool, Basic,S0, P2 ,DW100c, DS100. Changing this from the HyperScale service tier to another service tier will create a new resource.",
              "type": "string"
            },
            "storageAccountType": {
              "description": "Specifies the storage account type used to store backups for this database. Possible values are Geo, GeoZone, Local and Zone. Defaults to Geo.",
              "type": "string"
            },
            "tags": {
              "description": "A mapping of tags to assign to the resource.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "threatDetectionPolicy": {
              "description": "Threat detection policy configuration. The threat_detection_policy block supports fields documented below.",
              "type": "object",
              "properties": {
                "disabledAlerts": {
                  "description": "Specifies a list of alerts which should be disabled. Possible values include Access_Anomaly, Sql_Injection and Sql_Injection_Vulnerability.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "x-kubernetes-list-type": "set"
                },
                "emailAccountAdmins": {
                  "description": "Should the account administrators be emailed when this alert is triggered? Possible values are Enabled or Disabled. Defaults to Disabled.",
                  "type": "string"
                },
                "emailAddresses": {
                  "description": "A list of email addresses which alerts should be sent to.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "x-kubernetes-list-type": "set"
                },
                "retentionDays": {
                  "description": "Specifies the number of days to keep in the Threat Detection audit logs.",
                  "type": "number"
                },
                "state": {
                  "description": "The State of the Policy. Possible values are Enabled or Disabled. Defaults to Disabled.",
                  "type": "string"
                },
                "storageEndpoint": {
                  "description": "Specifies the blob storage endpoint (e.g. https://example.blob.core.windows.net). This blob storage will hold all Threat Detection audit logs. Required if state is Enabled.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "transparentDataEncryptionEnabled": {
              "description": "If set to true, Transparent Data Encryption will be enabled on the database. Defaults to true.",
              "type": "boolean"
            },
            "transparentDataEncryptionKeyAutomaticRotationEnabled": {
              "description": "Boolean flag to specify whether TDE automatically rotates the encryption Key to latest version or not. Possible values are true or false. Defaults to false.",
              "type": "boolean"
            },
            "transparentDataEncryptionKeyVaultKeyId": {
              "description": "The fully versioned Key Vault Key URL (e.g. 'https://\u003cYourVaultName\u003e.vault.azure.net/keys/\u003cYourKeyName\u003e/\u003cYourKeyVersion\u003e) to be used as the Customer Managed Key(CMK/BYOK) for the Transparent Data Encryption(TDE) layer.",
              "type": "string"
            },
            "zoneRedundant": {
              "description": "Whether or not this database is zone redundant, which means the replicas of this database will be spread across multiple availability zones. This property is only settable for Premium and Business Critical databases.",
              "type": "boolean"
            }
          },
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "type": "array",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one\nstatus to another.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from\none status to another, if any.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to\na resource at any point in time.",
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest metadata.generation\nwhich resulted in either a ready state, or stalled due to error\nit can not recover from without human intervention.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    }
  }
}
