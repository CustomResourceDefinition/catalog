{
  "description": "ShardingDefinition is the Schema for the shardingdefinitions API",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "ShardingDefinitionSpec defines the desired state of ShardingDefinition",
      "type": "object",
      "required": [
        "template"
      ],
      "properties": {
        "lifecycleActions": {
          "description": "Defines a set of hooks and procedures that customize the behavior of a sharding throughout its lifecycle.\n\n\nThis field is immutable.",
          "type": "object",
          "properties": {
            "postProvision": {
              "description": "Specifies the hook to be executed after a sharding's creation.\n\n\nBy setting `postProvision.preCondition`, you can determine the specific lifecycle stage at which\nthe action should trigger, available conditions for sharding include: `Immediately`, `ComponentReady`,\nand `ClusterReady`. For sharding, the `ComponentReady` condition means all components of the sharding are ready.\n\n\nWith `ComponentReady` being the default.\n\n\nThe PostProvision Action is intended to run only once.\n\n\nNote: This field is immutable once it has been set.",
              "type": "object",
              "properties": {
                "exec": {
                  "description": "Defines the command to run.\n\n\nThis field cannot be updated.",
                  "type": "object",
                  "properties": {
                    "args": {
                      "description": "Args represents the arguments that are passed to the `command` for execution.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "command": {
                      "description": "Specifies the command to be executed inside the container.\nThe working directory for this command is the container's root directory('/').\nCommands are executed directly without a shell environment, meaning shell-specific syntax ('|', etc.) is not supported.\nIf the shell is required, it must be explicitly invoked in the command.\n\n\nA successful execution is indicated by an exit status of 0; any non-zero status signifies a failure.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "container": {
                      "description": "Specifies the name of the container within the same pod whose resources will be shared with the action.\nThis allows the action to utilize the specified container's resources without executing within it.\n\n\nThe name must match one of the containers defined in `componentDefinition.spec.runtime`.\n\n\nThe resources that can be shared are included:\n\n\n- volume mounts\n\n\nThis field cannot be updated.",
                      "type": "string"
                    },
                    "env": {
                      "description": "Represents a list of environment variables that will be injected into the container.\nThese variables enable the container to adapt its behavior based on the environment it's running in.\n\n\nThis field cannot be updated.",
                      "type": "array",
                      "items": {
                        "description": "EnvVar represents an environment variable present in a Container.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
                            "type": "string"
                          },
                          "value": {
                            "description": "Variable references $(VAR_NAME) are expanded\nusing the previously defined environment variables in the container and\nany service environment variables. If a variable cannot be resolved,\nthe reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.\n\"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\".\nEscaped references will never be expanded, regardless of whether the variable\nexists or not.\nDefaults to \"\".",
                            "type": "string"
                          },
                          "valueFrom": {
                            "description": "Source for the environment variable's value. Cannot be used if value is not empty.",
                            "type": "object",
                            "properties": {
                              "configMapKeyRef": {
                                "description": "Selects a key of a ConfigMap.",
                                "type": "object",
                                "required": [
                                  "key"
                                ],
                                "properties": {
                                  "key": {
                                    "description": "The key to select.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                                    "type": "string"
                                  },
                                  "optional": {
                                    "description": "Specify whether the ConfigMap or its key must be defined",
                                    "type": "boolean"
                                  }
                                },
                                "additionalProperties": false,
                                "x-kubernetes-map-type": "atomic"
                              },
                              "fieldRef": {
                                "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['\u003cKEY\u003e']`, `metadata.annotations['\u003cKEY\u003e']`,\nspec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
                                "type": "object",
                                "required": [
                                  "fieldPath"
                                ],
                                "properties": {
                                  "apiVersion": {
                                    "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                                    "type": "string"
                                  },
                                  "fieldPath": {
                                    "description": "Path of the field to select in the specified API version.",
                                    "type": "string"
                                  }
                                },
                                "additionalProperties": false,
                                "x-kubernetes-map-type": "atomic"
                              },
                              "resourceFieldRef": {
                                "description": "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.",
                                "type": "object",
                                "required": [
                                  "resource"
                                ],
                                "properties": {
                                  "containerName": {
                                    "description": "Container name: required for volumes, optional for env vars",
                                    "type": "string"
                                  },
                                  "divisor": {
                                    "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                    "anyOf": [
                                      {
                                        "type": "integer"
                                      },
                                      {
                                        "type": "string"
                                      }
                                    ],
                                    "x-kubernetes-int-or-string": true
                                  },
                                  "resource": {
                                    "description": "Required: resource to select",
                                    "type": "string"
                                  }
                                },
                                "additionalProperties": false,
                                "x-kubernetes-map-type": "atomic"
                              },
                              "secretKeyRef": {
                                "description": "Selects a key of a secret in the pod's namespace",
                                "type": "object",
                                "required": [
                                  "key"
                                ],
                                "properties": {
                                  "key": {
                                    "description": "The key of the secret to select from.  Must be a valid secret key.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                                    "type": "string"
                                  },
                                  "optional": {
                                    "description": "Specify whether the Secret or its key must be defined",
                                    "type": "boolean"
                                  }
                                },
                                "additionalProperties": false,
                                "x-kubernetes-map-type": "atomic"
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "image": {
                      "description": "Specifies the container image to be used for running the Action.\n\n\nWhen specified, a dedicated container will be created using this image to execute the Action.\nAll actions with same image will share the same container.\n\n\nThis field cannot be updated.",
                      "type": "string"
                    },
                    "matchingKey": {
                      "description": "Used in conjunction with the `targetPodSelector` field to refine the selection of target pod(s) for Action execution.\nThe impact of this field depends on the `targetPodSelector` value:\n\n\n- When `targetPodSelector` is set to `Any` or `All`, this field will be ignored.\n- When `targetPodSelector` is set to `Role`, only those replicas whose role matches the `matchingKey`\n  will be selected for the Action.\n\n\nThis field cannot be updated.",
                      "type": "string"
                    },
                    "targetPodSelector": {
                      "description": "Defines the criteria used to select the target Pod(s) for executing the Action.\nThis is useful when there is no default target replica identified.\nIt allows for precise control over which Pod(s) the Action should run in.\n\n\nIf not specified, the Action will be executed in the pod where the Action is triggered, such as the pod\nto be removed or added; or a random pod if the Action is triggered at the component level, such as\npost-provision or pre-terminate of the component.\n\n\nThis field cannot be updated.",
                      "type": "string",
                      "enum": [
                        "Any",
                        "All",
                        "Role",
                        "Ordinal"
                      ]
                    }
                  },
                  "additionalProperties": false
                },
                "grpc": {
                  "description": "Defines the gRPC call to issue.\n\n\nThis field cannot be updated.",
                  "type": "object",
                  "required": [
                    "method",
                    "port",
                    "service"
                  ],
                  "properties": {
                    "host": {
                      "description": "The target host to connect to.\nDefaults to \"127.0.0.1\" if not specified.",
                      "type": "string"
                    },
                    "method": {
                      "description": "Name of the method to invoke on the gRPC service.",
                      "type": "string"
                    },
                    "port": {
                      "description": "The port to access on the host.\nIt may be a numeric string (e.g., \"50051\") or a named port defined in the container spec.",
                      "type": "string"
                    },
                    "request": {
                      "description": "Request payload for the gRPC method.\n\n\nKeys are proto field names (lowerCamelCase); values are strings that can include Go templates.\nTemplates are rendered with predefined action variables before the request is sent.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "response": {
                      "description": "Required response schema for the gRPC method.",
                      "type": "object",
                      "properties": {
                        "message": {
                          "description": "Name of the field in the response whose value should be output.\nPrinted to stdout on success, or stderr on failure.",
                          "type": "string"
                        },
                        "status": {
                          "description": "Name of the string field in the response that carries status information.\nIf non-empty, the action fails.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    },
                    "service": {
                      "description": "Fully-qualified name of the gRPC service to call.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "http": {
                  "description": "Defines the HTTP request to perform.\n\n\nThis field cannot be updated.",
                  "type": "object",
                  "required": [
                    "port"
                  ],
                  "properties": {
                    "body": {
                      "description": "Optional HTTP request body.\n\n\nSupports Go text/template syntax; rendered with predefined variables before sending.",
                      "type": "string"
                    },
                    "headers": {
                      "description": "Custom headers to set in the request.\nHeader values may use Go text/template syntax, rendered with predefined variables.",
                      "type": "array",
                      "items": {
                        "description": "HTTPHeader represents a single HTTP header key/value pair.",
                        "type": "object",
                        "required": [
                          "name",
                          "value"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name of the header field.",
                            "type": "string"
                          },
                          "value": {
                            "description": "Value of the header field.",
                            "type": "string"
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "host": {
                      "description": "The target host to connect to.\nDefaults to \"127.0.0.1\" if not specified.",
                      "type": "string"
                    },
                    "method": {
                      "description": "The HTTP method to use.\nDefaults to \"GET\".",
                      "type": "string",
                      "default": "GET",
                      "enum": [
                        "GET",
                        "POST",
                        "PUT",
                        "DELETE",
                        "HEAD",
                        "PATCH"
                      ]
                    },
                    "path": {
                      "description": "The path to request on the HTTP server.\nDefaults to \"/\" if not specified.",
                      "type": "string",
                      "default": "/",
                      "pattern": "^/.*"
                    },
                    "port": {
                      "description": "The port to access on the host.\nIt may be a numeric string (e.g., \"8080\") or a named port defined in the container spec.",
                      "type": "string"
                    },
                    "scheme": {
                      "description": "The scheme to use for connecting to the host.\nDefaults to \"HTTP\".",
                      "type": "string",
                      "default": "HTTP",
                      "enum": [
                        "HTTP",
                        "HTTPS"
                      ]
                    }
                  },
                  "additionalProperties": false
                },
                "matchingKey": {
                  "description": "Used in conjunction with the `targetPodSelector` field to refine the selection of target pod(s) for Action execution.\nThe impact of this field depends on the `targetPodSelector` value:\n\n\n- When `targetPodSelector` is set to `Any` or `All`, this field will be ignored.\n- When `targetPodSelector` is set to `Role`, only those replicas whose role matches the `matchingKey`\n  will be selected for the Action.\n\n\nThis field cannot be updated.",
                  "type": "string"
                },
                "preCondition": {
                  "description": "Specifies the state that the cluster must reach before the Action is executed.\nCurrently, this is only applicable to the `postProvision` action.\n\n\nThe conditions are as follows:\n\n\n- `Immediately`: Executed right after the Component object is created.\n  The readiness of the Component and its resources is not guaranteed at this stage.\n- `RuntimeReady`: The Action is triggered after the Component object has been created and all associated\n  runtime resources (e.g. Pods) are in a ready state.\n- `ComponentReady`: The Action is triggered after the Component itself is in a ready state.\n  This process does not affect the readiness state of the Component or the Cluster.\n- `ClusterReady`: The Action is executed after the Cluster is in a ready state.\n  This execution does not alter the Component or the Cluster's state of readiness.\n\n\nThis field cannot be updated.",
                  "type": "string"
                },
                "retryPolicy": {
                  "description": "Defines the strategy to be taken when retrying the Action after a failure.\n\n\nIt specifies the conditions under which the Action should be retried and the limits to apply,\nsuch as the maximum number of retries and backoff strategy.\n\n\nThis field cannot be updated.",
                  "type": "object",
                  "properties": {
                    "maxRetries": {
                      "description": "Defines the maximum number of retry attempts that should be made for a given Action.\nThis value is set to 0 by default, indicating that no retries will be made.",
                      "type": "integer",
                      "default": 0
                    },
                    "retryInterval": {
                      "description": "Indicates the duration of time to wait between each retry attempt.\nThis value is set to 0 by default, indicating that there will be no delay between retry attempts.",
                      "type": "integer",
                      "format": "int64",
                      "default": 0
                    }
                  },
                  "additionalProperties": false
                },
                "targetPodSelector": {
                  "description": "Defines the criteria used to select the target Pod(s) for executing the Action.\nThis is useful when there is no default target replica identified.\nIt allows for precise control over which Pod(s) the Action should run in.\n\n\nIf not specified, the Action will be executed in the pod where the Action is triggered, such as the pod\nto be removed or added; or a random pod if the Action is triggered at the component level, such as\npost-provision or pre-terminate of the component.\n\n\nThis field cannot be updated.",
                  "type": "string",
                  "enum": [
                    "Any",
                    "All",
                    "Role",
                    "Ordinal"
                  ]
                },
                "timeoutSeconds": {
                  "description": "Specifies the maximum duration in seconds that the Action is allowed to run.\n\n\nIf the Action does not complete within this time frame, it will be terminated.\n\n\nThis field cannot be updated.",
                  "type": "integer",
                  "format": "int32",
                  "default": 0
                }
              },
              "additionalProperties": false
            },
            "preTerminate": {
              "description": "Specifies the hook to be executed prior to terminating a sharding.\n\n\nThe PreTerminate Action is intended to run only once.\n\n\nThis action is executed immediately when a terminate operation for the sharding is initiated.\nThe actual termination and cleanup of the sharding and its associated resources will not proceed\nuntil the PreTerminate action has completed successfully.\n\n\nNote: This field is immutable once it has been set.",
              "type": "object",
              "properties": {
                "exec": {
                  "description": "Defines the command to run.\n\n\nThis field cannot be updated.",
                  "type": "object",
                  "properties": {
                    "args": {
                      "description": "Args represents the arguments that are passed to the `command` for execution.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "command": {
                      "description": "Specifies the command to be executed inside the container.\nThe working directory for this command is the container's root directory('/').\nCommands are executed directly without a shell environment, meaning shell-specific syntax ('|', etc.) is not supported.\nIf the shell is required, it must be explicitly invoked in the command.\n\n\nA successful execution is indicated by an exit status of 0; any non-zero status signifies a failure.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "container": {
                      "description": "Specifies the name of the container within the same pod whose resources will be shared with the action.\nThis allows the action to utilize the specified container's resources without executing within it.\n\n\nThe name must match one of the containers defined in `componentDefinition.spec.runtime`.\n\n\nThe resources that can be shared are included:\n\n\n- volume mounts\n\n\nThis field cannot be updated.",
                      "type": "string"
                    },
                    "env": {
                      "description": "Represents a list of environment variables that will be injected into the container.\nThese variables enable the container to adapt its behavior based on the environment it's running in.\n\n\nThis field cannot be updated.",
                      "type": "array",
                      "items": {
                        "description": "EnvVar represents an environment variable present in a Container.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
                            "type": "string"
                          },
                          "value": {
                            "description": "Variable references $(VAR_NAME) are expanded\nusing the previously defined environment variables in the container and\nany service environment variables. If a variable cannot be resolved,\nthe reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.\n\"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\".\nEscaped references will never be expanded, regardless of whether the variable\nexists or not.\nDefaults to \"\".",
                            "type": "string"
                          },
                          "valueFrom": {
                            "description": "Source for the environment variable's value. Cannot be used if value is not empty.",
                            "type": "object",
                            "properties": {
                              "configMapKeyRef": {
                                "description": "Selects a key of a ConfigMap.",
                                "type": "object",
                                "required": [
                                  "key"
                                ],
                                "properties": {
                                  "key": {
                                    "description": "The key to select.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                                    "type": "string"
                                  },
                                  "optional": {
                                    "description": "Specify whether the ConfigMap or its key must be defined",
                                    "type": "boolean"
                                  }
                                },
                                "additionalProperties": false,
                                "x-kubernetes-map-type": "atomic"
                              },
                              "fieldRef": {
                                "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['\u003cKEY\u003e']`, `metadata.annotations['\u003cKEY\u003e']`,\nspec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
                                "type": "object",
                                "required": [
                                  "fieldPath"
                                ],
                                "properties": {
                                  "apiVersion": {
                                    "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                                    "type": "string"
                                  },
                                  "fieldPath": {
                                    "description": "Path of the field to select in the specified API version.",
                                    "type": "string"
                                  }
                                },
                                "additionalProperties": false,
                                "x-kubernetes-map-type": "atomic"
                              },
                              "resourceFieldRef": {
                                "description": "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.",
                                "type": "object",
                                "required": [
                                  "resource"
                                ],
                                "properties": {
                                  "containerName": {
                                    "description": "Container name: required for volumes, optional for env vars",
                                    "type": "string"
                                  },
                                  "divisor": {
                                    "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                    "anyOf": [
                                      {
                                        "type": "integer"
                                      },
                                      {
                                        "type": "string"
                                      }
                                    ],
                                    "x-kubernetes-int-or-string": true
                                  },
                                  "resource": {
                                    "description": "Required: resource to select",
                                    "type": "string"
                                  }
                                },
                                "additionalProperties": false,
                                "x-kubernetes-map-type": "atomic"
                              },
                              "secretKeyRef": {
                                "description": "Selects a key of a secret in the pod's namespace",
                                "type": "object",
                                "required": [
                                  "key"
                                ],
                                "properties": {
                                  "key": {
                                    "description": "The key of the secret to select from.  Must be a valid secret key.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                                    "type": "string"
                                  },
                                  "optional": {
                                    "description": "Specify whether the Secret or its key must be defined",
                                    "type": "boolean"
                                  }
                                },
                                "additionalProperties": false,
                                "x-kubernetes-map-type": "atomic"
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "image": {
                      "description": "Specifies the container image to be used for running the Action.\n\n\nWhen specified, a dedicated container will be created using this image to execute the Action.\nAll actions with same image will share the same container.\n\n\nThis field cannot be updated.",
                      "type": "string"
                    },
                    "matchingKey": {
                      "description": "Used in conjunction with the `targetPodSelector` field to refine the selection of target pod(s) for Action execution.\nThe impact of this field depends on the `targetPodSelector` value:\n\n\n- When `targetPodSelector` is set to `Any` or `All`, this field will be ignored.\n- When `targetPodSelector` is set to `Role`, only those replicas whose role matches the `matchingKey`\n  will be selected for the Action.\n\n\nThis field cannot be updated.",
                      "type": "string"
                    },
                    "targetPodSelector": {
                      "description": "Defines the criteria used to select the target Pod(s) for executing the Action.\nThis is useful when there is no default target replica identified.\nIt allows for precise control over which Pod(s) the Action should run in.\n\n\nIf not specified, the Action will be executed in the pod where the Action is triggered, such as the pod\nto be removed or added; or a random pod if the Action is triggered at the component level, such as\npost-provision or pre-terminate of the component.\n\n\nThis field cannot be updated.",
                      "type": "string",
                      "enum": [
                        "Any",
                        "All",
                        "Role",
                        "Ordinal"
                      ]
                    }
                  },
                  "additionalProperties": false
                },
                "grpc": {
                  "description": "Defines the gRPC call to issue.\n\n\nThis field cannot be updated.",
                  "type": "object",
                  "required": [
                    "method",
                    "port",
                    "service"
                  ],
                  "properties": {
                    "host": {
                      "description": "The target host to connect to.\nDefaults to \"127.0.0.1\" if not specified.",
                      "type": "string"
                    },
                    "method": {
                      "description": "Name of the method to invoke on the gRPC service.",
                      "type": "string"
                    },
                    "port": {
                      "description": "The port to access on the host.\nIt may be a numeric string (e.g., \"50051\") or a named port defined in the container spec.",
                      "type": "string"
                    },
                    "request": {
                      "description": "Request payload for the gRPC method.\n\n\nKeys are proto field names (lowerCamelCase); values are strings that can include Go templates.\nTemplates are rendered with predefined action variables before the request is sent.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "response": {
                      "description": "Required response schema for the gRPC method.",
                      "type": "object",
                      "properties": {
                        "message": {
                          "description": "Name of the field in the response whose value should be output.\nPrinted to stdout on success, or stderr on failure.",
                          "type": "string"
                        },
                        "status": {
                          "description": "Name of the string field in the response that carries status information.\nIf non-empty, the action fails.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    },
                    "service": {
                      "description": "Fully-qualified name of the gRPC service to call.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "http": {
                  "description": "Defines the HTTP request to perform.\n\n\nThis field cannot be updated.",
                  "type": "object",
                  "required": [
                    "port"
                  ],
                  "properties": {
                    "body": {
                      "description": "Optional HTTP request body.\n\n\nSupports Go text/template syntax; rendered with predefined variables before sending.",
                      "type": "string"
                    },
                    "headers": {
                      "description": "Custom headers to set in the request.\nHeader values may use Go text/template syntax, rendered with predefined variables.",
                      "type": "array",
                      "items": {
                        "description": "HTTPHeader represents a single HTTP header key/value pair.",
                        "type": "object",
                        "required": [
                          "name",
                          "value"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name of the header field.",
                            "type": "string"
                          },
                          "value": {
                            "description": "Value of the header field.",
                            "type": "string"
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "host": {
                      "description": "The target host to connect to.\nDefaults to \"127.0.0.1\" if not specified.",
                      "type": "string"
                    },
                    "method": {
                      "description": "The HTTP method to use.\nDefaults to \"GET\".",
                      "type": "string",
                      "default": "GET",
                      "enum": [
                        "GET",
                        "POST",
                        "PUT",
                        "DELETE",
                        "HEAD",
                        "PATCH"
                      ]
                    },
                    "path": {
                      "description": "The path to request on the HTTP server.\nDefaults to \"/\" if not specified.",
                      "type": "string",
                      "default": "/",
                      "pattern": "^/.*"
                    },
                    "port": {
                      "description": "The port to access on the host.\nIt may be a numeric string (e.g., \"8080\") or a named port defined in the container spec.",
                      "type": "string"
                    },
                    "scheme": {
                      "description": "The scheme to use for connecting to the host.\nDefaults to \"HTTP\".",
                      "type": "string",
                      "default": "HTTP",
                      "enum": [
                        "HTTP",
                        "HTTPS"
                      ]
                    }
                  },
                  "additionalProperties": false
                },
                "matchingKey": {
                  "description": "Used in conjunction with the `targetPodSelector` field to refine the selection of target pod(s) for Action execution.\nThe impact of this field depends on the `targetPodSelector` value:\n\n\n- When `targetPodSelector` is set to `Any` or `All`, this field will be ignored.\n- When `targetPodSelector` is set to `Role`, only those replicas whose role matches the `matchingKey`\n  will be selected for the Action.\n\n\nThis field cannot be updated.",
                  "type": "string"
                },
                "preCondition": {
                  "description": "Specifies the state that the cluster must reach before the Action is executed.\nCurrently, this is only applicable to the `postProvision` action.\n\n\nThe conditions are as follows:\n\n\n- `Immediately`: Executed right after the Component object is created.\n  The readiness of the Component and its resources is not guaranteed at this stage.\n- `RuntimeReady`: The Action is triggered after the Component object has been created and all associated\n  runtime resources (e.g. Pods) are in a ready state.\n- `ComponentReady`: The Action is triggered after the Component itself is in a ready state.\n  This process does not affect the readiness state of the Component or the Cluster.\n- `ClusterReady`: The Action is executed after the Cluster is in a ready state.\n  This execution does not alter the Component or the Cluster's state of readiness.\n\n\nThis field cannot be updated.",
                  "type": "string"
                },
                "retryPolicy": {
                  "description": "Defines the strategy to be taken when retrying the Action after a failure.\n\n\nIt specifies the conditions under which the Action should be retried and the limits to apply,\nsuch as the maximum number of retries and backoff strategy.\n\n\nThis field cannot be updated.",
                  "type": "object",
                  "properties": {
                    "maxRetries": {
                      "description": "Defines the maximum number of retry attempts that should be made for a given Action.\nThis value is set to 0 by default, indicating that no retries will be made.",
                      "type": "integer",
                      "default": 0
                    },
                    "retryInterval": {
                      "description": "Indicates the duration of time to wait between each retry attempt.\nThis value is set to 0 by default, indicating that there will be no delay between retry attempts.",
                      "type": "integer",
                      "format": "int64",
                      "default": 0
                    }
                  },
                  "additionalProperties": false
                },
                "targetPodSelector": {
                  "description": "Defines the criteria used to select the target Pod(s) for executing the Action.\nThis is useful when there is no default target replica identified.\nIt allows for precise control over which Pod(s) the Action should run in.\n\n\nIf not specified, the Action will be executed in the pod where the Action is triggered, such as the pod\nto be removed or added; or a random pod if the Action is triggered at the component level, such as\npost-provision or pre-terminate of the component.\n\n\nThis field cannot be updated.",
                  "type": "string",
                  "enum": [
                    "Any",
                    "All",
                    "Role",
                    "Ordinal"
                  ]
                },
                "timeoutSeconds": {
                  "description": "Specifies the maximum duration in seconds that the Action is allowed to run.\n\n\nIf the Action does not complete within this time frame, it will be terminated.\n\n\nThis field cannot be updated.",
                  "type": "integer",
                  "format": "int32",
                  "default": 0
                }
              },
              "additionalProperties": false
            },
            "shardAdd": {
              "description": "Specifies the hook to be executed after a shard added.\n\n\nNote: This field is immutable once it has been set.",
              "type": "object",
              "properties": {
                "exec": {
                  "description": "Defines the command to run.\n\n\nThis field cannot be updated.",
                  "type": "object",
                  "properties": {
                    "args": {
                      "description": "Args represents the arguments that are passed to the `command` for execution.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "command": {
                      "description": "Specifies the command to be executed inside the container.\nThe working directory for this command is the container's root directory('/').\nCommands are executed directly without a shell environment, meaning shell-specific syntax ('|', etc.) is not supported.\nIf the shell is required, it must be explicitly invoked in the command.\n\n\nA successful execution is indicated by an exit status of 0; any non-zero status signifies a failure.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "container": {
                      "description": "Specifies the name of the container within the same pod whose resources will be shared with the action.\nThis allows the action to utilize the specified container's resources without executing within it.\n\n\nThe name must match one of the containers defined in `componentDefinition.spec.runtime`.\n\n\nThe resources that can be shared are included:\n\n\n- volume mounts\n\n\nThis field cannot be updated.",
                      "type": "string"
                    },
                    "env": {
                      "description": "Represents a list of environment variables that will be injected into the container.\nThese variables enable the container to adapt its behavior based on the environment it's running in.\n\n\nThis field cannot be updated.",
                      "type": "array",
                      "items": {
                        "description": "EnvVar represents an environment variable present in a Container.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
                            "type": "string"
                          },
                          "value": {
                            "description": "Variable references $(VAR_NAME) are expanded\nusing the previously defined environment variables in the container and\nany service environment variables. If a variable cannot be resolved,\nthe reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.\n\"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\".\nEscaped references will never be expanded, regardless of whether the variable\nexists or not.\nDefaults to \"\".",
                            "type": "string"
                          },
                          "valueFrom": {
                            "description": "Source for the environment variable's value. Cannot be used if value is not empty.",
                            "type": "object",
                            "properties": {
                              "configMapKeyRef": {
                                "description": "Selects a key of a ConfigMap.",
                                "type": "object",
                                "required": [
                                  "key"
                                ],
                                "properties": {
                                  "key": {
                                    "description": "The key to select.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                                    "type": "string"
                                  },
                                  "optional": {
                                    "description": "Specify whether the ConfigMap or its key must be defined",
                                    "type": "boolean"
                                  }
                                },
                                "additionalProperties": false,
                                "x-kubernetes-map-type": "atomic"
                              },
                              "fieldRef": {
                                "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['\u003cKEY\u003e']`, `metadata.annotations['\u003cKEY\u003e']`,\nspec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
                                "type": "object",
                                "required": [
                                  "fieldPath"
                                ],
                                "properties": {
                                  "apiVersion": {
                                    "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                                    "type": "string"
                                  },
                                  "fieldPath": {
                                    "description": "Path of the field to select in the specified API version.",
                                    "type": "string"
                                  }
                                },
                                "additionalProperties": false,
                                "x-kubernetes-map-type": "atomic"
                              },
                              "resourceFieldRef": {
                                "description": "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.",
                                "type": "object",
                                "required": [
                                  "resource"
                                ],
                                "properties": {
                                  "containerName": {
                                    "description": "Container name: required for volumes, optional for env vars",
                                    "type": "string"
                                  },
                                  "divisor": {
                                    "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                    "anyOf": [
                                      {
                                        "type": "integer"
                                      },
                                      {
                                        "type": "string"
                                      }
                                    ],
                                    "x-kubernetes-int-or-string": true
                                  },
                                  "resource": {
                                    "description": "Required: resource to select",
                                    "type": "string"
                                  }
                                },
                                "additionalProperties": false,
                                "x-kubernetes-map-type": "atomic"
                              },
                              "secretKeyRef": {
                                "description": "Selects a key of a secret in the pod's namespace",
                                "type": "object",
                                "required": [
                                  "key"
                                ],
                                "properties": {
                                  "key": {
                                    "description": "The key of the secret to select from.  Must be a valid secret key.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                                    "type": "string"
                                  },
                                  "optional": {
                                    "description": "Specify whether the Secret or its key must be defined",
                                    "type": "boolean"
                                  }
                                },
                                "additionalProperties": false,
                                "x-kubernetes-map-type": "atomic"
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "image": {
                      "description": "Specifies the container image to be used for running the Action.\n\n\nWhen specified, a dedicated container will be created using this image to execute the Action.\nAll actions with same image will share the same container.\n\n\nThis field cannot be updated.",
                      "type": "string"
                    },
                    "matchingKey": {
                      "description": "Used in conjunction with the `targetPodSelector` field to refine the selection of target pod(s) for Action execution.\nThe impact of this field depends on the `targetPodSelector` value:\n\n\n- When `targetPodSelector` is set to `Any` or `All`, this field will be ignored.\n- When `targetPodSelector` is set to `Role`, only those replicas whose role matches the `matchingKey`\n  will be selected for the Action.\n\n\nThis field cannot be updated.",
                      "type": "string"
                    },
                    "targetPodSelector": {
                      "description": "Defines the criteria used to select the target Pod(s) for executing the Action.\nThis is useful when there is no default target replica identified.\nIt allows for precise control over which Pod(s) the Action should run in.\n\n\nIf not specified, the Action will be executed in the pod where the Action is triggered, such as the pod\nto be removed or added; or a random pod if the Action is triggered at the component level, such as\npost-provision or pre-terminate of the component.\n\n\nThis field cannot be updated.",
                      "type": "string",
                      "enum": [
                        "Any",
                        "All",
                        "Role",
                        "Ordinal"
                      ]
                    }
                  },
                  "additionalProperties": false
                },
                "grpc": {
                  "description": "Defines the gRPC call to issue.\n\n\nThis field cannot be updated.",
                  "type": "object",
                  "required": [
                    "method",
                    "port",
                    "service"
                  ],
                  "properties": {
                    "host": {
                      "description": "The target host to connect to.\nDefaults to \"127.0.0.1\" if not specified.",
                      "type": "string"
                    },
                    "method": {
                      "description": "Name of the method to invoke on the gRPC service.",
                      "type": "string"
                    },
                    "port": {
                      "description": "The port to access on the host.\nIt may be a numeric string (e.g., \"50051\") or a named port defined in the container spec.",
                      "type": "string"
                    },
                    "request": {
                      "description": "Request payload for the gRPC method.\n\n\nKeys are proto field names (lowerCamelCase); values are strings that can include Go templates.\nTemplates are rendered with predefined action variables before the request is sent.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "response": {
                      "description": "Required response schema for the gRPC method.",
                      "type": "object",
                      "properties": {
                        "message": {
                          "description": "Name of the field in the response whose value should be output.\nPrinted to stdout on success, or stderr on failure.",
                          "type": "string"
                        },
                        "status": {
                          "description": "Name of the string field in the response that carries status information.\nIf non-empty, the action fails.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    },
                    "service": {
                      "description": "Fully-qualified name of the gRPC service to call.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "http": {
                  "description": "Defines the HTTP request to perform.\n\n\nThis field cannot be updated.",
                  "type": "object",
                  "required": [
                    "port"
                  ],
                  "properties": {
                    "body": {
                      "description": "Optional HTTP request body.\n\n\nSupports Go text/template syntax; rendered with predefined variables before sending.",
                      "type": "string"
                    },
                    "headers": {
                      "description": "Custom headers to set in the request.\nHeader values may use Go text/template syntax, rendered with predefined variables.",
                      "type": "array",
                      "items": {
                        "description": "HTTPHeader represents a single HTTP header key/value pair.",
                        "type": "object",
                        "required": [
                          "name",
                          "value"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name of the header field.",
                            "type": "string"
                          },
                          "value": {
                            "description": "Value of the header field.",
                            "type": "string"
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "host": {
                      "description": "The target host to connect to.\nDefaults to \"127.0.0.1\" if not specified.",
                      "type": "string"
                    },
                    "method": {
                      "description": "The HTTP method to use.\nDefaults to \"GET\".",
                      "type": "string",
                      "default": "GET",
                      "enum": [
                        "GET",
                        "POST",
                        "PUT",
                        "DELETE",
                        "HEAD",
                        "PATCH"
                      ]
                    },
                    "path": {
                      "description": "The path to request on the HTTP server.\nDefaults to \"/\" if not specified.",
                      "type": "string",
                      "default": "/",
                      "pattern": "^/.*"
                    },
                    "port": {
                      "description": "The port to access on the host.\nIt may be a numeric string (e.g., \"8080\") or a named port defined in the container spec.",
                      "type": "string"
                    },
                    "scheme": {
                      "description": "The scheme to use for connecting to the host.\nDefaults to \"HTTP\".",
                      "type": "string",
                      "default": "HTTP",
                      "enum": [
                        "HTTP",
                        "HTTPS"
                      ]
                    }
                  },
                  "additionalProperties": false
                },
                "matchingKey": {
                  "description": "Used in conjunction with the `targetPodSelector` field to refine the selection of target pod(s) for Action execution.\nThe impact of this field depends on the `targetPodSelector` value:\n\n\n- When `targetPodSelector` is set to `Any` or `All`, this field will be ignored.\n- When `targetPodSelector` is set to `Role`, only those replicas whose role matches the `matchingKey`\n  will be selected for the Action.\n\n\nThis field cannot be updated.",
                  "type": "string"
                },
                "preCondition": {
                  "description": "Specifies the state that the cluster must reach before the Action is executed.\nCurrently, this is only applicable to the `postProvision` action.\n\n\nThe conditions are as follows:\n\n\n- `Immediately`: Executed right after the Component object is created.\n  The readiness of the Component and its resources is not guaranteed at this stage.\n- `RuntimeReady`: The Action is triggered after the Component object has been created and all associated\n  runtime resources (e.g. Pods) are in a ready state.\n- `ComponentReady`: The Action is triggered after the Component itself is in a ready state.\n  This process does not affect the readiness state of the Component or the Cluster.\n- `ClusterReady`: The Action is executed after the Cluster is in a ready state.\n  This execution does not alter the Component or the Cluster's state of readiness.\n\n\nThis field cannot be updated.",
                  "type": "string"
                },
                "retryPolicy": {
                  "description": "Defines the strategy to be taken when retrying the Action after a failure.\n\n\nIt specifies the conditions under which the Action should be retried and the limits to apply,\nsuch as the maximum number of retries and backoff strategy.\n\n\nThis field cannot be updated.",
                  "type": "object",
                  "properties": {
                    "maxRetries": {
                      "description": "Defines the maximum number of retry attempts that should be made for a given Action.\nThis value is set to 0 by default, indicating that no retries will be made.",
                      "type": "integer",
                      "default": 0
                    },
                    "retryInterval": {
                      "description": "Indicates the duration of time to wait between each retry attempt.\nThis value is set to 0 by default, indicating that there will be no delay between retry attempts.",
                      "type": "integer",
                      "format": "int64",
                      "default": 0
                    }
                  },
                  "additionalProperties": false
                },
                "targetPodSelector": {
                  "description": "Defines the criteria used to select the target Pod(s) for executing the Action.\nThis is useful when there is no default target replica identified.\nIt allows for precise control over which Pod(s) the Action should run in.\n\n\nIf not specified, the Action will be executed in the pod where the Action is triggered, such as the pod\nto be removed or added; or a random pod if the Action is triggered at the component level, such as\npost-provision or pre-terminate of the component.\n\n\nThis field cannot be updated.",
                  "type": "string",
                  "enum": [
                    "Any",
                    "All",
                    "Role",
                    "Ordinal"
                  ]
                },
                "timeoutSeconds": {
                  "description": "Specifies the maximum duration in seconds that the Action is allowed to run.\n\n\nIf the Action does not complete within this time frame, it will be terminated.\n\n\nThis field cannot be updated.",
                  "type": "integer",
                  "format": "int32",
                  "default": 0
                }
              },
              "additionalProperties": false
            },
            "shardRemove": {
              "description": "Specifies the hook to be executed prior to remove a shard.\n\n\nNote: This field is immutable once it has been set.",
              "type": "object",
              "properties": {
                "exec": {
                  "description": "Defines the command to run.\n\n\nThis field cannot be updated.",
                  "type": "object",
                  "properties": {
                    "args": {
                      "description": "Args represents the arguments that are passed to the `command` for execution.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "command": {
                      "description": "Specifies the command to be executed inside the container.\nThe working directory for this command is the container's root directory('/').\nCommands are executed directly without a shell environment, meaning shell-specific syntax ('|', etc.) is not supported.\nIf the shell is required, it must be explicitly invoked in the command.\n\n\nA successful execution is indicated by an exit status of 0; any non-zero status signifies a failure.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "container": {
                      "description": "Specifies the name of the container within the same pod whose resources will be shared with the action.\nThis allows the action to utilize the specified container's resources without executing within it.\n\n\nThe name must match one of the containers defined in `componentDefinition.spec.runtime`.\n\n\nThe resources that can be shared are included:\n\n\n- volume mounts\n\n\nThis field cannot be updated.",
                      "type": "string"
                    },
                    "env": {
                      "description": "Represents a list of environment variables that will be injected into the container.\nThese variables enable the container to adapt its behavior based on the environment it's running in.\n\n\nThis field cannot be updated.",
                      "type": "array",
                      "items": {
                        "description": "EnvVar represents an environment variable present in a Container.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
                            "type": "string"
                          },
                          "value": {
                            "description": "Variable references $(VAR_NAME) are expanded\nusing the previously defined environment variables in the container and\nany service environment variables. If a variable cannot be resolved,\nthe reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.\n\"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\".\nEscaped references will never be expanded, regardless of whether the variable\nexists or not.\nDefaults to \"\".",
                            "type": "string"
                          },
                          "valueFrom": {
                            "description": "Source for the environment variable's value. Cannot be used if value is not empty.",
                            "type": "object",
                            "properties": {
                              "configMapKeyRef": {
                                "description": "Selects a key of a ConfigMap.",
                                "type": "object",
                                "required": [
                                  "key"
                                ],
                                "properties": {
                                  "key": {
                                    "description": "The key to select.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                                    "type": "string"
                                  },
                                  "optional": {
                                    "description": "Specify whether the ConfigMap or its key must be defined",
                                    "type": "boolean"
                                  }
                                },
                                "additionalProperties": false,
                                "x-kubernetes-map-type": "atomic"
                              },
                              "fieldRef": {
                                "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['\u003cKEY\u003e']`, `metadata.annotations['\u003cKEY\u003e']`,\nspec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
                                "type": "object",
                                "required": [
                                  "fieldPath"
                                ],
                                "properties": {
                                  "apiVersion": {
                                    "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                                    "type": "string"
                                  },
                                  "fieldPath": {
                                    "description": "Path of the field to select in the specified API version.",
                                    "type": "string"
                                  }
                                },
                                "additionalProperties": false,
                                "x-kubernetes-map-type": "atomic"
                              },
                              "resourceFieldRef": {
                                "description": "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.",
                                "type": "object",
                                "required": [
                                  "resource"
                                ],
                                "properties": {
                                  "containerName": {
                                    "description": "Container name: required for volumes, optional for env vars",
                                    "type": "string"
                                  },
                                  "divisor": {
                                    "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                    "anyOf": [
                                      {
                                        "type": "integer"
                                      },
                                      {
                                        "type": "string"
                                      }
                                    ],
                                    "x-kubernetes-int-or-string": true
                                  },
                                  "resource": {
                                    "description": "Required: resource to select",
                                    "type": "string"
                                  }
                                },
                                "additionalProperties": false,
                                "x-kubernetes-map-type": "atomic"
                              },
                              "secretKeyRef": {
                                "description": "Selects a key of a secret in the pod's namespace",
                                "type": "object",
                                "required": [
                                  "key"
                                ],
                                "properties": {
                                  "key": {
                                    "description": "The key of the secret to select from.  Must be a valid secret key.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                                    "type": "string"
                                  },
                                  "optional": {
                                    "description": "Specify whether the Secret or its key must be defined",
                                    "type": "boolean"
                                  }
                                },
                                "additionalProperties": false,
                                "x-kubernetes-map-type": "atomic"
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "image": {
                      "description": "Specifies the container image to be used for running the Action.\n\n\nWhen specified, a dedicated container will be created using this image to execute the Action.\nAll actions with same image will share the same container.\n\n\nThis field cannot be updated.",
                      "type": "string"
                    },
                    "matchingKey": {
                      "description": "Used in conjunction with the `targetPodSelector` field to refine the selection of target pod(s) for Action execution.\nThe impact of this field depends on the `targetPodSelector` value:\n\n\n- When `targetPodSelector` is set to `Any` or `All`, this field will be ignored.\n- When `targetPodSelector` is set to `Role`, only those replicas whose role matches the `matchingKey`\n  will be selected for the Action.\n\n\nThis field cannot be updated.",
                      "type": "string"
                    },
                    "targetPodSelector": {
                      "description": "Defines the criteria used to select the target Pod(s) for executing the Action.\nThis is useful when there is no default target replica identified.\nIt allows for precise control over which Pod(s) the Action should run in.\n\n\nIf not specified, the Action will be executed in the pod where the Action is triggered, such as the pod\nto be removed or added; or a random pod if the Action is triggered at the component level, such as\npost-provision or pre-terminate of the component.\n\n\nThis field cannot be updated.",
                      "type": "string",
                      "enum": [
                        "Any",
                        "All",
                        "Role",
                        "Ordinal"
                      ]
                    }
                  },
                  "additionalProperties": false
                },
                "grpc": {
                  "description": "Defines the gRPC call to issue.\n\n\nThis field cannot be updated.",
                  "type": "object",
                  "required": [
                    "method",
                    "port",
                    "service"
                  ],
                  "properties": {
                    "host": {
                      "description": "The target host to connect to.\nDefaults to \"127.0.0.1\" if not specified.",
                      "type": "string"
                    },
                    "method": {
                      "description": "Name of the method to invoke on the gRPC service.",
                      "type": "string"
                    },
                    "port": {
                      "description": "The port to access on the host.\nIt may be a numeric string (e.g., \"50051\") or a named port defined in the container spec.",
                      "type": "string"
                    },
                    "request": {
                      "description": "Request payload for the gRPC method.\n\n\nKeys are proto field names (lowerCamelCase); values are strings that can include Go templates.\nTemplates are rendered with predefined action variables before the request is sent.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "response": {
                      "description": "Required response schema for the gRPC method.",
                      "type": "object",
                      "properties": {
                        "message": {
                          "description": "Name of the field in the response whose value should be output.\nPrinted to stdout on success, or stderr on failure.",
                          "type": "string"
                        },
                        "status": {
                          "description": "Name of the string field in the response that carries status information.\nIf non-empty, the action fails.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    },
                    "service": {
                      "description": "Fully-qualified name of the gRPC service to call.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "http": {
                  "description": "Defines the HTTP request to perform.\n\n\nThis field cannot be updated.",
                  "type": "object",
                  "required": [
                    "port"
                  ],
                  "properties": {
                    "body": {
                      "description": "Optional HTTP request body.\n\n\nSupports Go text/template syntax; rendered with predefined variables before sending.",
                      "type": "string"
                    },
                    "headers": {
                      "description": "Custom headers to set in the request.\nHeader values may use Go text/template syntax, rendered with predefined variables.",
                      "type": "array",
                      "items": {
                        "description": "HTTPHeader represents a single HTTP header key/value pair.",
                        "type": "object",
                        "required": [
                          "name",
                          "value"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name of the header field.",
                            "type": "string"
                          },
                          "value": {
                            "description": "Value of the header field.",
                            "type": "string"
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "host": {
                      "description": "The target host to connect to.\nDefaults to \"127.0.0.1\" if not specified.",
                      "type": "string"
                    },
                    "method": {
                      "description": "The HTTP method to use.\nDefaults to \"GET\".",
                      "type": "string",
                      "default": "GET",
                      "enum": [
                        "GET",
                        "POST",
                        "PUT",
                        "DELETE",
                        "HEAD",
                        "PATCH"
                      ]
                    },
                    "path": {
                      "description": "The path to request on the HTTP server.\nDefaults to \"/\" if not specified.",
                      "type": "string",
                      "default": "/",
                      "pattern": "^/.*"
                    },
                    "port": {
                      "description": "The port to access on the host.\nIt may be a numeric string (e.g., \"8080\") or a named port defined in the container spec.",
                      "type": "string"
                    },
                    "scheme": {
                      "description": "The scheme to use for connecting to the host.\nDefaults to \"HTTP\".",
                      "type": "string",
                      "default": "HTTP",
                      "enum": [
                        "HTTP",
                        "HTTPS"
                      ]
                    }
                  },
                  "additionalProperties": false
                },
                "matchingKey": {
                  "description": "Used in conjunction with the `targetPodSelector` field to refine the selection of target pod(s) for Action execution.\nThe impact of this field depends on the `targetPodSelector` value:\n\n\n- When `targetPodSelector` is set to `Any` or `All`, this field will be ignored.\n- When `targetPodSelector` is set to `Role`, only those replicas whose role matches the `matchingKey`\n  will be selected for the Action.\n\n\nThis field cannot be updated.",
                  "type": "string"
                },
                "preCondition": {
                  "description": "Specifies the state that the cluster must reach before the Action is executed.\nCurrently, this is only applicable to the `postProvision` action.\n\n\nThe conditions are as follows:\n\n\n- `Immediately`: Executed right after the Component object is created.\n  The readiness of the Component and its resources is not guaranteed at this stage.\n- `RuntimeReady`: The Action is triggered after the Component object has been created and all associated\n  runtime resources (e.g. Pods) are in a ready state.\n- `ComponentReady`: The Action is triggered after the Component itself is in a ready state.\n  This process does not affect the readiness state of the Component or the Cluster.\n- `ClusterReady`: The Action is executed after the Cluster is in a ready state.\n  This execution does not alter the Component or the Cluster's state of readiness.\n\n\nThis field cannot be updated.",
                  "type": "string"
                },
                "retryPolicy": {
                  "description": "Defines the strategy to be taken when retrying the Action after a failure.\n\n\nIt specifies the conditions under which the Action should be retried and the limits to apply,\nsuch as the maximum number of retries and backoff strategy.\n\n\nThis field cannot be updated.",
                  "type": "object",
                  "properties": {
                    "maxRetries": {
                      "description": "Defines the maximum number of retry attempts that should be made for a given Action.\nThis value is set to 0 by default, indicating that no retries will be made.",
                      "type": "integer",
                      "default": 0
                    },
                    "retryInterval": {
                      "description": "Indicates the duration of time to wait between each retry attempt.\nThis value is set to 0 by default, indicating that there will be no delay between retry attempts.",
                      "type": "integer",
                      "format": "int64",
                      "default": 0
                    }
                  },
                  "additionalProperties": false
                },
                "targetPodSelector": {
                  "description": "Defines the criteria used to select the target Pod(s) for executing the Action.\nThis is useful when there is no default target replica identified.\nIt allows for precise control over which Pod(s) the Action should run in.\n\n\nIf not specified, the Action will be executed in the pod where the Action is triggered, such as the pod\nto be removed or added; or a random pod if the Action is triggered at the component level, such as\npost-provision or pre-terminate of the component.\n\n\nThis field cannot be updated.",
                  "type": "string",
                  "enum": [
                    "Any",
                    "All",
                    "Role",
                    "Ordinal"
                  ]
                },
                "timeoutSeconds": {
                  "description": "Specifies the maximum duration in seconds that the Action is allowed to run.\n\n\nIf the Action does not complete within this time frame, it will be terminated.\n\n\nThis field cannot be updated.",
                  "type": "integer",
                  "format": "int32",
                  "default": 0
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "provisionStrategy": {
          "description": "Specifies the strategy for provisioning shards of the sharding. Only `Serial` and `Parallel` are supported.\n\n\nThis field is immutable.",
          "type": "string",
          "default": "Serial",
          "enum": [
            "Serial",
            "BestEffortParallel",
            "Parallel"
          ]
        },
        "shardsLimit": {
          "description": "Defines the upper limit of the number of shards supported by the sharding.\n\n\nThis field is immutable.",
          "type": "object",
          "required": [
            "maxShards",
            "minShards"
          ],
          "properties": {
            "maxShards": {
              "description": "The maximum limit of shards.",
              "type": "integer",
              "format": "int32"
            },
            "minShards": {
              "description": "The minimum limit of shards.",
              "type": "integer",
              "format": "int32"
            }
          },
          "additionalProperties": false,
          "x-kubernetes-validations": [
            {
              "rule": "self.minShards \u003e= 0 \u0026\u0026 self.maxShards \u003c= 2048",
              "message": "the minimum and maximum limit of shards should be in the range of [0, 2048]"
            },
            {
              "rule": "self.minShards \u003c= self.maxShards",
              "message": "the minimum shards limit should be no greater than the maximum"
            }
          ]
        },
        "systemAccounts": {
          "description": "Defines the system accounts for the sharding.\n\n\nThis field is immutable.",
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "description": "The name of the system account defined in the sharding template.\n\n\nThis field is immutable once set.",
                "type": "string"
              },
              "shared": {
                "description": "Specifies whether the account is shared across all shards in the sharding.",
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        },
        "template": {
          "description": "This field is immutable.",
          "type": "object",
          "required": [
            "compDef"
          ],
          "properties": {
            "compDef": {
              "description": "The component definition(s) that the sharding is based on.\n\n\nThe component definition can be specified using one of the following:\n\n\n- the full name\n- the regular expression pattern ('^' will be added to the beginning of the pattern automatically)\n\n\nThis field is immutable.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "tls": {
          "description": "Defines the TLS for the sharding.\n\n\nThis field is immutable.",
          "type": "object",
          "properties": {
            "shared": {
              "description": "Specifies whether the TLS configuration is shared across all shards in the sharding.",
              "type": "boolean"
            }
          },
          "additionalProperties": false
        },
        "updateStrategy": {
          "description": "Specifies the strategy for updating shards of the sharding. Only `Serial` and `Parallel` are supported.\n\n\nThis field is immutable.",
          "type": "string",
          "default": "Serial",
          "enum": [
            "Serial",
            "BestEffortParallel",
            "Parallel"
          ]
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "ShardingDefinitionStatus defines the observed state of ShardingDefinition",
      "type": "object",
      "properties": {
        "message": {
          "description": "Provides additional information about the current phase.",
          "type": "string"
        },
        "observedGeneration": {
          "description": "Refers to the most recent generation that has been observed for the ShardingDefinition.",
          "type": "integer",
          "format": "int64"
        },
        "phase": {
          "description": "Represents the current status of the ShardingDefinition. Valid values include ``, `Available`, and `Unavailable`.\nWhen the status is `Available`, the ShardingDefinition is ready and can be utilized by related objects.",
          "type": "string",
          "enum": [
            "Available",
            "Unavailable"
          ]
        }
      },
      "additionalProperties": false
    }
  }
}
