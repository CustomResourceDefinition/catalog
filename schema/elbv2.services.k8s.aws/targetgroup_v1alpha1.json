{
  "description": "TargetGroup is the Schema for the TargetGroups API",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "TargetGroupSpec defines the desired state of TargetGroup.\n\nInformation about a target group.",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "healthCheckEnabled": {
          "description": "Indicates whether health checks are enabled. If the target type is lambda,\nhealth checks are disabled by default but can be enabled. If the target type\nis instance, ip, or alb, health checks are always enabled and can't be disabled.",
          "type": "boolean"
        },
        "healthCheckIntervalSeconds": {
          "description": "The approximate amount of time, in seconds, between health checks of an individual\ntarget. The range is 5-300. If the target group protocol is TCP, TLS, UDP,\nTCP_UDP, HTTP or HTTPS, the default is 30 seconds. If the target group protocol\nis GENEVE, the default is 10 seconds. If the target type is lambda, the default\nis 35 seconds.",
          "type": "integer",
          "format": "int64"
        },
        "healthCheckPath": {
          "description": "[HTTP/HTTPS health checks] The destination for health checks on the targets.\n\n[HTTP1 or HTTP2 protocol version] The ping path. The default is /.\n\n[GRPC protocol version] The path of a custom health check method with the\nformat /package.service/method. The default is /Amazon Web Services.ALB/healthcheck.",
          "type": "string"
        },
        "healthCheckPort": {
          "description": "The port the load balancer uses when performing health checks on targets.\nIf the protocol is HTTP, HTTPS, TCP, TLS, UDP, or TCP_UDP, the default is\ntraffic-port, which is the port on which each target receives traffic from\nthe load balancer. If the protocol is GENEVE, the default is port 80.",
          "type": "string"
        },
        "healthCheckProtocol": {
          "description": "The protocol the load balancer uses when performing health checks on targets.\nFor Application Load Balancers, the default is HTTP. For Network Load Balancers\nand Gateway Load Balancers, the default is TCP. The TCP protocol is not supported\nfor health checks if the protocol of the target group is HTTP or HTTPS. The\nGENEVE, TLS, UDP, and TCP_UDP protocols are not supported for health checks.",
          "type": "string"
        },
        "healthCheckTimeoutSeconds": {
          "description": "The amount of time, in seconds, during which no response from a target means\na failed health check. The range is 2â€“120 seconds. For target groups with\na protocol of HTTP, the default is 6 seconds. For target groups with a protocol\nof TCP, TLS or HTTPS, the default is 10 seconds. For target groups with a\nprotocol of GENEVE, the default is 5 seconds. If the target type is lambda,\nthe default is 30 seconds.",
          "type": "integer",
          "format": "int64"
        },
        "healthyThresholdCount": {
          "description": "The number of consecutive health check successes required before considering\na target healthy. The range is 2-10. If the target group protocol is TCP,\nTCP_UDP, UDP, TLS, HTTP or HTTPS, the default is 5. For target groups with\na protocol of GENEVE, the default is 5. If the target type is lambda, the\ndefault is 5.",
          "type": "integer",
          "format": "int64"
        },
        "ipAddressType": {
          "description": "The IP address type. The default value is ipv4.",
          "type": "string"
        },
        "matcher": {
          "description": "[HTTP/HTTPS health checks] The HTTP or gRPC codes to use when checking for\na successful response from a target. For target groups with a protocol of\nTCP, TCP_UDP, UDP or TLS the range is 200-599. For target groups with a protocol\nof HTTP or HTTPS, the range is 200-499. For target groups with a protocol\nof GENEVE, the range is 200-399.",
          "type": "object",
          "properties": {
            "grpcCode": {
              "type": "string"
            },
            "httpCode": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "name": {
          "description": "The name of the target group.\n\nThis name must be unique per region per account, can have a maximum of 32\ncharacters, must contain only alphanumeric characters or hyphens, and must\nnot begin or end with a hyphen.",
          "type": "string"
        },
        "port": {
          "description": "The port on which the targets receive traffic. This port is used unless you\nspecify a port override when registering the target. If the target is a Lambda\nfunction, this parameter does not apply. If the protocol is GENEVE, the supported\nport is 6081.",
          "type": "integer",
          "format": "int64"
        },
        "protocol": {
          "description": "The protocol to use for routing traffic to the targets. For Application Load\nBalancers, the supported protocols are HTTP and HTTPS. For Network Load Balancers,\nthe supported protocols are TCP, TLS, UDP, or TCP_UDP. For Gateway Load Balancers,\nthe supported protocol is GENEVE. A TCP_UDP listener must be associated with\na TCP_UDP target group. If the target is a Lambda function, this parameter\ndoes not apply.",
          "type": "string"
        },
        "protocolVersion": {
          "description": "[HTTP/HTTPS protocol] The protocol version. Specify GRPC to send requests\nto targets using gRPC. Specify HTTP2 to send requests to targets using HTTP/2.\nThe default is HTTP1, which sends requests to targets using HTTP/1.1.",
          "type": "string"
        },
        "tags": {
          "description": "The tags to assign to the target group.",
          "type": "array",
          "items": {
            "description": "Information about a tag.",
            "type": "object",
            "properties": {
              "key": {
                "type": "string"
              },
              "value": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "targetType": {
          "description": "The type of target that you must specify when registering targets with this\ntarget group. You can't specify targets for a target group using more than\none target type.\n\n   * instance - Register targets by instance ID. This is the default value.\n\n   * ip - Register targets by IP address. You can specify IP addresses from\n   the subnets of the virtual private cloud (VPC) for the target group, the\n   RFC 1918 range (10.0.0.0/8, 172.16.0.0/12, and 192.168.0.0/16), and the\n   RFC 6598 range (100.64.0.0/10). You can't specify publicly routable IP\n   addresses.\n\n   * lambda - Register a single Lambda function as a target.\n\n   * alb - Register a single Application Load Balancer as a target.",
          "type": "string"
        },
        "targets": {
          "description": "The targets.",
          "type": "array",
          "items": {
            "description": "Information about a target.",
            "type": "object",
            "properties": {
              "availabilityZone": {
                "type": "string"
              },
              "id": {
                "type": "string"
              },
              "port": {
                "type": "integer",
                "format": "int64"
              }
            },
            "additionalProperties": false
          }
        },
        "unhealthyThresholdCount": {
          "description": "The number of consecutive health check failures required before considering\na target unhealthy. The range is 2-10. If the target group protocol is TCP,\nTCP_UDP, UDP, TLS, HTTP or HTTPS, the default is 2. For target groups with\na protocol of GENEVE, the default is 2. If the target type is lambda, the\ndefault is 5.",
          "type": "integer",
          "format": "int64"
        },
        "vpcID": {
          "description": "The identifier of the virtual private cloud (VPC). If the target is a Lambda\nfunction, this parameter does not apply. Otherwise, this parameter is required.",
          "type": "string"
        },
        "vpcRef": {
          "description": "AWSResourceReferenceWrapper provides a wrapper around *AWSResourceReference\ntype to provide more user friendly syntax for references using 'from' field\nEx:\nAPIIDRef:\n\n\tfrom:\n\t  name: my-api",
          "type": "object",
          "properties": {
            "from": {
              "description": "AWSResourceReference provides all the values necessary to reference another\nk8s resource for finding the identifier(Id/ARN/Name)",
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "namespace": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "TargetGroupStatus defines the observed state of TargetGroup",
      "type": "object",
      "properties": {
        "ackResourceMetadata": {
          "description": "All CRs managed by ACK have a common `Status.ACKResourceMetadata` member\nthat is used to contain resource sync state, account ownership,\nconstructed ARN for the resource",
          "type": "object",
          "required": [
            "ownerAccountID",
            "region"
          ],
          "properties": {
            "arn": {
              "description": "ARN is the Amazon Resource Name for the resource. This is a\nglobally-unique identifier and is set only by the ACK service controller\nonce the controller has orchestrated the creation of the resource OR\nwhen it has verified that an \"adopted\" resource (a resource where the\nARN annotation was set by the Kubernetes user on the CR) exists and\nmatches the supplied CR's Spec field values.\nhttps://github.com/aws/aws-controllers-k8s/issues/270",
              "type": "string"
            },
            "ownerAccountID": {
              "description": "OwnerAccountID is the AWS Account ID of the account that owns the\nbackend AWS service API resource.",
              "type": "string"
            },
            "region": {
              "description": "Region is the AWS region in which the resource exists or will exist.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "conditions": {
          "description": "All CRs managed by ACK have a common `Status.Conditions` member that\ncontains a collection of `ackv1alpha1.Condition` objects that describe\nthe various terminal states of the CR and its backend AWS service API\nresource",
          "type": "array",
          "items": {
            "description": "Condition is the common struct used by all CRDs managed by ACK service\ncontrollers to indicate terminal states  of the CR and its backend AWS\nservice API resource",
            "type": "object",
            "required": [
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "Last time the condition transitioned from one status to another.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "A human readable message indicating details about the transition.",
                "type": "string"
              },
              "reason": {
                "description": "The reason for the condition's last transition.",
                "type": "string"
              },
              "status": {
                "description": "Status of the condition, one of True, False, Unknown.",
                "type": "string"
              },
              "type": {
                "description": "Type is the type of the Condition",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "loadBalancerARNs": {
          "description": "The Amazon Resource Name (ARN) of the load balancer that routes traffic to\nthis target group. You can use each target group with only one load balancer.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    }
  }
}
