{
  "description": "MonitorScheduledQueryRulesAlert is the Schema for the MonitorScheduledQueryRulesAlerts API. Manages an AlertingAction Scheduled Query Rules resource within Azure Monitor",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "MonitorScheduledQueryRulesAlertSpec defines the desired state of MonitorScheduledQueryRulesAlert",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "forProvider": {
          "type": "object",
          "properties": {
            "action": {
              "description": "An action block as defined below.",
              "type": "object",
              "properties": {
                "actionGroup": {
                  "description": "List of action group reference resource IDs.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "x-kubernetes-list-type": "set"
                },
                "actionGroupRefs": {
                  "description": "References to MonitorActionGroup in insights to populate actionGroup.",
                  "type": "array",
                  "items": {
                    "description": "A NamespacedReference to a named object.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace of the referenced object",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "actionGroupSelector": {
                  "description": "Selector for a list of MonitorActionGroup in insights to populate actionGroup.",
                  "type": "object",
                  "properties": {
                    "matchControllerRef": {
                      "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                      "type": "boolean"
                    },
                    "matchLabels": {
                      "description": "MatchLabels ensures an object with matching labels is selected.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "namespace": {
                      "description": "Namespace for the selector",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for selection.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "customWebhookPayload": {
                  "description": "Custom payload to be sent for all webhook payloads in alerting action.",
                  "type": "string"
                },
                "emailSubject": {
                  "description": "Custom subject override for all email ids in Azure action group.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "authorizedResourceIds": {
              "description": "List of Resource IDs referred into query.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-kubernetes-list-type": "set"
            },
            "authorizedResourceIdsRefs": {
              "description": "References to ApplicationInsights in insights to populate authorizedResourceIds.",
              "type": "array",
              "items": {
                "description": "A NamespacedReference to a named object.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Name of the referenced object.",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "Namespace of the referenced object",
                    "type": "string"
                  },
                  "policy": {
                    "description": "Policies for referencing.",
                    "type": "object",
                    "properties": {
                      "resolution": {
                        "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                        "type": "string",
                        "default": "Required",
                        "enum": [
                          "Required",
                          "Optional"
                        ]
                      },
                      "resolve": {
                        "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                        "type": "string",
                        "enum": [
                          "Always",
                          "IfNotPresent"
                        ]
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              }
            },
            "authorizedResourceIdsSelector": {
              "description": "Selector for a list of ApplicationInsights in insights to populate authorizedResourceIds.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "namespace": {
                  "description": "Namespace for the selector",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "autoMitigationEnabled": {
              "description": "Should the alerts in this Metric Alert be auto resolved? Defaults to false.\n-\u003e Note: auto_mitigation_enabled and throttling are mutually exclusive and cannot both be set.",
              "type": "boolean"
            },
            "dataSourceId": {
              "description": "The resource URI over which log search query is to be run. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "dataSourceIdRef": {
              "description": "Reference to a ApplicationInsights in insights to populate dataSourceId.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referenced object",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "dataSourceIdSelector": {
              "description": "Selector for a ApplicationInsights in insights to populate dataSourceId.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "namespace": {
                  "description": "Namespace for the selector",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "description": {
              "description": "The description of the scheduled query rule.",
              "type": "string"
            },
            "enabled": {
              "description": "Whether this scheduled query rule is enabled. Default is true.",
              "type": "boolean"
            },
            "frequency": {
              "description": "Frequency (in minutes) at which rule condition should be evaluated. Values must be between 5 and 1440 (inclusive).",
              "type": "number"
            },
            "location": {
              "description": "Specifies the Azure Region where the resource should exist. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "name": {
              "description": "The name of the scheduled query rule. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "query": {
              "description": "Log search query.",
              "type": "string"
            },
            "queryType": {
              "description": "The type of query results. Possible values are ResultCount and Number. Default is ResultCount. If set to ResultCount, query must include an AggregatedValue column of a numeric type, for example, Heartbeat | summarize AggregatedValue = count() by bin(TimeGenerated, 5m).",
              "type": "string"
            },
            "resourceGroupName": {
              "description": "The name of the resource group in which to create the scheduled query rule instance. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "resourceGroupNameRef": {
              "description": "Reference to a ResourceGroup in azure to populate resourceGroupName.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referenced object",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "resourceGroupNameSelector": {
              "description": "Selector for a ResourceGroup in azure to populate resourceGroupName.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "namespace": {
                  "description": "Namespace for the selector",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "severity": {
              "description": "Severity of the alert. Possible values include: 0, 1, 2, 3, or 4.",
              "type": "number"
            },
            "tags": {
              "description": "A mapping of tags to assign to the resource.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "throttling": {
              "description": "Time (in minutes) for which Alerts should be throttled or suppressed. Values must be between 0 and 10000 (inclusive).",
              "type": "number"
            },
            "timeWindow": {
              "description": "Time window for which data needs to be fetched for query (must be greater than or equal to frequency). Values must be between 5 and 2880 (inclusive).",
              "type": "number"
            },
            "trigger": {
              "description": "A trigger block as defined below.",
              "type": "object",
              "properties": {
                "metricTrigger": {
                  "description": "A metric_trigger block as defined above. Trigger condition for metric query rule.",
                  "type": "object",
                  "properties": {
                    "metricColumn": {
                      "description": "Evaluation of metric on a particular column.",
                      "type": "string"
                    },
                    "metricTriggerType": {
                      "description": "Metric Trigger Type - 'Consecutive' or 'Total'.",
                      "type": "string"
                    },
                    "operator": {
                      "description": "Evaluation operation for rule - 'GreaterThan', GreaterThanOrEqual', 'LessThan', or 'LessThanOrEqual'.",
                      "type": "string"
                    },
                    "threshold": {
                      "description": "Result or count threshold based on which rule should be triggered. Values must be between 0 and 10000 inclusive.",
                      "type": "number"
                    }
                  },
                  "additionalProperties": false
                },
                "operator": {
                  "description": "Evaluation operation for rule - 'GreaterThan', GreaterThanOrEqual', 'LessThan', or 'LessThanOrEqual'.",
                  "type": "string"
                },
                "threshold": {
                  "description": "Result or count threshold based on which rule should be triggered. Values must be between 0 and 10000 inclusive.",
                  "type": "number"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored\nunless the Management Policies feature flag is disabled.\nInitProvider holds the same fields as ForProvider, with the exception\nof Identifier and other resource reference fields. The fields that are\nin InitProvider are merged into ForProvider when the resource is created.\nThe same fields are also added to the terraform ignore_changes hook, to\navoid updating them after creation. This is useful for fields that are\nrequired on creation, but we do not desire to update them after creation,\nfor example because of an external controller is managing them, like an\nautoscaler.",
          "type": "object",
          "properties": {
            "action": {
              "description": "An action block as defined below.",
              "type": "object",
              "properties": {
                "actionGroup": {
                  "description": "List of action group reference resource IDs.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "x-kubernetes-list-type": "set"
                },
                "actionGroupRefs": {
                  "description": "References to MonitorActionGroup in insights to populate actionGroup.",
                  "type": "array",
                  "items": {
                    "description": "A NamespacedReference to a named object.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace of the referenced object",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "actionGroupSelector": {
                  "description": "Selector for a list of MonitorActionGroup in insights to populate actionGroup.",
                  "type": "object",
                  "properties": {
                    "matchControllerRef": {
                      "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                      "type": "boolean"
                    },
                    "matchLabels": {
                      "description": "MatchLabels ensures an object with matching labels is selected.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "namespace": {
                      "description": "Namespace for the selector",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for selection.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "customWebhookPayload": {
                  "description": "Custom payload to be sent for all webhook payloads in alerting action.",
                  "type": "string"
                },
                "emailSubject": {
                  "description": "Custom subject override for all email ids in Azure action group.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "authorizedResourceIds": {
              "description": "List of Resource IDs referred into query.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-kubernetes-list-type": "set"
            },
            "authorizedResourceIdsRefs": {
              "description": "References to ApplicationInsights in insights to populate authorizedResourceIds.",
              "type": "array",
              "items": {
                "description": "A NamespacedReference to a named object.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Name of the referenced object.",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "Namespace of the referenced object",
                    "type": "string"
                  },
                  "policy": {
                    "description": "Policies for referencing.",
                    "type": "object",
                    "properties": {
                      "resolution": {
                        "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                        "type": "string",
                        "default": "Required",
                        "enum": [
                          "Required",
                          "Optional"
                        ]
                      },
                      "resolve": {
                        "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                        "type": "string",
                        "enum": [
                          "Always",
                          "IfNotPresent"
                        ]
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              }
            },
            "authorizedResourceIdsSelector": {
              "description": "Selector for a list of ApplicationInsights in insights to populate authorizedResourceIds.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "namespace": {
                  "description": "Namespace for the selector",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "autoMitigationEnabled": {
              "description": "Should the alerts in this Metric Alert be auto resolved? Defaults to false.\n-\u003e Note: auto_mitigation_enabled and throttling are mutually exclusive and cannot both be set.",
              "type": "boolean"
            },
            "dataSourceId": {
              "description": "The resource URI over which log search query is to be run. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "dataSourceIdRef": {
              "description": "Reference to a ApplicationInsights in insights to populate dataSourceId.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referenced object",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "dataSourceIdSelector": {
              "description": "Selector for a ApplicationInsights in insights to populate dataSourceId.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "namespace": {
                  "description": "Namespace for the selector",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "description": {
              "description": "The description of the scheduled query rule.",
              "type": "string"
            },
            "enabled": {
              "description": "Whether this scheduled query rule is enabled. Default is true.",
              "type": "boolean"
            },
            "frequency": {
              "description": "Frequency (in minutes) at which rule condition should be evaluated. Values must be between 5 and 1440 (inclusive).",
              "type": "number"
            },
            "location": {
              "description": "Specifies the Azure Region where the resource should exist. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "name": {
              "description": "The name of the scheduled query rule. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "query": {
              "description": "Log search query.",
              "type": "string"
            },
            "queryType": {
              "description": "The type of query results. Possible values are ResultCount and Number. Default is ResultCount. If set to ResultCount, query must include an AggregatedValue column of a numeric type, for example, Heartbeat | summarize AggregatedValue = count() by bin(TimeGenerated, 5m).",
              "type": "string"
            },
            "resourceGroupName": {
              "description": "The name of the resource group in which to create the scheduled query rule instance. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "resourceGroupNameRef": {
              "description": "Reference to a ResourceGroup in azure to populate resourceGroupName.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace of the referenced object",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "resourceGroupNameSelector": {
              "description": "Selector for a ResourceGroup in azure to populate resourceGroupName.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "namespace": {
                  "description": "Namespace for the selector",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "severity": {
              "description": "Severity of the alert. Possible values include: 0, 1, 2, 3, or 4.",
              "type": "number"
            },
            "tags": {
              "description": "A mapping of tags to assign to the resource.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "throttling": {
              "description": "Time (in minutes) for which Alerts should be throttled or suppressed. Values must be between 0 and 10000 (inclusive).",
              "type": "number"
            },
            "timeWindow": {
              "description": "Time window for which data needs to be fetched for query (must be greater than or equal to frequency). Values must be between 5 and 2880 (inclusive).",
              "type": "number"
            },
            "trigger": {
              "description": "A trigger block as defined below.",
              "type": "object",
              "properties": {
                "metricTrigger": {
                  "description": "A metric_trigger block as defined above. Trigger condition for metric query rule.",
                  "type": "object",
                  "properties": {
                    "metricColumn": {
                      "description": "Evaluation of metric on a particular column.",
                      "type": "string"
                    },
                    "metricTriggerType": {
                      "description": "Metric Trigger Type - 'Consecutive' or 'Total'.",
                      "type": "string"
                    },
                    "operator": {
                      "description": "Evaluation operation for rule - 'GreaterThan', GreaterThanOrEqual', 'LessThan', or 'LessThanOrEqual'.",
                      "type": "string"
                    },
                    "threshold": {
                      "description": "Result or count threshold based on which rule should be triggered. Values must be between 0 and 10000 inclusive.",
                      "type": "number"
                    }
                  },
                  "additionalProperties": false
                },
                "operator": {
                  "description": "Evaluation operation for rule - 'GreaterThan', GreaterThanOrEqual', 'LessThan', or 'LessThanOrEqual'.",
                  "type": "string"
                },
                "threshold": {
                  "description": "Result or count threshold based on which rule should be triggered. Values must be between 0 and 10000 inclusive.",
                  "type": "number"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "managementPolicies": {
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out\nthrough a Crossplane feature flag.\nManagementPolicies specify the array of actions Crossplane is allowed to\ntake on the managed and external resources.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223\nand this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers\ncan take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to\ncreate, observe, update, and delete this managed resource should be\nconfigured.",
          "type": "object",
          "default": {
            "kind": "ClusterProviderConfig",
            "name": "default"
          },
          "required": [
            "kind",
            "name"
          ],
          "properties": {
            "kind": {
              "description": "Kind of the referenced object.",
              "type": "string"
            },
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a\nSecret to which any connection details for this managed resource should\nbe written. Connection details frequently include the endpoint, username,\nand password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false,
      "x-kubernetes-validations": [
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.action) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.action))",
          "message": "spec.forProvider.action is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.frequency) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.frequency))",
          "message": "spec.forProvider.frequency is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.location))",
          "message": "spec.forProvider.location is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.name))",
          "message": "spec.forProvider.name is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.query) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.query))",
          "message": "spec.forProvider.query is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.timeWindow) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.timeWindow))",
          "message": "spec.forProvider.timeWindow is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.trigger) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.trigger))",
          "message": "spec.forProvider.trigger is a required parameter"
        }
      ]
    },
    "status": {
      "description": "MonitorScheduledQueryRulesAlertStatus defines the observed state of MonitorScheduledQueryRulesAlert.",
      "type": "object",
      "properties": {
        "atProvider": {
          "type": "object",
          "properties": {
            "action": {
              "description": "An action block as defined below.",
              "type": "object",
              "properties": {
                "actionGroup": {
                  "description": "List of action group reference resource IDs.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "x-kubernetes-list-type": "set"
                },
                "customWebhookPayload": {
                  "description": "Custom payload to be sent for all webhook payloads in alerting action.",
                  "type": "string"
                },
                "emailSubject": {
                  "description": "Custom subject override for all email ids in Azure action group.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "authorizedResourceIds": {
              "description": "List of Resource IDs referred into query.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-kubernetes-list-type": "set"
            },
            "autoMitigationEnabled": {
              "description": "Should the alerts in this Metric Alert be auto resolved? Defaults to false.\n-\u003e Note: auto_mitigation_enabled and throttling are mutually exclusive and cannot both be set.",
              "type": "boolean"
            },
            "dataSourceId": {
              "description": "The resource URI over which log search query is to be run. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "description": {
              "description": "The description of the scheduled query rule.",
              "type": "string"
            },
            "enabled": {
              "description": "Whether this scheduled query rule is enabled. Default is true.",
              "type": "boolean"
            },
            "frequency": {
              "description": "Frequency (in minutes) at which rule condition should be evaluated. Values must be between 5 and 1440 (inclusive).",
              "type": "number"
            },
            "id": {
              "description": "The ID of the scheduled query rule.",
              "type": "string"
            },
            "location": {
              "description": "Specifies the Azure Region where the resource should exist. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "name": {
              "description": "The name of the scheduled query rule. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "query": {
              "description": "Log search query.",
              "type": "string"
            },
            "queryType": {
              "description": "The type of query results. Possible values are ResultCount and Number. Default is ResultCount. If set to ResultCount, query must include an AggregatedValue column of a numeric type, for example, Heartbeat | summarize AggregatedValue = count() by bin(TimeGenerated, 5m).",
              "type": "string"
            },
            "resourceGroupName": {
              "description": "The name of the resource group in which to create the scheduled query rule instance. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "severity": {
              "description": "Severity of the alert. Possible values include: 0, 1, 2, 3, or 4.",
              "type": "number"
            },
            "tags": {
              "description": "A mapping of tags to assign to the resource.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "throttling": {
              "description": "Time (in minutes) for which Alerts should be throttled or suppressed. Values must be between 0 and 10000 (inclusive).",
              "type": "number"
            },
            "timeWindow": {
              "description": "Time window for which data needs to be fetched for query (must be greater than or equal to frequency). Values must be between 5 and 2880 (inclusive).",
              "type": "number"
            },
            "trigger": {
              "description": "A trigger block as defined below.",
              "type": "object",
              "properties": {
                "metricTrigger": {
                  "description": "A metric_trigger block as defined above. Trigger condition for metric query rule.",
                  "type": "object",
                  "properties": {
                    "metricColumn": {
                      "description": "Evaluation of metric on a particular column.",
                      "type": "string"
                    },
                    "metricTriggerType": {
                      "description": "Metric Trigger Type - 'Consecutive' or 'Total'.",
                      "type": "string"
                    },
                    "operator": {
                      "description": "Evaluation operation for rule - 'GreaterThan', GreaterThanOrEqual', 'LessThan', or 'LessThanOrEqual'.",
                      "type": "string"
                    },
                    "threshold": {
                      "description": "Result or count threshold based on which rule should be triggered. Values must be between 0 and 10000 inclusive.",
                      "type": "number"
                    }
                  },
                  "additionalProperties": false
                },
                "operator": {
                  "description": "Evaluation operation for rule - 'GreaterThan', GreaterThanOrEqual', 'LessThan', or 'LessThanOrEqual'.",
                  "type": "string"
                },
                "threshold": {
                  "description": "Result or count threshold based on which rule should be triggered. Values must be between 0 and 10000 inclusive.",
                  "type": "number"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "type": "array",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one\nstatus to another.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from\none status to another, if any.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to\na resource at any point in time.",
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest metadata.generation\nwhich resulted in either a ready state, or stalled due to error\nit can not recover from without human intervention.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    }
  }
}
