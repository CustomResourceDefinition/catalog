{
  "description": "SecretBackendRole is the Schema for the SecretBackendRoles API. Managing roles in an SSH secret backend in Vault",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "SecretBackendRoleSpec defines the desired state of SecretBackendRole",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "deletionPolicy": {
          "description": "DeletionPolicy specifies what will happen to the underlying external\nwhen this managed resource is deleted - either \"Delete\" or \"Orphan\" the\nexternal resource.\nThis field is planned to be deprecated in favor of the ManagementPolicies\nfield in a future release. Currently, both could be set independently and\nnon-default values would be honored if the feature flag is enabled.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "type": "string",
          "default": "Delete",
          "enum": [
            "Orphan",
            "Delete"
          ]
        },
        "forProvider": {
          "type": "object",
          "properties": {
            "algorithmSigner": {
              "description": "When supplied, this value specifies a signing algorithm for the key. Possible values: ssh-rsa, rsa-sha2-256, rsa-sha2-512.",
              "type": "string"
            },
            "allowBareDomains": {
              "description": "Specifies if host certificates that are requested are allowed to use the base domains listed in allowed_domains.",
              "type": "boolean"
            },
            "allowEmptyPrincipals": {
              "description": "Allow signing certificates with no\nvalid principals (e.g. any valid principal). For backwards compatibility\nonly. The default of false is highly recommended.",
              "type": "boolean"
            },
            "allowHostCertificates": {
              "description": "Specifies if certificates are allowed to be signed for use as a 'host'.",
              "type": "boolean"
            },
            "allowSubdomains": {
              "description": "Specifies if host certificates that are requested are allowed to be subdomains of those listed in allowed_domains.",
              "type": "boolean"
            },
            "allowUserCertificates": {
              "description": "Specifies if certificates are allowed to be signed for use as a 'user'.",
              "type": "boolean"
            },
            "allowUserKeyIds": {
              "description": "Specifies if users can override the key ID for a signed certificate with the key_id field.",
              "type": "boolean"
            },
            "allowedCriticalOptions": {
              "description": "Specifies a comma-separated list of critical options that certificates can have when signed.",
              "type": "string"
            },
            "allowedDomains": {
              "description": "The list of domains for which a client can request a host certificate.",
              "type": "string"
            },
            "allowedDomainsTemplate": {
              "description": "Specifies if allowed_domains can be declared using\nidentity template policies. Non-templated domains are also permitted.",
              "type": "boolean"
            },
            "allowedExtensions": {
              "description": "Specifies a comma-separated list of extensions that certificates can have when signed.",
              "type": "string"
            },
            "allowedUserKeyConfig": {
              "description": "Set of configuration blocks to define allowed\nuser key configuration, like key type and their lengths. Can be specified multiple times.\nSee\nSet of allowed public key types and their relevant configuration",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "lengths": {
                    "description": "A list of allowed key lengths as integers.\nFor key types that do not support setting the length a value of [0] should be used.\nSetting multiple lengths is only supported on Vault 1.10+. For prior releases length\nmust be set to a single element list.\nList of allowed key lengths, vault-1.10 and above",
                    "type": "array",
                    "items": {
                      "type": "number"
                    }
                  },
                  "type": {
                    "description": "The SSH public key type.\nSupported key types are:\nrsa, ecdsa, ec, dsa, ed25519, ssh-rsa, ssh-dss, ssh-ed25519,\necdsa-sha2-nistp256, ecdsa-sha2-nistp384, ecdsa-sha2-nistp521\nKey type, choices:\nrsa, ecdsa, ec, dsa, ed25519, ssh-rsa, ssh-dss, ssh-ed25519, ecdsa-sha2-nistp256, ecdsa-sha2-nistp384, ecdsa-sha2-nistp521",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "allowedUsers": {
              "description": "Specifies a comma-separated list of usernames that are to be allowed, only if certain usernames are to be allowed.",
              "type": "string"
            },
            "allowedUsersTemplate": {
              "description": "Specifies if allowed_users can be declared using identity template policies. Non-templated users are also permitted.",
              "type": "boolean"
            },
            "backend": {
              "description": "The path where the SSH secret backend is mounted.",
              "type": "string"
            },
            "backendRef": {
              "description": "Reference to a Mount in vault to populate backend.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "backendSelector": {
              "description": "Selector for a Mount in vault to populate backend.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "cidrList": {
              "description": "The comma-separated string of CIDR blocks for which this role is applicable.",
              "type": "string"
            },
            "defaultCriticalOptions": {
              "description": "Specifies a map of critical options that certificates have when signed.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "defaultExtensions": {
              "description": "Specifies a map of extensions that certificates have when signed.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "defaultUser": {
              "description": "Specifies the default username for which a credential will be generated.",
              "type": "string"
            },
            "defaultUserTemplate": {
              "description": "If set, default_users can be specified using identity template values. A non-templated user is also permitted.",
              "type": "boolean"
            },
            "keyIdFormat": {
              "description": "Specifies a custom format for the key id of a signed certificate.",
              "type": "string"
            },
            "keyType": {
              "description": "Specifies the type of credentials generated by this role. This can be either otp, dynamic or ca.",
              "type": "string"
            },
            "maxTtl": {
              "description": "Specifies the maximum Time To Live value.",
              "type": "string"
            },
            "name": {
              "description": "Specifies the name of the role to create.\nUnique name for the role.",
              "type": "string"
            },
            "namespace": {
              "description": "The namespace to provision the resource in.\nThe value should not contain leading or trailing forward slashes.\nThe namespace is always relative to the provider's configured namespace.\nAvailable only for Vault Enterprise.\nTarget namespace. (requires Enterprise)",
              "type": "string"
            },
            "notBeforeDuration": {
              "description": "Specifies the duration by which to backdate the ValidAfter property.\nUses duration format strings.\nSpecifies the duration by which to backdate the ValidAfter property. Uses duration format strings.",
              "type": "string"
            },
            "ttl": {
              "description": "Specifies the Time To Live value.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored\nunless the Management Policies feature flag is disabled.\nInitProvider holds the same fields as ForProvider, with the exception\nof Identifier and other resource reference fields. The fields that are\nin InitProvider are merged into ForProvider when the resource is created.\nThe same fields are also added to the terraform ignore_changes hook, to\navoid updating them after creation. This is useful for fields that are\nrequired on creation, but we do not desire to update them after creation,\nfor example because of an external controller is managing them, like an\nautoscaler.",
          "type": "object",
          "properties": {
            "algorithmSigner": {
              "description": "When supplied, this value specifies a signing algorithm for the key. Possible values: ssh-rsa, rsa-sha2-256, rsa-sha2-512.",
              "type": "string"
            },
            "allowBareDomains": {
              "description": "Specifies if host certificates that are requested are allowed to use the base domains listed in allowed_domains.",
              "type": "boolean"
            },
            "allowEmptyPrincipals": {
              "description": "Allow signing certificates with no\nvalid principals (e.g. any valid principal). For backwards compatibility\nonly. The default of false is highly recommended.",
              "type": "boolean"
            },
            "allowHostCertificates": {
              "description": "Specifies if certificates are allowed to be signed for use as a 'host'.",
              "type": "boolean"
            },
            "allowSubdomains": {
              "description": "Specifies if host certificates that are requested are allowed to be subdomains of those listed in allowed_domains.",
              "type": "boolean"
            },
            "allowUserCertificates": {
              "description": "Specifies if certificates are allowed to be signed for use as a 'user'.",
              "type": "boolean"
            },
            "allowUserKeyIds": {
              "description": "Specifies if users can override the key ID for a signed certificate with the key_id field.",
              "type": "boolean"
            },
            "allowedCriticalOptions": {
              "description": "Specifies a comma-separated list of critical options that certificates can have when signed.",
              "type": "string"
            },
            "allowedDomains": {
              "description": "The list of domains for which a client can request a host certificate.",
              "type": "string"
            },
            "allowedDomainsTemplate": {
              "description": "Specifies if allowed_domains can be declared using\nidentity template policies. Non-templated domains are also permitted.",
              "type": "boolean"
            },
            "allowedExtensions": {
              "description": "Specifies a comma-separated list of extensions that certificates can have when signed.",
              "type": "string"
            },
            "allowedUserKeyConfig": {
              "description": "Set of configuration blocks to define allowed\nuser key configuration, like key type and their lengths. Can be specified multiple times.\nSee\nSet of allowed public key types and their relevant configuration",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "lengths": {
                    "description": "A list of allowed key lengths as integers.\nFor key types that do not support setting the length a value of [0] should be used.\nSetting multiple lengths is only supported on Vault 1.10+. For prior releases length\nmust be set to a single element list.\nList of allowed key lengths, vault-1.10 and above",
                    "type": "array",
                    "items": {
                      "type": "number"
                    }
                  },
                  "type": {
                    "description": "The SSH public key type.\nSupported key types are:\nrsa, ecdsa, ec, dsa, ed25519, ssh-rsa, ssh-dss, ssh-ed25519,\necdsa-sha2-nistp256, ecdsa-sha2-nistp384, ecdsa-sha2-nistp521\nKey type, choices:\nrsa, ecdsa, ec, dsa, ed25519, ssh-rsa, ssh-dss, ssh-ed25519, ecdsa-sha2-nistp256, ecdsa-sha2-nistp384, ecdsa-sha2-nistp521",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "allowedUsers": {
              "description": "Specifies a comma-separated list of usernames that are to be allowed, only if certain usernames are to be allowed.",
              "type": "string"
            },
            "allowedUsersTemplate": {
              "description": "Specifies if allowed_users can be declared using identity template policies. Non-templated users are also permitted.",
              "type": "boolean"
            },
            "backend": {
              "description": "The path where the SSH secret backend is mounted.",
              "type": "string"
            },
            "backendRef": {
              "description": "Reference to a Mount in vault to populate backend.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "backendSelector": {
              "description": "Selector for a Mount in vault to populate backend.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "cidrList": {
              "description": "The comma-separated string of CIDR blocks for which this role is applicable.",
              "type": "string"
            },
            "defaultCriticalOptions": {
              "description": "Specifies a map of critical options that certificates have when signed.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "defaultExtensions": {
              "description": "Specifies a map of extensions that certificates have when signed.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "defaultUser": {
              "description": "Specifies the default username for which a credential will be generated.",
              "type": "string"
            },
            "defaultUserTemplate": {
              "description": "If set, default_users can be specified using identity template values. A non-templated user is also permitted.",
              "type": "boolean"
            },
            "keyIdFormat": {
              "description": "Specifies a custom format for the key id of a signed certificate.",
              "type": "string"
            },
            "keyType": {
              "description": "Specifies the type of credentials generated by this role. This can be either otp, dynamic or ca.",
              "type": "string"
            },
            "maxTtl": {
              "description": "Specifies the maximum Time To Live value.",
              "type": "string"
            },
            "name": {
              "description": "Specifies the name of the role to create.\nUnique name for the role.",
              "type": "string"
            },
            "namespace": {
              "description": "The namespace to provision the resource in.\nThe value should not contain leading or trailing forward slashes.\nThe namespace is always relative to the provider's configured namespace.\nAvailable only for Vault Enterprise.\nTarget namespace. (requires Enterprise)",
              "type": "string"
            },
            "notBeforeDuration": {
              "description": "Specifies the duration by which to backdate the ValidAfter property.\nUses duration format strings.\nSpecifies the duration by which to backdate the ValidAfter property. Uses duration format strings.",
              "type": "string"
            },
            "ttl": {
              "description": "Specifies the Time To Live value.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "managementPolicies": {
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out\nthrough a Crossplane feature flag.\nManagementPolicies specify the array of actions Crossplane is allowed to\ntake on the managed and external resources.\nThis field is planned to replace the DeletionPolicy field in a future\nrelease. Currently, both could be set independently and non-default\nvalues would be honored if the feature flag is enabled. If both are\ncustom, the DeletionPolicy field will be ignored.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223\nand this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers\ncan take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to\ncreate, observe, update, and delete this managed resource should be\nconfigured.",
          "type": "object",
          "default": {
            "name": "default"
          },
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "type": "object",
              "properties": {
                "resolution": {
                  "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                  "type": "string",
                  "default": "Required",
                  "enum": [
                    "Required",
                    "Optional"
                  ]
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                  "type": "string",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a\nSecret to which any connection details for this managed resource should\nbe written. Connection details frequently include the endpoint, username,\nand password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name",
            "namespace"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false,
      "x-kubernetes-validations": [
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.keyType) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.keyType))",
          "message": "spec.forProvider.keyType is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.name))",
          "message": "spec.forProvider.name is a required parameter"
        }
      ]
    },
    "status": {
      "description": "SecretBackendRoleStatus defines the observed state of SecretBackendRole.",
      "type": "object",
      "properties": {
        "atProvider": {
          "type": "object",
          "properties": {
            "algorithmSigner": {
              "description": "When supplied, this value specifies a signing algorithm for the key. Possible values: ssh-rsa, rsa-sha2-256, rsa-sha2-512.",
              "type": "string"
            },
            "allowBareDomains": {
              "description": "Specifies if host certificates that are requested are allowed to use the base domains listed in allowed_domains.",
              "type": "boolean"
            },
            "allowEmptyPrincipals": {
              "description": "Allow signing certificates with no\nvalid principals (e.g. any valid principal). For backwards compatibility\nonly. The default of false is highly recommended.",
              "type": "boolean"
            },
            "allowHostCertificates": {
              "description": "Specifies if certificates are allowed to be signed for use as a 'host'.",
              "type": "boolean"
            },
            "allowSubdomains": {
              "description": "Specifies if host certificates that are requested are allowed to be subdomains of those listed in allowed_domains.",
              "type": "boolean"
            },
            "allowUserCertificates": {
              "description": "Specifies if certificates are allowed to be signed for use as a 'user'.",
              "type": "boolean"
            },
            "allowUserKeyIds": {
              "description": "Specifies if users can override the key ID for a signed certificate with the key_id field.",
              "type": "boolean"
            },
            "allowedCriticalOptions": {
              "description": "Specifies a comma-separated list of critical options that certificates can have when signed.",
              "type": "string"
            },
            "allowedDomains": {
              "description": "The list of domains for which a client can request a host certificate.",
              "type": "string"
            },
            "allowedDomainsTemplate": {
              "description": "Specifies if allowed_domains can be declared using\nidentity template policies. Non-templated domains are also permitted.",
              "type": "boolean"
            },
            "allowedExtensions": {
              "description": "Specifies a comma-separated list of extensions that certificates can have when signed.",
              "type": "string"
            },
            "allowedUserKeyConfig": {
              "description": "Set of configuration blocks to define allowed\nuser key configuration, like key type and their lengths. Can be specified multiple times.\nSee\nSet of allowed public key types and their relevant configuration",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "lengths": {
                    "description": "A list of allowed key lengths as integers.\nFor key types that do not support setting the length a value of [0] should be used.\nSetting multiple lengths is only supported on Vault 1.10+. For prior releases length\nmust be set to a single element list.\nList of allowed key lengths, vault-1.10 and above",
                    "type": "array",
                    "items": {
                      "type": "number"
                    }
                  },
                  "type": {
                    "description": "The SSH public key type.\nSupported key types are:\nrsa, ecdsa, ec, dsa, ed25519, ssh-rsa, ssh-dss, ssh-ed25519,\necdsa-sha2-nistp256, ecdsa-sha2-nistp384, ecdsa-sha2-nistp521\nKey type, choices:\nrsa, ecdsa, ec, dsa, ed25519, ssh-rsa, ssh-dss, ssh-ed25519, ecdsa-sha2-nistp256, ecdsa-sha2-nistp384, ecdsa-sha2-nistp521",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "allowedUsers": {
              "description": "Specifies a comma-separated list of usernames that are to be allowed, only if certain usernames are to be allowed.",
              "type": "string"
            },
            "allowedUsersTemplate": {
              "description": "Specifies if allowed_users can be declared using identity template policies. Non-templated users are also permitted.",
              "type": "boolean"
            },
            "backend": {
              "description": "The path where the SSH secret backend is mounted.",
              "type": "string"
            },
            "cidrList": {
              "description": "The comma-separated string of CIDR blocks for which this role is applicable.",
              "type": "string"
            },
            "defaultCriticalOptions": {
              "description": "Specifies a map of critical options that certificates have when signed.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "defaultExtensions": {
              "description": "Specifies a map of extensions that certificates have when signed.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "defaultUser": {
              "description": "Specifies the default username for which a credential will be generated.",
              "type": "string"
            },
            "defaultUserTemplate": {
              "description": "If set, default_users can be specified using identity template values. A non-templated user is also permitted.",
              "type": "boolean"
            },
            "id": {
              "type": "string"
            },
            "keyIdFormat": {
              "description": "Specifies a custom format for the key id of a signed certificate.",
              "type": "string"
            },
            "keyType": {
              "description": "Specifies the type of credentials generated by this role. This can be either otp, dynamic or ca.",
              "type": "string"
            },
            "maxTtl": {
              "description": "Specifies the maximum Time To Live value.",
              "type": "string"
            },
            "name": {
              "description": "Specifies the name of the role to create.\nUnique name for the role.",
              "type": "string"
            },
            "namespace": {
              "description": "The namespace to provision the resource in.\nThe value should not contain leading or trailing forward slashes.\nThe namespace is always relative to the provider's configured namespace.\nAvailable only for Vault Enterprise.\nTarget namespace. (requires Enterprise)",
              "type": "string"
            },
            "notBeforeDuration": {
              "description": "Specifies the duration by which to backdate the ValidAfter property.\nUses duration format strings.\nSpecifies the duration by which to backdate the ValidAfter property. Uses duration format strings.",
              "type": "string"
            },
            "ttl": {
              "description": "Specifies the Time To Live value.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "type": "array",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one\nstatus to another.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from\none status to another, if any.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to\na resource at any point in time.",
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest metadata.generation\nwhich resulted in either a ready state, or stalled due to error\nit can not recover from without human intervention.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    }
  }
}
