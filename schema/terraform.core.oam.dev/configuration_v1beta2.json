{
  "description": "Configuration is the Schema for the configurations API",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "ConfigurationSpec defines the desired state of Configuration",
      "type": "object",
      "properties": {
        "JobEnv": {
          "type": "object",
          "x-kubernetes-preserve-unknown-fields": true
        },
        "backend": {
          "description": "Backend describes the Terraform backend configuration. This field is needed if the users use a git repo to provide the hcl files or want to use their custom Terraform backend (instead of the default kubernetes backend type). Notice: This field may cause two backend blocks in the final Terraform module and make the executor job failed. So, please make sure that there are no backend configurations in your inline hcl code or the git repo.",
          "type": "object",
          "properties": {
            "backendType": {
              "description": "BackendType indicates which backend type to use. This field is needed for custom backend configuration.",
              "type": "string",
              "enum": [
                "kubernetes",
                "s3"
              ]
            },
            "inClusterConfig": {
              "description": "InClusterConfig Used to authenticate to the cluster from inside a pod. Only `true` is allowed",
              "type": "boolean"
            },
            "inline": {
              "description": "Inline allows users to use raw hcl code to specify their Terraform backend",
              "type": "string"
            },
            "kubernetes": {
              "description": "Kubernetes is needed for the Terraform `kubernetes` backend type.",
              "type": "object",
              "required": [
                "secret_suffix"
              ],
              "properties": {
                "namespace": {
                  "type": "string"
                },
                "secret_suffix": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "s3": {
              "description": "S3 is needed for the Terraform `s3` backend type.",
              "type": "object",
              "required": [
                "bucket",
                "key"
              ],
              "properties": {
                "bucket": {
                  "type": "string"
                },
                "key": {
                  "type": "string"
                },
                "region": {
                  "description": "Region is optional, default to the AWS_DEFAULT_REGION in the credentials of the provider",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "secretSuffix": {
              "description": "SecretSuffix used when creating secrets. Secrets will be named in the format: tfstate-{workspace}-{secretSuffix}",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "customRegion": {
          "description": "Region is cloud provider's region. It will override the region in the region field of ProviderReference",
          "type": "string"
        },
        "deleteResource": {
          "description": "DeleteResource will determine whether provisioned cloud resources will be deleted when CR is deleted",
          "type": "boolean",
          "default": true
        },
        "forceDelete": {
          "description": "ForceDelete will force delete Configuration no matter which state it is or whether it has provisioned some resources It will help delete Configuration in unexpected cases.",
          "type": "boolean"
        },
        "gitCredentialsSecretReference": {
          "description": "GitCredentialsSecretReference specifies the reference to the secret containing the git credentials",
          "type": "object",
          "properties": {
            "name": {
              "description": "Name is unique within a namespace to reference a secret resource.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace defines the space within which the secret name must be unique.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "gitRef": {
          "description": "GitRef is the git branch or tag or commit hash to checkout. Only used when Remote is specified.",
          "type": "object",
          "properties": {
            "branch": {
              "type": "string"
            },
            "commit": {
              "type": "string"
            },
            "tag": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "hcl": {
          "description": "HCL is the Terraform HCL type configuration",
          "type": "string"
        },
        "inlineCredentials": {
          "description": "InlineCredentials specifies the credentials in spec.HCl field as below. \tprovider \"aws\" { \t\tregion     = \"us-west-2\" \t\taccess_key = \"my-access-key\" \t\tsecret_key = \"my-secret-key\" \t} Or indicates a Terraform module or configuration don't need credentials at all, like provider `random`",
          "type": "boolean"
        },
        "path": {
          "description": "Path is the sub-directory of remote git repository.",
          "type": "string"
        },
        "providerRef": {
          "description": "ProviderReference specifies the reference to Provider",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the referenced object.",
              "type": "string",
              "default": "default"
            }
          },
          "additionalProperties": false
        },
        "remote": {
          "description": "Remote is a git repo which contains hcl files. Currently, only public git repos are supported.",
          "type": "string"
        },
        "terraformCredentialsHelperConfigMapReference": {
          "description": "TerraformCredentialsHelperConfigMapReference specifies the reference to a configmap containing the terraform registry credentials helper",
          "type": "object",
          "properties": {
            "name": {
              "description": "Name is unique within a namespace to reference a secret resource.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace defines the space within which the secret name must be unique.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "terraformCredentialsSecretReference": {
          "description": "TerraformCredentialsSecretReference specifies the reference to the secret containing the terraform credentials and terraform registry details",
          "type": "object",
          "properties": {
            "name": {
              "description": "Name is unique within a namespace to reference a secret resource.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace defines the space within which the secret name must be unique.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "terraformRCConfigMapReference": {
          "description": "TerraformRCConfigMapReference specifies the reference to a config map containing the terraform registry configuration",
          "type": "object",
          "properties": {
            "name": {
              "description": "Name is unique within a namespace to reference a secret resource.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace defines the space within which the secret name must be unique.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "variable": {
          "type": "object",
          "x-kubernetes-preserve-unknown-fields": true
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "ConfigurationStatus defines the observed state of Configuration",
      "type": "object",
      "properties": {
        "apply": {
          "description": "ConfigurationApplyStatus is the status for Configuration apply",
          "type": "object",
          "properties": {
            "message": {
              "type": "string"
            },
            "outputs": {
              "type": "object",
              "additionalProperties": {
                "description": "Property is the property for an output",
                "type": "object",
                "properties": {
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            "region": {
              "description": "Region is the region for the cloud resources created by this Configuration. If spec.region is not empty, it's the value of it. Otherwise, it's the value of spec.providerReference.region.",
              "type": "string"
            },
            "state": {
              "description": "A ConfigurationState represents the status of a resource",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "destroy": {
          "description": "ConfigurationDestroyStatus is the status for Configuration destroy",
          "type": "object",
          "properties": {
            "message": {
              "type": "string"
            },
            "state": {
              "description": "A ConfigurationState represents the status of a resource",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "observedGeneration": {
          "description": "observedGeneration is the most recent generation observed for this Configuration. It corresponds to the Configuration's generation, which is updated on mutation by the API Server. If ObservedGeneration equals Generation, and State is Available, the value of Outputs is latest",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    }
  }
}
