{
  "description": "TimeChaos is the Schema for the timechaos API",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "Spec defines the behavior of a time chaos experiment",
      "type": "object",
      "required": [
        "mode",
        "selector",
        "timeOffset"
      ],
      "properties": {
        "clockIds": {
          "description": "ClockIds defines all affected clock id All available options are [\"CLOCK_REALTIME\",\"CLOCK_MONOTONIC\",\"CLOCK_PROCESS_CPUTIME_ID\",\"CLOCK_THREAD_CPUTIME_ID\", \"CLOCK_MONOTONIC_RAW\",\"CLOCK_REALTIME_COARSE\",\"CLOCK_MONOTONIC_COARSE\",\"CLOCK_BOOTTIME\",\"CLOCK_REALTIME_ALARM\", \"CLOCK_BOOTTIME_ALARM\"] Default value is [\"CLOCK_REALTIME\"]",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "containerNames": {
          "description": "ContainerNames indicates list of the name of affected container. If not set, the first container will be injected",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "duration": {
          "description": "Duration represents the duration of the chaos action",
          "type": "string"
        },
        "mode": {
          "description": "Mode defines the mode to run chaos action. Supported mode: one / all / fixed / fixed-percent / random-max-percent",
          "type": "string",
          "enum": [
            "one",
            "all",
            "fixed",
            "fixed-percent",
            "random-max-percent"
          ]
        },
        "remoteCluster": {
          "description": "RemoteCluster represents the remote cluster where the chaos will be deployed",
          "type": "string"
        },
        "selector": {
          "description": "Selector is used to select pods that are used to inject chaos action.",
          "type": "object",
          "properties": {
            "annotationSelectors": {
              "description": "Map of string keys and values that can be used to select objects. A selector based on annotations.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "expressionSelectors": {
              "description": "a slice of label selector expressions that can be used to select objects. A list of selectors based on set-based label expressions.",
              "type": "array",
              "items": {
                "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                "type": "object",
                "required": [
                  "key",
                  "operator"
                ],
                "properties": {
                  "key": {
                    "description": "key is the label key that the selector applies to.",
                    "type": "string"
                  },
                  "operator": {
                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                    "type": "string"
                  },
                  "values": {
                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "fieldSelectors": {
              "description": "Map of string keys and values that can be used to select objects. A selector based on fields.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "labelSelectors": {
              "description": "Map of string keys and values that can be used to select objects. A selector based on labels.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "namespaces": {
              "description": "Namespaces is a set of namespace to which objects belong.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "nodeSelectors": {
              "description": "Map of string keys and values that can be used to select nodes. Selector which must match a node's labels, and objects must belong to these selected nodes.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "nodes": {
              "description": "Nodes is a set of node name and objects must belong to these nodes.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "podPhaseSelectors": {
              "description": "PodPhaseSelectors is a set of condition of a pod at the current time. supported value: Pending / Running / Succeeded / Failed / Unknown",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "pods": {
              "description": "Pods is a map of string keys and a set values that used to select pods. The key defines the namespace which pods belong, and the each values is a set of pod names.",
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        "timeOffset": {
          "description": "TimeOffset defines the delta time of injected program. It's a possibly signed sequence of decimal numbers, such as \"300ms\", \"-1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"Âµs\"), \"ms\", \"s\", \"m\", \"h\".",
          "type": "string"
        },
        "value": {
          "description": "Value is required when the mode is set to `FixedMode` / `FixedPercentMode` / `RandomMaxPercentMode`. If `FixedMode`, provide an integer of pods to do chaos action. If `FixedPercentMode`, provide a number from 0-100 to specify the percent of pods the server can do chaos action. IF `RandomMaxPercentMode`,  provide a number from 0-100 to specify the max percent of pods to do chaos action",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "Most recently observed status of the time chaos experiment",
      "type": "object",
      "required": [
        "experiment"
      ],
      "properties": {
        "conditions": {
          "description": "Conditions represents the current global condition of the chaos",
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "status",
              "type"
            ],
            "properties": {
              "reason": {
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "experiment": {
          "description": "Experiment records the last experiment state.",
          "type": "object",
          "properties": {
            "containerRecords": {
              "description": "Records are used to track the running status",
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "id",
                  "injectedCount",
                  "phase",
                  "recoveredCount",
                  "selectorKey"
                ],
                "properties": {
                  "events": {
                    "description": "Events are the essential details about the injections and recoveries",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "operation",
                        "timestamp",
                        "type"
                      ],
                      "properties": {
                        "message": {
                          "description": "Message is the detail message, e.g. the reason why we failed to inject the chaos",
                          "type": "string"
                        },
                        "operation": {
                          "description": "Operation represents the operation we are doing, when we crate this event",
                          "type": "string"
                        },
                        "timestamp": {
                          "description": "Timestamp is time when we create this event",
                          "type": "string",
                          "format": "date-time"
                        },
                        "type": {
                          "description": "Type means the stage of this event",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "id": {
                    "type": "string"
                  },
                  "injectedCount": {
                    "description": "InjectedCount is a counter to record the sum of successful injections",
                    "type": "integer"
                  },
                  "phase": {
                    "type": "string"
                  },
                  "recoveredCount": {
                    "description": "RecoveredCount is a counter to record the sum of successful recoveries",
                    "type": "integer"
                  },
                  "selectorKey": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "desiredPhase": {
              "type": "string",
              "enum": [
                "Run",
                "Stop"
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  }
}
