{
  "description": "JVMChaos is the Schema for the jvmchaos API",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "JVMChaosSpec defines the desired state of JVMChaos",
      "type": "object",
      "required": [
        "action",
        "mode",
        "selector"
      ],
      "properties": {
        "action": {
          "description": "Action defines the specific jvm chaos action.\nSupported action: latency;return;exception;stress;gc;ruleData",
          "type": "string",
          "enum": [
            "latency",
            "return",
            "exception",
            "stress",
            "gc",
            "ruleData",
            "mysql"
          ]
        },
        "class": {
          "description": "Java class",
          "type": "string"
        },
        "containerNames": {
          "description": "ContainerNames indicates list of the name of affected container.\nIf not set, the first container will be injected",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "cpuCount": {
          "description": "the CPU core number needs to use, only set it when action is stress",
          "type": "integer"
        },
        "database": {
          "description": "the match database\ndefault value is \"\", means match all database",
          "type": "string"
        },
        "duration": {
          "description": "Duration represents the duration of the chaos action",
          "type": "string"
        },
        "exception": {
          "description": "the exception which needs to throw for action `exception`\nor the exception message needs to throw in action `mysql`",
          "type": "string"
        },
        "latency": {
          "description": "the latency duration for action 'latency', unit ms\nor the latency duration in action `mysql`",
          "type": "integer"
        },
        "memType": {
          "description": "the memory type needs to locate, only set it when action is stress, the value can be 'stack' or 'heap'",
          "type": "string"
        },
        "method": {
          "description": "the method in Java class",
          "type": "string"
        },
        "mode": {
          "description": "Mode defines the mode to run chaos action.\nSupported mode: one / all / fixed / fixed-percent / random-max-percent",
          "type": "string",
          "enum": [
            "one",
            "all",
            "fixed",
            "fixed-percent",
            "random-max-percent"
          ]
        },
        "mysqlConnectorVersion": {
          "description": "the version of mysql-connector-java, only support 5.X.X(set to \"5\") and 8.X.X(set to \"8\") now",
          "type": "string"
        },
        "name": {
          "description": "byteman rule name, should be unique, and will generate one if not set",
          "type": "string"
        },
        "pid": {
          "description": "the pid of Java process which needs to attach",
          "type": "integer"
        },
        "port": {
          "description": "the port of agent server, default 9277",
          "type": "integer",
          "format": "int32"
        },
        "remoteCluster": {
          "description": "RemoteCluster represents the remote cluster where the chaos will be deployed",
          "type": "string"
        },
        "returnValue": {
          "description": "the return value for action 'return'",
          "type": "string"
        },
        "ruleData": {
          "description": "the byteman rule's data for action 'ruleData'",
          "type": "string"
        },
        "selector": {
          "description": "Selector is used to select pods that are used to inject chaos action.",
          "type": "object",
          "properties": {
            "annotationSelectors": {
              "description": "Map of string keys and values that can be used to select objects.\nA selector based on annotations.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "expressionSelectors": {
              "description": "a slice of label selector expressions that can be used to select objects.\nA list of selectors based on set-based label expressions.",
              "type": "array",
              "items": {
                "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                "type": "object",
                "required": [
                  "key",
                  "operator"
                ],
                "properties": {
                  "key": {
                    "description": "key is the label key that the selector applies to.",
                    "type": "string"
                  },
                  "operator": {
                    "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                    "type": "string"
                  },
                  "values": {
                    "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "x-kubernetes-list-type": "atomic"
                  }
                },
                "additionalProperties": false
              }
            },
            "fieldSelectors": {
              "description": "Map of string keys and values that can be used to select objects.\nA selector based on fields.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "labelSelectors": {
              "description": "Map of string keys and values that can be used to select objects.\nA selector based on labels.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "namespaces": {
              "description": "Namespaces is a set of namespace to which objects belong.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "nodeSelectors": {
              "description": "Map of string keys and values that can be used to select nodes.\nSelector which must match a node's labels,\nand objects must belong to these selected nodes.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "nodes": {
              "description": "Nodes is a set of node name and objects must belong to these nodes.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "podPhaseSelectors": {
              "description": "PodPhaseSelectors is a set of condition of a pod at the current time.\nsupported value: Pending / Running / Succeeded / Failed / Unknown",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "pods": {
              "description": "Pods is a map of string keys and a set values that used to select pods.\nThe key defines the namespace which pods belong,\nand the each values is a set of pod names.",
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        "sqlType": {
          "description": "the match sql type\ndefault value is \"\", means match all SQL type.\nThe value can be 'select', 'insert', 'update', 'delete', 'replace'.",
          "type": "string"
        },
        "table": {
          "description": "the match table\ndefault value is \"\", means match all table",
          "type": "string"
        },
        "value": {
          "description": "Value is required when the mode is set to `FixedMode` / `FixedPercentMode` / `RandomMaxPercentMode`.\nIf `FixedMode`, provide an integer of pods to do chaos action.\nIf `FixedPercentMode`, provide a number from 0-100 to specify the percent of pods the server can do chaos action.\nIF `RandomMaxPercentMode`,  provide a number from 0-100 to specify the max percent of pods to do chaos action",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "JVMChaosStatus defines the observed state of JVMChaos",
      "type": "object",
      "required": [
        "experiment"
      ],
      "properties": {
        "conditions": {
          "description": "Conditions represents the current global condition of the chaos",
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "status",
              "type"
            ],
            "properties": {
              "reason": {
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "experiment": {
          "description": "Experiment records the last experiment state.",
          "type": "object",
          "properties": {
            "containerRecords": {
              "description": "Records are used to track the running status",
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "id",
                  "injectedCount",
                  "phase",
                  "recoveredCount",
                  "selectorKey"
                ],
                "properties": {
                  "events": {
                    "description": "Events are the essential details about the injections and recoveries",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "operation",
                        "timestamp",
                        "type"
                      ],
                      "properties": {
                        "message": {
                          "description": "Message is the detail message, e.g. the reason why we failed to inject the chaos",
                          "type": "string"
                        },
                        "operation": {
                          "description": "Operation represents the operation we are doing, when we crate this event",
                          "type": "string"
                        },
                        "timestamp": {
                          "description": "Timestamp is time when we create this event",
                          "type": "string",
                          "format": "date-time"
                        },
                        "type": {
                          "description": "Type means the stage of this event",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "id": {
                    "type": "string"
                  },
                  "injectedCount": {
                    "description": "InjectedCount is a counter to record the sum of successful injections",
                    "type": "integer"
                  },
                  "phase": {
                    "type": "string"
                  },
                  "recoveredCount": {
                    "description": "RecoveredCount is a counter to record the sum of successful recoveries",
                    "type": "integer"
                  },
                  "selectorKey": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "desiredPhase": {
              "type": "string",
              "enum": [
                "Run",
                "Stop"
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  }
}
