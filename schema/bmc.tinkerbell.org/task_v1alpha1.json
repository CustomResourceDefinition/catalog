{
  "description": "Task is the Schema for the Task API.",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "TaskSpec defines the desired state of Task.",
      "type": "object",
      "required": [
        "task"
      ],
      "properties": {
        "connection": {
          "description": "Connection represents the Machine connectivity information.",
          "type": "object",
          "required": [
            "host",
            "insecureTLS"
          ],
          "properties": {
            "authSecretRef": {
              "description": "AuthSecretRef is the SecretReference that contains authentication information of the Machine.\nThe Secret must contain username and password keys. This is optional as it is not required when using\nthe RPC provider.",
              "type": "object",
              "properties": {
                "name": {
                  "description": "name is unique within a namespace to reference a secret resource.",
                  "type": "string"
                },
                "namespace": {
                  "description": "namespace defines the space within which the secret name must be unique.",
                  "type": "string"
                }
              },
              "additionalProperties": false,
              "x-kubernetes-map-type": "atomic"
            },
            "host": {
              "description": "Host is the host IP address or hostname of the Machine.",
              "type": "string",
              "minLength": 1
            },
            "insecureTLS": {
              "description": "InsecureTLS specifies trusted TLS connections.",
              "type": "boolean"
            },
            "port": {
              "description": "Port is the port number for connecting with the Machine.",
              "type": "integer",
              "default": 623
            },
            "providerOptions": {
              "description": "ProviderOptions contains provider specific options.",
              "type": "object",
              "properties": {
                "intelAMT": {
                  "description": "IntelAMT contains the options to customize the IntelAMT provider.",
                  "type": "object",
                  "properties": {
                    "hostScheme": {
                      "description": "HostScheme determines whether to use http or https for intelAMT calls.",
                      "type": "string",
                      "default": "http",
                      "enum": [
                        "http",
                        "https"
                      ]
                    },
                    "port": {
                      "description": "Port that intelAMT will use for calls.",
                      "type": "integer"
                    }
                  },
                  "additionalProperties": false
                },
                "ipmitool": {
                  "description": "IPMITOOL contains the options to customize the Ipmitool provider.",
                  "type": "object",
                  "properties": {
                    "cipherSuite": {
                      "description": "CipherSuite that ipmitool will use for calls.",
                      "type": "string"
                    },
                    "port": {
                      "description": "Port that ipmitool will use for calls.",
                      "type": "integer"
                    }
                  },
                  "additionalProperties": false
                },
                "preferredOrder": {
                  "description": "PreferredOrder allows customizing the order that BMC providers are called.\nProviders added to this list will be moved to the front of the default order.\nProvider names are case insensitive.\nThe default order is: ipmitool, asrockrack, gofish, intelamt, dell, supermicro, openbmc.",
                  "type": "array",
                  "items": {
                    "description": "ProviderName is the bmclib specific provider name. Names are case insensitive.",
                    "type": "string",
                    "pattern": "(?i)^(ipmitool|asrockrack|gofish|IntelAMT|dell|supermicro|openbmc)$"
                  }
                },
                "redfish": {
                  "description": "Redfish contains the options to customize the Redfish provider.",
                  "type": "object",
                  "properties": {
                    "port": {
                      "description": "Port that redfish will use for calls.",
                      "type": "integer"
                    },
                    "systemName": {
                      "description": "SystemName is the name of the system to use for redfish calls.\nWith redfish implementations that manage multiple systems via a single endpoint, this allows for specifying the system to manage.",
                      "type": "string"
                    },
                    "useBasicAuth": {
                      "description": "UseBasicAuth for redfish calls. The default is false which means token based auth is used.",
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "rpc": {
                  "description": "RPC contains the options to customize the RPC provider.",
                  "type": "object",
                  "required": [
                    "consumerURL"
                  ],
                  "properties": {
                    "consumerURL": {
                      "description": "ConsumerURL is the URL where an rpc consumer/listener is running\nand to which we will send and receive all notifications.",
                      "type": "string"
                    },
                    "experimental": {
                      "description": "Experimental options.",
                      "type": "object",
                      "properties": {
                        "customRequestPayload": {
                          "description": "CustomRequestPayload must be in json.",
                          "type": "string"
                        },
                        "dotPath": {
                          "description": "DotPath is the path to the json object where the bmclib RequestPayload{} struct will be embedded. For example: object.data.body",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    },
                    "hmac": {
                      "description": "HMAC is the options used to create a HMAC signature.",
                      "type": "object",
                      "properties": {
                        "prefixSigDisabled": {
                          "description": "PrefixSigDisabled determines whether the algorithm will be prefixed to the signature. Example: sha256=abc123",
                          "type": "boolean"
                        },
                        "secrets": {
                          "description": "Secrets are a map of algorithms to secrets used for signing.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "array",
                            "items": {
                              "description": "SecretReference represents a Secret Reference. It has enough information to retrieve secret\nin any namespace",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "description": "name is unique within a namespace to reference a secret resource.",
                                  "type": "string"
                                },
                                "namespace": {
                                  "description": "namespace defines the space within which the secret name must be unique.",
                                  "type": "string"
                                }
                              },
                              "x-kubernetes-map-type": "atomic"
                            }
                          }
                        }
                      },
                      "additionalProperties": false
                    },
                    "logNotificationsDisabled": {
                      "description": "LogNotificationsDisabled determines whether responses from rpc consumer/listeners will be logged or not.",
                      "type": "boolean"
                    },
                    "request": {
                      "description": "Request is the options used to create the rpc HTTP request.",
                      "type": "object",
                      "properties": {
                        "httpContentType": {
                          "description": "HTTPContentType is the content type to use for the rpc request notification.",
                          "type": "string"
                        },
                        "httpMethod": {
                          "description": "HTTPMethod is the HTTP method to use for the rpc request notification.",
                          "type": "string"
                        },
                        "staticHeaders": {
                          "description": "StaticHeaders are predefined headers that will be added to every request.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        },
                        "timestampFormat": {
                          "description": "TimestampFormat is the time format for the timestamp header.",
                          "type": "string"
                        },
                        "timestampHeader": {
                          "description": "TimestampHeader is the header name that should contain the timestamp. Example: X-BMCLIB-Timestamp",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    },
                    "signature": {
                      "description": "Signature is the options used for adding an HMAC signature to an HTTP request.",
                      "type": "object",
                      "properties": {
                        "appendAlgoToHeaderDisabled": {
                          "description": "AppendAlgoToHeaderDisabled decides whether to append the algorithm to the signature header or not.\nExample: X-BMCLIB-Signature becomes X-BMCLIB-Signature-256\nWhen set to true, a header will be added for each algorithm. Example: X-BMCLIB-Signature-256 and X-BMCLIB-Signature-512",
                          "type": "boolean"
                        },
                        "headerName": {
                          "description": "HeaderName is the header name that should contain the signature(s). Example: X-BMCLIB-Signature",
                          "type": "string"
                        },
                        "includedPayloadHeaders": {
                          "description": "IncludedPayloadHeaders are headers whose values will be included in the signature payload. Example: X-BMCLIB-My-Custom-Header\nAll headers will be deduplicated.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "task": {
          "description": "Task defines the specific action to be performed.",
          "type": "object",
          "maxProperties": 1,
          "properties": {
            "oneTimeBootDeviceAction": {
              "description": "OneTimeBootDeviceAction represents a baseboard management one time set boot device operation.",
              "type": "object",
              "required": [
                "device"
              ],
              "properties": {
                "device": {
                  "description": "Devices represents the boot devices, in order for setting one time boot.\nCurrently only the first device in the slice is used to set one time boot.",
                  "type": "array",
                  "items": {
                    "description": "BootDevice represents boot device of the Machine.",
                    "type": "string"
                  }
                },
                "efiBoot": {
                  "description": "EFIBoot instructs the machine to use EFI boot.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "powerAction": {
              "description": "PowerAction represents a baseboard management power operation.",
              "type": "string",
              "enum": [
                "on",
                "off",
                "soft",
                "status",
                "cycle",
                "reset"
              ]
            },
            "virtualMediaAction": {
              "description": "VirtualMediaAction represents a baseboard management virtual media insert/eject.",
              "type": "object",
              "required": [
                "kind"
              ],
              "properties": {
                "kind": {
                  "type": "string"
                },
                "mediaURL": {
                  "description": "mediaURL represents the URL of the image to be inserted into the virtual media, or empty to\neject media.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "TaskStatus defines the observed state of Task.",
      "type": "object",
      "properties": {
        "completionTime": {
          "description": "CompletionTime represents time when the task was completed.\nThe completion time is only set when the task finishes successfully.",
          "type": "string",
          "format": "date-time"
        },
        "conditions": {
          "description": "Conditions represents the latest available observations of an object's current state.",
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "status",
              "type"
            ],
            "properties": {
              "message": {
                "description": "Message represents human readable message indicating details about last transition.",
                "type": "string"
              },
              "status": {
                "description": "Status is the status of the Task condition.\nCan be True or False.",
                "type": "string"
              },
              "type": {
                "description": "Type of the Task condition.",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "startTime": {
          "description": "StartTime represents time when the Task started processing.",
          "type": "string",
          "format": "date-time"
        }
      },
      "additionalProperties": false
    }
  }
}
