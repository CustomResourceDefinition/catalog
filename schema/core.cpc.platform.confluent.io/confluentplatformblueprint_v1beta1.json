{
  "description": "ConfluentPlatformBlueprint is the Schema for the confluentplatformblueprints API",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "ConfluentPlatformBlueprintSpec defines the desired state of ConfluentPlatformBlueprint",
      "type": "object",
      "required": [
        "components",
        "confluentPlatform"
      ],
      "properties": {
        "certificateStoreConfigRefs": {
          "description": "certificateStore defines the storing mechanism for all certificates.",
          "type": "array",
          "items": {
            "description": "ObjectRef specifies a reference another Confluent Platform CR",
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "description": "Name is the name of the referenced CR",
                "type": "string",
                "maxLength": 63,
                "minLength": 1,
                "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
              },
              "namespace": {
                "description": "Namespace of the CR. Defaults to the current namespace of the CR making the reference",
                "type": "string",
                "maxLength": 255,
                "minLength": 1,
                "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
              }
            },
            "additionalProperties": false
          }
        },
        "components": {
          "description": "components defines how different CP components will be configured and deployed.",
          "type": "object",
          "properties": {
            "connectCluster": {
              "description": "connectCluster specifies how the connect cluster should be configured.",
              "type": "object",
              "required": [
                "classRef"
              ],
              "properties": {
                "classRef": {
                  "description": "classRef is the reference to the class for the cluster component.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name is the name of the referenced CR",
                      "type": "string",
                      "maxLength": 63,
                      "minLength": 1,
                      "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                    },
                    "namespace": {
                      "description": "Namespace of the CR. Defaults to the current namespace of the CR making the reference",
                      "type": "string",
                      "maxLength": 255,
                      "minLength": 1,
                      "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                    }
                  },
                  "additionalProperties": false
                },
                "connectorTLSCerts": {
                  "description": "connectorTLSCerts specifies where to find certs for connectors.",
                  "type": "array",
                  "items": {
                    "description": "Credential specifies how confidential information should be supplied to CPC workflows",
                    "type": "object",
                    "properties": {
                      "directoryPathInContainer": {
                        "description": "directoryPathInContainer specifies the directory path in the container where the license key is mounted. More info: https://docs.confluent.io/operator/current/co-license.html#update-component-level-licenses",
                        "type": "string",
                        "minLength": 1
                      },
                      "secretRef": {
                        "description": "Name of the secret reference.",
                        "type": "string",
                        "maxLength": 30,
                        "minLength": 1,
                        "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "externalAccess": {
                  "description": "externalAccess configures the clusters external access",
                  "type": "object",
                  "required": [
                    "enabled"
                  ],
                  "properties": {
                    "dnsConfig": {
                      "description": "dnsConfig specifies the DNS config for the cluster.",
                      "type": "object",
                      "properties": {
                        "subdomain": {
                          "description": "subdomain specifies the subdomain for the cluster FQDN.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    },
                    "enabled": {
                      "type": "boolean"
                    },
                    "externalTrafficPolicy": {
                      "description": "externalTrafficPolicy specifies the external traffic policy for the load balancer service if the external access type is loadBalancer. Valid options are `Local` and `Cluster`. This takes precedence over the global one.",
                      "type": "string",
                      "enum": [
                        "Local",
                        "Cluster"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "controlCenterCluster": {
              "description": "controlCenterCluster specifies how the controlCenter cluster should be configured",
              "type": "object",
              "required": [
                "classRef"
              ],
              "properties": {
                "classRef": {
                  "description": "classRef is the reference to the class for the cluster component.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name is the name of the referenced CR",
                      "type": "string",
                      "maxLength": 63,
                      "minLength": 1,
                      "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                    },
                    "namespace": {
                      "description": "Namespace of the CR. Defaults to the current namespace of the CR making the reference",
                      "type": "string",
                      "maxLength": 255,
                      "minLength": 1,
                      "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                    }
                  },
                  "additionalProperties": false
                },
                "externalAccess": {
                  "description": "externalAccess configures the clusters external access",
                  "type": "object",
                  "required": [
                    "enabled"
                  ],
                  "properties": {
                    "dnsConfig": {
                      "description": "dnsConfig specifies the DNS config for the cluster.",
                      "type": "object",
                      "properties": {
                        "subdomain": {
                          "description": "subdomain specifies the subdomain for the cluster FQDN.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    },
                    "enabled": {
                      "type": "boolean"
                    },
                    "externalTrafficPolicy": {
                      "description": "externalTrafficPolicy specifies the external traffic policy for the load balancer service if the external access type is loadBalancer. Valid options are `Local` and `Cluster`. This takes precedence over the global one.",
                      "type": "string",
                      "enum": [
                        "Local",
                        "Cluster"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "kafkaCluster": {
              "description": "kafkaCluster specifies how the kafka cluster should be configured.",
              "type": "object",
              "required": [
                "classRef"
              ],
              "properties": {
                "classRef": {
                  "description": "classRef is the reference to the class for the cluster component.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name is the name of the referenced CR",
                      "type": "string",
                      "maxLength": 63,
                      "minLength": 1,
                      "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                    },
                    "namespace": {
                      "description": "Namespace of the CR. Defaults to the current namespace of the CR making the reference",
                      "type": "string",
                      "maxLength": 255,
                      "minLength": 1,
                      "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "kafkaRestCluster": {
              "description": "kafkarestCluster specifies how the kafkaRest cluster should be configured",
              "type": "object",
              "required": [
                "classRef"
              ],
              "properties": {
                "classRef": {
                  "description": "classRef is the reference to the class for the cluster component.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name is the name of the referenced CR",
                      "type": "string",
                      "maxLength": 63,
                      "minLength": 1,
                      "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                    },
                    "namespace": {
                      "description": "Namespace of the CR. Defaults to the current namespace of the CR making the reference",
                      "type": "string",
                      "maxLength": 255,
                      "minLength": 1,
                      "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                    }
                  },
                  "additionalProperties": false
                },
                "externalAccess": {
                  "description": "externalAccess configures the clusters external access",
                  "type": "object",
                  "required": [
                    "enabled"
                  ],
                  "properties": {
                    "dnsConfig": {
                      "description": "dnsConfig specifies the DNS config for the cluster.",
                      "type": "object",
                      "properties": {
                        "subdomain": {
                          "description": "subdomain specifies the subdomain for the cluster FQDN.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    },
                    "enabled": {
                      "type": "boolean"
                    },
                    "externalTrafficPolicy": {
                      "description": "externalTrafficPolicy specifies the external traffic policy for the load balancer service if the external access type is loadBalancer. Valid options are `Local` and `Cluster`. This takes precedence over the global one.",
                      "type": "string",
                      "enum": [
                        "Local",
                        "Cluster"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "kafkaRestProxyCluster": {
              "description": "kafkaRestProxyCluster specifies how the kafkaRestProxy cluster should be configured",
              "type": "object",
              "required": [
                "classRef"
              ],
              "properties": {
                "classRef": {
                  "description": "classRef is the reference to the class for the cluster component.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name is the name of the referenced CR",
                      "type": "string",
                      "maxLength": 63,
                      "minLength": 1,
                      "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                    },
                    "namespace": {
                      "description": "Namespace of the CR. Defaults to the current namespace of the CR making the reference",
                      "type": "string",
                      "maxLength": 255,
                      "minLength": 1,
                      "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                    }
                  },
                  "additionalProperties": false
                },
                "externalAccess": {
                  "description": "externalAccess configures the external access for Kafka Rest Proxy.",
                  "type": "object",
                  "required": [
                    "enabled"
                  ],
                  "properties": {
                    "dnsConfig": {
                      "description": "dnsConfig specifies the DNS config for the cluster.",
                      "type": "object",
                      "properties": {
                        "subdomain": {
                          "description": "subdomain specifies the subdomain for the cluster FQDN.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    },
                    "enabled": {
                      "type": "boolean"
                    },
                    "externalTrafficPolicy": {
                      "description": "externalTrafficPolicy specifies the external traffic policy for the load balancer service if the external access type is loadBalancer. Valid options are `Local` and `Cluster`. This takes precedence over the global one.",
                      "type": "string",
                      "enum": [
                        "Local",
                        "Cluster"
                      ]
                    },
                    "serviceAffinity": {
                      "description": "serviceAffinity specifies the service affinity configuration.",
                      "type": "object",
                      "properties": {
                        "annotations": {
                          "description": "annotations is a map of string key and value pairs. It specifies the session affinity annotation for its ingress service. More info: http://kubernetes.io/docs/user-guide/annotations.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          },
                          "x-kubernetes-map-type": "granular"
                        },
                        "sessionAffinity": {
                          "description": "sessionAffinity defines the Kubernetes session affinity. The valid options are `ClientIP` and `None`. `ClientIP` enables the client IP-based session affinity. The default value is `None`. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies.",
                          "type": "string",
                          "enum": [
                            "ClientIP",
                            "None"
                          ]
                        },
                        "sessionAffinityConfig": {
                          "description": "SessionAffinityConfig contains the configurations of the session affinity.",
                          "type": "object",
                          "properties": {
                            "clientIP": {
                              "description": "clientIP contains the configurations of Client IP based session affinity.",
                              "type": "object",
                              "properties": {
                                "timeoutSeconds": {
                                  "description": "timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be \u003e0 \u0026\u0026 \u003c=86400(for 1 day) if ServiceAffinity == \"ClientIP\". Default value is 10800(for 3 hours).",
                                  "type": "integer",
                                  "format": "int32"
                                }
                              },
                              "additionalProperties": false
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "ksqlDBCluster": {
              "description": "ksqlDBCluster specifies how the ksqlDB cluster should be configured",
              "type": "object",
              "required": [
                "classRef"
              ],
              "properties": {
                "classRef": {
                  "description": "classRef is the reference to the class for the cluster component.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name is the name of the referenced CR",
                      "type": "string",
                      "maxLength": 63,
                      "minLength": 1,
                      "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                    },
                    "namespace": {
                      "description": "Namespace of the CR. Defaults to the current namespace of the CR making the reference",
                      "type": "string",
                      "maxLength": 255,
                      "minLength": 1,
                      "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                    }
                  },
                  "additionalProperties": false
                },
                "externalAccess": {
                  "description": "externalAccess configures the clusters external access",
                  "type": "object",
                  "required": [
                    "enabled"
                  ],
                  "properties": {
                    "dnsConfig": {
                      "description": "dnsConfig specifies the DNS config for the cluster.",
                      "type": "object",
                      "properties": {
                        "subdomain": {
                          "description": "subdomain specifies the subdomain for the cluster FQDN.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    },
                    "enabled": {
                      "type": "boolean"
                    },
                    "externalTrafficPolicy": {
                      "description": "externalTrafficPolicy specifies the external traffic policy for the load balancer service if the external access type is loadBalancer. Valid options are `Local` and `Cluster`. This takes precedence over the global one.",
                      "type": "string",
                      "enum": [
                        "Local",
                        "Cluster"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "mdsCluster": {
              "description": "mdsCluster specifies how the mds cluster should be configured",
              "type": "object",
              "required": [
                "classRef"
              ],
              "properties": {
                "classRef": {
                  "description": "classRef is the reference to the class for the cluster component.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name is the name of the referenced CR",
                      "type": "string",
                      "maxLength": 63,
                      "minLength": 1,
                      "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                    },
                    "namespace": {
                      "description": "Namespace of the CR. Defaults to the current namespace of the CR making the reference",
                      "type": "string",
                      "maxLength": 255,
                      "minLength": 1,
                      "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                    }
                  },
                  "additionalProperties": false
                },
                "externalAccess": {
                  "description": "externalAccess configures the clusters external access",
                  "type": "object",
                  "required": [
                    "enabled"
                  ],
                  "properties": {
                    "dnsConfig": {
                      "description": "dnsConfig specifies the DNS config for the cluster.",
                      "type": "object",
                      "properties": {
                        "subdomain": {
                          "description": "subdomain specifies the subdomain for the cluster FQDN.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    },
                    "enabled": {
                      "type": "boolean"
                    },
                    "externalTrafficPolicy": {
                      "description": "externalTrafficPolicy specifies the external traffic policy for the load balancer service if the external access type is loadBalancer. Valid options are `Local` and `Cluster`. This takes precedence over the global one.",
                      "type": "string",
                      "enum": [
                        "Local",
                        "Cluster"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "schemaRegistryCluster": {
              "description": "schemaRegistry specifies how the schemaRegistry cluster should be configured",
              "type": "object",
              "required": [
                "classRef"
              ],
              "properties": {
                "classRef": {
                  "description": "classRef is the reference to the class for the cluster component.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name is the name of the referenced CR",
                      "type": "string",
                      "maxLength": 63,
                      "minLength": 1,
                      "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                    },
                    "namespace": {
                      "description": "Namespace of the CR. Defaults to the current namespace of the CR making the reference",
                      "type": "string",
                      "maxLength": 255,
                      "minLength": 1,
                      "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                    }
                  },
                  "additionalProperties": false
                },
                "externalAccess": {
                  "description": "externalAccess configures the clusters external access",
                  "type": "object",
                  "required": [
                    "enabled"
                  ],
                  "properties": {
                    "dnsConfig": {
                      "description": "dnsConfig specifies the DNS config for the cluster.",
                      "type": "object",
                      "properties": {
                        "subdomain": {
                          "description": "subdomain specifies the subdomain for the cluster FQDN.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    },
                    "enabled": {
                      "type": "boolean"
                    },
                    "externalTrafficPolicy": {
                      "description": "externalTrafficPolicy specifies the external traffic policy for the load balancer service if the external access type is loadBalancer. Valid options are `Local` and `Cluster`. This takes precedence over the global one.",
                      "type": "string",
                      "enum": [
                        "Local",
                        "Cluster"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "zookeeperCluster": {
              "description": "zookeeperCluster specifies how the zookeeper cluster should be configured.",
              "type": "object",
              "required": [
                "classRef"
              ],
              "properties": {
                "classRef": {
                  "description": "classRef is the reference to the class for the cluster component.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name is the name of the referenced CR",
                      "type": "string",
                      "maxLength": 63,
                      "minLength": 1,
                      "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                    },
                    "namespace": {
                      "description": "Namespace of the CR. Defaults to the current namespace of the CR making the reference",
                      "type": "string",
                      "maxLength": 255,
                      "minLength": 1,
                      "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "confluentMonitoring": {
          "description": "confluentMonitoring defines CP monitoring mechanisms.",
          "type": "object",
          "required": [
            "healthPlus"
          ],
          "properties": {
            "healthPlus": {
              "description": "healthPlus defines the confluent monitoring mechanisms",
              "type": "object",
              "required": [
                "authentication"
              ],
              "properties": {
                "authentication": {
                  "description": "authentication defines the credentials for communication to confluent cloud",
                  "type": "object",
                  "required": [
                    "simple",
                    "type"
                  ],
                  "properties": {
                    "simple": {
                      "description": "simple specifies simple authentication configuration.",
                      "type": "object",
                      "required": [
                        "blueprint",
                        "providerType"
                      ],
                      "properties": {
                        "blueprint": {
                          "description": "blueprintKey defines the key at the blueprint layer and cannot be overridden by deployments. This key will be used by all the deployments using this blueprint",
                          "type": "object",
                          "required": [
                            "credentialStoreRef"
                          ],
                          "properties": {
                            "credentialStoreRef": {
                              "description": "credentialStoreRef specifies the key in the credential store",
                              "type": "object",
                              "properties": {
                                "key": {
                                  "description": "key defines the name of the key in secret the CredentialStoreConfigRef refers to",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "name defines the name of the CredentialStoreConfigRef",
                                  "type": "string"
                                }
                              },
                              "additionalProperties": false
                            }
                          },
                          "additionalProperties": false
                        },
                        "providerType": {
                          "description": "providerType defines the provider for the Credential. Valid options are `blueprint`",
                          "type": "string",
                          "allOf": [
                            {
                              "enum": [
                                "deployment",
                                "blueprint"
                              ]
                            },
                            {
                              "enum": [
                                "blueprint"
                              ]
                            }
                          ]
                        }
                      },
                      "additionalProperties": false
                    },
                    "type": {
                      "description": "type defines the authentication method. Valid options are `simple`.",
                      "type": "string",
                      "enum": [
                        "simple"
                      ]
                    }
                  },
                  "additionalProperties": false
                },
                "proxyServer": {
                  "description": "proxyServer defines the proxy server to send metrics to",
                  "type": "object",
                  "properties": {
                    "authentication": {
                      "description": "authentication defines how to to authenticate with the proxy",
                      "type": "object",
                      "required": [
                        "simple",
                        "type"
                      ],
                      "properties": {
                        "simple": {
                          "description": "simple specifies simple authentication configuration.",
                          "type": "object",
                          "required": [
                            "blueprint",
                            "providerType"
                          ],
                          "properties": {
                            "blueprint": {
                              "description": "blueprintKey defines the key at the blueprint layer and cannot be overridden by deployments. This key will be used by all the deployments using this blueprint",
                              "type": "object",
                              "required": [
                                "credentialStoreRef"
                              ],
                              "properties": {
                                "credentialStoreRef": {
                                  "description": "credentialStoreRef specifies the key in the credential store",
                                  "type": "object",
                                  "properties": {
                                    "key": {
                                      "description": "key defines the name of the key in secret the CredentialStoreConfigRef refers to",
                                      "type": "string"
                                    },
                                    "name": {
                                      "description": "name defines the name of the CredentialStoreConfigRef",
                                      "type": "string"
                                    }
                                  },
                                  "additionalProperties": false
                                }
                              },
                              "additionalProperties": false
                            },
                            "providerType": {
                              "description": "providerType defines the provider for the Credential. Valid options are `blueprint`",
                              "type": "string",
                              "allOf": [
                                {
                                  "enum": [
                                    "deployment",
                                    "blueprint"
                                  ]
                                },
                                {
                                  "enum": [
                                    "blueprint"
                                  ]
                                }
                              ]
                            }
                          },
                          "additionalProperties": false
                        },
                        "type": {
                          "description": "type defines the authentication method. Valid options are `simple`.",
                          "type": "string",
                          "enum": [
                            "simple"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "confluentPlatform": {
          "description": "confluentPlatform defines configs for ConfluentPlatform on an application level.",
          "type": "object",
          "required": [
            "version"
          ],
          "properties": {
            "authorization": {
              "description": "Authorization specifies how authorization wil be specified for CP",
              "type": "object",
              "required": [
                "mdsClient",
                "superUsers",
                "type"
              ],
              "properties": {
                "mdsClient": {
                  "description": "mdsClient is the client configuration to connect to MDS. This section must provide credentials for one of the superUser configured.",
                  "type": "object",
                  "required": [
                    "authentication"
                  ],
                  "properties": {
                    "authentication": {
                      "description": "authentication specifies the authentication for mdsClient",
                      "type": "object",
                      "required": [
                        "bearer",
                        "type"
                      ],
                      "properties": {
                        "bearer": {
                          "description": "bearer specifies bearer authentication configuration.",
                          "type": "object",
                          "required": [
                            "providerType"
                          ],
                          "properties": {
                            "blueprint": {
                              "description": "blueprint defines the key at the blueprint layer and cannot be overridden by deployments. This key will be used by all the deployments using this blueprint",
                              "type": "object",
                              "required": [
                                "credentialStoreRef"
                              ],
                              "properties": {
                                "credentialStoreRef": {
                                  "description": "credentialStoreRef specifies the key in the credential store",
                                  "type": "object",
                                  "properties": {
                                    "key": {
                                      "description": "key defines the name of the key in secret the CredentialStoreConfigRef refers to",
                                      "type": "string"
                                    },
                                    "name": {
                                      "description": "name defines the name of the CredentialStoreConfigRef",
                                      "type": "string"
                                    }
                                  },
                                  "additionalProperties": false
                                }
                              },
                              "additionalProperties": false
                            },
                            "deployment": {
                              "description": "deployment defines the key at the deployment layer. The Cluster APIs provide the secret containing this key.",
                              "type": "object",
                              "required": [
                                "credentialStoreRef"
                              ],
                              "properties": {
                                "credentialStoreRef": {
                                  "description": "credentialStoreRef specifies the key in the cluster's credential store",
                                  "type": "object",
                                  "required": [
                                    "key"
                                  ],
                                  "properties": {
                                    "key": {
                                      "description": "key defines the name of the key in secret the CredentialStoreConfigRef refers to",
                                      "type": "string"
                                    }
                                  },
                                  "additionalProperties": false
                                }
                              },
                              "additionalProperties": false
                            },
                            "providerType": {
                              "description": "providerType defines the provider for the Credential. Valid options are `blueprint` and `deployment`",
                              "type": "string",
                              "allOf": [
                                {
                                  "enum": [
                                    "deployment",
                                    "blueprint"
                                  ]
                                },
                                {
                                  "enum": [
                                    "blueprint",
                                    "deployment"
                                  ]
                                }
                              ]
                            }
                          },
                          "additionalProperties": false
                        },
                        "type": {
                          "description": "type defines the authentication method. Valid options are `bearer`.",
                          "type": "string",
                          "enum": [
                            "bearer"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "superUsers": {
                  "description": "superUsers specify the super users to give the admin privilege on the Kafka Cluster. This list takes the format as `User:\u003cuser-name\u003e`",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "type": {
                  "description": "type specifies the authorization type. The valid options are `rbac` and `simple`.",
                  "type": "string",
                  "enum": [
                    "rbac"
                  ]
                }
              },
              "additionalProperties": false
            },
            "http": {
              "description": "http specifies the global http server configurations for the Confluent Platform components.",
              "type": "object",
              "properties": {
                "authentication": {
                  "description": "authentication specifies the authentication configuration.",
                  "type": "object",
                  "required": [
                    "type"
                  ],
                  "properties": {
                    "type": {
                      "description": "type specifies the authentication scheme for the REST API server. Valid options are `bearer` and `mtls`.",
                      "type": "string",
                      "enum": [
                        "mtls",
                        "bearer"
                      ]
                    }
                  },
                  "additionalProperties": false
                },
                "externalAccess": {
                  "description": "externalAccess specifies the external access configuration.",
                  "type": "object",
                  "required": [
                    "type"
                  ],
                  "properties": {
                    "ingress": {
                      "description": "ingress specifies the configuration for ingress.",
                      "type": "object",
                      "properties": {
                        "advertisedPort": {
                          "description": "advertisedPort specifies the external port for the client consumption. The default value is 443.",
                          "type": "integer",
                          "format": "int32"
                        },
                        "annotations": {
                          "description": "annotations is a map of string key and value pairs. It specifies Kubernetes annotations for this service. More info: http://kubernetes.io/docs/user-guide/annotations. annotations in KubernetesCluster take precedence over the ones in Blueprint if exists.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          },
                          "x-kubernetes-map-type": "granular"
                        },
                        "labels": {
                          "description": "labels is a map of string key and value pairs. It specifies Kubernetes labels for this service. labels in KubernetesCluster take over precedence the ones in Blueprint if exists. More info: http://kubernetes.io/docs/user-guide/labels.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          },
                          "x-kubernetes-map-type": "granular"
                        }
                      },
                      "additionalProperties": false
                    },
                    "loadBalancer": {
                      "description": "loadBalancer specifies the configurations for load balancers.",
                      "type": "object",
                      "properties": {
                        "advertisedPort": {
                          "description": "advertisedPort specifies the external port for the client consumption. If not configured, the same internal/external port is configured for the component. Information about the port can be retrieved through the status API.",
                          "type": "integer",
                          "format": "int32",
                          "minimum": 1
                        },
                        "annotations": {
                          "description": "annotations is a map of string key and value pairs. It specifies Kubernetes annotations for this service. More info: http://kubernetes.io/docs/user-guide/annotations. annotations in KubernetesCluster take precedence over the ones in Blueprint if exists.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          },
                          "x-kubernetes-map-type": "granular"
                        },
                        "externalTrafficPolicy": {
                          "description": "externalTrafficPolicy specifies the external traffic policy for the service. Valid options are `Local` and `Cluster`.",
                          "type": "string",
                          "enum": [
                            "Local",
                            "Cluster"
                          ]
                        },
                        "labels": {
                          "description": "labels is a map of string key and value pairs. It specifies Kubernetes labels for this service. labels in KubernetesCluster take over precedence the ones in Blueprint if exists. More info: http://kubernetes.io/docs/user-guide/labels.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          },
                          "x-kubernetes-map-type": "granular"
                        },
                        "loadBalancerSourceRanges": {
                          "description": "loadBalancerSourceRanges specify the source ranges.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "additionalProperties": false
                    },
                    "route": {
                      "description": "route specifies the configuration for OpenShift route.",
                      "type": "object",
                      "properties": {
                        "annotations": {
                          "description": "annotations is a map of string key and value pairs. It specifies Kubernetes annotations for this service. More info: http://kubernetes.io/docs/user-guide/annotations. annotations in KubernetesCluster take precedence over the ones in Blueprint if exists.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          },
                          "x-kubernetes-map-type": "granular"
                        },
                        "labels": {
                          "description": "labels is a map of string key and value pairs. It specifies Kubernetes labels for this service. labels in KubernetesCluster take over precedence the ones in Blueprint if exists. More info: http://kubernetes.io/docs/user-guide/labels.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          },
                          "x-kubernetes-map-type": "granular"
                        },
                        "wildcardPolicy": {
                          "description": "wildcardPolicy allows you to define a route that covers all hosts within a domain. Valid options are `Subdomain` and `None`. The default value is `None`.",
                          "type": "string",
                          "enum": [
                            "Subdomain",
                            "None"
                          ]
                        }
                      },
                      "additionalProperties": false
                    },
                    "type": {
                      "description": "type specifies the external access type for each cluster. Valid options are `loadBalancer`, `ingress`, `route` and `nodePort`.",
                      "type": "string",
                      "enum": [
                        "loadBalancer",
                        "ingress",
                        "nodePort",
                        "route"
                      ]
                    }
                  },
                  "additionalProperties": false
                },
                "tlsConfig": {
                  "description": "tls specifies how certificates will be provided.",
                  "type": "object",
                  "required": [
                    "providerType"
                  ],
                  "properties": {
                    "blueprint": {
                      "description": "blueprint specifies the blueprint provided tls certificates configuration.",
                      "type": "object",
                      "properties": {
                        "certificateStoreConfig": {
                          "description": "certificateStoreConfig specifies certificate store config reference.",
                          "type": "object",
                          "required": [
                            "name"
                          ],
                          "properties": {
                            "name": {
                              "description": "name specifies the reference name to certificateStoreConfig.",
                              "type": "string",
                              "maxLength": 63,
                              "minLength": 1,
                              "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    },
                    "providerType": {
                      "description": "providerType specifies the provider type for TLS certificates.",
                      "type": "string",
                      "allOf": [
                        {
                          "enum": [
                            "deployment",
                            "blueprint"
                          ]
                        },
                        {
                          "enum": [
                            "blueprint"
                          ]
                        }
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "kafkaListeners": {
              "description": "kafkaListeners specifies the listeners configurations for Kafka.",
              "type": "object",
              "properties": {
                "customListeners": {
                  "description": "customListeners defines the list of Kafka custom listeners.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "name",
                      "port"
                    ],
                    "properties": {
                      "authentication": {
                        "description": "authentication specifies the authentication configuration for the Kafka external and custom listeners.",
                        "type": "object",
                        "required": [
                          "type"
                        ],
                        "properties": {
                          "ldap": {
                            "description": "ldap specifies the credentials for ldap authentication",
                            "type": "object",
                            "required": [
                              "providerType"
                            ],
                            "properties": {
                              "blueprint": {
                                "description": "blueprintKey defines the key at the blueprint layer and cannot be overridden by deployments. This key will be used by all the deployments using this blueprint",
                                "type": "object",
                                "required": [
                                  "credentialStoreRef"
                                ],
                                "properties": {
                                  "credentialStoreRef": {
                                    "description": "credentialStoreRef specifies the key in the credential store",
                                    "type": "object",
                                    "properties": {
                                      "key": {
                                        "description": "key defines the name of the key in secret the CredentialStoreConfigRef refers to",
                                        "type": "string"
                                      },
                                      "name": {
                                        "description": "name defines the name of the CredentialStoreConfigRef",
                                        "type": "string"
                                      },
                                      "type": {
                                        "description": "type specifies the type of key in secret",
                                        "type": "string",
                                        "enum": [
                                          "json",
                                          "jaas"
                                        ]
                                      }
                                    },
                                    "additionalProperties": false
                                  }
                                },
                                "additionalProperties": false
                              },
                              "deployment": {
                                "description": "deploymentKey defines the key at the deployment layer. The Cluster APIs provide the secret containing this key.",
                                "type": "object",
                                "required": [
                                  "credentialStoreRef"
                                ],
                                "properties": {
                                  "credentialStoreRef": {
                                    "description": "credentialStoreRef specifies the key in the credential store",
                                    "type": "object",
                                    "required": [
                                      "key"
                                    ],
                                    "properties": {
                                      "key": {
                                        "description": "key defines the name of the key in secret the CredentialStoreConfigRef refers to",
                                        "type": "string"
                                      },
                                      "type": {
                                        "description": "type specifies the type of key in secret",
                                        "type": "string",
                                        "enum": [
                                          "json",
                                          "jaas"
                                        ]
                                      }
                                    },
                                    "additionalProperties": false
                                  }
                                },
                                "additionalProperties": false
                              },
                              "providerType": {
                                "description": "providerType defines the provider for the Credential. Valid options are `blueprint` and `deployment`",
                                "type": "string",
                                "allOf": [
                                  {
                                    "enum": [
                                      "deployment",
                                      "blueprint"
                                    ]
                                  },
                                  {
                                    "enum": [
                                      "blueprint",
                                      "deployment"
                                    ]
                                  }
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          "plain": {
                            "description": "plain specifies the credentials for plain authentication",
                            "type": "object",
                            "required": [
                              "providerType"
                            ],
                            "properties": {
                              "blueprint": {
                                "description": "blueprintKey defines the key at the blueprint layer and cannot be overridden by deployments. This key will be used by all the deployments using this blueprint",
                                "type": "object",
                                "required": [
                                  "credentialStoreRef"
                                ],
                                "properties": {
                                  "credentialStoreRef": {
                                    "description": "credentialStoreRef specifies the key in the credential store",
                                    "type": "object",
                                    "properties": {
                                      "key": {
                                        "description": "key defines the name of the key in secret the CredentialStoreConfigRef refers to",
                                        "type": "string"
                                      },
                                      "name": {
                                        "description": "name defines the name of the CredentialStoreConfigRef",
                                        "type": "string"
                                      },
                                      "type": {
                                        "description": "type specifies the type of key in secret",
                                        "type": "string",
                                        "enum": [
                                          "json",
                                          "jaas"
                                        ]
                                      }
                                    },
                                    "additionalProperties": false
                                  }
                                },
                                "additionalProperties": false
                              },
                              "deployment": {
                                "description": "deploymentKey defines the key at the deployment layer. The Cluster APIs provide the secret containing this key.",
                                "type": "object",
                                "required": [
                                  "credentialStoreRef"
                                ],
                                "properties": {
                                  "credentialStoreRef": {
                                    "description": "credentialStoreRef specifies the key in the credential store",
                                    "type": "object",
                                    "required": [
                                      "key"
                                    ],
                                    "properties": {
                                      "key": {
                                        "description": "key defines the name of the key in secret the CredentialStoreConfigRef refers to",
                                        "type": "string"
                                      },
                                      "type": {
                                        "description": "type specifies the type of key in secret",
                                        "type": "string",
                                        "enum": [
                                          "json",
                                          "jaas"
                                        ]
                                      }
                                    },
                                    "additionalProperties": false
                                  }
                                },
                                "additionalProperties": false
                              },
                              "providerType": {
                                "description": "providerType defines the provider for the Credential. Valid options are `blueprint` and `deployment`",
                                "type": "string",
                                "allOf": [
                                  {
                                    "enum": [
                                      "deployment",
                                      "blueprint"
                                    ]
                                  },
                                  {
                                    "enum": [
                                      "blueprint",
                                      "deployment"
                                    ]
                                  }
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          "type": {
                            "description": "type specifies the Kafka listener authentication type. Valid options are `plain`, `mtls`, and `ldap`.",
                            "type": "string",
                            "enum": [
                              "plain",
                              "mtls",
                              "ldap"
                            ]
                          }
                        },
                        "additionalProperties": false
                      },
                      "externalAccess": {
                        "description": "externalAccess defines the external access configuration for the Kafka external listener.",
                        "type": "object",
                        "properties": {
                          "dnsConfig": {
                            "description": "dnsConfig specifies the prefix for FQDN if subdomain provider type is blueprint.",
                            "type": "object",
                            "properties": {
                              "subdomain": {
                                "description": "subdomain specifies the subdomain for the cluster FQDN.",
                                "type": "string"
                              }
                            },
                            "additionalProperties": false
                          },
                          "enabled": {
                            "description": "enabled specifies the external access type for each cluster.",
                            "type": "boolean"
                          },
                          "ingress": {
                            "description": "ingress specifies the configuration for ingress.",
                            "type": "object",
                            "properties": {
                              "advertisedPort": {
                                "description": "advertisedPort specifies the external port for the client consumption. The default value is 443.",
                                "type": "integer",
                                "format": "int32"
                              },
                              "annotations": {
                                "description": "annotations is a map of string key and value pairs. It specifies Kubernetes annotations for this service. More info: http://kubernetes.io/docs/user-guide/annotations. annotations in KubernetesCluster take precedence over the ones in Blueprint if exists.",
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "x-kubernetes-map-type": "granular"
                              },
                              "labels": {
                                "description": "labels is a map of string key and value pairs. It specifies Kubernetes labels for this service. labels in KubernetesCluster take over precedence the ones in Blueprint if exists. More info: http://kubernetes.io/docs/user-guide/labels.",
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "x-kubernetes-map-type": "granular"
                              }
                            },
                            "additionalProperties": false
                          },
                          "loadBalancer": {
                            "description": "loadBalancer specifies the configuration for load balancers.",
                            "type": "object",
                            "properties": {
                              "advertisedPort": {
                                "description": "advertisedPort specifies the external port for the client consumption. If not configured, the same internal/external port is configured for the component. Information about the port can be retrieved through the status API.",
                                "type": "integer",
                                "format": "int32",
                                "minimum": 1
                              },
                              "annotations": {
                                "description": "annotations is a map of string key and value pairs. It specifies Kubernetes annotations for this service. More info: http://kubernetes.io/docs/user-guide/annotations. annotations in KubernetesCluster take precedence over the ones in Blueprint if exists.",
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "x-kubernetes-map-type": "granular"
                              },
                              "externalTrafficPolicy": {
                                "description": "externalTrafficPolicy specifies the external traffic policy for the service. Valid options are `Local` and `Cluster`.",
                                "type": "string",
                                "enum": [
                                  "Local",
                                  "Cluster"
                                ]
                              },
                              "labels": {
                                "description": "labels is a map of string key and value pairs. It specifies Kubernetes labels for this service. labels in KubernetesCluster take over precedence the ones in Blueprint if exists. More info: http://kubernetes.io/docs/user-guide/labels.",
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "x-kubernetes-map-type": "granular"
                              },
                              "loadBalancerSourceRanges": {
                                "description": "loadBalancerSourceRanges specify the source ranges.",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            },
                            "additionalProperties": false
                          },
                          "route": {
                            "description": "route specifies the configuration for OpenShift route.",
                            "type": "object",
                            "properties": {
                              "annotations": {
                                "description": "annotations is a map of string key and value pairs. It specifies Kubernetes annotations for this service. More info: http://kubernetes.io/docs/user-guide/annotations. annotations in KubernetesCluster take precedence over the ones in Blueprint if exists.",
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "x-kubernetes-map-type": "granular"
                              },
                              "labels": {
                                "description": "labels is a map of string key and value pairs. It specifies Kubernetes labels for this service. labels in KubernetesCluster take over precedence the ones in Blueprint if exists. More info: http://kubernetes.io/docs/user-guide/labels.",
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "x-kubernetes-map-type": "granular"
                              },
                              "wildcardPolicy": {
                                "description": "wildcardPolicy allows you to define a route that covers all hosts within a domain. Valid options are `Subdomain` and `None`. The default value is `None`.",
                                "type": "string",
                                "enum": [
                                  "Subdomain",
                                  "None"
                                ]
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "additionalProperties": false
                      },
                      "name": {
                        "description": "name specifies the name of the custom listener. `internal`, `external`, and `token` are reserved and can't be used for this property.",
                        "type": "string",
                        "maxLength": 30,
                        "minLength": 1,
                        "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                      },
                      "port": {
                        "description": "port binds the given port to the custom listener. Port numbers lower than `9093` are reserved.",
                        "type": "integer",
                        "format": "int32",
                        "minimum": 9093
                      },
                      "tlsConfig": {
                        "description": "tlsConfig specifies the tls configuration for the listener.",
                        "type": "object",
                        "required": [
                          "providerType"
                        ],
                        "properties": {
                          "blueprint": {
                            "description": "blueprint specifies the blueprint provided tls certificates configuration.",
                            "type": "object",
                            "properties": {
                              "certificateStoreConfig": {
                                "description": "certificateStoreConfig specifies certificate store config reference.",
                                "type": "object",
                                "required": [
                                  "name"
                                ],
                                "properties": {
                                  "name": {
                                    "description": "name specifies the reference name to certificateStoreConfig.",
                                    "type": "string",
                                    "maxLength": 63,
                                    "minLength": 1,
                                    "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                                  }
                                },
                                "additionalProperties": false
                              }
                            },
                            "additionalProperties": false
                          },
                          "providerType": {
                            "description": "providerType specifies the provider type for TLS certificates.",
                            "type": "string",
                            "allOf": [
                              {
                                "enum": [
                                  "deployment",
                                  "blueprint"
                                ]
                              },
                              {
                                "enum": [
                                  "blueprint"
                                ]
                              }
                            ]
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "externalListener": {
                  "description": "externalListener specifies the Kafka external listener.",
                  "type": "object",
                  "properties": {
                    "authentication": {
                      "description": "authentication specifies the authentication configuration for the Kafka external and custom listeners.",
                      "type": "object",
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "ldap": {
                          "description": "ldap specifies the credentials for ldap authentication",
                          "type": "object",
                          "required": [
                            "providerType"
                          ],
                          "properties": {
                            "blueprint": {
                              "description": "blueprintKey defines the key at the blueprint layer and cannot be overridden by deployments. This key will be used by all the deployments using this blueprint",
                              "type": "object",
                              "required": [
                                "credentialStoreRef"
                              ],
                              "properties": {
                                "credentialStoreRef": {
                                  "description": "credentialStoreRef specifies the key in the credential store",
                                  "type": "object",
                                  "properties": {
                                    "key": {
                                      "description": "key defines the name of the key in secret the CredentialStoreConfigRef refers to",
                                      "type": "string"
                                    },
                                    "name": {
                                      "description": "name defines the name of the CredentialStoreConfigRef",
                                      "type": "string"
                                    },
                                    "type": {
                                      "description": "type specifies the type of key in secret",
                                      "type": "string",
                                      "enum": [
                                        "json",
                                        "jaas"
                                      ]
                                    }
                                  },
                                  "additionalProperties": false
                                }
                              },
                              "additionalProperties": false
                            },
                            "deployment": {
                              "description": "deploymentKey defines the key at the deployment layer. The Cluster APIs provide the secret containing this key.",
                              "type": "object",
                              "required": [
                                "credentialStoreRef"
                              ],
                              "properties": {
                                "credentialStoreRef": {
                                  "description": "credentialStoreRef specifies the key in the credential store",
                                  "type": "object",
                                  "required": [
                                    "key"
                                  ],
                                  "properties": {
                                    "key": {
                                      "description": "key defines the name of the key in secret the CredentialStoreConfigRef refers to",
                                      "type": "string"
                                    },
                                    "type": {
                                      "description": "type specifies the type of key in secret",
                                      "type": "string",
                                      "enum": [
                                        "json",
                                        "jaas"
                                      ]
                                    }
                                  },
                                  "additionalProperties": false
                                }
                              },
                              "additionalProperties": false
                            },
                            "providerType": {
                              "description": "providerType defines the provider for the Credential. Valid options are `blueprint` and `deployment`",
                              "type": "string",
                              "allOf": [
                                {
                                  "enum": [
                                    "deployment",
                                    "blueprint"
                                  ]
                                },
                                {
                                  "enum": [
                                    "blueprint",
                                    "deployment"
                                  ]
                                }
                              ]
                            }
                          },
                          "additionalProperties": false
                        },
                        "plain": {
                          "description": "plain specifies the credentials for plain authentication",
                          "type": "object",
                          "required": [
                            "providerType"
                          ],
                          "properties": {
                            "blueprint": {
                              "description": "blueprintKey defines the key at the blueprint layer and cannot be overridden by deployments. This key will be used by all the deployments using this blueprint",
                              "type": "object",
                              "required": [
                                "credentialStoreRef"
                              ],
                              "properties": {
                                "credentialStoreRef": {
                                  "description": "credentialStoreRef specifies the key in the credential store",
                                  "type": "object",
                                  "properties": {
                                    "key": {
                                      "description": "key defines the name of the key in secret the CredentialStoreConfigRef refers to",
                                      "type": "string"
                                    },
                                    "name": {
                                      "description": "name defines the name of the CredentialStoreConfigRef",
                                      "type": "string"
                                    },
                                    "type": {
                                      "description": "type specifies the type of key in secret",
                                      "type": "string",
                                      "enum": [
                                        "json",
                                        "jaas"
                                      ]
                                    }
                                  },
                                  "additionalProperties": false
                                }
                              },
                              "additionalProperties": false
                            },
                            "deployment": {
                              "description": "deploymentKey defines the key at the deployment layer. The Cluster APIs provide the secret containing this key.",
                              "type": "object",
                              "required": [
                                "credentialStoreRef"
                              ],
                              "properties": {
                                "credentialStoreRef": {
                                  "description": "credentialStoreRef specifies the key in the credential store",
                                  "type": "object",
                                  "required": [
                                    "key"
                                  ],
                                  "properties": {
                                    "key": {
                                      "description": "key defines the name of the key in secret the CredentialStoreConfigRef refers to",
                                      "type": "string"
                                    },
                                    "type": {
                                      "description": "type specifies the type of key in secret",
                                      "type": "string",
                                      "enum": [
                                        "json",
                                        "jaas"
                                      ]
                                    }
                                  },
                                  "additionalProperties": false
                                }
                              },
                              "additionalProperties": false
                            },
                            "providerType": {
                              "description": "providerType defines the provider for the Credential. Valid options are `blueprint` and `deployment`",
                              "type": "string",
                              "allOf": [
                                {
                                  "enum": [
                                    "deployment",
                                    "blueprint"
                                  ]
                                },
                                {
                                  "enum": [
                                    "blueprint",
                                    "deployment"
                                  ]
                                }
                              ]
                            }
                          },
                          "additionalProperties": false
                        },
                        "type": {
                          "description": "type specifies the Kafka listener authentication type. Valid options are `plain`, `mtls`, and `ldap`.",
                          "type": "string",
                          "enum": [
                            "plain",
                            "mtls",
                            "ldap"
                          ]
                        }
                      },
                      "additionalProperties": false
                    },
                    "externalAccess": {
                      "description": "externalAccess defines the external access configuration for the Kafka external listener.",
                      "type": "object",
                      "properties": {
                        "dnsConfig": {
                          "description": "dnsConfig specifies the prefix for FQDN if subdomain provider type is blueprint.",
                          "type": "object",
                          "properties": {
                            "subdomain": {
                              "description": "subdomain specifies the subdomain for the cluster FQDN.",
                              "type": "string"
                            }
                          },
                          "additionalProperties": false
                        },
                        "enabled": {
                          "description": "enabled specifies the external access type for each cluster.",
                          "type": "boolean"
                        },
                        "ingress": {
                          "description": "ingress specifies the configuration for ingress.",
                          "type": "object",
                          "properties": {
                            "advertisedPort": {
                              "description": "advertisedPort specifies the external port for the client consumption. The default value is 443.",
                              "type": "integer",
                              "format": "int32"
                            },
                            "annotations": {
                              "description": "annotations is a map of string key and value pairs. It specifies Kubernetes annotations for this service. More info: http://kubernetes.io/docs/user-guide/annotations. annotations in KubernetesCluster take precedence over the ones in Blueprint if exists.",
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              },
                              "x-kubernetes-map-type": "granular"
                            },
                            "labels": {
                              "description": "labels is a map of string key and value pairs. It specifies Kubernetes labels for this service. labels in KubernetesCluster take over precedence the ones in Blueprint if exists. More info: http://kubernetes.io/docs/user-guide/labels.",
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              },
                              "x-kubernetes-map-type": "granular"
                            }
                          },
                          "additionalProperties": false
                        },
                        "loadBalancer": {
                          "description": "loadBalancer specifies the configuration for load balancers.",
                          "type": "object",
                          "properties": {
                            "advertisedPort": {
                              "description": "advertisedPort specifies the external port for the client consumption. If not configured, the same internal/external port is configured for the component. Information about the port can be retrieved through the status API.",
                              "type": "integer",
                              "format": "int32",
                              "minimum": 1
                            },
                            "annotations": {
                              "description": "annotations is a map of string key and value pairs. It specifies Kubernetes annotations for this service. More info: http://kubernetes.io/docs/user-guide/annotations. annotations in KubernetesCluster take precedence over the ones in Blueprint if exists.",
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              },
                              "x-kubernetes-map-type": "granular"
                            },
                            "externalTrafficPolicy": {
                              "description": "externalTrafficPolicy specifies the external traffic policy for the service. Valid options are `Local` and `Cluster`.",
                              "type": "string",
                              "enum": [
                                "Local",
                                "Cluster"
                              ]
                            },
                            "labels": {
                              "description": "labels is a map of string key and value pairs. It specifies Kubernetes labels for this service. labels in KubernetesCluster take over precedence the ones in Blueprint if exists. More info: http://kubernetes.io/docs/user-guide/labels.",
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              },
                              "x-kubernetes-map-type": "granular"
                            },
                            "loadBalancerSourceRanges": {
                              "description": "loadBalancerSourceRanges specify the source ranges.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          },
                          "additionalProperties": false
                        },
                        "route": {
                          "description": "route specifies the configuration for OpenShift route.",
                          "type": "object",
                          "properties": {
                            "annotations": {
                              "description": "annotations is a map of string key and value pairs. It specifies Kubernetes annotations for this service. More info: http://kubernetes.io/docs/user-guide/annotations. annotations in KubernetesCluster take precedence over the ones in Blueprint if exists.",
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              },
                              "x-kubernetes-map-type": "granular"
                            },
                            "labels": {
                              "description": "labels is a map of string key and value pairs. It specifies Kubernetes labels for this service. labels in KubernetesCluster take over precedence the ones in Blueprint if exists. More info: http://kubernetes.io/docs/user-guide/labels.",
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              },
                              "x-kubernetes-map-type": "granular"
                            },
                            "wildcardPolicy": {
                              "description": "wildcardPolicy allows you to define a route that covers all hosts within a domain. Valid options are `Subdomain` and `None`. The default value is `None`.",
                              "type": "string",
                              "enum": [
                                "Subdomain",
                                "None"
                              ]
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    },
                    "tlsConfig": {
                      "description": "tlsConfig specifies the tls configuration for the listener.",
                      "type": "object",
                      "required": [
                        "providerType"
                      ],
                      "properties": {
                        "blueprint": {
                          "description": "blueprint specifies the blueprint provided tls certificates configuration.",
                          "type": "object",
                          "properties": {
                            "certificateStoreConfig": {
                              "description": "certificateStoreConfig specifies certificate store config reference.",
                              "type": "object",
                              "required": [
                                "name"
                              ],
                              "properties": {
                                "name": {
                                  "description": "name specifies the reference name to certificateStoreConfig.",
                                  "type": "string",
                                  "maxLength": 63,
                                  "minLength": 1,
                                  "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                                }
                              },
                              "additionalProperties": false
                            }
                          },
                          "additionalProperties": false
                        },
                        "providerType": {
                          "description": "providerType specifies the provider type for TLS certificates.",
                          "type": "string",
                          "allOf": [
                            {
                              "enum": [
                                "deployment",
                                "blueprint"
                              ]
                            },
                            {
                              "enum": [
                                "blueprint"
                              ]
                            }
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "global": {
                  "description": "global defines the global configurations for Kafka Listeners.",
                  "type": "object",
                  "properties": {
                    "externalAccessType": {
                      "description": "externalAccessType specifies the global external access type for Kafka Listeners. It is required if any of the Kafka listener has externalAccess enabled. Valid options are `loadBalancer`, `ingress`, `route`, and `nodePort`.",
                      "type": "string",
                      "enum": [
                        "loadBalancer",
                        "ingress",
                        "nodePort",
                        "route"
                      ]
                    },
                    "ingress": {
                      "description": "ingress specifies the global configuration for ingress.",
                      "type": "object",
                      "properties": {
                        "advertisedPort": {
                          "description": "advertisedPort specifies the external port for the client consumption. The default value is 443.",
                          "type": "integer",
                          "format": "int32"
                        },
                        "annotations": {
                          "description": "annotations is a map of string key and value pairs. It specifies Kubernetes annotations for this service. More info: http://kubernetes.io/docs/user-guide/annotations. annotations in KubernetesCluster take precedence over the ones in Blueprint if exists.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          },
                          "x-kubernetes-map-type": "granular"
                        },
                        "labels": {
                          "description": "labels is a map of string key and value pairs. It specifies Kubernetes labels for this service. labels in KubernetesCluster take over precedence the ones in Blueprint if exists. More info: http://kubernetes.io/docs/user-guide/labels.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          },
                          "x-kubernetes-map-type": "granular"
                        }
                      },
                      "additionalProperties": false
                    },
                    "loadBalancer": {
                      "description": "loadBalancer specifies the global configuration for load balancers.",
                      "type": "object",
                      "properties": {
                        "advertisedPort": {
                          "description": "advertisedPort specifies the external port for the client consumption. If not configured, the same internal/external port is configured for the component. Information about the port can be retrieved through the status API.",
                          "type": "integer",
                          "format": "int32",
                          "minimum": 1
                        },
                        "annotations": {
                          "description": "annotations is a map of string key and value pairs. It specifies Kubernetes annotations for this service. More info: http://kubernetes.io/docs/user-guide/annotations. annotations in KubernetesCluster take precedence over the ones in Blueprint if exists.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          },
                          "x-kubernetes-map-type": "granular"
                        },
                        "externalTrafficPolicy": {
                          "description": "externalTrafficPolicy specifies the external traffic policy for the service. Valid options are `Local` and `Cluster`.",
                          "type": "string",
                          "enum": [
                            "Local",
                            "Cluster"
                          ]
                        },
                        "labels": {
                          "description": "labels is a map of string key and value pairs. It specifies Kubernetes labels for this service. labels in KubernetesCluster take over precedence the ones in Blueprint if exists. More info: http://kubernetes.io/docs/user-guide/labels.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          },
                          "x-kubernetes-map-type": "granular"
                        },
                        "loadBalancerSourceRanges": {
                          "description": "loadBalancerSourceRanges specify the source ranges.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "additionalProperties": false
                    },
                    "route": {
                      "description": "route specifies the global configuration for OpenShift route.",
                      "type": "object",
                      "properties": {
                        "annotations": {
                          "description": "annotations is a map of string key and value pairs. It specifies Kubernetes annotations for this service. More info: http://kubernetes.io/docs/user-guide/annotations. annotations in KubernetesCluster take precedence over the ones in Blueprint if exists.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          },
                          "x-kubernetes-map-type": "granular"
                        },
                        "labels": {
                          "description": "labels is a map of string key and value pairs. It specifies Kubernetes labels for this service. labels in KubernetesCluster take over precedence the ones in Blueprint if exists. More info: http://kubernetes.io/docs/user-guide/labels.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          },
                          "x-kubernetes-map-type": "granular"
                        },
                        "wildcardPolicy": {
                          "description": "wildcardPolicy allows you to define a route that covers all hosts within a domain. Valid options are `Subdomain` and `None`. The default value is `None`.",
                          "type": "string",
                          "enum": [
                            "Subdomain",
                            "None"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "internalListener": {
                  "description": "internalListener specifies the Kafka internal listener.",
                  "type": "object",
                  "properties": {
                    "authentication": {
                      "description": "authentication specifies the authentication configuration for the Kafka listeners.",
                      "type": "object",
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "ldap": {
                          "description": "ldap specifies the credentials for ldap authentication",
                          "type": "object",
                          "required": [
                            "providerType"
                          ],
                          "properties": {
                            "blueprint": {
                              "description": "blueprintKey defines the key at the blueprint layer and cannot be overridden by deployments. This key will be used by all the deployments using this blueprint",
                              "type": "object",
                              "required": [
                                "credentialStoreRef"
                              ],
                              "properties": {
                                "credentialStoreRef": {
                                  "description": "credentialStoreRef specifies the key in the credential store",
                                  "type": "object",
                                  "properties": {
                                    "key": {
                                      "description": "key defines the name of the key in secret the CredentialStoreConfigRef refers to",
                                      "type": "string"
                                    },
                                    "name": {
                                      "description": "name defines the name of the CredentialStoreConfigRef",
                                      "type": "string"
                                    },
                                    "type": {
                                      "description": "type specifies the type of key in secret",
                                      "type": "string",
                                      "enum": [
                                        "json",
                                        "jaas"
                                      ]
                                    }
                                  },
                                  "additionalProperties": false
                                }
                              },
                              "additionalProperties": false
                            },
                            "providerType": {
                              "description": "providerType defines the provider for the Credential. Valid options are `blueprint`",
                              "type": "string",
                              "allOf": [
                                {
                                  "enum": [
                                    "deployment",
                                    "blueprint"
                                  ]
                                },
                                {
                                  "enum": [
                                    "blueprint"
                                  ]
                                }
                              ]
                            }
                          },
                          "additionalProperties": false
                        },
                        "plain": {
                          "description": "plain specifies the credentials for plain authentication",
                          "type": "object",
                          "required": [
                            "providerType"
                          ],
                          "properties": {
                            "blueprint": {
                              "description": "blueprintKey defines the key at the blueprint layer and cannot be overridden by deployments. This key will be used by all the deployments using this blueprint",
                              "type": "object",
                              "required": [
                                "credentialStoreRef"
                              ],
                              "properties": {
                                "credentialStoreRef": {
                                  "description": "credentialStoreRef specifies the key in the credential store",
                                  "type": "object",
                                  "properties": {
                                    "key": {
                                      "description": "key defines the name of the key in secret the CredentialStoreConfigRef refers to",
                                      "type": "string"
                                    },
                                    "name": {
                                      "description": "name defines the name of the CredentialStoreConfigRef",
                                      "type": "string"
                                    },
                                    "type": {
                                      "description": "type specifies the type of key in secret",
                                      "type": "string",
                                      "enum": [
                                        "json",
                                        "jaas"
                                      ]
                                    }
                                  },
                                  "additionalProperties": false
                                }
                              },
                              "additionalProperties": false
                            },
                            "providerType": {
                              "description": "providerType defines the provider for the Credential. Valid options are `blueprint`",
                              "type": "string",
                              "allOf": [
                                {
                                  "enum": [
                                    "deployment",
                                    "blueprint"
                                  ]
                                },
                                {
                                  "enum": [
                                    "blueprint"
                                  ]
                                }
                              ]
                            }
                          },
                          "additionalProperties": false
                        },
                        "type": {
                          "description": "type specifies the Kafka listener authentication type. Valid options are `plain`, `mtls`, and `ldap`.",
                          "type": "string",
                          "enum": [
                            "plain",
                            "mtls",
                            "ldap"
                          ]
                        }
                      },
                      "additionalProperties": false
                    },
                    "tlsConfig": {
                      "description": "tlsConfig specifies the tls configuration for the listener.",
                      "type": "object",
                      "required": [
                        "providerType"
                      ],
                      "properties": {
                        "blueprint": {
                          "description": "blueprint specifies the blueprint provided tls certificates configuration.",
                          "type": "object",
                          "properties": {
                            "certificateStoreConfig": {
                              "description": "certificateStoreConfig specifies certificate store config reference.",
                              "type": "object",
                              "required": [
                                "name"
                              ],
                              "properties": {
                                "name": {
                                  "description": "name specifies the reference name to certificateStoreConfig.",
                                  "type": "string",
                                  "maxLength": 63,
                                  "minLength": 1,
                                  "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                                }
                              },
                              "additionalProperties": false
                            }
                          },
                          "additionalProperties": false
                        },
                        "providerType": {
                          "description": "providerType specifies the provider type for TLS certificates.",
                          "type": "string",
                          "allOf": [
                            {
                              "enum": [
                                "deployment",
                                "blueprint"
                              ]
                            },
                            {
                              "enum": [
                                "blueprint"
                              ]
                            }
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "replicationListener": {
                  "description": "replicationListener specifies the Kafka replication listener.",
                  "type": "object",
                  "properties": {
                    "authentication": {
                      "description": "authentication specifies the authentication configuration for the Kafka replication listener.",
                      "type": "object",
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "ldap": {
                          "description": "ldap specifies the credentials for ldap authentication",
                          "type": "object",
                          "required": [
                            "blueprint",
                            "providerType"
                          ],
                          "properties": {
                            "blueprint": {
                              "description": "blueprintKey defines the key at the blueprint layer and cannot be overridden by deployments. This key will be used by all the deployments using this blueprint",
                              "type": "object",
                              "required": [
                                "credentialStoreRef"
                              ],
                              "properties": {
                                "credentialStoreRef": {
                                  "description": "credentialStoreRef specifies the key in the credential store",
                                  "type": "object",
                                  "properties": {
                                    "key": {
                                      "description": "key defines the name of the key in secret the CredentialStoreConfigRef refers to",
                                      "type": "string"
                                    },
                                    "name": {
                                      "description": "name defines the name of the CredentialStoreConfigRef",
                                      "type": "string"
                                    }
                                  },
                                  "additionalProperties": false
                                }
                              },
                              "additionalProperties": false
                            },
                            "providerType": {
                              "description": "providerType defines the provider for the Credential. Valid options are `blueprint`",
                              "type": "string",
                              "allOf": [
                                {
                                  "enum": [
                                    "deployment",
                                    "blueprint"
                                  ]
                                },
                                {
                                  "enum": [
                                    "blueprint"
                                  ]
                                }
                              ]
                            }
                          },
                          "additionalProperties": false
                        },
                        "plain": {
                          "description": "plain specifies the credentials for plain authentication",
                          "type": "object",
                          "required": [
                            "blueprint",
                            "providerType"
                          ],
                          "properties": {
                            "blueprint": {
                              "description": "blueprintKey defines the key at the blueprint layer and cannot be overridden by deployments. This key will be used by all the deployments using this blueprint",
                              "type": "object",
                              "required": [
                                "credentialStoreRef"
                              ],
                              "properties": {
                                "credentialStoreRef": {
                                  "description": "credentialStoreRef specifies the key in the credential store",
                                  "type": "object",
                                  "properties": {
                                    "key": {
                                      "description": "key defines the name of the key in secret the CredentialStoreConfigRef refers to",
                                      "type": "string"
                                    },
                                    "name": {
                                      "description": "name defines the name of the CredentialStoreConfigRef",
                                      "type": "string"
                                    }
                                  },
                                  "additionalProperties": false
                                }
                              },
                              "additionalProperties": false
                            },
                            "providerType": {
                              "description": "providerType defines the provider for the Credential. Valid options are `blueprint`",
                              "type": "string",
                              "allOf": [
                                {
                                  "enum": [
                                    "deployment",
                                    "blueprint"
                                  ]
                                },
                                {
                                  "enum": [
                                    "blueprint"
                                  ]
                                }
                              ]
                            }
                          },
                          "additionalProperties": false
                        },
                        "type": {
                          "description": "type specifies the Kafka listener authentication type. Valid options are `plain`, `mtls`, and `ldap`.",
                          "type": "string",
                          "enum": [
                            "plain",
                            "mtls",
                            "ldap"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "license": {
              "description": "license specifies the license configuration for the Confluent Platform component.",
              "type": "object",
              "required": [
                "blueprint",
                "providerType"
              ],
              "properties": {
                "blueprint": {
                  "description": "blueprintKey defines the key at the blueprint layer and cannot be overridden by deployments. This key will be used by all the deployments using this blueprint",
                  "type": "object",
                  "required": [
                    "credentialStoreRef"
                  ],
                  "properties": {
                    "credentialStoreRef": {
                      "description": "credentialStoreRef specifies the key in the credential store",
                      "type": "object",
                      "properties": {
                        "key": {
                          "description": "key defines the name of the key in secret the CredentialStoreConfigRef refers to",
                          "type": "string"
                        },
                        "name": {
                          "description": "name defines the name of the CredentialStoreConfigRef",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "providerType": {
                  "description": "providerType defines the provider for the Credential. Valid options are `blueprint`",
                  "type": "string",
                  "allOf": [
                    {
                      "enum": [
                        "deployment",
                        "blueprint"
                      ]
                    },
                    {
                      "enum": [
                        "blueprint"
                      ]
                    }
                  ]
                }
              },
              "additionalProperties": false
            },
            "version": {
              "description": "version is the versions of confluent platform deployed.",
              "type": "string"
            },
            "zookeeper": {
              "description": "zookeeper specifies the Zookeeper configuration",
              "type": "object",
              "properties": {
                "authentication": {
                  "description": "authentication specifies the authentication configuration for Zookeeper",
                  "type": "object",
                  "required": [
                    "type"
                  ],
                  "properties": {
                    "digest": {
                      "description": "digest specifies the digest authentication configuration for zookeeper",
                      "type": "object",
                      "required": [
                        "blueprint",
                        "providerType"
                      ],
                      "properties": {
                        "blueprint": {
                          "description": "blueprintKey defines the key at the blueprint layer and cannot be overridden by deployments. This key will be used by all the deployments using this blueprint",
                          "type": "object",
                          "required": [
                            "credentialStoreRef"
                          ],
                          "properties": {
                            "credentialStoreRef": {
                              "description": "credentialStoreRef specifies the key in the credential store",
                              "type": "object",
                              "properties": {
                                "key": {
                                  "description": "key defines the name of the key in secret the CredentialStoreConfigRef refers to",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "name defines the name of the CredentialStoreConfigRef",
                                  "type": "string"
                                }
                              },
                              "additionalProperties": false
                            }
                          },
                          "additionalProperties": false
                        },
                        "providerType": {
                          "description": "providerType defines the provider for the Credential. Valid options are `blueprint`",
                          "type": "string",
                          "allOf": [
                            {
                              "enum": [
                                "deployment",
                                "blueprint"
                              ]
                            },
                            {
                              "enum": [
                                "blueprint"
                              ]
                            }
                          ]
                        }
                      },
                      "additionalProperties": false
                    },
                    "type": {
                      "description": "type defines the authentication method for Zookeeper. Valid options are `digest` and `mtls`",
                      "type": "string",
                      "enum": [
                        "digest",
                        "mtls"
                      ]
                    }
                  },
                  "additionalProperties": false
                },
                "tlsConfig": {
                  "description": "tlsConfig specifies the tls configuration for Zookeeper",
                  "type": "object",
                  "required": [
                    "providerType"
                  ],
                  "properties": {
                    "blueprint": {
                      "description": "blueprint specifies the blueprint provided tls certificates configuration.",
                      "type": "object",
                      "properties": {
                        "certificateStoreConfig": {
                          "description": "certificateStoreConfig specifies certificate store config reference.",
                          "type": "object",
                          "required": [
                            "name"
                          ],
                          "properties": {
                            "name": {
                              "description": "name specifies the reference name to certificateStoreConfig.",
                              "type": "string",
                              "maxLength": 63,
                              "minLength": 1,
                              "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    },
                    "providerType": {
                      "description": "providerType specifies the provider type for TLS certificates.",
                      "type": "string",
                      "allOf": [
                        {
                          "enum": [
                            "deployment",
                            "blueprint"
                          ]
                        },
                        {
                          "enum": [
                            "blueprint"
                          ]
                        }
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "credentialStoreConfigRefs": {
          "description": "credentialStore defines the storing mechanism for all credential.",
          "type": "array",
          "items": {
            "description": "ObjectRef specifies a reference another Confluent Platform CR",
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "description": "Name is the name of the referenced CR",
                "type": "string",
                "maxLength": 63,
                "minLength": 1,
                "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
              },
              "namespace": {
                "description": "Namespace of the CR. Defaults to the current namespace of the CR making the reference",
                "type": "string",
                "maxLength": 255,
                "minLength": 1,
                "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
              }
            },
            "additionalProperties": false
          }
        },
        "dnsConfig": {
          "description": "dnsConfig defines the global DNS configurations to generate FQDN.",
          "type": "object",
          "required": [
            "domain",
            "providerType"
          ],
          "properties": {
            "blueprint": {
              "description": "blueprint specifies the configuration for blueprint subdomain provider type.",
              "type": "object",
              "properties": {
                "generateFQDNWithSchema": {
                  "description": "generateFQDNWithSchema defines the schema to generate FQDN.",
                  "type": "object",
                  "properties": {
                    "addClusterName": {
                      "description": "addClusterName specifies whether to add cluster name to the FQDN.",
                      "type": "boolean"
                    },
                    "addRegionName": {
                      "description": "addRegionName specifies whether to add region name to the FQDN.",
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "deployment": {
              "description": "deployment specifies the configuration for deployment subdomain provider type.",
              "type": "object",
              "properties": {
                "subdomainRegex": {
                  "description": "subdomainRegex specifies the regex for subdomains.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "domain": {
              "description": "domain specifies the domain name.",
              "type": "string"
            },
            "providerType": {
              "description": "providerType specifies where the subdomain come from.",
              "type": "string",
              "enum": [
                "deployment",
                "blueprint"
              ]
            }
          },
          "additionalProperties": false
        },
        "dockerImages": {
          "description": "dockerImages defines the registries and credentials used for CP.",
          "type": "array",
          "items": {
            "description": "DockerImage specifies how images will be supplied for clusters",
            "type": "object",
            "required": [
              "registry"
            ],
            "properties": {
              "pullSecretRef": {
                "description": "blueprintCredentialStoreConfig specifies the registry CredentialStoreConfig",
                "type": "object",
                "required": [
                  "blueprint",
                  "providerType"
                ],
                "properties": {
                  "blueprint": {
                    "description": "blueprintKey defines the key at the blueprint layer and cannot be overridden by deployments. This key will be used by all the deployments using this blueprint",
                    "type": "object",
                    "required": [
                      "credentialStoreRef"
                    ],
                    "properties": {
                      "credentialStoreRef": {
                        "description": "credentialStoreRef specifies the key in the credential store",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "name defines the name of the CredentialStoreConfigRef",
                            "type": "string"
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  },
                  "providerType": {
                    "description": "providerType defines the provider for the Credential. Valid options are `blueprint`",
                    "type": "string",
                    "allOf": [
                      {
                        "enum": [
                          "deployment",
                          "blueprint"
                        ]
                      },
                      {
                        "enum": [
                          "blueprint"
                        ]
                      }
                    ]
                  }
                },
                "additionalProperties": false
              },
              "registry": {
                "description": "registry is where the docker images are hosted.",
                "type": "string",
                "pattern": ".+"
              }
            },
            "additionalProperties": false
          }
        },
        "identityProvider": {
          "description": "identityProvider defines the identity mechanism for authorization.",
          "type": "object",
          "required": [
            "ldap",
            "type"
          ],
          "properties": {
            "ldap": {
              "description": "ldap defines the LDAP service configuration.",
              "type": "object",
              "required": [
                "address",
                "authentication",
                "configurations"
              ],
              "properties": {
                "address": {
                  "description": "address defines the LDAP server address.",
                  "type": "string"
                },
                "authentication": {
                  "description": "authentication defines the how to connect to LDAP service.",
                  "type": "object",
                  "required": [
                    "simple",
                    "type"
                  ],
                  "properties": {
                    "simple": {
                      "description": "simple specifies simple authentication configuration.",
                      "type": "object",
                      "required": [
                        "blueprint",
                        "providerType"
                      ],
                      "properties": {
                        "blueprint": {
                          "description": "blueprintKey defines the key at the blueprint layer and cannot be overridden by deployments. This key will be used by all the deployments using this blueprint",
                          "type": "object",
                          "required": [
                            "credentialStoreRef"
                          ],
                          "properties": {
                            "credentialStoreRef": {
                              "description": "credentialStoreRef specifies the key in the credential store",
                              "type": "object",
                              "properties": {
                                "key": {
                                  "description": "key defines the name of the key in secret the CredentialStoreConfigRef refers to",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "name defines the name of the CredentialStoreConfigRef",
                                  "type": "string"
                                }
                              },
                              "additionalProperties": false
                            }
                          },
                          "additionalProperties": false
                        },
                        "providerType": {
                          "description": "providerType defines the provider for the Credential. Valid options are `blueprint`",
                          "type": "string",
                          "allOf": [
                            {
                              "enum": [
                                "deployment",
                                "blueprint"
                              ]
                            },
                            {
                              "enum": [
                                "blueprint"
                              ]
                            }
                          ]
                        }
                      },
                      "additionalProperties": false
                    },
                    "type": {
                      "description": "type defines the authentication method. Valid options are `simple`.",
                      "type": "string",
                      "enum": [
                        "simple"
                      ]
                    }
                  },
                  "additionalProperties": false
                },
                "configurations": {
                  "description": "configurations defines the LDAP configurations for Confluent RBAC.",
                  "type": "object",
                  "properties": {
                    "groupMemberAttribute": {
                      "description": "groupMemberAttribute specifies the LDAP group member attribute.",
                      "type": "string",
                      "minLength": 1
                    },
                    "groupMemberAttributePattern": {
                      "description": "groupMemberAttributePattern specifies the regular expression pattern for the LDAP group member attribute.",
                      "type": "string",
                      "minLength": 1
                    },
                    "groupNameAttribute": {
                      "description": "groupNameAttribute specifies the LDAP group name attribute.",
                      "type": "string",
                      "minLength": 1
                    },
                    "groupObjectClass": {
                      "description": "groupObjectClass specifies the LDAP group object class.",
                      "type": "string",
                      "minLength": 1
                    },
                    "groupSearchBase": {
                      "description": "groupSearchBase specifies the LDAP search base for the group-based search.",
                      "type": "string",
                      "minLength": 1
                    },
                    "groupSearchFilter": {
                      "description": "groupSearchFilter specifies the LDAP search filter for the group-based search.",
                      "type": "string",
                      "minLength": 1
                    },
                    "groupSearchScope": {
                      "description": "groupSearchScope specifies the LDAP search scope for the group-based search.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "userMemberOfAttributePattern": {
                      "description": "userMemberOfAttributePattern specifies the regular expression pattern for the LDAP user member attribute.",
                      "type": "string",
                      "minLength": 1
                    },
                    "userNameAttribute": {
                      "description": "userNameAttribute specifies the LDAP username attribute.",
                      "type": "string",
                      "minLength": 1
                    },
                    "userObjectClass": {
                      "description": "userObjectClass specifies the LDAP user object class.",
                      "type": "string",
                      "minLength": 1
                    },
                    "userSearchBase": {
                      "description": "userSearchBase specifies the LDAP search base for the user-based search.",
                      "type": "string",
                      "minLength": 1
                    },
                    "userSearchFilter": {
                      "description": "userSearchFilter specifies the LDAP search filter for the user-based search.",
                      "type": "string",
                      "minLength": 1
                    },
                    "userSearchScope": {
                      "description": "userSearchScope specifies the LDAP search scope for the user-based search.",
                      "type": "integer",
                      "format": "int32"
                    }
                  },
                  "additionalProperties": false
                },
                "tlsConfig": {
                  "description": "tlsConfig specifies the tls configuration for LDAP.",
                  "type": "object",
                  "required": [
                    "providerType"
                  ],
                  "properties": {
                    "blueprint": {
                      "description": "blueprint specifies the blueprint provided tls certificates configuration.",
                      "type": "object",
                      "properties": {
                        "certificateStoreConfig": {
                          "description": "certificateStoreConfig specifies certificate store config reference.",
                          "type": "object",
                          "required": [
                            "name"
                          ],
                          "properties": {
                            "name": {
                              "description": "name specifies the reference name to certificateStoreConfig.",
                              "type": "string",
                              "maxLength": 63,
                              "minLength": 1,
                              "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    },
                    "providerType": {
                      "description": "providerType specifies the provider type for TLS certificates.",
                      "type": "string",
                      "allOf": [
                        {
                          "enum": [
                            "deployment",
                            "blueprint"
                          ]
                        },
                        {
                          "enum": [
                            "blueprint"
                          ]
                        }
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "type": {
              "description": "type defines the identity provider type. The valid option is `ldap`.",
              "type": "string",
              "enum": [
                "ldap",
                "oauth2"
              ]
            }
          },
          "additionalProperties": false
        },
        "internalCAKeyPair": {
          "description": "internalCAKeyPair specifies the internal CA key pair configuration for internal communication.",
          "type": "object",
          "required": [
            "blueprint",
            "providerType"
          ],
          "properties": {
            "blueprint": {
              "description": "blueprint specifies the blueprint provides the CA key pair.",
              "type": "object",
              "required": [
                "type"
              ],
              "properties": {
                "auto": {
                  "description": "auto specifies the configuration for auto generated CA key pair.",
                  "type": "object",
                  "properties": {
                    "caConfig": {
                      "description": "caConfig specifies the configuration for CA key pair.",
                      "type": "object",
                      "properties": {
                        "certDurationInDays": {
                          "description": "certDurationInDays specifies the certificate valid duration in days.",
                          "type": "integer"
                        },
                        "renewBeforeInDays": {
                          "description": "renewBeforeInDays specifies when to renew the certificate before it expires.",
                          "type": "integer"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "custom": {
                  "description": "custom specifies the configuration for user provided CA key pair.",
                  "type": "object",
                  "required": [
                    "certificateStoreConfig"
                  ],
                  "properties": {
                    "certificateStoreConfig": {
                      "description": "certificateStoreConfig specifies the certificate store config for the CA key pair.",
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "name": {
                          "description": "name specifies the reference name to certificateStoreConfig.",
                          "type": "string",
                          "maxLength": 63,
                          "minLength": 1,
                          "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "generatedCertificateConfig": {
                  "description": "generatedCertificateConfig specifies the generated certificate configuration using the blueprint provided CA key pair.",
                  "type": "object",
                  "properties": {
                    "certDurationInDays": {
                      "description": "certDurationInDays specifies the certificate valid duration in days.",
                      "type": "integer"
                    },
                    "renewBeforeInDays": {
                      "description": "renewBeforeInDays specifies when to renew the certificate before it expires.",
                      "type": "integer"
                    }
                  },
                  "additionalProperties": false
                },
                "type": {
                  "description": "type specifies the type of blueprint provided CA key pair.",
                  "type": "string",
                  "enum": [
                    "auto",
                    "custom"
                  ]
                }
              },
              "additionalProperties": false
            },
            "certificateConfigs": {
              "description": "certificateConfigs specify the certification configuration.",
              "type": "object",
              "properties": {
                "certDurationInDays": {
                  "description": "certDurationInDays specifies the certificate valid duration in days.",
                  "type": "integer"
                },
                "renewBeforeInDays": {
                  "description": "renewBeforeInDays specifies when to renew the certificate before it expires.",
                  "type": "integer"
                }
              },
              "additionalProperties": false
            },
            "providerType": {
              "description": "providerType specifies the provider type for the CA key pair. Currently, only supports providerType blueprint.",
              "type": "string",
              "allOf": [
                {
                  "enum": [
                    "deployment",
                    "blueprint"
                  ]
                },
                {
                  "enum": [
                    "blueprint"
                  ]
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "k8s": {
          "description": "k8s defines k8s specific configs for internal CPC k8s objects.",
          "type": "object",
          "properties": {
            "annotations": {
              "description": "annotations is a map of string key and value pairs stored with the resource and may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "labels": {
              "description": "labels is a map of string key and value pairs that can be used to organize and categorize (scope and select) objects. More info: http://kubernetes.io/docs/user-guide/labels.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "pullPolicy": {
              "description": "pullPolicy is the policy for pulling images. Valid options are `Always`, `Never`, and `IfNotPresent`. The default value is `IfNotPresent`.",
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            }
          },
          "additionalProperties": false
        },
        "metaDataService": {
          "description": "metaDataService defines MDS settings for RBAC CP settings.",
          "type": "object",
          "required": [
            "identityProviderType",
            "tokenKeyPair"
          ],
          "properties": {
            "identityProviderType": {
              "description": "identityProviderType is the type of identityprovider used by MDS. Valid options is `ldap`.",
              "type": "string",
              "enum": [
                "ldap"
              ]
            },
            "tlsConfig": {
              "description": "tlsConfig specifies the tls configuration for MDS.",
              "type": "object",
              "required": [
                "providerType"
              ],
              "properties": {
                "blueprint": {
                  "description": "blueprint specifies the blueprint provided tls certificates configuration.",
                  "type": "object",
                  "properties": {
                    "certificateStoreConfig": {
                      "description": "certificateStoreConfig specifies certificate store config reference.",
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "name": {
                          "description": "name specifies the reference name to certificateStoreConfig.",
                          "type": "string",
                          "maxLength": 63,
                          "minLength": 1,
                          "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "providerType": {
                  "description": "providerType specifies the provider type for TLS certificates.",
                  "type": "string",
                  "allOf": [
                    {
                      "enum": [
                        "deployment",
                        "blueprint"
                      ]
                    },
                    {
                      "enum": [
                        "blueprint"
                      ]
                    }
                  ]
                }
              },
              "additionalProperties": false
            },
            "tokenKeyPair": {
              "description": "tokenKeyPair specifies the token keypair to configure the MDS.",
              "type": "object",
              "properties": {
                "publicKey": {
                  "description": "publicKey specifies the public key of the MDS token key pair",
                  "type": "object",
                  "required": [
                    "blueprint",
                    "providerType"
                  ],
                  "properties": {
                    "blueprint": {
                      "description": "blueprintKey defines the key at the blueprint layer and cannot be overridden by deployments. This key will be used by all the deployments using this blueprint",
                      "type": "object",
                      "required": [
                        "credentialStoreRef"
                      ],
                      "properties": {
                        "credentialStoreRef": {
                          "description": "credentialStoreRef specifies the key in the credential store",
                          "type": "object",
                          "properties": {
                            "key": {
                              "description": "key defines the name of the key in secret the CredentialStoreConfigRef refers to",
                              "type": "string"
                            },
                            "name": {
                              "description": "name defines the name of the CredentialStoreConfigRef",
                              "type": "string"
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    },
                    "providerType": {
                      "description": "providerType defines the provider for the Credential. Valid options are `blueprint`",
                      "type": "string",
                      "allOf": [
                        {
                          "enum": [
                            "deployment",
                            "blueprint"
                          ]
                        },
                        {
                          "enum": [
                            "blueprint"
                          ]
                        }
                      ]
                    }
                  },
                  "additionalProperties": false
                },
                "tokenKey": {
                  "description": "tokenKey specifies the private key of the MDS token key pair",
                  "type": "object",
                  "required": [
                    "blueprint",
                    "providerType"
                  ],
                  "properties": {
                    "blueprint": {
                      "description": "blueprintKey defines the key at the blueprint layer and cannot be overridden by deployments. This key will be used by all the deployments using this blueprint",
                      "type": "object",
                      "required": [
                        "credentialStoreRef"
                      ],
                      "properties": {
                        "credentialStoreRef": {
                          "description": "credentialStoreRef specifies the key in the credential store",
                          "type": "object",
                          "properties": {
                            "key": {
                              "description": "key defines the name of the key in secret the CredentialStoreConfigRef refers to",
                              "type": "string"
                            },
                            "name": {
                              "description": "name defines the name of the CredentialStoreConfigRef",
                              "type": "string"
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    },
                    "providerType": {
                      "description": "providerType defines the provider for the Credential. Valid options are `blueprint`",
                      "type": "string",
                      "allOf": [
                        {
                          "enum": [
                            "deployment",
                            "blueprint"
                          ]
                        },
                        {
                          "enum": [
                            "blueprint"
                          ]
                        }
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "passwordEncoder": {
          "description": "passwordEncoder defines how Confluent passwords are encoded",
          "type": "object",
          "required": [
            "providerType"
          ],
          "properties": {
            "blueprint": {
              "description": "blueprintKey defines the key at the blueprint layer and cannot be overridden by deployments. This key will be used by all the deployments using this blueprint",
              "type": "object",
              "properties": {
                "credentialStoreRefs": {
                  "description": "credentialStoreRefs refers to the credential stores containing keys for password encoders",
                  "type": "object",
                  "properties": {
                    "forKafka": {
                      "description": "forKafka specifies the password encoder credential store for kafka",
                      "type": "object",
                      "properties": {
                        "key": {
                          "description": "key defines the name of the key in secret the CredentialStoreConfigRef refers to",
                          "type": "string"
                        },
                        "name": {
                          "description": "name defines the name of the CredentialStoreConfigRef",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    },
                    "forSchemaRegistry": {
                      "description": "forSchemaRegistry specifies the password encoder credential store for schema registry",
                      "type": "object",
                      "properties": {
                        "key": {
                          "description": "key defines the name of the key in secret the CredentialStoreConfigRef refers to",
                          "type": "string"
                        },
                        "name": {
                          "description": "name defines the name of the CredentialStoreConfigRef",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "deployment": {
              "description": "deploymentKey defines the key at the deployment layer. The Cluster APIs provide the secret containing this key.",
              "type": "object",
              "properties": {
                "credentialStoreRefs": {
                  "description": "credentialStoreRefs refers to the credential stores containing keys for password encoders",
                  "type": "object",
                  "properties": {
                    "forKafka": {
                      "description": "forKafka specifies the password encoder credential store for kafka",
                      "type": "object",
                      "required": [
                        "key"
                      ],
                      "properties": {
                        "key": {
                          "description": "key defines the name of the key in secret the CredentialStoreConfigRef refers to",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    },
                    "forSchemaRegistry": {
                      "description": "forSchemaRegistry specifies the password encoder credential store for schema registry",
                      "type": "object",
                      "required": [
                        "key"
                      ],
                      "properties": {
                        "key": {
                          "description": "key defines the name of the key in secret the CredentialStoreConfigRef refers to",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "providerType": {
              "description": "providerType defines the provider for the Credential. Valid options are `blueprint` and `deployment`",
              "type": "string",
              "allOf": [
                {
                  "enum": [
                    "deployment",
                    "blueprint"
                  ]
                },
                {
                  "enum": [
                    "blueprint",
                    "deployment"
                  ]
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "smtpServer": {
          "description": "smtpServer defines configs to connect to an smtp server to send alerts.",
          "type": "object",
          "properties": {
            "authentication": {
              "description": "authentication specifies the basic authentication fot SMTP server",
              "type": "object",
              "required": [
                "basic",
                "type"
              ],
              "properties": {
                "basic": {
                  "description": "Basic specifies basic authentication configuration.",
                  "type": "object",
                  "required": [
                    "blueprint",
                    "providerType"
                  ],
                  "properties": {
                    "blueprint": {
                      "description": "blueprintKey defines the key at the blueprint layer and cannot be overridden by deployments. This key will be used by all the deployments using this blueprint",
                      "type": "object",
                      "required": [
                        "credentialStoreRef"
                      ],
                      "properties": {
                        "credentialStoreRef": {
                          "description": "credentialStoreRef specifies the key in the credential store",
                          "type": "object",
                          "properties": {
                            "key": {
                              "description": "key defines the name of the key in secret the CredentialStoreConfigRef refers to",
                              "type": "string"
                            },
                            "name": {
                              "description": "name defines the name of the CredentialStoreConfigRef",
                              "type": "string"
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    },
                    "providerType": {
                      "description": "providerType defines the provider for the Credential. Valid options are `blueprint`",
                      "type": "string",
                      "allOf": [
                        {
                          "enum": [
                            "deployment",
                            "blueprint"
                          ]
                        },
                        {
                          "enum": [
                            "blueprint"
                          ]
                        }
                      ]
                    }
                  },
                  "additionalProperties": false
                },
                "type": {
                  "description": "type defines the authentication method. Valid options are `basic`.",
                  "type": "string",
                  "enum": [
                    "basic"
                  ]
                }
              },
              "additionalProperties": false
            },
            "tlsConfig": {
              "description": "tlsConfig specifies the tls configuration for SMTP server.",
              "type": "object",
              "required": [
                "providerType"
              ],
              "properties": {
                "blueprint": {
                  "description": "blueprint specifies the blueprint provided tls certificates configuration.",
                  "type": "object",
                  "properties": {
                    "certificateStoreConfig": {
                      "description": "certificateStoreConfig specifies certificate store config reference.",
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "name": {
                          "description": "name specifies the reference name to certificateStoreConfig.",
                          "type": "string",
                          "maxLength": 63,
                          "minLength": 1,
                          "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "providerType": {
                  "description": "providerType specifies the provider type for TLS certificates.",
                  "type": "string",
                  "allOf": [
                    {
                      "enum": [
                        "deployment",
                        "blueprint"
                      ]
                    },
                    {
                      "enum": [
                        "blueprint"
                      ]
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "tieredStorage": {
          "description": "tieredStorage defines how kafka TieredStorage will be enabled.",
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "ConfluentPlatformBlueprintStatus defines the observed state of ConfluentPlatformBlueprint",
      "type": "object",
      "properties": {
        "connectClusterClassVersion": {
          "description": "connectClusterClassVersion defines the version of ConnectClusterClass applied to its clusters.",
          "type": "integer",
          "format": "int64"
        },
        "controlCenterClusterClassVersion": {
          "description": "controlCenterClusterClassVersion defines the version of ControlCenterClusterClass applied to its clusters.",
          "type": "integer",
          "format": "int64"
        },
        "kafkaClusterClassVersion": {
          "description": "kafkaClusterClassVersion defines the version of KafkaClusterClass applied to its clusters.",
          "type": "integer",
          "format": "int64"
        },
        "kafkaRestProxyClusterClassVersion": {
          "description": "kafkaRestProxyClusterClassVersion defines the version of KafkaRestProxyClusterClass applied to its clusters.",
          "type": "integer",
          "format": "int64"
        },
        "ksqlDBClusterClassVersion": {
          "description": "ksqlDBClusterClassVersion defines the version of KsqlDBClusterClass applied to its clusters.",
          "type": "integer",
          "format": "int64"
        },
        "schemaRegistryClusterClassVersion": {
          "description": "schemaRegistryClusterClassVersion defines the version of SchemaRegistryClusterClass applied to its clusters.",
          "type": "integer",
          "format": "int64"
        },
        "zookeeperClusterClassVersion": {
          "description": "zookeeperClusterClassVersion defines the version of ZookeeperClusterClass applied to its clusters.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    }
  }
}
