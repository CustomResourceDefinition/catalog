{
  "description": "Cluster is the Schema for the clusters API.\n\nDeprecated: This type will be removed in one of the next releases.",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "spec is the desired state of Cluster.",
      "type": "object",
      "properties": {
        "clusterNetwork": {
          "description": "clusterNetwork is the cluster network configuration.",
          "type": "object",
          "properties": {
            "apiServerPort": {
              "description": "apiServerPort specifies the port the API Server should bind to.\nDefaults to 6443.",
              "type": "integer",
              "format": "int32"
            },
            "pods": {
              "description": "pods is the network ranges from which Pod networks are allocated.",
              "type": "object",
              "required": [
                "cidrBlocks"
              ],
              "properties": {
                "cidrBlocks": {
                  "description": "cidrBlocks is a list of CIDR blocks.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "additionalProperties": false
            },
            "serviceDomain": {
              "description": "serviceDomain is the domain name for services.",
              "type": "string"
            },
            "services": {
              "description": "services is the network ranges from which service VIPs are allocated.",
              "type": "object",
              "required": [
                "cidrBlocks"
              ],
              "properties": {
                "cidrBlocks": {
                  "description": "cidrBlocks is a list of CIDR blocks.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "controlPlaneEndpoint": {
          "description": "controlPlaneEndpoint represents the endpoint used to communicate with the control plane.",
          "type": "object",
          "required": [
            "host",
            "port"
          ],
          "properties": {
            "host": {
              "description": "host is the hostname on which the API server is serving.",
              "type": "string"
            },
            "port": {
              "description": "port is the port on which the API server is serving.",
              "type": "integer",
              "format": "int32"
            }
          },
          "additionalProperties": false
        },
        "controlPlaneRef": {
          "description": "controlPlaneRef is an optional reference to a provider-specific resource that holds\nthe details for provisioning the Control Plane for a Cluster.",
          "type": "object",
          "properties": {
            "apiVersion": {
              "description": "API version of the referent.",
              "type": "string"
            },
            "fieldPath": {
              "description": "If referring to a piece of an object instead of an entire object, this string\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\nFor example, if the object reference is to a container within a pod, this would take on a value like:\n\"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered\nthe event) or if no container name is specified \"spec.containers[2]\" (container with\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\nreferencing a part of an object.",
              "type": "string"
            },
            "kind": {
              "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type": "string"
            },
            "name": {
              "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
              "type": "string"
            },
            "resourceVersion": {
              "description": "Specific resourceVersion to which this reference is made, if any.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
              "type": "string"
            },
            "uid": {
              "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
              "type": "string"
            }
          },
          "additionalProperties": false,
          "x-kubernetes-map-type": "atomic"
        },
        "infrastructureRef": {
          "description": "infrastructureRef is a reference to a provider-specific resource that holds the details\nfor provisioning infrastructure for a cluster in said provider.",
          "type": "object",
          "properties": {
            "apiVersion": {
              "description": "API version of the referent.",
              "type": "string"
            },
            "fieldPath": {
              "description": "If referring to a piece of an object instead of an entire object, this string\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\nFor example, if the object reference is to a container within a pod, this would take on a value like:\n\"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered\nthe event) or if no container name is specified \"spec.containers[2]\" (container with\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\nreferencing a part of an object.",
              "type": "string"
            },
            "kind": {
              "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type": "string"
            },
            "name": {
              "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
              "type": "string"
            },
            "resourceVersion": {
              "description": "Specific resourceVersion to which this reference is made, if any.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
              "type": "string"
            },
            "uid": {
              "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
              "type": "string"
            }
          },
          "additionalProperties": false,
          "x-kubernetes-map-type": "atomic"
        },
        "paused": {
          "description": "paused can be used to prevent controllers from processing the Cluster and all its associated objects.",
          "type": "boolean"
        },
        "topology": {
          "description": "topology encapsulates the topology for the cluster.\nNOTE: It is required to enable the ClusterTopology\nfeature gate flag to activate managed topologies support;\nthis feature is highly experimental, and parts of it might still be not implemented.",
          "type": "object",
          "required": [
            "class",
            "version"
          ],
          "properties": {
            "class": {
              "description": "class is the name of the ClusterClass object to create the topology.",
              "type": "string"
            },
            "controlPlane": {
              "description": "controlPlane describes the cluster control plane.",
              "type": "object",
              "properties": {
                "metadata": {
                  "description": "metadata is the metadata applied to the machines of the ControlPlane.\nAt runtime this metadata is merged with the corresponding metadata from the ClusterClass.\n\nThis field is supported if and only if the control plane provider template\nreferenced in the ClusterClass is Machine based.",
                  "type": "object",
                  "properties": {
                    "annotations": {
                      "description": "annotations is an unstructured key value map stored with a resource that may be\nset by external tools to store and retrieve arbitrary metadata. They are not\nqueryable and should be preserved when modifying objects.\nMore info: http://kubernetes.io/docs/user-guide/annotations",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "labels": {
                      "description": "labels is a map of string keys and values that can be used to organize and categorize\n(scope and select) objects. May match selectors of replication controllers\nand services.\nMore info: http://kubernetes.io/docs/user-guide/labels",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    }
                  },
                  "additionalProperties": false
                },
                "replicas": {
                  "description": "replicas is the number of control plane nodes.\nIf the value is nil, the ControlPlane object is created without the number of Replicas\nand it's assumed that the control plane controller does not implement support for this field.\nWhen specified against a control plane provider that lacks support for this field, this value will be ignored.",
                  "type": "integer",
                  "format": "int32"
                }
              },
              "additionalProperties": false
            },
            "rolloutAfter": {
              "description": "rolloutAfter performs a rollout of the entire cluster one component at a time,\ncontrol plane first and then machine deployments.",
              "type": "string",
              "format": "date-time"
            },
            "version": {
              "description": "version is the Kubernetes version of the cluster.",
              "type": "string"
            },
            "workers": {
              "description": "workers encapsulates the different constructs that form the worker nodes\nfor the cluster.",
              "type": "object",
              "properties": {
                "machineDeployments": {
                  "description": "machineDeployments is a list of machine deployments in the cluster.",
                  "type": "array",
                  "items": {
                    "description": "MachineDeploymentTopology specifies the different parameters for a set of worker nodes in the topology.\nThis set of nodes is managed by a MachineDeployment object whose lifecycle is managed by the Cluster controller.",
                    "type": "object",
                    "required": [
                      "class",
                      "name"
                    ],
                    "properties": {
                      "class": {
                        "description": "class is the name of the MachineDeploymentClass used to create the set of worker nodes.\nThis should match one of the deployment classes defined in the ClusterClass object\nmentioned in the `Cluster.Spec.Class` field.",
                        "type": "string"
                      },
                      "metadata": {
                        "description": "metadata is the metadata applied to the machines of the MachineDeployment.\nAt runtime this metadata is merged with the corresponding metadata from the ClusterClass.",
                        "type": "object",
                        "properties": {
                          "annotations": {
                            "description": "annotations is an unstructured key value map stored with a resource that may be\nset by external tools to store and retrieve arbitrary metadata. They are not\nqueryable and should be preserved when modifying objects.\nMore info: http://kubernetes.io/docs/user-guide/annotations",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "labels": {
                            "description": "labels is a map of string keys and values that can be used to organize and categorize\n(scope and select) objects. May match selectors of replication controllers\nand services.\nMore info: http://kubernetes.io/docs/user-guide/labels",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          }
                        },
                        "additionalProperties": false
                      },
                      "name": {
                        "description": "name is the unique identifier for this MachineDeploymentTopology.\nThe value is used with other unique identifiers to create a MachineDeployment's Name\n(e.g. cluster's name, etc). In case the name is greater than the allowed maximum length,\nthe values are hashed together.",
                        "type": "string"
                      },
                      "replicas": {
                        "description": "replicas is the number of worker nodes belonging to this set.\nIf the value is nil, the MachineDeployment is created without the number of Replicas (defaulting to zero)\nand it's assumed that an external entity (like cluster autoscaler) is responsible for the management\nof this value.",
                        "type": "integer",
                        "format": "int32"
                      }
                    },
                    "additionalProperties": false
                  }
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "status is the observed state of Cluster.",
      "type": "object",
      "properties": {
        "conditions": {
          "description": "conditions defines current service state of the cluster.",
          "type": "array",
          "items": {
            "description": "Condition defines an observation of a Cluster API resource operational state.",
            "type": "object",
            "required": [
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed. If that is not known, then using the time when\nthe API field changed is acceptable.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition.\nThis field may be empty.",
                "type": "string"
              },
              "reason": {
                "description": "reason is the reason for the condition's last transition in CamelCase.\nThe specific API may choose whether or not this field is considered a guaranteed API.\nThis field may not be empty.",
                "type": "string"
              },
              "severity": {
                "description": "severity provides an explicit classification of Reason code, so the users or machines can immediately\nunderstand the current situation and act accordingly.\nThe Severity field MUST be set only when Status=False.",
                "type": "string"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "type": "string"
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase.\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions\ncan be useful (see .node.status.conditions), the ability to deconflict is important.",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "controlPlaneReady": {
          "description": "controlPlaneReady defines if the control plane is ready.",
          "type": "boolean"
        },
        "failureDomains": {
          "description": "failureDomains is a slice of failure domain objects synced from the infrastructure provider.",
          "type": "object",
          "additionalProperties": {
            "description": "FailureDomainSpec is the Schema for Cluster API failure domains.\nIt allows controllers to understand how many failure domains a cluster can optionally span across.",
            "type": "object",
            "properties": {
              "attributes": {
                "description": "attributes is a free form map of attributes an infrastructure provider might use or require.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "controlPlane": {
                "description": "controlPlane determines if this failure domain is suitable for use by control plane machines.",
                "type": "boolean"
              }
            }
          }
        },
        "failureMessage": {
          "description": "failureMessage indicates that there is a fatal problem reconciling the\nstate, and will be set to a descriptive error message.",
          "type": "string"
        },
        "failureReason": {
          "description": "failureReason indicates that there is a fatal problem reconciling the\nstate, and will be set to a token value suitable for\nprogrammatic interpretation.",
          "type": "string"
        },
        "infrastructureReady": {
          "description": "infrastructureReady is the state of the infrastructure provider.",
          "type": "boolean"
        },
        "observedGeneration": {
          "description": "observedGeneration is the latest generation observed by the controller.",
          "type": "integer",
          "format": "int64"
        },
        "phase": {
          "description": "phase represents the current phase of cluster actuation.\nE.g. Pending, Running, Terminating, Failed etc.",
          "type": "string"
        }
      },
      "additionalProperties": false
    }
  }
}
