{
  "description": "Index is the Schema for the Indexs API. Provides a Datadog Logs Index API resource. This can be used to create and manage Datadog logs indexes. Reach out to support to delete a logs index.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "IndexSpec defines the desired state of Index",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "deletionPolicy": {
          "description": "DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either \"Delete\" or \"Orphan\" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "type": "string",
          "default": "Delete",
          "enum": [
            "Orphan",
            "Delete"
          ]
        },
        "forProvider": {
          "type": "object",
          "properties": {
            "dailyLimit": {
              "description": "limited. The number of log events you can send in this index per day before you are rate-limited.",
              "type": "number"
            },
            "dailyLimitReset": {
              "description": "(Block List, Max: 1) Object containing options to override the default daily limit reset time. (see below for nested schema) Object containing options to override the default daily limit reset time.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "resetTime": {
                    "description": "(String) String in HH:00 format representing the time of day the daily limit should be reset. The hours must be between 00 and 23 (inclusive). String in `HH:00` format representing the time of day the daily limit should be reset. The hours must be between 00 and 23 (inclusive).",
                    "type": "string"
                  },
                  "resetUtcOffset": {
                    "description": "|+)HH:00 format representing the UTC offset to apply to the given reset time. The hours must be between -12 and +14 (inclusive). String in `(-|+)HH:00` format representing the UTC offset to apply to the given reset time. The hours must be between -12 and +14 (inclusive).",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "dailyLimitWarningThresholdPercentage": {
              "description": "(Number) A percentage threshold of the daily quota at which a Datadog warning event is generated. A percentage threshold of the daily quota at which a Datadog warning event is generated.",
              "type": "number"
            },
            "disableDailyLimit": {
              "description": "(Boolean) If true, sets the daily_limit value to null and the index is not limited on a daily basis (any specified daily_limit value in the request is ignored). If false or omitted, the index's current daily_limit is maintained. If true, sets the daily_limit value to null and the index is not limited on a daily basis (any specified daily_limit value in the request is ignored). If false or omitted, the index's current daily_limit is maintained.",
              "type": "boolean"
            },
            "exclusionFilter": {
              "description": "(Block List) List of exclusion filters. (see below for nested schema) List of exclusion filters.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "filter": {
                    "description": "(Block List, Min: 1, Max: 1) Logs filter (see below for nested schema)",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "query": {
                          "description": "(String) Logs filter criteria. Only logs matching this filter criteria are considered for this index. Only logs matching the filter criteria and the query of the parent index will be considered for this exclusion filter.",
                          "type": "string"
                        },
                        "sampleRate": {
                          "description": "(Number) The fraction of logs excluded by the exclusion filter, when active. The fraction of logs excluded by the exclusion filter, when active.",
                          "type": "number"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "isEnabled": {
                    "description": "(Boolean) A boolean stating if the exclusion is active or not. A boolean stating if the exclusion is active or not.",
                    "type": "boolean"
                  },
                  "name": {
                    "description": "(String) The name of the index. The name of the exclusion filter.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "filter": {
              "description": "(Block List, Min: 1, Max: 1) Logs filter (see below for nested schema) Logs filter",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "query": {
                    "description": "(String) Logs filter criteria. Only logs matching this filter criteria are considered for this index. Logs filter criteria. Only logs matching this filter criteria are considered for this index.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "name": {
              "description": "(String) The name of the index. The name of the index.",
              "type": "string"
            },
            "retentionDays": {
              "description": "(Number) The number of days before logs are deleted from this index. The number of days before logs are deleted from this index.",
              "type": "number"
            }
          },
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored unless the Management Policies feature flag is disabled. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.",
          "type": "object",
          "properties": {
            "dailyLimit": {
              "description": "limited. The number of log events you can send in this index per day before you are rate-limited.",
              "type": "number"
            },
            "dailyLimitReset": {
              "description": "(Block List, Max: 1) Object containing options to override the default daily limit reset time. (see below for nested schema) Object containing options to override the default daily limit reset time.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "resetTime": {
                    "description": "(String) String in HH:00 format representing the time of day the daily limit should be reset. The hours must be between 00 and 23 (inclusive). String in `HH:00` format representing the time of day the daily limit should be reset. The hours must be between 00 and 23 (inclusive).",
                    "type": "string"
                  },
                  "resetUtcOffset": {
                    "description": "|+)HH:00 format representing the UTC offset to apply to the given reset time. The hours must be between -12 and +14 (inclusive). String in `(-|+)HH:00` format representing the UTC offset to apply to the given reset time. The hours must be between -12 and +14 (inclusive).",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "dailyLimitWarningThresholdPercentage": {
              "description": "(Number) A percentage threshold of the daily quota at which a Datadog warning event is generated. A percentage threshold of the daily quota at which a Datadog warning event is generated.",
              "type": "number"
            },
            "disableDailyLimit": {
              "description": "(Boolean) If true, sets the daily_limit value to null and the index is not limited on a daily basis (any specified daily_limit value in the request is ignored). If false or omitted, the index's current daily_limit is maintained. If true, sets the daily_limit value to null and the index is not limited on a daily basis (any specified daily_limit value in the request is ignored). If false or omitted, the index's current daily_limit is maintained.",
              "type": "boolean"
            },
            "exclusionFilter": {
              "description": "(Block List) List of exclusion filters. (see below for nested schema) List of exclusion filters.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "filter": {
                    "description": "(Block List, Min: 1, Max: 1) Logs filter (see below for nested schema)",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "query": {
                          "description": "(String) Logs filter criteria. Only logs matching this filter criteria are considered for this index. Only logs matching the filter criteria and the query of the parent index will be considered for this exclusion filter.",
                          "type": "string"
                        },
                        "sampleRate": {
                          "description": "(Number) The fraction of logs excluded by the exclusion filter, when active. The fraction of logs excluded by the exclusion filter, when active.",
                          "type": "number"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "isEnabled": {
                    "description": "(Boolean) A boolean stating if the exclusion is active or not. A boolean stating if the exclusion is active or not.",
                    "type": "boolean"
                  },
                  "name": {
                    "description": "(String) The name of the index. The name of the exclusion filter.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "filter": {
              "description": "(Block List, Min: 1, Max: 1) Logs filter (see below for nested schema) Logs filter",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "query": {
                    "description": "(String) Logs filter criteria. Only logs matching this filter criteria are considered for this index. Logs filter criteria. Only logs matching this filter criteria are considered for this index.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "name": {
              "description": "(String) The name of the index. The name of the index.",
              "type": "string"
            },
            "retentionDays": {
              "description": "(Number) The number of days before logs are deleted from this index. The number of days before logs are deleted from this index.",
              "type": "number"
            }
          },
          "additionalProperties": false
        },
        "managementPolicies": {
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out through a Crossplane feature flag. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers can take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.",
          "type": "object",
          "default": {
            "name": "default"
          },
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "type": "object",
              "properties": {
                "resolution": {
                  "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                  "type": "string",
                  "default": "Required",
                  "enum": [
                    "Required",
                    "Optional"
                  ]
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                  "type": "string",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "publishConnectionDetailsTo": {
          "description": "PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "configRef": {
              "description": "SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.",
              "type": "object",
              "default": {
                "name": "default"
              },
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "metadata": {
              "description": "Metadata is the metadata for connection secret.",
              "type": "object",
              "properties": {
                "annotations": {
                  "description": "Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.annotations\". - It is up to Secret Store implementation for others store types.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "labels": {
                  "description": "Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \"metadata.labels\". - It is up to Secret Store implementation for others store types.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "type": {
                  "description": "Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "name": {
              "description": "Name is the name of the connection secret.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.",
          "type": "object",
          "required": [
            "name",
            "namespace"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false,
      "x-kubernetes-validations": [
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.filter) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.filter))",
          "message": "spec.forProvider.filter is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.name))",
          "message": "spec.forProvider.name is a required parameter"
        }
      ]
    },
    "status": {
      "description": "IndexStatus defines the observed state of Index.",
      "type": "object",
      "properties": {
        "atProvider": {
          "type": "object",
          "properties": {
            "dailyLimit": {
              "description": "limited. The number of log events you can send in this index per day before you are rate-limited.",
              "type": "number"
            },
            "dailyLimitReset": {
              "description": "(Block List, Max: 1) Object containing options to override the default daily limit reset time. (see below for nested schema) Object containing options to override the default daily limit reset time.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "resetTime": {
                    "description": "(String) String in HH:00 format representing the time of day the daily limit should be reset. The hours must be between 00 and 23 (inclusive). String in `HH:00` format representing the time of day the daily limit should be reset. The hours must be between 00 and 23 (inclusive).",
                    "type": "string"
                  },
                  "resetUtcOffset": {
                    "description": "|+)HH:00 format representing the UTC offset to apply to the given reset time. The hours must be between -12 and +14 (inclusive). String in `(-|+)HH:00` format representing the UTC offset to apply to the given reset time. The hours must be between -12 and +14 (inclusive).",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "dailyLimitWarningThresholdPercentage": {
              "description": "(Number) A percentage threshold of the daily quota at which a Datadog warning event is generated. A percentage threshold of the daily quota at which a Datadog warning event is generated.",
              "type": "number"
            },
            "disableDailyLimit": {
              "description": "(Boolean) If true, sets the daily_limit value to null and the index is not limited on a daily basis (any specified daily_limit value in the request is ignored). If false or omitted, the index's current daily_limit is maintained. If true, sets the daily_limit value to null and the index is not limited on a daily basis (any specified daily_limit value in the request is ignored). If false or omitted, the index's current daily_limit is maintained.",
              "type": "boolean"
            },
            "exclusionFilter": {
              "description": "(Block List) List of exclusion filters. (see below for nested schema) List of exclusion filters.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "filter": {
                    "description": "(Block List, Min: 1, Max: 1) Logs filter (see below for nested schema)",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "query": {
                          "description": "(String) Logs filter criteria. Only logs matching this filter criteria are considered for this index. Only logs matching the filter criteria and the query of the parent index will be considered for this exclusion filter.",
                          "type": "string"
                        },
                        "sampleRate": {
                          "description": "(Number) The fraction of logs excluded by the exclusion filter, when active. The fraction of logs excluded by the exclusion filter, when active.",
                          "type": "number"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "isEnabled": {
                    "description": "(Boolean) A boolean stating if the exclusion is active or not. A boolean stating if the exclusion is active or not.",
                    "type": "boolean"
                  },
                  "name": {
                    "description": "(String) The name of the index. The name of the exclusion filter.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "filter": {
              "description": "(Block List, Min: 1, Max: 1) Logs filter (see below for nested schema) Logs filter",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "query": {
                    "description": "(String) Logs filter criteria. Only logs matching this filter criteria are considered for this index. Logs filter criteria. Only logs matching this filter criteria are considered for this index.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "id": {
              "description": "(String) The ID of this resource.",
              "type": "string"
            },
            "name": {
              "description": "(String) The name of the index. The name of the index.",
              "type": "string"
            },
            "retentionDays": {
              "description": "(Number) The number of days before logs are deleted from this index. The number of days before logs are deleted from this index.",
              "type": "number"
            }
          },
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "type": "array",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one status to another.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from one status to another, if any.",
                "type": "string"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to a resource at any point in time.",
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        }
      },
      "additionalProperties": false
    }
  }
}
