{
  "description": "StackConfigPolicy represents a StackConfigPolicy resource in a Kubernetes cluster.",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "type": "object",
      "properties": {
        "elasticsearch": {
          "type": "object",
          "properties": {
            "clusterSettings": {
              "description": "ClusterSettings holds the Elasticsearch cluster settings (/_cluster/settings)",
              "type": "object",
              "x-kubernetes-preserve-unknown-fields": true
            },
            "config": {
              "description": "Config holds the settings that go into elasticsearch.yml.",
              "type": "object",
              "x-kubernetes-preserve-unknown-fields": true
            },
            "indexLifecyclePolicies": {
              "description": "IndexLifecyclePolicies holds the Index Lifecycle policies settings (/_ilm/policy)",
              "type": "object",
              "x-kubernetes-preserve-unknown-fields": true
            },
            "indexTemplates": {
              "description": "IndexTemplates holds the Index and Component Templates settings",
              "type": "object",
              "properties": {
                "componentTemplates": {
                  "description": "ComponentTemplates holds the Component Templates settings (/_component_template)",
                  "type": "object",
                  "x-kubernetes-preserve-unknown-fields": true
                },
                "composableIndexTemplates": {
                  "description": "ComposableIndexTemplates holds the Index Templates settings (/_index_template)",
                  "type": "object",
                  "x-kubernetes-preserve-unknown-fields": true
                }
              },
              "additionalProperties": false,
              "x-kubernetes-preserve-unknown-fields": true
            },
            "ingestPipelines": {
              "description": "IngestPipelines holds the Ingest Pipelines settings (/_ingest/pipeline)",
              "type": "object",
              "x-kubernetes-preserve-unknown-fields": true
            },
            "secretMounts": {
              "description": "SecretMounts are additional Secrets that need to be mounted into the Elasticsearch pods.",
              "type": "array",
              "items": {
                "description": "SecretMount contains information about additional secrets to be mounted to the elasticsearch pods",
                "type": "object",
                "properties": {
                  "mountPath": {
                    "description": "MountPath denotes the path to which the secret should be mounted to inside the elasticsearch pod",
                    "type": "string"
                  },
                  "secretName": {
                    "description": "SecretName denotes the name of the secret that needs to be mounted to the elasticsearch pod",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              },
              "x-kubernetes-preserve-unknown-fields": true
            },
            "secureSettings": {
              "description": "SecureSettings are additional Secrets that contain data to be configured to Elasticsearch's keystore.",
              "type": "array",
              "items": {
                "description": "SecretSource defines a data source based on a Kubernetes Secret.",
                "type": "object",
                "required": [
                  "secretName"
                ],
                "properties": {
                  "entries": {
                    "description": "Entries define how to project each key-value pair in the secret to filesystem paths.\nIf not defined, all keys will be projected to similarly named paths in the filesystem.\nIf defined, only the specified keys will be projected to the corresponding paths.",
                    "type": "array",
                    "items": {
                      "description": "KeyToPath defines how to map a key in a Secret object to a filesystem path.",
                      "type": "object",
                      "required": [
                        "key"
                      ],
                      "properties": {
                        "key": {
                          "description": "Key is the key contained in the secret.",
                          "type": "string"
                        },
                        "path": {
                          "description": "Path is the relative file path to map the key to.\nPath must not be an absolute file path and must not contain any \"..\" components.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "secretName": {
                    "description": "SecretName is the name of the secret.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              },
              "x-kubernetes-preserve-unknown-fields": true
            },
            "securityRoleMappings": {
              "description": "SecurityRoleMappings holds the Role Mappings settings (/_security/role_mapping)",
              "type": "object",
              "x-kubernetes-preserve-unknown-fields": true
            },
            "snapshotLifecyclePolicies": {
              "description": "SnapshotLifecyclePolicies holds the Snapshot Lifecycle Policies settings (/_slm/policy)",
              "type": "object",
              "x-kubernetes-preserve-unknown-fields": true
            },
            "snapshotRepositories": {
              "description": "SnapshotRepositories holds the Snapshot Repositories settings (/_snapshot)",
              "type": "object",
              "x-kubernetes-preserve-unknown-fields": true
            }
          },
          "additionalProperties": false
        },
        "kibana": {
          "type": "object",
          "properties": {
            "config": {
              "description": "Config holds the settings that go into kibana.yml.",
              "type": "object",
              "x-kubernetes-preserve-unknown-fields": true
            },
            "secureSettings": {
              "description": "SecureSettings are additional Secrets that contain data to be configured to Kibana's keystore.",
              "type": "array",
              "items": {
                "description": "SecretSource defines a data source based on a Kubernetes Secret.",
                "type": "object",
                "required": [
                  "secretName"
                ],
                "properties": {
                  "entries": {
                    "description": "Entries define how to project each key-value pair in the secret to filesystem paths.\nIf not defined, all keys will be projected to similarly named paths in the filesystem.\nIf defined, only the specified keys will be projected to the corresponding paths.",
                    "type": "array",
                    "items": {
                      "description": "KeyToPath defines how to map a key in a Secret object to a filesystem path.",
                      "type": "object",
                      "required": [
                        "key"
                      ],
                      "properties": {
                        "key": {
                          "description": "Key is the key contained in the secret.",
                          "type": "string"
                        },
                        "path": {
                          "description": "Path is the relative file path to map the key to.\nPath must not be an absolute file path and must not contain any \"..\" components.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "secretName": {
                    "description": "SecretName is the name of the secret.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              },
              "x-kubernetes-preserve-unknown-fields": true
            }
          },
          "additionalProperties": false
        },
        "resourceSelector": {
          "description": "A label selector is a label query over a set of resources. The result of matchLabels and\nmatchExpressions are ANDed. An empty label selector matches all objects. A null\nlabel selector matches no objects.",
          "type": "object",
          "properties": {
            "matchExpressions": {
              "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
              "type": "array",
              "items": {
                "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                "type": "object",
                "required": [
                  "key",
                  "operator"
                ],
                "properties": {
                  "key": {
                    "description": "key is the label key that the selector applies to.",
                    "type": "string"
                  },
                  "operator": {
                    "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                    "type": "string"
                  },
                  "values": {
                    "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "x-kubernetes-list-type": "atomic"
                  }
                },
                "additionalProperties": false
              },
              "x-kubernetes-list-type": "atomic"
            },
            "matchLabels": {
              "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false,
          "x-kubernetes-map-type": "atomic"
        },
        "secureSettings": {
          "description": "Deprecated: SecureSettings only applies to Elasticsearch and is deprecated. It must be set per application instead.",
          "type": "array",
          "items": {
            "description": "SecretSource defines a data source based on a Kubernetes Secret.",
            "type": "object",
            "required": [
              "secretName"
            ],
            "properties": {
              "entries": {
                "description": "Entries define how to project each key-value pair in the secret to filesystem paths.\nIf not defined, all keys will be projected to similarly named paths in the filesystem.\nIf defined, only the specified keys will be projected to the corresponding paths.",
                "type": "array",
                "items": {
                  "description": "KeyToPath defines how to map a key in a Secret object to a filesystem path.",
                  "type": "object",
                  "required": [
                    "key"
                  ],
                  "properties": {
                    "key": {
                      "description": "Key is the key contained in the secret.",
                      "type": "string"
                    },
                    "path": {
                      "description": "Path is the relative file path to map the key to.\nPath must not be an absolute file path and must not contain any \"..\" components.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "secretName": {
                "description": "SecretName is the name of the secret.",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        }
      },
      "additionalProperties": false
    },
    "status": {
      "type": "object",
      "properties": {
        "details": {
          "description": "Details holds the status details for each resource to be configured.",
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "description": "ResourcePolicyStatus models the status of the policy for one resource to be configured.",
              "type": "object",
              "properties": {
                "currentVersion": {
                  "description": "CurrentVersion denotes the current version of filesettings applied to the Elasticsearch cluster\nThis field does not apply to Kibana resources",
                  "type": "integer",
                  "format": "int64"
                },
                "error": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "version": {
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                },
                "expectedVersion": {
                  "description": "ExpectedVersion denotes the expected version of filesettings that should be applied to the Elasticsearch cluster\nThis field does not apply to Kibana resources",
                  "type": "integer",
                  "format": "int64"
                },
                "phase": {
                  "type": "string"
                }
              }
            }
          }
        },
        "errors": {
          "description": "Errors is the number of resources which have an incorrect configuration",
          "type": "integer"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the most recent generation observed for this StackConfigPolicy.",
          "type": "integer",
          "format": "int64"
        },
        "phase": {
          "description": "Phase is the phase of the StackConfigPolicy.",
          "type": "string"
        },
        "ready": {
          "description": "Ready is the number of resources successfully configured.",
          "type": "integer"
        },
        "readyCount": {
          "description": "ReadyCount is a human representation of the number of resources successfully configured.",
          "type": "string"
        },
        "resources": {
          "description": "Resources is the number of resources to be configured.",
          "type": "integer"
        },
        "resourcesStatuses": {
          "description": "ResourcesStatuses holds the status for each resource to be configured.\nDeprecated: Details is used to store the status of resources from ECK 2.11",
          "type": "object",
          "additionalProperties": {
            "description": "ResourcePolicyStatus models the status of the policy for one resource to be configured.",
            "type": "object",
            "properties": {
              "currentVersion": {
                "description": "CurrentVersion denotes the current version of filesettings applied to the Elasticsearch cluster\nThis field does not apply to Kibana resources",
                "type": "integer",
                "format": "int64"
              },
              "error": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string"
                  },
                  "version": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              },
              "expectedVersion": {
                "description": "ExpectedVersion denotes the expected version of filesettings that should be applied to the Elasticsearch cluster\nThis field does not apply to Kibana resources",
                "type": "integer",
                "format": "int64"
              },
              "phase": {
                "type": "string"
              }
            }
          }
        }
      },
      "additionalProperties": false
    }
  }
}
