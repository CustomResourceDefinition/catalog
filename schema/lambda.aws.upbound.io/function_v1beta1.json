{
  "description": "Function is the Schema for the Functions API. Manages an AWS Lambda Function.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "FunctionSpec defines the desired state of Function",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "deletionPolicy": {
          "description": "DeletionPolicy specifies what will happen to the underlying external\nwhen this managed resource is deleted - either \"Delete\" or \"Orphan\" the\nexternal resource.\nThis field is planned to be deprecated in favor of the ManagementPolicies\nfield in a future release. Currently, both could be set independently and\nnon-default values would be honored if the feature flag is enabled.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "type": "string",
          "default": "Delete",
          "enum": [
            "Orphan",
            "Delete"
          ]
        },
        "forProvider": {
          "type": "object",
          "required": [
            "region"
          ],
          "properties": {
            "architectures": {
              "description": "Instruction set architecture for your Lambda function. Valid values are [\"x86_64\"] and [\"arm64\"]. Default is [\"x86_64\"]. Removing this attribute, function's architecture stays the same.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "codeSigningConfigArn": {
              "description": "ARN of a code-signing configuration to enable code signing for this function.",
              "type": "string"
            },
            "deadLetterConfig": {
              "description": "Configuration block for dead letter queue. See below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "targetArn": {
                    "description": "ARN of an SNS topic or SQS queue to notify when an invocation fails.",
                    "type": "string"
                  },
                  "targetArnRef": {
                    "description": "Reference to a Queue in sqs to populate targetArn.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  },
                  "targetArnSelector": {
                    "description": "Selector for a Queue in sqs to populate targetArn.",
                    "type": "object",
                    "properties": {
                      "matchControllerRef": {
                        "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                        "type": "boolean"
                      },
                      "matchLabels": {
                        "description": "MatchLabels ensures an object with matching labels is selected.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "policy": {
                        "description": "Policies for selection.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              }
            },
            "description": {
              "description": "Description of what your Lambda Function does.",
              "type": "string"
            },
            "environment": {
              "description": "Configuration block for environment variables. See below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "variables": {
                    "description": "Map of environment variables available to your Lambda function during execution.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "x-kubernetes-map-type": "granular"
                  }
                },
                "additionalProperties": false
              }
            },
            "ephemeralStorage": {
              "description": "Amount of ephemeral storage (/tmp) to allocate for the Lambda Function. See below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "size": {
                    "description": "Amount of ephemeral storage (/tmp) in MB. Valid between 512 MB and 10,240 MB (10 GB).",
                    "type": "number"
                  }
                },
                "additionalProperties": false
              }
            },
            "fileSystemConfig": {
              "description": "Configuration block for EFS file system. See below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "arn": {
                    "description": "ARN of the Amazon EFS Access Point.",
                    "type": "string"
                  },
                  "arnRef": {
                    "description": "Reference to a AccessPoint in efs to populate arn.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  },
                  "arnSelector": {
                    "description": "Selector for a AccessPoint in efs to populate arn.",
                    "type": "object",
                    "properties": {
                      "matchControllerRef": {
                        "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                        "type": "boolean"
                      },
                      "matchLabels": {
                        "description": "MatchLabels ensures an object with matching labels is selected.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "policy": {
                        "description": "Policies for selection.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  },
                  "localMountPath": {
                    "description": "Path where the function can access the file system. Must start with /mnt/.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "handler": {
              "description": "Function entry point in your code. Required if package_type is Zip.",
              "type": "string"
            },
            "imageConfig": {
              "description": "Container image configuration values. See below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "command": {
                    "description": "Parameters to pass to the container image.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "entryPoint": {
                    "description": "Entry point to your application.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "workingDirectory": {
                    "description": "Working directory for the container image.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "imageUri": {
              "description": "ECR image URI containing the function's deployment package. Conflicts with filename and s3_bucket. One of filename, image_uri, or s3_bucket must be specified.",
              "type": "string"
            },
            "kmsKeyArn": {
              "description": "ARN of the AWS Key Management Service key used to encrypt environment variables. If not provided when environment variables are in use, AWS Lambda uses a default service key. If provided when environment variables are not in use, the AWS Lambda API does not save this configuration.",
              "type": "string"
            },
            "kmsKeyArnRef": {
              "description": "Reference to a Key in kms to populate kmsKeyArn.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "kmsKeyArnSelector": {
              "description": "Selector for a Key in kms to populate kmsKeyArn.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "layers": {
              "description": "List of Lambda Layer Version ARNs (maximum of 5) to attach to your Lambda Function.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "layersRefs": {
              "description": "References to LayerVersion in lambda to populate layers.",
              "type": "array",
              "items": {
                "description": "A Reference to a named object.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Name of the referenced object.",
                    "type": "string"
                  },
                  "policy": {
                    "description": "Policies for referencing.",
                    "type": "object",
                    "properties": {
                      "resolution": {
                        "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                        "type": "string",
                        "default": "Required",
                        "enum": [
                          "Required",
                          "Optional"
                        ]
                      },
                      "resolve": {
                        "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                        "type": "string",
                        "enum": [
                          "Always",
                          "IfNotPresent"
                        ]
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              }
            },
            "layersSelector": {
              "description": "Selector for a list of LayerVersion in lambda to populate layers.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "loggingConfig": {
              "description": "Configuration block for advanced logging settings. See below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "applicationLogLevel": {
                    "description": "Detail level of application logs. Valid values: TRACE, DEBUG, INFO, WARN, ERROR, FATAL.",
                    "type": "string"
                  },
                  "logFormat": {
                    "description": "Log format. Valid values: Text, JSON.",
                    "type": "string"
                  },
                  "logGroup": {
                    "description": "CloudWatch log group where logs are sent.",
                    "type": "string"
                  },
                  "systemLogLevel": {
                    "description": "Detail level of Lambda platform logs. Valid values: DEBUG, INFO, WARN.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "memorySize": {
              "description": "Amount of memory in MB your Lambda Function can use at runtime. Valid value between 128 MB to 10,240 MB (10 GB), in 1 MB increments. Defaults to 128.",
              "type": "number"
            },
            "packageType": {
              "description": "Lambda deployment package type. Valid values are Zip and Image. Defaults to Zip.",
              "type": "string"
            },
            "publish": {
              "description": "Whether to publish creation/change as new Lambda Function Version. Defaults to false.",
              "type": "boolean"
            },
            "region": {
              "description": "Region where this resource will be managed. Defaults to the Region set in the provider configuration.\nRegion is the region you'd like your resource to be created in.",
              "type": "string"
            },
            "replaceSecurityGroupsOnDestroy": {
              "description": "Whether to replace the security groups on the function's VPC configuration prior to destruction. Default is false.",
              "type": "boolean"
            },
            "replacementSecurityGroupIdRefs": {
              "description": "References to SecurityGroup in ec2 to populate replacementSecurityGroupIds.",
              "type": "array",
              "items": {
                "description": "A Reference to a named object.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Name of the referenced object.",
                    "type": "string"
                  },
                  "policy": {
                    "description": "Policies for referencing.",
                    "type": "object",
                    "properties": {
                      "resolution": {
                        "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                        "type": "string",
                        "default": "Required",
                        "enum": [
                          "Required",
                          "Optional"
                        ]
                      },
                      "resolve": {
                        "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                        "type": "string",
                        "enum": [
                          "Always",
                          "IfNotPresent"
                        ]
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              }
            },
            "replacementSecurityGroupIdSelector": {
              "description": "Selector for a list of SecurityGroup in ec2 to populate replacementSecurityGroupIds.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "replacementSecurityGroupIds": {
              "description": "List of security group IDs to assign to the function's VPC configuration prior to destruction. Required if replace_security_groups_on_destroy is true.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-kubernetes-list-type": "set"
            },
            "reservedConcurrentExecutions": {
              "description": "Amount of reserved concurrent executions for this lambda function. A value of 0 disables lambda from being triggered and -1 removes any concurrency limitations. Defaults to Unreserved Concurrency Limits -1.",
              "type": "number"
            },
            "role": {
              "description": "ARN of the function's execution role. The role provides the function's identity and access to AWS services and resources.",
              "type": "string"
            },
            "roleRef": {
              "description": "Reference to a Role in iam to populate role.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "roleSelector": {
              "description": "Selector for a Role in iam to populate role.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "runtime": {
              "description": "Identifier of the function's runtime. Required if package_type is Zip. See Runtimes for valid values.",
              "type": "string"
            },
            "s3Bucket": {
              "description": "S3 bucket location containing the function's deployment package. Conflicts with filename and image_uri. One of filename, image_uri, or s3_bucket must be specified.",
              "type": "string"
            },
            "s3BucketRef": {
              "description": "Reference to a Bucket in s3 to populate s3Bucket.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "s3BucketSelector": {
              "description": "Selector for a Bucket in s3 to populate s3Bucket.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "s3Key": {
              "description": "S3 key of an object containing the function's deployment package. Required if s3_bucket is set.",
              "type": "string"
            },
            "s3ObjectVersion": {
              "description": "Object version containing the function's deployment package. Conflicts with filename and image_uri.",
              "type": "string"
            },
            "skipDestroy": {
              "description": "Whether to retain the old version of a previously deployed Lambda Layer. Default is false.",
              "type": "boolean"
            },
            "snapStart": {
              "description": "Configuration block for snap start settings. See below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "applyOn": {
                    "description": "When to apply snap start optimization. Valid value: PublishedVersions.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "sourceCodeHash": {
              "description": "Used to trigger updates. Must be set to a base64 encoded SHA256 hash of the package file specified with either filename or s3_key. If you have specified this field manually, it should be the actual (computed) hash of the underlying lambda function specified in the filename, image_uri, s3_bucket fields.",
              "type": "string"
            },
            "tags": {
              "description": "Key-value map of resource tags.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "timeout": {
              "description": "Amount of time your Lambda Function has to run in seconds. Defaults to 3. Valid between 1 and 900.",
              "type": "number"
            },
            "tracingConfig": {
              "description": "Configuration block for X-Ray tracing. See below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "mode": {
                    "description": "X-Ray tracing mode. Valid values: Active, PassThrough.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "vpcConfig": {
              "description": "Configuration block for VPC. See below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "ipv6AllowedForDualStack": {
                    "description": "Whether to allow outbound IPv6 traffic on VPC functions connected to dual-stack subnets. Default: false.",
                    "type": "boolean"
                  },
                  "securityGroupIdRefs": {
                    "description": "References to SecurityGroup in ec2 to populate securityGroupIds.",
                    "type": "array",
                    "items": {
                      "description": "A Reference to a named object.",
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "name": {
                          "description": "Name of the referenced object.",
                          "type": "string"
                        },
                        "policy": {
                          "description": "Policies for referencing.",
                          "type": "object",
                          "properties": {
                            "resolution": {
                              "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                              "type": "string",
                              "default": "Required",
                              "enum": [
                                "Required",
                                "Optional"
                              ]
                            },
                            "resolve": {
                              "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                              "type": "string",
                              "enum": [
                                "Always",
                                "IfNotPresent"
                              ]
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "securityGroupIdSelector": {
                    "description": "Selector for a list of SecurityGroup in ec2 to populate securityGroupIds.",
                    "type": "object",
                    "properties": {
                      "matchControllerRef": {
                        "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                        "type": "boolean"
                      },
                      "matchLabels": {
                        "description": "MatchLabels ensures an object with matching labels is selected.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "policy": {
                        "description": "Policies for selection.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  },
                  "securityGroupIds": {
                    "description": "List of security group IDs associated with the Lambda function.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "x-kubernetes-list-type": "set"
                  },
                  "subnetIdRefs": {
                    "description": "References to Subnet in ec2 to populate subnetIds.",
                    "type": "array",
                    "items": {
                      "description": "A Reference to a named object.",
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "name": {
                          "description": "Name of the referenced object.",
                          "type": "string"
                        },
                        "policy": {
                          "description": "Policies for referencing.",
                          "type": "object",
                          "properties": {
                            "resolution": {
                              "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                              "type": "string",
                              "default": "Required",
                              "enum": [
                                "Required",
                                "Optional"
                              ]
                            },
                            "resolve": {
                              "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                              "type": "string",
                              "enum": [
                                "Always",
                                "IfNotPresent"
                              ]
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "subnetIdSelector": {
                    "description": "Selector for a list of Subnet in ec2 to populate subnetIds.",
                    "type": "object",
                    "properties": {
                      "matchControllerRef": {
                        "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                        "type": "boolean"
                      },
                      "matchLabels": {
                        "description": "MatchLabels ensures an object with matching labels is selected.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "policy": {
                        "description": "Policies for selection.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  },
                  "subnetIds": {
                    "description": "List of subnet IDs associated with the Lambda function.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "x-kubernetes-list-type": "set"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored\nunless the Management Policies feature flag is disabled.\nInitProvider holds the same fields as ForProvider, with the exception\nof Identifier and other resource reference fields. The fields that are\nin InitProvider are merged into ForProvider when the resource is created.\nThe same fields are also added to the terraform ignore_changes hook, to\navoid updating them after creation. This is useful for fields that are\nrequired on creation, but we do not desire to update them after creation,\nfor example because of an external controller is managing them, like an\nautoscaler.",
          "type": "object",
          "properties": {
            "architectures": {
              "description": "Instruction set architecture for your Lambda function. Valid values are [\"x86_64\"] and [\"arm64\"]. Default is [\"x86_64\"]. Removing this attribute, function's architecture stays the same.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "codeSigningConfigArn": {
              "description": "ARN of a code-signing configuration to enable code signing for this function.",
              "type": "string"
            },
            "deadLetterConfig": {
              "description": "Configuration block for dead letter queue. See below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "targetArn": {
                    "description": "ARN of an SNS topic or SQS queue to notify when an invocation fails.",
                    "type": "string"
                  },
                  "targetArnRef": {
                    "description": "Reference to a Queue in sqs to populate targetArn.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  },
                  "targetArnSelector": {
                    "description": "Selector for a Queue in sqs to populate targetArn.",
                    "type": "object",
                    "properties": {
                      "matchControllerRef": {
                        "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                        "type": "boolean"
                      },
                      "matchLabels": {
                        "description": "MatchLabels ensures an object with matching labels is selected.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "policy": {
                        "description": "Policies for selection.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              }
            },
            "description": {
              "description": "Description of what your Lambda Function does.",
              "type": "string"
            },
            "environment": {
              "description": "Configuration block for environment variables. See below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "variables": {
                    "description": "Map of environment variables available to your Lambda function during execution.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "x-kubernetes-map-type": "granular"
                  }
                },
                "additionalProperties": false
              }
            },
            "ephemeralStorage": {
              "description": "Amount of ephemeral storage (/tmp) to allocate for the Lambda Function. See below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "size": {
                    "description": "Amount of ephemeral storage (/tmp) in MB. Valid between 512 MB and 10,240 MB (10 GB).",
                    "type": "number"
                  }
                },
                "additionalProperties": false
              }
            },
            "fileSystemConfig": {
              "description": "Configuration block for EFS file system. See below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "arn": {
                    "description": "ARN of the Amazon EFS Access Point.",
                    "type": "string"
                  },
                  "arnRef": {
                    "description": "Reference to a AccessPoint in efs to populate arn.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the referenced object.",
                        "type": "string"
                      },
                      "policy": {
                        "description": "Policies for referencing.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  },
                  "arnSelector": {
                    "description": "Selector for a AccessPoint in efs to populate arn.",
                    "type": "object",
                    "properties": {
                      "matchControllerRef": {
                        "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                        "type": "boolean"
                      },
                      "matchLabels": {
                        "description": "MatchLabels ensures an object with matching labels is selected.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "policy": {
                        "description": "Policies for selection.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  },
                  "localMountPath": {
                    "description": "Path where the function can access the file system. Must start with /mnt/.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "handler": {
              "description": "Function entry point in your code. Required if package_type is Zip.",
              "type": "string"
            },
            "imageConfig": {
              "description": "Container image configuration values. See below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "command": {
                    "description": "Parameters to pass to the container image.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "entryPoint": {
                    "description": "Entry point to your application.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "workingDirectory": {
                    "description": "Working directory for the container image.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "imageUri": {
              "description": "ECR image URI containing the function's deployment package. Conflicts with filename and s3_bucket. One of filename, image_uri, or s3_bucket must be specified.",
              "type": "string"
            },
            "kmsKeyArn": {
              "description": "ARN of the AWS Key Management Service key used to encrypt environment variables. If not provided when environment variables are in use, AWS Lambda uses a default service key. If provided when environment variables are not in use, the AWS Lambda API does not save this configuration.",
              "type": "string"
            },
            "kmsKeyArnRef": {
              "description": "Reference to a Key in kms to populate kmsKeyArn.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "kmsKeyArnSelector": {
              "description": "Selector for a Key in kms to populate kmsKeyArn.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "layers": {
              "description": "List of Lambda Layer Version ARNs (maximum of 5) to attach to your Lambda Function.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "layersRefs": {
              "description": "References to LayerVersion in lambda to populate layers.",
              "type": "array",
              "items": {
                "description": "A Reference to a named object.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Name of the referenced object.",
                    "type": "string"
                  },
                  "policy": {
                    "description": "Policies for referencing.",
                    "type": "object",
                    "properties": {
                      "resolution": {
                        "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                        "type": "string",
                        "default": "Required",
                        "enum": [
                          "Required",
                          "Optional"
                        ]
                      },
                      "resolve": {
                        "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                        "type": "string",
                        "enum": [
                          "Always",
                          "IfNotPresent"
                        ]
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              }
            },
            "layersSelector": {
              "description": "Selector for a list of LayerVersion in lambda to populate layers.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "loggingConfig": {
              "description": "Configuration block for advanced logging settings. See below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "applicationLogLevel": {
                    "description": "Detail level of application logs. Valid values: TRACE, DEBUG, INFO, WARN, ERROR, FATAL.",
                    "type": "string"
                  },
                  "logFormat": {
                    "description": "Log format. Valid values: Text, JSON.",
                    "type": "string"
                  },
                  "logGroup": {
                    "description": "CloudWatch log group where logs are sent.",
                    "type": "string"
                  },
                  "systemLogLevel": {
                    "description": "Detail level of Lambda platform logs. Valid values: DEBUG, INFO, WARN.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "memorySize": {
              "description": "Amount of memory in MB your Lambda Function can use at runtime. Valid value between 128 MB to 10,240 MB (10 GB), in 1 MB increments. Defaults to 128.",
              "type": "number"
            },
            "packageType": {
              "description": "Lambda deployment package type. Valid values are Zip and Image. Defaults to Zip.",
              "type": "string"
            },
            "publish": {
              "description": "Whether to publish creation/change as new Lambda Function Version. Defaults to false.",
              "type": "boolean"
            },
            "replaceSecurityGroupsOnDestroy": {
              "description": "Whether to replace the security groups on the function's VPC configuration prior to destruction. Default is false.",
              "type": "boolean"
            },
            "replacementSecurityGroupIdRefs": {
              "description": "References to SecurityGroup in ec2 to populate replacementSecurityGroupIds.",
              "type": "array",
              "items": {
                "description": "A Reference to a named object.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Name of the referenced object.",
                    "type": "string"
                  },
                  "policy": {
                    "description": "Policies for referencing.",
                    "type": "object",
                    "properties": {
                      "resolution": {
                        "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                        "type": "string",
                        "default": "Required",
                        "enum": [
                          "Required",
                          "Optional"
                        ]
                      },
                      "resolve": {
                        "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                        "type": "string",
                        "enum": [
                          "Always",
                          "IfNotPresent"
                        ]
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              }
            },
            "replacementSecurityGroupIdSelector": {
              "description": "Selector for a list of SecurityGroup in ec2 to populate replacementSecurityGroupIds.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "replacementSecurityGroupIds": {
              "description": "List of security group IDs to assign to the function's VPC configuration prior to destruction. Required if replace_security_groups_on_destroy is true.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-kubernetes-list-type": "set"
            },
            "reservedConcurrentExecutions": {
              "description": "Amount of reserved concurrent executions for this lambda function. A value of 0 disables lambda from being triggered and -1 removes any concurrency limitations. Defaults to Unreserved Concurrency Limits -1.",
              "type": "number"
            },
            "role": {
              "description": "ARN of the function's execution role. The role provides the function's identity and access to AWS services and resources.",
              "type": "string"
            },
            "roleRef": {
              "description": "Reference to a Role in iam to populate role.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "roleSelector": {
              "description": "Selector for a Role in iam to populate role.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "runtime": {
              "description": "Identifier of the function's runtime. Required if package_type is Zip. See Runtimes for valid values.",
              "type": "string"
            },
            "s3Bucket": {
              "description": "S3 bucket location containing the function's deployment package. Conflicts with filename and image_uri. One of filename, image_uri, or s3_bucket must be specified.",
              "type": "string"
            },
            "s3BucketRef": {
              "description": "Reference to a Bucket in s3 to populate s3Bucket.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "s3BucketSelector": {
              "description": "Selector for a Bucket in s3 to populate s3Bucket.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "s3Key": {
              "description": "S3 key of an object containing the function's deployment package. Required if s3_bucket is set.",
              "type": "string"
            },
            "s3ObjectVersion": {
              "description": "Object version containing the function's deployment package. Conflicts with filename and image_uri.",
              "type": "string"
            },
            "skipDestroy": {
              "description": "Whether to retain the old version of a previously deployed Lambda Layer. Default is false.",
              "type": "boolean"
            },
            "snapStart": {
              "description": "Configuration block for snap start settings. See below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "applyOn": {
                    "description": "When to apply snap start optimization. Valid value: PublishedVersions.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "sourceCodeHash": {
              "description": "Used to trigger updates. Must be set to a base64 encoded SHA256 hash of the package file specified with either filename or s3_key. If you have specified this field manually, it should be the actual (computed) hash of the underlying lambda function specified in the filename, image_uri, s3_bucket fields.",
              "type": "string"
            },
            "tags": {
              "description": "Key-value map of resource tags.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "timeout": {
              "description": "Amount of time your Lambda Function has to run in seconds. Defaults to 3. Valid between 1 and 900.",
              "type": "number"
            },
            "tracingConfig": {
              "description": "Configuration block for X-Ray tracing. See below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "mode": {
                    "description": "X-Ray tracing mode. Valid values: Active, PassThrough.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "vpcConfig": {
              "description": "Configuration block for VPC. See below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "ipv6AllowedForDualStack": {
                    "description": "Whether to allow outbound IPv6 traffic on VPC functions connected to dual-stack subnets. Default: false.",
                    "type": "boolean"
                  },
                  "securityGroupIdRefs": {
                    "description": "References to SecurityGroup in ec2 to populate securityGroupIds.",
                    "type": "array",
                    "items": {
                      "description": "A Reference to a named object.",
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "name": {
                          "description": "Name of the referenced object.",
                          "type": "string"
                        },
                        "policy": {
                          "description": "Policies for referencing.",
                          "type": "object",
                          "properties": {
                            "resolution": {
                              "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                              "type": "string",
                              "default": "Required",
                              "enum": [
                                "Required",
                                "Optional"
                              ]
                            },
                            "resolve": {
                              "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                              "type": "string",
                              "enum": [
                                "Always",
                                "IfNotPresent"
                              ]
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "securityGroupIdSelector": {
                    "description": "Selector for a list of SecurityGroup in ec2 to populate securityGroupIds.",
                    "type": "object",
                    "properties": {
                      "matchControllerRef": {
                        "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                        "type": "boolean"
                      },
                      "matchLabels": {
                        "description": "MatchLabels ensures an object with matching labels is selected.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "policy": {
                        "description": "Policies for selection.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  },
                  "securityGroupIds": {
                    "description": "List of security group IDs associated with the Lambda function.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "x-kubernetes-list-type": "set"
                  },
                  "subnetIdRefs": {
                    "description": "References to Subnet in ec2 to populate subnetIds.",
                    "type": "array",
                    "items": {
                      "description": "A Reference to a named object.",
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "name": {
                          "description": "Name of the referenced object.",
                          "type": "string"
                        },
                        "policy": {
                          "description": "Policies for referencing.",
                          "type": "object",
                          "properties": {
                            "resolution": {
                              "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                              "type": "string",
                              "default": "Required",
                              "enum": [
                                "Required",
                                "Optional"
                              ]
                            },
                            "resolve": {
                              "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                              "type": "string",
                              "enum": [
                                "Always",
                                "IfNotPresent"
                              ]
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "subnetIdSelector": {
                    "description": "Selector for a list of Subnet in ec2 to populate subnetIds.",
                    "type": "object",
                    "properties": {
                      "matchControllerRef": {
                        "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                        "type": "boolean"
                      },
                      "matchLabels": {
                        "description": "MatchLabels ensures an object with matching labels is selected.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "policy": {
                        "description": "Policies for selection.",
                        "type": "object",
                        "properties": {
                          "resolution": {
                            "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                            "type": "string",
                            "default": "Required",
                            "enum": [
                              "Required",
                              "Optional"
                            ]
                          },
                          "resolve": {
                            "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                            "type": "string",
                            "enum": [
                              "Always",
                              "IfNotPresent"
                            ]
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  },
                  "subnetIds": {
                    "description": "List of subnet IDs associated with the Lambda function.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "x-kubernetes-list-type": "set"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "additionalProperties": false
        },
        "managementPolicies": {
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out\nthrough a Crossplane feature flag.\nManagementPolicies specify the array of actions Crossplane is allowed to\ntake on the managed and external resources.\nThis field is planned to replace the DeletionPolicy field in a future\nrelease. Currently, both could be set independently and non-default\nvalues would be honored if the feature flag is enabled. If both are\ncustom, the DeletionPolicy field will be ignored.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223\nand this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers\ncan take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to\ncreate, observe, update, and delete this managed resource should be\nconfigured.",
          "type": "object",
          "default": {
            "name": "default"
          },
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "type": "object",
              "properties": {
                "resolution": {
                  "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                  "type": "string",
                  "default": "Required",
                  "enum": [
                    "Required",
                    "Optional"
                  ]
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                  "type": "string",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a\nSecret to which any connection details for this managed resource should\nbe written. Connection details frequently include the endpoint, username,\nand password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name",
            "namespace"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "FunctionStatus defines the observed state of Function.",
      "type": "object",
      "properties": {
        "atProvider": {
          "type": "object",
          "properties": {
            "architectures": {
              "description": "Instruction set architecture for your Lambda function. Valid values are [\"x86_64\"] and [\"arm64\"]. Default is [\"x86_64\"]. Removing this attribute, function's architecture stays the same.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "arn": {
              "description": "ARN identifying your Lambda Function.",
              "type": "string"
            },
            "codeSha256": {
              "description": "Base64-encoded representation of raw SHA-256 sum of the zip file.",
              "type": "string"
            },
            "codeSigningConfigArn": {
              "description": "ARN of a code-signing configuration to enable code signing for this function.",
              "type": "string"
            },
            "deadLetterConfig": {
              "description": "Configuration block for dead letter queue. See below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "targetArn": {
                    "description": "ARN of an SNS topic or SQS queue to notify when an invocation fails.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "description": {
              "description": "Description of what your Lambda Function does.",
              "type": "string"
            },
            "environment": {
              "description": "Configuration block for environment variables. See below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "variables": {
                    "description": "Map of environment variables available to your Lambda function during execution.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "x-kubernetes-map-type": "granular"
                  }
                },
                "additionalProperties": false
              }
            },
            "ephemeralStorage": {
              "description": "Amount of ephemeral storage (/tmp) to allocate for the Lambda Function. See below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "size": {
                    "description": "Amount of ephemeral storage (/tmp) in MB. Valid between 512 MB and 10,240 MB (10 GB).",
                    "type": "number"
                  }
                },
                "additionalProperties": false
              }
            },
            "fileSystemConfig": {
              "description": "Configuration block for EFS file system. See below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "arn": {
                    "description": "ARN of the Amazon EFS Access Point.",
                    "type": "string"
                  },
                  "localMountPath": {
                    "description": "Path where the function can access the file system. Must start with /mnt/.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "handler": {
              "description": "Function entry point in your code. Required if package_type is Zip.",
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "imageConfig": {
              "description": "Container image configuration values. See below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "command": {
                    "description": "Parameters to pass to the container image.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "entryPoint": {
                    "description": "Entry point to your application.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "workingDirectory": {
                    "description": "Working directory for the container image.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "imageUri": {
              "description": "ECR image URI containing the function's deployment package. Conflicts with filename and s3_bucket. One of filename, image_uri, or s3_bucket must be specified.",
              "type": "string"
            },
            "invokeArn": {
              "description": "ARN to be used for invoking Lambda Function from API Gateway - to be used in aws_api_gateway_integration's uri.",
              "type": "string"
            },
            "kmsKeyArn": {
              "description": "ARN of the AWS Key Management Service key used to encrypt environment variables. If not provided when environment variables are in use, AWS Lambda uses a default service key. If provided when environment variables are not in use, the AWS Lambda API does not save this configuration.",
              "type": "string"
            },
            "lastModified": {
              "description": "Date this resource was last modified.",
              "type": "string"
            },
            "layers": {
              "description": "List of Lambda Layer Version ARNs (maximum of 5) to attach to your Lambda Function.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "loggingConfig": {
              "description": "Configuration block for advanced logging settings. See below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "applicationLogLevel": {
                    "description": "Detail level of application logs. Valid values: TRACE, DEBUG, INFO, WARN, ERROR, FATAL.",
                    "type": "string"
                  },
                  "logFormat": {
                    "description": "Log format. Valid values: Text, JSON.",
                    "type": "string"
                  },
                  "logGroup": {
                    "description": "CloudWatch log group where logs are sent.",
                    "type": "string"
                  },
                  "systemLogLevel": {
                    "description": "Detail level of Lambda platform logs. Valid values: DEBUG, INFO, WARN.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "memorySize": {
              "description": "Amount of memory in MB your Lambda Function can use at runtime. Valid value between 128 MB to 10,240 MB (10 GB), in 1 MB increments. Defaults to 128.",
              "type": "number"
            },
            "packageType": {
              "description": "Lambda deployment package type. Valid values are Zip and Image. Defaults to Zip.",
              "type": "string"
            },
            "publish": {
              "description": "Whether to publish creation/change as new Lambda Function Version. Defaults to false.",
              "type": "boolean"
            },
            "qualifiedArn": {
              "description": "ARN identifying your Lambda Function Version (if versioning is enabled via publish = true).",
              "type": "string"
            },
            "qualifiedInvokeArn": {
              "description": "Qualified ARN (ARN with lambda version number) to be used for invoking Lambda Function from API Gateway - to be used in aws_api_gateway_integration's uri.",
              "type": "string"
            },
            "region": {
              "description": "Region where this resource will be managed. Defaults to the Region set in the provider configuration.\nRegion is the region you'd like your resource to be created in.",
              "type": "string"
            },
            "replaceSecurityGroupsOnDestroy": {
              "description": "Whether to replace the security groups on the function's VPC configuration prior to destruction. Default is false.",
              "type": "boolean"
            },
            "replacementSecurityGroupIds": {
              "description": "List of security group IDs to assign to the function's VPC configuration prior to destruction. Required if replace_security_groups_on_destroy is true.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-kubernetes-list-type": "set"
            },
            "reservedConcurrentExecutions": {
              "description": "Amount of reserved concurrent executions for this lambda function. A value of 0 disables lambda from being triggered and -1 removes any concurrency limitations. Defaults to Unreserved Concurrency Limits -1.",
              "type": "number"
            },
            "role": {
              "description": "ARN of the function's execution role. The role provides the function's identity and access to AWS services and resources.",
              "type": "string"
            },
            "runtime": {
              "description": "Identifier of the function's runtime. Required if package_type is Zip. See Runtimes for valid values.",
              "type": "string"
            },
            "s3Bucket": {
              "description": "S3 bucket location containing the function's deployment package. Conflicts with filename and image_uri. One of filename, image_uri, or s3_bucket must be specified.",
              "type": "string"
            },
            "s3Key": {
              "description": "S3 key of an object containing the function's deployment package. Required if s3_bucket is set.",
              "type": "string"
            },
            "s3ObjectVersion": {
              "description": "Object version containing the function's deployment package. Conflicts with filename and image_uri.",
              "type": "string"
            },
            "signingJobArn": {
              "description": "ARN of the signing job.",
              "type": "string"
            },
            "signingProfileVersionArn": {
              "description": "ARN of the signing profile version.",
              "type": "string"
            },
            "skipDestroy": {
              "description": "Whether to retain the old version of a previously deployed Lambda Layer. Default is false.",
              "type": "boolean"
            },
            "snapStart": {
              "description": "Configuration block for snap start settings. See below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "applyOn": {
                    "description": "When to apply snap start optimization. Valid value: PublishedVersions.",
                    "type": "string"
                  },
                  "optimizationStatus": {
                    "description": "Optimization status of the snap start configuration. Valid values are On and Off.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "sourceCodeHash": {
              "description": "Used to trigger updates. Must be set to a base64 encoded SHA256 hash of the package file specified with either filename or s3_key. If you have specified this field manually, it should be the actual (computed) hash of the underlying lambda function specified in the filename, image_uri, s3_bucket fields.",
              "type": "string"
            },
            "sourceCodeSize": {
              "description": "Size in bytes of the function .zip file.",
              "type": "number"
            },
            "tags": {
              "description": "Key-value map of resource tags.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "tagsAll": {
              "description": "Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "timeout": {
              "description": "Amount of time your Lambda Function has to run in seconds. Defaults to 3. Valid between 1 and 900.",
              "type": "number"
            },
            "tracingConfig": {
              "description": "Configuration block for X-Ray tracing. See below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "mode": {
                    "description": "X-Ray tracing mode. Valid values: Active, PassThrough.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "version": {
              "description": "Latest published version of your Lambda Function.",
              "type": "string"
            },
            "vpcConfig": {
              "description": "Configuration block for VPC. See below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "ipv6AllowedForDualStack": {
                    "description": "Whether to allow outbound IPv6 traffic on VPC functions connected to dual-stack subnets. Default: false.",
                    "type": "boolean"
                  },
                  "securityGroupIds": {
                    "description": "List of security group IDs associated with the Lambda function.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "x-kubernetes-list-type": "set"
                  },
                  "subnetIds": {
                    "description": "List of subnet IDs associated with the Lambda function.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "x-kubernetes-list-type": "set"
                  },
                  "vpcId": {
                    "description": "ID of the VPC.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "type": "array",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one\nstatus to another.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from\none status to another, if any.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to\na resource at any point in time.",
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest metadata.generation\nwhich resulted in either a ready state, or stalled due to error\nit can not recover from without human intervention.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    }
  }
}
