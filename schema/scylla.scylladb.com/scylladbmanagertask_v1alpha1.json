{
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "spec defines the desired state of ScyllaDBManagerTask.",
      "type": "object",
      "properties": {
        "backup": {
          "description": "backup specifies the options for a backup task.",
          "type": "object",
          "properties": {
            "cron": {
              "description": "cron specifies the task schedule as a cron expression.\nIt supports the \"standard\" cron syntax `MIN HOUR DOM MON DOW`, as used by the Linux utility, as well as a set of non-standard macros: \"@yearly\", \"@annually\", \"@monthly\", \"@weekly\", \"@daily\", \"@midnight\", \"@hourly\", \"@every [+-]?\u003cduration\u003e\".",
              "type": "string"
            },
            "dc": {
              "description": "dc specifies a list of datacenter `glob` patterns, e.g. `dc1`, `!otherdc*`, determining the datacenters to include or exclude from backup.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "keyspace": {
              "description": "keyspace specifies a list of `glob` patterns used to include or exclude tables from backup.\nThe patterns match keyspaces and tables. Keyspace names are separated from table names with a dot e.g. `!keyspace.table_prefix_*`.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "location": {
              "description": "location specifies a list of backup locations in the following format: `[\u003cdc\u003e:]\u003cprovider\u003e:\u003cname\u003e`.\n`\u003cdc\u003e:` is optional and allows to specify the location for a datacenter in a multi-datacenter cluster.\n`\u003cprovider\u003e` specifies the storage provider.\n`\u003cname\u003e` specifies a bucket name and must be an alphanumeric string which may contain a dash and or a dot, but other characters are forbidden.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "numRetries": {
              "description": "numRetries specifies how many times a scheduled task should be retried before failing.",
              "type": "integer",
              "format": "int64"
            },
            "rateLimit": {
              "description": "rateLimit specifies the limit for the upload rate, expressed in mebibytes (MiB) per second, at which the snapshot files can be uploaded from a ScyllaDB node to its backup destination, in the following format: `[\u003cdc\u003e:]\u003climit\u003e`.\n`\u003cdc\u003e:` is optional and allows for specifying different upload limits in selected datacenters.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "retention": {
              "description": "retention specifies the number of backups to store.",
              "type": "integer",
              "format": "int64"
            },
            "snapshotParallel": {
              "description": "snapshotParallel specifies a list of snapshot parallelism limits in the following format:  `[\u003cdc\u003e:]\u003climit\u003e`.\n`\u003cdc\u003e:` is optional and allows for specifying different limits in selected datacenters. If `\u003cdc\u003e:` is not set, the limit is global.\nFor instance, `[]string{\"dc1:2\", \"5\"}` corresponds to two parallel nodes in `dc1` datacenter and five parallel nodes in the other datacenters.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "startDate": {
              "description": "startDate specifies the start date of the task.\nIt is represented in RFC3339 form and is in UTC.\nIf not set, the task is started immediately.",
              "type": "string",
              "format": "date-time"
            },
            "uploadParallel": {
              "description": "uploadParallel specifies a list of upload parallelism limits in the following format: `[\u003cdc\u003e:]\u003climit\u003e`.\n`\u003cdc\u003e:` is optional and allows for specifying different limits in selected datacenters. If `\u003cdc\u003e:` is not set, the limit is global.\nFor instance, `[]string{\"dc1:2\", \"5\"}` corresponds to two parallel nodes in `dc1` datacenter and five parallel nodes in the other datacenters.",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false
        },
        "repair": {
          "description": "repair specifies the options for a repair task.",
          "type": "object",
          "properties": {
            "cron": {
              "description": "cron specifies the task schedule as a cron expression.\nIt supports the \"standard\" cron syntax `MIN HOUR DOM MON DOW`, as used by the Linux utility, as well as a set of non-standard macros: \"@yearly\", \"@annually\", \"@monthly\", \"@weekly\", \"@daily\", \"@midnight\", \"@hourly\", \"@every [+-]?\u003cduration\u003e\".",
              "type": "string"
            },
            "dc": {
              "description": "dc specifies a list of datacenter `glob` patterns, e.g. `dc1`, `!otherdc*`, determining the datacenters to include or exclude from repair.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "failFast": {
              "description": "failFast indicates that a repair should be stopped on first encountered error.",
              "type": "boolean"
            },
            "host": {
              "description": "host specifies the IPv4 or IPv6 address of a node to repair.\nSpecifying this field limits repair to token ranges replicated by a given node.\nWhen used in conjunction with `dc`, the node must belong to the specified datacenters.\nIf not set, all hosts are repaired.",
              "type": "string"
            },
            "ignoreDownHosts": {
              "description": "ignoreDownHosts indicates that the nodes in down state should be ignored during repair.",
              "type": "boolean"
            },
            "intensity": {
              "description": "intensity specifies the number of token ranges to repair in a single ScyllaDB node at the same time.\nChanging the intensity impacts the repair granularity in case it is resumed. The higher the value, the more work on resumption.\nWhen set to zero, the number of token ranges is adjusted to the maximum supported number.\nWhen set to a value greater than the maximum supported by the node, intensity is capped at the maximum supported value.\nRefer to repair documentation for details.",
              "type": "integer",
              "format": "int64"
            },
            "keyspace": {
              "description": "keyspace specifies a list of `glob` patterns used to include or exclude tables from repair.\nThe patterns match keyspaces and tables. Keyspace names are separated from table names with a dot e.g. `!keyspace.table_prefix_*`.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "numRetries": {
              "description": "numRetries specifies how many times a scheduled task should be retried before failing.",
              "type": "integer",
              "format": "int64"
            },
            "parallel": {
              "description": "parallel specifies the maximum number of ScyllaDB repair jobs that can run at the same time (on different token ranges and replicas).\nEach node can take part in at most one repair at any given moment. By default, or when set to zero, the maximum possible parallelism is used.\nThe maximal effective parallelism depends on keyspace replication strategy and cluster topology.\nWhen set to a value greater than the maximum supported by the node, parallel is capped at the maximum supported value.\nRefer to repair documentation for details.",
              "type": "integer",
              "format": "int64"
            },
            "smallTableThreshold": {
              "description": "smallTableThreshold enables small table optimization for tables of size lower than the given threshold.",
              "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ],
              "x-kubernetes-int-or-string": true
            },
            "startDate": {
              "description": "startDate specifies the start date of the task.\nIt is represented in RFC3339 form and is in UTC.\nIf not set, the task is started immediately.",
              "type": "string",
              "format": "date-time"
            }
          },
          "additionalProperties": false
        },
        "scyllaDBClusterRef": {
          "description": "scyllaDBClusterRef is a typed reference to the target cluster in the same namespace.\nSupported kinds are ScyllaDBCluster and ScyllaDBDatacenter in scylla.scylladb.com group.",
          "type": "object",
          "properties": {
            "kind": {
              "description": "kind specifies the type of the resource.",
              "type": "string"
            },
            "name": {
              "description": "name specifies the name of the resource in the same namespace.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "type": {
          "description": "type specifies the type of the task.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "status reflects the observed state of ScyllaDBManagerTask.",
      "type": "object",
      "properties": {
        "conditions": {
          "description": "conditions hold conditions describing ScyllaDBManagerTask state.",
          "type": "array",
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                "type": "string",
                "maxLength": 32768
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64",
                "minimum": 0
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                "type": "string",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "type": "string",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ]
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                "type": "string",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
              }
            },
            "additionalProperties": false
          }
        },
        "observedGeneration": {
          "description": "observedGeneration is the most recent generation observed for this ScyllaDBManagerTask. It corresponds to the\nScyllaDBManagerTask's generation, which is updated on mutation by the API Server.",
          "type": "integer",
          "format": "int64"
        },
        "taskID": {
          "description": "taskID reflects the internal identification number of the task in ScyllaDB Manager state.\nIt can be used to identify the task when interacting directly with ScyllaDB Manager.",
          "type": "string"
        }
      },
      "additionalProperties": false
    }
  }
}
