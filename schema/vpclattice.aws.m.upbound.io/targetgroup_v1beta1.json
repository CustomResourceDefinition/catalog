{
  "description": "TargetGroup is the Schema for the TargetGroups API.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "TargetGroupSpec defines the desired state of TargetGroup",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "forProvider": {
          "type": "object",
          "required": [
            "region"
          ],
          "properties": {
            "config": {
              "description": "The target group configuration.",
              "type": "object",
              "properties": {
                "healthCheck": {
                  "description": "The health check configuration.",
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "description": "Indicates whether health checking is enabled. Defaults to true.",
                      "type": "boolean"
                    },
                    "healthCheckIntervalSeconds": {
                      "description": "The approximate amount of time, in seconds, between health checks of an individual target. The range is 5–300 seconds. The default is 30 seconds.",
                      "type": "number"
                    },
                    "healthCheckTimeoutSeconds": {
                      "description": "The amount of time, in seconds, to wait before reporting a target as unhealthy. The range is 1–120 seconds. The default is 5 seconds.",
                      "type": "number"
                    },
                    "healthyThresholdCount": {
                      "type": "number"
                    },
                    "matcher": {
                      "description": "The codes to use when checking for a successful response from a target. These are called Success codes in the console.",
                      "type": "object",
                      "properties": {
                        "value": {
                          "description": "The HTTP codes to use when checking for a successful response from a target.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    },
                    "path": {
                      "description": "The destination for health checks on the targets. If the protocol version is HTTP/1.1 or HTTP/2, specify a valid URI (for example, /path?query). The default path is /. Health checks are not supported if the protocol version is gRPC, however, you can choose HTTP/1.1 or HTTP/2 and specify a valid URI.",
                      "type": "string"
                    },
                    "port": {
                      "description": "The port on which the targets are listening.",
                      "type": "number"
                    },
                    "protocol": {
                      "description": "The protocol to use for routing traffic to the targets. Valid Values are HTTP | HTTPS.",
                      "type": "string"
                    },
                    "protocolVersion": {
                      "description": "The protocol version. Valid Values are HTTP1 | HTTP2 | GRPC. Default value is HTTP1.",
                      "type": "string"
                    },
                    "unhealthyThresholdCount": {
                      "description": "The number of consecutive failed health checks required before considering a target unhealthy. The range is 2–10. The default is 2.",
                      "type": "number"
                    }
                  },
                  "additionalProperties": false
                },
                "ipAddressType": {
                  "description": "The type of IP address used for the target group. Valid values: IPV4 | IPV6.",
                  "type": "string"
                },
                "lambdaEventStructureVersion": {
                  "description": "The version of the event structure that the Lambda function receives. Supported only if type is LAMBDA. Valid Values are V1 | V2.",
                  "type": "string"
                },
                "port": {
                  "description": "The port on which the targets are listening.",
                  "type": "number"
                },
                "protocol": {
                  "description": "The protocol to use for routing traffic to the targets. Valid Values are HTTP | HTTPS.",
                  "type": "string"
                },
                "protocolVersion": {
                  "description": "The protocol version. Valid Values are HTTP1 | HTTP2 | GRPC. Default value is HTTP1.",
                  "type": "string"
                },
                "vpcIdentifier": {
                  "description": "The ID of the VPC.",
                  "type": "string"
                },
                "vpcIdentifierRef": {
                  "description": "Reference to a VPC in ec2 to populate vpcIdentifier.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name of the referenced object.",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace of the referenced object",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for referencing.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "vpcIdentifierSelector": {
                  "description": "Selector for a VPC in ec2 to populate vpcIdentifier.",
                  "type": "object",
                  "properties": {
                    "matchControllerRef": {
                      "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                      "type": "boolean"
                    },
                    "matchLabels": {
                      "description": "MatchLabels ensures an object with matching labels is selected.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "namespace": {
                      "description": "Namespace for the selector",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for selection.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "name": {
              "description": "The name of the target group. The name must be unique within the account. The valid characters are a-z, 0-9, and hyphens (-). You can't use a hyphen as the first or last character, or immediately after another hyphen.",
              "type": "string"
            },
            "region": {
              "description": "Region where this resource will be managed. Defaults to the Region set in the provider configuration.\nRegion is the region you'd like your resource to be created in.",
              "type": "string"
            },
            "tags": {
              "description": "Key-value map of resource tags.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "type": {
              "description": "The type of target group. Valid Values are IP | LAMBDA | INSTANCE | ALB",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored\nunless the Management Policies feature flag is disabled.\nInitProvider holds the same fields as ForProvider, with the exception\nof Identifier and other resource reference fields. The fields that are\nin InitProvider are merged into ForProvider when the resource is created.\nThe same fields are also added to the terraform ignore_changes hook, to\navoid updating them after creation. This is useful for fields that are\nrequired on creation, but we do not desire to update them after creation,\nfor example because of an external controller is managing them, like an\nautoscaler.",
          "type": "object",
          "properties": {
            "config": {
              "description": "The target group configuration.",
              "type": "object",
              "properties": {
                "healthCheck": {
                  "description": "The health check configuration.",
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "description": "Indicates whether health checking is enabled. Defaults to true.",
                      "type": "boolean"
                    },
                    "healthCheckIntervalSeconds": {
                      "description": "The approximate amount of time, in seconds, between health checks of an individual target. The range is 5–300 seconds. The default is 30 seconds.",
                      "type": "number"
                    },
                    "healthCheckTimeoutSeconds": {
                      "description": "The amount of time, in seconds, to wait before reporting a target as unhealthy. The range is 1–120 seconds. The default is 5 seconds.",
                      "type": "number"
                    },
                    "healthyThresholdCount": {
                      "type": "number"
                    },
                    "matcher": {
                      "description": "The codes to use when checking for a successful response from a target. These are called Success codes in the console.",
                      "type": "object",
                      "properties": {
                        "value": {
                          "description": "The HTTP codes to use when checking for a successful response from a target.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    },
                    "path": {
                      "description": "The destination for health checks on the targets. If the protocol version is HTTP/1.1 or HTTP/2, specify a valid URI (for example, /path?query). The default path is /. Health checks are not supported if the protocol version is gRPC, however, you can choose HTTP/1.1 or HTTP/2 and specify a valid URI.",
                      "type": "string"
                    },
                    "port": {
                      "description": "The port on which the targets are listening.",
                      "type": "number"
                    },
                    "protocol": {
                      "description": "The protocol to use for routing traffic to the targets. Valid Values are HTTP | HTTPS.",
                      "type": "string"
                    },
                    "protocolVersion": {
                      "description": "The protocol version. Valid Values are HTTP1 | HTTP2 | GRPC. Default value is HTTP1.",
                      "type": "string"
                    },
                    "unhealthyThresholdCount": {
                      "description": "The number of consecutive failed health checks required before considering a target unhealthy. The range is 2–10. The default is 2.",
                      "type": "number"
                    }
                  },
                  "additionalProperties": false
                },
                "ipAddressType": {
                  "description": "The type of IP address used for the target group. Valid values: IPV4 | IPV6.",
                  "type": "string"
                },
                "lambdaEventStructureVersion": {
                  "description": "The version of the event structure that the Lambda function receives. Supported only if type is LAMBDA. Valid Values are V1 | V2.",
                  "type": "string"
                },
                "port": {
                  "description": "The port on which the targets are listening.",
                  "type": "number"
                },
                "protocol": {
                  "description": "The protocol to use for routing traffic to the targets. Valid Values are HTTP | HTTPS.",
                  "type": "string"
                },
                "protocolVersion": {
                  "description": "The protocol version. Valid Values are HTTP1 | HTTP2 | GRPC. Default value is HTTP1.",
                  "type": "string"
                },
                "vpcIdentifier": {
                  "description": "The ID of the VPC.",
                  "type": "string"
                },
                "vpcIdentifierRef": {
                  "description": "Reference to a VPC in ec2 to populate vpcIdentifier.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name of the referenced object.",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace of the referenced object",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for referencing.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "vpcIdentifierSelector": {
                  "description": "Selector for a VPC in ec2 to populate vpcIdentifier.",
                  "type": "object",
                  "properties": {
                    "matchControllerRef": {
                      "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                      "type": "boolean"
                    },
                    "matchLabels": {
                      "description": "MatchLabels ensures an object with matching labels is selected.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "namespace": {
                      "description": "Namespace for the selector",
                      "type": "string"
                    },
                    "policy": {
                      "description": "Policies for selection.",
                      "type": "object",
                      "properties": {
                        "resolution": {
                          "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                          "type": "string",
                          "default": "Required",
                          "enum": [
                            "Required",
                            "Optional"
                          ]
                        },
                        "resolve": {
                          "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                          "type": "string",
                          "enum": [
                            "Always",
                            "IfNotPresent"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "name": {
              "description": "The name of the target group. The name must be unique within the account. The valid characters are a-z, 0-9, and hyphens (-). You can't use a hyphen as the first or last character, or immediately after another hyphen.",
              "type": "string"
            },
            "tags": {
              "description": "Key-value map of resource tags.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "type": {
              "description": "The type of target group. Valid Values are IP | LAMBDA | INSTANCE | ALB",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "managementPolicies": {
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out\nthrough a Crossplane feature flag.\nManagementPolicies specify the array of actions Crossplane is allowed to\ntake on the managed and external resources.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223\nand this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers\ncan take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to\ncreate, observe, update, and delete this managed resource should be\nconfigured.",
          "type": "object",
          "default": {
            "kind": "ClusterProviderConfig",
            "name": "default"
          },
          "required": [
            "kind",
            "name"
          ],
          "properties": {
            "kind": {
              "description": "Kind of the referenced object.",
              "type": "string"
            },
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a\nSecret to which any connection details for this managed resource should\nbe written. Connection details frequently include the endpoint, username,\nand password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false,
      "x-kubernetes-validations": [
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.name))",
          "message": "spec.forProvider.name is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.type))",
          "message": "spec.forProvider.type is a required parameter"
        }
      ]
    },
    "status": {
      "description": "TargetGroupStatus defines the observed state of TargetGroup.",
      "type": "object",
      "properties": {
        "atProvider": {
          "type": "object",
          "properties": {
            "arn": {
              "description": "ARN of the target group.",
              "type": "string"
            },
            "config": {
              "description": "The target group configuration.",
              "type": "object",
              "properties": {
                "healthCheck": {
                  "description": "The health check configuration.",
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "description": "Indicates whether health checking is enabled. Defaults to true.",
                      "type": "boolean"
                    },
                    "healthCheckIntervalSeconds": {
                      "description": "The approximate amount of time, in seconds, between health checks of an individual target. The range is 5–300 seconds. The default is 30 seconds.",
                      "type": "number"
                    },
                    "healthCheckTimeoutSeconds": {
                      "description": "The amount of time, in seconds, to wait before reporting a target as unhealthy. The range is 1–120 seconds. The default is 5 seconds.",
                      "type": "number"
                    },
                    "healthyThresholdCount": {
                      "type": "number"
                    },
                    "matcher": {
                      "description": "The codes to use when checking for a successful response from a target. These are called Success codes in the console.",
                      "type": "object",
                      "properties": {
                        "value": {
                          "description": "The HTTP codes to use when checking for a successful response from a target.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    },
                    "path": {
                      "description": "The destination for health checks on the targets. If the protocol version is HTTP/1.1 or HTTP/2, specify a valid URI (for example, /path?query). The default path is /. Health checks are not supported if the protocol version is gRPC, however, you can choose HTTP/1.1 or HTTP/2 and specify a valid URI.",
                      "type": "string"
                    },
                    "port": {
                      "description": "The port on which the targets are listening.",
                      "type": "number"
                    },
                    "protocol": {
                      "description": "The protocol to use for routing traffic to the targets. Valid Values are HTTP | HTTPS.",
                      "type": "string"
                    },
                    "protocolVersion": {
                      "description": "The protocol version. Valid Values are HTTP1 | HTTP2 | GRPC. Default value is HTTP1.",
                      "type": "string"
                    },
                    "unhealthyThresholdCount": {
                      "description": "The number of consecutive failed health checks required before considering a target unhealthy. The range is 2–10. The default is 2.",
                      "type": "number"
                    }
                  },
                  "additionalProperties": false
                },
                "ipAddressType": {
                  "description": "The type of IP address used for the target group. Valid values: IPV4 | IPV6.",
                  "type": "string"
                },
                "lambdaEventStructureVersion": {
                  "description": "The version of the event structure that the Lambda function receives. Supported only if type is LAMBDA. Valid Values are V1 | V2.",
                  "type": "string"
                },
                "port": {
                  "description": "The port on which the targets are listening.",
                  "type": "number"
                },
                "protocol": {
                  "description": "The protocol to use for routing traffic to the targets. Valid Values are HTTP | HTTPS.",
                  "type": "string"
                },
                "protocolVersion": {
                  "description": "The protocol version. Valid Values are HTTP1 | HTTP2 | GRPC. Default value is HTTP1.",
                  "type": "string"
                },
                "vpcIdentifier": {
                  "description": "The ID of the VPC.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "id": {
              "description": "Unique identifier for the target group.",
              "type": "string"
            },
            "name": {
              "description": "The name of the target group. The name must be unique within the account. The valid characters are a-z, 0-9, and hyphens (-). You can't use a hyphen as the first or last character, or immediately after another hyphen.",
              "type": "string"
            },
            "region": {
              "description": "Region where this resource will be managed. Defaults to the Region set in the provider configuration.\nRegion is the region you'd like your resource to be created in.",
              "type": "string"
            },
            "status": {
              "description": "Status of the target group.",
              "type": "string"
            },
            "tags": {
              "description": "Key-value map of resource tags.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "tagsAll": {
              "description": "Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            },
            "type": {
              "description": "The type of target group. Valid Values are IP | LAMBDA | INSTANCE | ALB",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "type": "array",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one\nstatus to another.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from\none status to another, if any.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to\na resource at any point in time.",
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest metadata.generation\nwhich resulted in either a ready state, or stalled due to error\nit can not recover from without human intervention.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    }
  }
}
