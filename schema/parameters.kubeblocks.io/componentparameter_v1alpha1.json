{
  "description": "ComponentParameter is the Schema for the componentparameters API",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "ComponentParameterSpec defines the desired state of ComponentConfiguration",
      "type": "object",
      "required": [
        "componentName"
      ],
      "properties": {
        "clusterName": {
          "description": "Specifies the name of the Cluster that this configuration is associated with.",
          "type": "string",
          "x-kubernetes-validations": [
            {
              "rule": "self == oldSelf",
              "message": "forbidden to update spec.clusterRef"
            }
          ]
        },
        "componentName": {
          "description": "Represents the name of the Component that this configuration pertains to.",
          "type": "string",
          "x-kubernetes-validations": [
            {
              "rule": "self == oldSelf",
              "message": "forbidden to update spec.clusterRef"
            }
          ]
        },
        "configItemDetails": {
          "description": "ConfigItemDetails is an array of ConfigTemplateItemDetail objects.\n\n\nEach ConfigTemplateItemDetail corresponds to a configuration template,\nwhich is a ConfigMap that contains multiple configuration files.\nEach configuration file is stored as a key-value pair within the ConfigMap.\n\n\nThe ConfigTemplateItemDetail includes information such as:\n\n\n- The configuration template (a ConfigMap)\n- The corresponding ConfigConstraint (constraints and validation rules for the configuration)\n- Volume mounts (for mounting the configuration files)",
          "type": "array",
          "items": {
            "description": "ConfigTemplateItemDetail corresponds to settings of a configuration template (a ConfigMap).",
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "configFileParams": {
                "description": "Specifies the user-defined configuration parameters.\n\n\nWhen provided, the parameter values in `configFileParams` override the default configuration parameters.\nThis allows users to override the default configuration according to their specific needs.",
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "content": {
                      "description": "Holds the configuration keys and values. This field is a workaround for issues found in kubebuilder and code-generator.\nRefer to https://github.com/kubernetes-sigs/kubebuilder/issues/528 and https://github.com/kubernetes/code-generator/issues/50 for more details.\n\n\nRepresents the content of the configuration file.",
                      "type": "string"
                    },
                    "parameters": {
                      "description": "Represents the updated parameters for a single configuration file.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "configSpec": {
                "description": "Specifies the name of the configuration template (a ConfigMap), ConfigConstraint, and other miscellaneous options.\n\n\nThe configuration template is a ConfigMap that contains multiple configuration files.\nEach configuration file is stored as a key-value pair within the ConfigMap.\n\n\nConfigConstraint allows defining constraints and validation rules for configuration parameters.\nIt ensures that the configuration adheres to certain requirements and limitations.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "defaultMode": {
                    "description": "The operator attempts to set default file permissions (0444).\n\n\nMust be specified as an octal value between 0000 and 0777 (inclusive),\nor as a decimal value between 0 and 511 (inclusive).\nYAML supports both octal and decimal values for file permissions.\n\n\nPlease note that this setting only affects the permissions of the files themselves.\nDirectories within the specified path are not impacted by this setting.\nIt's important to be aware that this setting might conflict with other options\nthat influence the file mode, such as fsGroup.\nIn such cases, the resulting file mode may have additional bits set.\nRefers to documents of k8s.ConfigMapVolumeSource.defaultMode for more information.",
                    "type": "integer",
                    "format": "int32"
                  },
                  "externalManaged": {
                    "description": "ExternalManaged indicates whether the configuration is managed by an external system.\nWhen set to true, the controller will ignore the management of this configuration.",
                    "type": "boolean"
                  },
                  "name": {
                    "description": "Specifies the name of the template.",
                    "type": "string",
                    "maxLength": 63,
                    "pattern": "^[a-z0-9]([a-z0-9\\.\\-]*[a-z0-9])?$"
                  },
                  "namespace": {
                    "description": "Specifies the namespace of the referenced template ConfigMap object.",
                    "type": "string",
                    "default": "default",
                    "maxLength": 63,
                    "pattern": "^[a-z0-9]([a-z0-9\\-]*[a-z0-9])?$"
                  },
                  "restartOnFileChange": {
                    "description": "Specifies whether to restart the pod when the file changes.",
                    "type": "boolean"
                  },
                  "template": {
                    "description": "Specifies the name of the referenced template ConfigMap object.",
                    "type": "string",
                    "maxLength": 63,
                    "pattern": "^[a-z0-9]([a-z0-9\\.\\-]*[a-z0-9])?$"
                  },
                  "volumeName": {
                    "description": "Refers to the volume name of PodTemplate. The file produced through the template will be mounted to\nthe corresponding volume. Must be a DNS_LABEL name.\nThe volume name must be defined in podSpec.containers[*].volumeMounts.",
                    "type": "string",
                    "maxLength": 63,
                    "pattern": "^[a-z]([a-z0-9\\-]*[a-z0-9])?$"
                  }
                },
                "additionalProperties": false
              },
              "name": {
                "description": "Defines the unique identifier of the configuration template.\n\n\nIt must be a string of maximum 63 characters, and can only include lowercase alphanumeric characters,\nhyphens, and periods.\nThe name must start and end with an alphanumeric character.",
                "type": "string",
                "maxLength": 63,
                "pattern": "^[a-z0-9]([a-z0-9\\.\\-]*[a-z0-9])?$"
              },
              "payload": {
                "description": "External controllers can trigger a configuration rerender by modifying this field.\n\n\nNote: Currently, the `payload` field is opaque and its content is not interpreted by the system.\nModifying this field will cause a rerender, regardless of the specific content of this field.",
                "type": "object",
                "x-kubernetes-preserve-unknown-fields": true
              },
              "userConfigTemplates": {
                "description": "Specifies the user-defined configuration template.\n\n\nWhen provided, the `importTemplateRef` overrides the default configuration template\nspecified in `configSpec.templateRef`.\nThis allows users to customize the configuration template according to their specific requirements.",
                "type": "object",
                "required": [
                  "templateRef"
                ],
                "properties": {
                  "namespace": {
                    "description": "Specifies the namespace of the referenced configuration template ConfigMap object.\nAn empty namespace is equivalent to the \"default\" namespace.",
                    "type": "string",
                    "default": "default",
                    "pattern": "^[a-z0-9]([a-z0-9\\-]*[a-z0-9])?$"
                  },
                  "policy": {
                    "description": "Defines the strategy for merging externally imported templates into component templates.",
                    "type": "string",
                    "default": "none",
                    "enum": [
                      "patch",
                      "replace",
                      "none"
                    ]
                  },
                  "templateRef": {
                    "description": "Specifies the name of the referenced configuration template ConfigMap object.",
                    "type": "string",
                    "pattern": "^[a-z0-9]([a-z0-9\\.\\-]*[a-z0-9])?$"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "name"
          ],
          "x-kubernetes-list-type": "map"
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "ComponentParameterStatus defines the observed state of ComponentConfiguration",
      "type": "object",
      "required": [
        "configurationStatus"
      ],
      "properties": {
        "conditions": {
          "description": "Provides detailed status information for opsRequest.",
          "type": "array",
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource.\n---\nThis struct is intended for direct use as an array at the field path .status.conditions.  For example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the observations of a foo's current state.\n\t    // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    // +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t    // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t    // other fields\n\t}",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                "type": "string",
                "maxLength": 32768
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64",
                "minimum": 0
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                "type": "string",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "type": "string",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ]
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase.\n---\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions can be\nuseful (see .node.status.conditions), the ability to deconflict is important.\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                "type": "string",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "configurationStatus": {
          "description": "Provides the status of each component undergoing reconfiguration.",
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "lastDoneRevision": {
                "description": "Represents the last completed revision of the configuration item. This field is optional.",
                "type": "string"
              },
              "message": {
                "description": "Provides a description of any abnormal status. This field is optional.",
                "type": "string"
              },
              "name": {
                "description": "Specifies the name of the configuration template. It is a required field and must be a string of maximum 63 characters.\nThe name should only contain lowercase alphanumeric characters, hyphens, or periods. It should start and end with an alphanumeric character.",
                "type": "string",
                "maxLength": 63,
                "pattern": "^[a-z0-9]([a-z0-9\\.\\-]*[a-z0-9])?$"
              },
              "phase": {
                "description": "Indicates the current status of the configuration item.\n\n\nPossible values include \"Creating\", \"Init\", \"Running\", \"Pending\", \"Merged\", \"MergeFailed\", \"FailedAndPause\",\n\"Upgrading\", \"Deleting\", \"FailedAndRetry\", \"Finished\".",
                "type": "string",
                "enum": [
                  "Creating",
                  "Init",
                  "Running",
                  "Pending",
                  "Merged",
                  "MergeFailed",
                  "FailedAndPause",
                  "Upgrading",
                  "Deleting",
                  "FailedAndRetry",
                  "Finished"
                ]
              },
              "reconcileDetail": {
                "description": "Provides detailed information about the execution of the configuration change. This field is optional.",
                "type": "object",
                "properties": {
                  "currentRevision": {
                    "description": "Represents the current revision of the configuration item.",
                    "type": "string"
                  },
                  "errMessage": {
                    "description": "Represents the error message generated when the execution of configuration changes fails.",
                    "type": "string"
                  },
                  "execResult": {
                    "description": "Represents the outcome of the most recent execution.",
                    "type": "string"
                  },
                  "expectedCount": {
                    "description": "Represents the total number of pods that require execution of configuration changes.",
                    "type": "integer",
                    "format": "int32",
                    "default": -1
                  },
                  "policy": {
                    "description": "Represents the policy applied during the most recent execution.",
                    "type": "string"
                  },
                  "succeedCount": {
                    "description": "Represents the number of pods where configuration changes were successfully applied.",
                    "type": "integer",
                    "format": "int32",
                    "default": -1
                  }
                },
                "additionalProperties": false
              },
              "updateRevision": {
                "description": "Represents the updated revision of the configuration item. This field is optional.",
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "name"
          ],
          "x-kubernetes-list-type": "map"
        },
        "message": {
          "description": "Provides a description of any abnormal status.",
          "type": "string"
        },
        "observedGeneration": {
          "description": "Represents the latest generation observed for this\nClusterDefinition. It corresponds to the ConfigConstraint's generation, which is\nupdated by the API Server.",
          "type": "integer",
          "format": "int64"
        },
        "phase": {
          "description": "Indicates the current status of the configuration item.\n\n\nPossible values include \"Creating\", \"Init\", \"Running\", \"Pending\", \"Merged\", \"MergeFailed\", \"FailedAndPause\",\n\"Upgrading\", \"Deleting\", \"FailedAndRetry\", \"Finished\".",
          "type": "string",
          "enum": [
            "Creating",
            "Init",
            "Running",
            "Pending",
            "Merged",
            "MergeFailed",
            "FailedAndPause",
            "Upgrading",
            "Deleting",
            "FailedAndRetry",
            "Finished"
          ]
        }
      },
      "additionalProperties": false
    }
  }
}
