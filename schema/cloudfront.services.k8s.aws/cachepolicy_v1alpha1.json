{
  "description": "CachePolicy is the Schema for the CachePolicies API",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "CachePolicySpec defines the desired state of CachePolicy.\n\nA cache policy.\n\nWhen it's attached to a cache behavior, the cache policy determines the following:\n\n   * The values that CloudFront includes in the cache key. These values can\n   include HTTP headers, cookies, and URL query strings. CloudFront uses\n   the cache key to find an object in its cache that it can return to the\n   viewer.\n\n   * The default, minimum, and maximum time to live (TTL) values that you\n   want objects to stay in the CloudFront cache.\n\nThe headers, cookies, and query strings that are included in the cache key\nare also included in requests that CloudFront sends to the origin. CloudFront\nsends a request when it can't find a valid object in its cache that matches\nthe request's cache key. If you want to send values to the origin but not\ninclude them in the cache key, use OriginRequestPolicy.",
      "type": "object",
      "required": [
        "cachePolicyConfig"
      ],
      "properties": {
        "cachePolicyConfig": {
          "description": "A cache policy configuration.",
          "type": "object",
          "properties": {
            "comment": {
              "type": "string"
            },
            "defaultTTL": {
              "type": "integer",
              "format": "int64"
            },
            "maxTTL": {
              "type": "integer",
              "format": "int64"
            },
            "minTTL": {
              "type": "integer",
              "format": "int64"
            },
            "name": {
              "type": "string"
            },
            "parametersInCacheKeyAndForwardedToOrigin": {
              "description": "This object determines the values that CloudFront includes in the cache key.\nThese values can include HTTP headers, cookies, and URL query strings. CloudFront\nuses the cache key to find an object in its cache that it can return to the\nviewer.\n\nThe headers, cookies, and query strings that are included in the cache key\nare also included in requests that CloudFront sends to the origin. CloudFront\nsends a request when it can't find an object in its cache that matches the\nrequest's cache key. If you want to send values to the origin but not include\nthem in the cache key, use OriginRequestPolicy.",
              "type": "object",
              "properties": {
                "cookiesConfig": {
                  "description": "An object that determines whether any cookies in viewer requests (and if\nso, which cookies) are included in the cache key and in requests that CloudFront\nsends to the origin.",
                  "type": "object",
                  "properties": {
                    "cookieBehavior": {
                      "type": "string"
                    },
                    "cookies": {
                      "description": "Contains a list of cookie names.",
                      "type": "object",
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "enableAcceptEncodingBrotli": {
                  "type": "boolean"
                },
                "enableAcceptEncodingGzip": {
                  "type": "boolean"
                },
                "headersConfig": {
                  "description": "An object that determines whether any HTTP headers (and if so, which headers)\nare included in the cache key and in requests that CloudFront sends to the\norigin.",
                  "type": "object",
                  "properties": {
                    "headerBehavior": {
                      "type": "string"
                    },
                    "headers": {
                      "description": "Contains a list of HTTP header names.",
                      "type": "object",
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "queryStringsConfig": {
                  "description": "An object that determines whether any URL query strings in viewer requests\n(and if so, which query strings) are included in the cache key and in requests\nthat CloudFront sends to the origin.",
                  "type": "object",
                  "properties": {
                    "queryStringBehavior": {
                      "type": "string"
                    },
                    "queryStrings": {
                      "description": "Contains a list of query string names.",
                      "type": "object",
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "CachePolicyStatus defines the observed state of CachePolicy",
      "type": "object",
      "properties": {
        "ackResourceMetadata": {
          "description": "All CRs managed by ACK have a common `Status.ACKResourceMetadata` member\nthat is used to contain resource sync state, account ownership,\nconstructed ARN for the resource",
          "type": "object",
          "required": [
            "ownerAccountID",
            "region"
          ],
          "properties": {
            "arn": {
              "description": "ARN is the Amazon Resource Name for the resource. This is a\nglobally-unique identifier and is set only by the ACK service controller\nonce the controller has orchestrated the creation of the resource OR\nwhen it has verified that an \"adopted\" resource (a resource where the\nARN annotation was set by the Kubernetes user on the CR) exists and\nmatches the supplied CR's Spec field values.\nhttps://github.com/aws/aws-controllers-k8s/issues/270",
              "type": "string"
            },
            "ownerAccountID": {
              "description": "OwnerAccountID is the AWS Account ID of the account that owns the\nbackend AWS service API resource.",
              "type": "string"
            },
            "region": {
              "description": "Region is the AWS region in which the resource exists or will exist.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "conditions": {
          "description": "All CRs managed by ACK have a common `Status.Conditions` member that\ncontains a collection of `ackv1alpha1.Condition` objects that describe\nthe various terminal states of the CR and its backend AWS service API\nresource",
          "type": "array",
          "items": {
            "description": "Condition is the common struct used by all CRDs managed by ACK service\ncontrollers to indicate terminal states  of the CR and its backend AWS\nservice API resource",
            "type": "object",
            "required": [
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "Last time the condition transitioned from one status to another.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "A human readable message indicating details about the transition.",
                "type": "string"
              },
              "reason": {
                "description": "The reason for the condition's last transition.",
                "type": "string"
              },
              "status": {
                "description": "Status of the condition, one of True, False, Unknown.",
                "type": "string"
              },
              "type": {
                "description": "Type is the type of the Condition",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "eTag": {
          "description": "The current version of the cache policy.",
          "type": "string"
        },
        "id": {
          "description": "The unique identifier for the cache policy.",
          "type": "string"
        },
        "lastModifiedTime": {
          "description": "The date and time when the cache policy was last modified.",
          "type": "string",
          "format": "date-time"
        }
      },
      "additionalProperties": false
    }
  }
}
