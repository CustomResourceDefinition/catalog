{
  "description": "EventHubNamespace is the Schema for the EventHubNamespaces API. Manages an EventHub Namespace.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "EventHubNamespaceSpec defines the desired state of EventHubNamespace",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "deletionPolicy": {
          "description": "DeletionPolicy specifies what will happen to the underlying external\nwhen this managed resource is deleted - either \"Delete\" or \"Orphan\" the\nexternal resource.\nThis field is planned to be deprecated in favor of the ManagementPolicies\nfield in a future release. Currently, both could be set independently and\nnon-default values would be honored if the feature flag is enabled.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "type": "string",
          "default": "Delete",
          "enum": [
            "Orphan",
            "Delete"
          ]
        },
        "forProvider": {
          "type": "object",
          "properties": {
            "autoInflateEnabled": {
              "description": "Is Auto Inflate enabled for the EventHub Namespace?",
              "type": "boolean"
            },
            "capacity": {
              "description": "Specifies the Capacity / Throughput Units for a Standard SKU namespace. Default capacity has a maximum of 2, but can be increased in blocks of 2 on a committed purchase basis. Defaults to 1.",
              "type": "number"
            },
            "dedicatedClusterId": {
              "description": "Specifies the ID of the EventHub Dedicated Cluster where this Namespace should created. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "identity": {
              "description": "An identity block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "identityIds": {
                    "description": "Specifies a list of User Assigned Managed Identity IDs to be assigned to this EventHub namespace.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "x-kubernetes-list-type": "set"
                  },
                  "type": {
                    "description": "Specifies the type of Managed Service Identity that should be configured on this Event Hub Namespace. Possible values are SystemAssigned or UserAssigned.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "localAuthenticationEnabled": {
              "description": "Is SAS authentication enabled for the EventHub Namespace? Defaults to true.",
              "type": "boolean"
            },
            "location": {
              "description": "Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "maximumThroughputUnits": {
              "description": "Specifies the maximum number of throughput units when Auto Inflate is Enabled. Valid values range from 1 - 40.",
              "type": "number"
            },
            "minimumTlsVersion": {
              "description": "The minimum supported TLS version for this EventHub Namespace. Valid values are: 1.0, 1.1 and 1.2. Defaults to 1.2.",
              "type": "string"
            },
            "networkRulesets": {
              "description": "A network_rulesets block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "defaultAction": {
                    "description": "The default action to take when a rule is not matched. Possible values are Allow and Deny.",
                    "type": "string"
                  },
                  "ipRule": {
                    "description": "One or more ip_rule blocks as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "action": {
                          "description": "The action to take when the rule is matched. Possible values are Allow. Defaults to Allow.",
                          "type": "string"
                        },
                        "ipMask": {
                          "description": "The IP mask to match on.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "publicNetworkAccessEnabled": {
                    "description": "Is public network access enabled for the EventHub Namespace? Defaults to true.",
                    "type": "boolean"
                  },
                  "trustedServiceAccessEnabled": {
                    "description": "Whether Trusted Microsoft Services are allowed to bypass firewall.",
                    "type": "boolean"
                  },
                  "virtualNetworkRule": {
                    "description": "One or more virtual_network_rule blocks as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "ignoreMissingVirtualNetworkServiceEndpoint": {
                          "description": "Are missing virtual network service endpoints ignored?",
                          "type": "boolean"
                        },
                        "subnetId": {
                          "description": "The id of the subnet to match on.",
                          "type": "string"
                        },
                        "subnetIdRef": {
                          "description": "Reference to a Subnet in network to populate subnetId.",
                          "type": "object",
                          "required": [
                            "name"
                          ],
                          "properties": {
                            "name": {
                              "description": "Name of the referenced object.",
                              "type": "string"
                            },
                            "policy": {
                              "description": "Policies for referencing.",
                              "type": "object",
                              "properties": {
                                "resolution": {
                                  "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                                  "type": "string",
                                  "default": "Required",
                                  "enum": [
                                    "Required",
                                    "Optional"
                                  ]
                                },
                                "resolve": {
                                  "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                                  "type": "string",
                                  "enum": [
                                    "Always",
                                    "IfNotPresent"
                                  ]
                                }
                              },
                              "additionalProperties": false
                            }
                          },
                          "additionalProperties": false
                        },
                        "subnetIdSelector": {
                          "description": "Selector for a Subnet in network to populate subnetId.",
                          "type": "object",
                          "properties": {
                            "matchControllerRef": {
                              "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                              "type": "boolean"
                            },
                            "matchLabels": {
                              "description": "MatchLabels ensures an object with matching labels is selected.",
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              }
                            },
                            "policy": {
                              "description": "Policies for selection.",
                              "type": "object",
                              "properties": {
                                "resolution": {
                                  "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                                  "type": "string",
                                  "default": "Required",
                                  "enum": [
                                    "Required",
                                    "Optional"
                                  ]
                                },
                                "resolve": {
                                  "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                                  "type": "string",
                                  "enum": [
                                    "Always",
                                    "IfNotPresent"
                                  ]
                                }
                              },
                              "additionalProperties": false
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "publicNetworkAccessEnabled": {
              "description": "Is public network access enabled for the EventHub Namespace? Defaults to true.",
              "type": "boolean"
            },
            "resourceGroupName": {
              "description": "The name of the resource group in which to create the namespace. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "resourceGroupNameRef": {
              "description": "Reference to a ResourceGroup in azure to populate resourceGroupName.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "resourceGroupNameSelector": {
              "description": "Selector for a ResourceGroup in azure to populate resourceGroupName.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "sku": {
              "description": "Defines which tier to use. Valid options are Basic, Standard, and Premium. Please note that setting this field to Premium will force the creation of a new resource.",
              "type": "string"
            },
            "tags": {
              "description": "A mapping of tags to assign to the resource.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            }
          },
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored\nunless the Management Policies feature flag is disabled.\nInitProvider holds the same fields as ForProvider, with the exception\nof Identifier and other resource reference fields. The fields that are\nin InitProvider are merged into ForProvider when the resource is created.\nThe same fields are also added to the terraform ignore_changes hook, to\navoid updating them after creation. This is useful for fields that are\nrequired on creation, but we do not desire to update them after creation,\nfor example because of an external controller is managing them, like an\nautoscaler.",
          "type": "object",
          "properties": {
            "autoInflateEnabled": {
              "description": "Is Auto Inflate enabled for the EventHub Namespace?",
              "type": "boolean"
            },
            "capacity": {
              "description": "Specifies the Capacity / Throughput Units for a Standard SKU namespace. Default capacity has a maximum of 2, but can be increased in blocks of 2 on a committed purchase basis. Defaults to 1.",
              "type": "number"
            },
            "dedicatedClusterId": {
              "description": "Specifies the ID of the EventHub Dedicated Cluster where this Namespace should created. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "identity": {
              "description": "An identity block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "identityIds": {
                    "description": "Specifies a list of User Assigned Managed Identity IDs to be assigned to this EventHub namespace.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "x-kubernetes-list-type": "set"
                  },
                  "type": {
                    "description": "Specifies the type of Managed Service Identity that should be configured on this Event Hub Namespace. Possible values are SystemAssigned or UserAssigned.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "localAuthenticationEnabled": {
              "description": "Is SAS authentication enabled for the EventHub Namespace? Defaults to true.",
              "type": "boolean"
            },
            "location": {
              "description": "Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "maximumThroughputUnits": {
              "description": "Specifies the maximum number of throughput units when Auto Inflate is Enabled. Valid values range from 1 - 40.",
              "type": "number"
            },
            "minimumTlsVersion": {
              "description": "The minimum supported TLS version for this EventHub Namespace. Valid values are: 1.0, 1.1 and 1.2. Defaults to 1.2.",
              "type": "string"
            },
            "networkRulesets": {
              "description": "A network_rulesets block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "defaultAction": {
                    "description": "The default action to take when a rule is not matched. Possible values are Allow and Deny.",
                    "type": "string"
                  },
                  "ipRule": {
                    "description": "One or more ip_rule blocks as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "action": {
                          "description": "The action to take when the rule is matched. Possible values are Allow. Defaults to Allow.",
                          "type": "string"
                        },
                        "ipMask": {
                          "description": "The IP mask to match on.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "publicNetworkAccessEnabled": {
                    "description": "Is public network access enabled for the EventHub Namespace? Defaults to true.",
                    "type": "boolean"
                  },
                  "trustedServiceAccessEnabled": {
                    "description": "Whether Trusted Microsoft Services are allowed to bypass firewall.",
                    "type": "boolean"
                  },
                  "virtualNetworkRule": {
                    "description": "One or more virtual_network_rule blocks as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "ignoreMissingVirtualNetworkServiceEndpoint": {
                          "description": "Are missing virtual network service endpoints ignored?",
                          "type": "boolean"
                        },
                        "subnetId": {
                          "description": "The id of the subnet to match on.",
                          "type": "string"
                        },
                        "subnetIdRef": {
                          "description": "Reference to a Subnet in network to populate subnetId.",
                          "type": "object",
                          "required": [
                            "name"
                          ],
                          "properties": {
                            "name": {
                              "description": "Name of the referenced object.",
                              "type": "string"
                            },
                            "policy": {
                              "description": "Policies for referencing.",
                              "type": "object",
                              "properties": {
                                "resolution": {
                                  "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                                  "type": "string",
                                  "default": "Required",
                                  "enum": [
                                    "Required",
                                    "Optional"
                                  ]
                                },
                                "resolve": {
                                  "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                                  "type": "string",
                                  "enum": [
                                    "Always",
                                    "IfNotPresent"
                                  ]
                                }
                              },
                              "additionalProperties": false
                            }
                          },
                          "additionalProperties": false
                        },
                        "subnetIdSelector": {
                          "description": "Selector for a Subnet in network to populate subnetId.",
                          "type": "object",
                          "properties": {
                            "matchControllerRef": {
                              "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                              "type": "boolean"
                            },
                            "matchLabels": {
                              "description": "MatchLabels ensures an object with matching labels is selected.",
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              }
                            },
                            "policy": {
                              "description": "Policies for selection.",
                              "type": "object",
                              "properties": {
                                "resolution": {
                                  "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                                  "type": "string",
                                  "default": "Required",
                                  "enum": [
                                    "Required",
                                    "Optional"
                                  ]
                                },
                                "resolve": {
                                  "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                                  "type": "string",
                                  "enum": [
                                    "Always",
                                    "IfNotPresent"
                                  ]
                                }
                              },
                              "additionalProperties": false
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "publicNetworkAccessEnabled": {
              "description": "Is public network access enabled for the EventHub Namespace? Defaults to true.",
              "type": "boolean"
            },
            "sku": {
              "description": "Defines which tier to use. Valid options are Basic, Standard, and Premium. Please note that setting this field to Premium will force the creation of a new resource.",
              "type": "string"
            },
            "tags": {
              "description": "A mapping of tags to assign to the resource.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            }
          },
          "additionalProperties": false
        },
        "managementPolicies": {
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out\nthrough a Crossplane feature flag.\nManagementPolicies specify the array of actions Crossplane is allowed to\ntake on the managed and external resources.\nThis field is planned to replace the DeletionPolicy field in a future\nrelease. Currently, both could be set independently and non-default\nvalues would be honored if the feature flag is enabled. If both are\ncustom, the DeletionPolicy field will be ignored.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223\nand this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers\ncan take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to\ncreate, observe, update, and delete this managed resource should be\nconfigured.",
          "type": "object",
          "default": {
            "name": "default"
          },
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "type": "object",
              "properties": {
                "resolution": {
                  "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                  "type": "string",
                  "default": "Required",
                  "enum": [
                    "Required",
                    "Optional"
                  ]
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                  "type": "string",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a\nSecret to which any connection details for this managed resource should\nbe written. Connection details frequently include the endpoint, username,\nand password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name",
            "namespace"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false,
      "x-kubernetes-validations": [
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.location))",
          "message": "spec.forProvider.location is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.sku) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.sku))",
          "message": "spec.forProvider.sku is a required parameter"
        }
      ]
    },
    "status": {
      "description": "EventHubNamespaceStatus defines the observed state of EventHubNamespace.",
      "type": "object",
      "properties": {
        "atProvider": {
          "type": "object",
          "properties": {
            "autoInflateEnabled": {
              "description": "Is Auto Inflate enabled for the EventHub Namespace?",
              "type": "boolean"
            },
            "capacity": {
              "description": "Specifies the Capacity / Throughput Units for a Standard SKU namespace. Default capacity has a maximum of 2, but can be increased in blocks of 2 on a committed purchase basis. Defaults to 1.",
              "type": "number"
            },
            "dedicatedClusterId": {
              "description": "Specifies the ID of the EventHub Dedicated Cluster where this Namespace should created. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "id": {
              "description": "The EventHub Namespace ID.",
              "type": "string"
            },
            "identity": {
              "description": "An identity block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "identityIds": {
                    "description": "Specifies a list of User Assigned Managed Identity IDs to be assigned to this EventHub namespace.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "x-kubernetes-list-type": "set"
                  },
                  "principalId": {
                    "description": "The Principal ID associated with this Managed Service Identity.",
                    "type": "string"
                  },
                  "tenantId": {
                    "description": "The Tenant ID associated with this Managed Service Identity.",
                    "type": "string"
                  },
                  "type": {
                    "description": "Specifies the type of Managed Service Identity that should be configured on this Event Hub Namespace. Possible values are SystemAssigned or UserAssigned.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "localAuthenticationEnabled": {
              "description": "Is SAS authentication enabled for the EventHub Namespace? Defaults to true.",
              "type": "boolean"
            },
            "location": {
              "description": "Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "maximumThroughputUnits": {
              "description": "Specifies the maximum number of throughput units when Auto Inflate is Enabled. Valid values range from 1 - 40.",
              "type": "number"
            },
            "minimumTlsVersion": {
              "description": "The minimum supported TLS version for this EventHub Namespace. Valid values are: 1.0, 1.1 and 1.2. Defaults to 1.2.",
              "type": "string"
            },
            "networkRulesets": {
              "description": "A network_rulesets block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "defaultAction": {
                    "description": "The default action to take when a rule is not matched. Possible values are Allow and Deny.",
                    "type": "string"
                  },
                  "ipRule": {
                    "description": "One or more ip_rule blocks as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "action": {
                          "description": "The action to take when the rule is matched. Possible values are Allow. Defaults to Allow.",
                          "type": "string"
                        },
                        "ipMask": {
                          "description": "The IP mask to match on.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "publicNetworkAccessEnabled": {
                    "description": "Is public network access enabled for the EventHub Namespace? Defaults to true.",
                    "type": "boolean"
                  },
                  "trustedServiceAccessEnabled": {
                    "description": "Whether Trusted Microsoft Services are allowed to bypass firewall.",
                    "type": "boolean"
                  },
                  "virtualNetworkRule": {
                    "description": "One or more virtual_network_rule blocks as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "ignoreMissingVirtualNetworkServiceEndpoint": {
                          "description": "Are missing virtual network service endpoints ignored?",
                          "type": "boolean"
                        },
                        "subnetId": {
                          "description": "The id of the subnet to match on.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "publicNetworkAccessEnabled": {
              "description": "Is public network access enabled for the EventHub Namespace? Defaults to true.",
              "type": "boolean"
            },
            "resourceGroupName": {
              "description": "The name of the resource group in which to create the namespace. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "sku": {
              "description": "Defines which tier to use. Valid options are Basic, Standard, and Premium. Please note that setting this field to Premium will force the creation of a new resource.",
              "type": "string"
            },
            "tags": {
              "description": "A mapping of tags to assign to the resource.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-kubernetes-map-type": "granular"
            }
          },
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "type": "array",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one\nstatus to another.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from\none status to another, if any.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to\na resource at any point in time.",
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest metadata.generation\nwhich resulted in either a ready state, or stalled due to error\nit can not recover from without human intervention.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    }
  }
}
