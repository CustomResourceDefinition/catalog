{
  "description": "EventHub is the Schema for the EventHubs API. Manages a Event Hubs as a nested resource within an Event Hubs namespace.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "EventHubSpec defines the desired state of EventHub",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "deletionPolicy": {
          "description": "DeletionPolicy specifies what will happen to the underlying external\nwhen this managed resource is deleted - either \"Delete\" or \"Orphan\" the\nexternal resource.\nThis field is planned to be deprecated in favor of the ManagementPolicies\nfield in a future release. Currently, both could be set independently and\nnon-default values would be honored if the feature flag is enabled.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "type": "string",
          "default": "Delete",
          "enum": [
            "Orphan",
            "Delete"
          ]
        },
        "forProvider": {
          "type": "object",
          "properties": {
            "captureDescription": {
              "description": "A capture_description block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "destination": {
                    "description": "A destination block as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "archiveNameFormat": {
                          "description": "The Blob naming convention for archiving. e.g. {Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}. Here all the parameters (Namespace,EventHub .. etc) are mandatory irrespective of order",
                          "type": "string"
                        },
                        "blobContainerName": {
                          "description": "The name of the Container within the Blob Storage Account where messages should be archived.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Specifies the name of the EventHub resource. Changing this forces a new resource to be created.",
                          "type": "string"
                        },
                        "storageAccountId": {
                          "description": "The ID of the Blob Storage Account where messages should be archived.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "enabled": {
                    "description": "Specifies if the Capture Description is Enabled.",
                    "type": "boolean"
                  },
                  "encoding": {
                    "description": "Specifies the Encoding used for the Capture Description. Possible values are Avro and AvroDeflate.",
                    "type": "string"
                  },
                  "intervalInSeconds": {
                    "description": "Specifies the time interval in seconds at which the capture will happen. Values can be between 60 and 900 seconds. Defaults to 300 seconds.",
                    "type": "number"
                  },
                  "sizeLimitInBytes": {
                    "description": "Specifies the amount of data built up in your EventHub before a Capture Operation occurs. Value should be between 10485760 and 524288000 bytes. Defaults to 314572800 bytes.",
                    "type": "number"
                  },
                  "skipEmptyArchives": {
                    "description": "Specifies if empty files should not be emitted if no events occur during the Capture time window. Defaults to false.",
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              }
            },
            "messageRetention": {
              "description": "Specifies the number of days to retain the events for this Event Hub.",
              "type": "number"
            },
            "namespaceId": {
              "description": "Specifies the ID of the EventHub Namespace. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "namespaceIdRef": {
              "description": "Reference to a EventHubNamespace in eventhub to populate namespaceId.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "namespaceIdSelector": {
              "description": "Selector for a EventHubNamespace in eventhub to populate namespaceId.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "namespaceName": {
              "description": "Specifies the name of the EventHub resource. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "namespaceNameRef": {
              "description": "Reference to a EventHubNamespace in eventhub to populate namespaceName.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "namespaceNameSelector": {
              "description": "Selector for a EventHubNamespace in eventhub to populate namespaceName.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "partitionCount": {
              "description": "Specifies the current number of shards on the Event Hub.",
              "type": "number"
            },
            "resourceGroupName": {
              "description": "Specifies the name of the EventHub resource. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "resourceGroupNameRef": {
              "description": "Reference to a ResourceGroup in azure to populate resourceGroupName.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "resourceGroupNameSelector": {
              "description": "Selector for a ResourceGroup in azure to populate resourceGroupName.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "status": {
              "description": "Specifies the status of the Event Hub resource. Possible values are Active, Disabled and SendDisabled. Defaults to Active.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored\nunless the Management Policies feature flag is disabled.\nInitProvider holds the same fields as ForProvider, with the exception\nof Identifier and other resource reference fields. The fields that are\nin InitProvider are merged into ForProvider when the resource is created.\nThe same fields are also added to the terraform ignore_changes hook, to\navoid updating them after creation. This is useful for fields that are\nrequired on creation, but we do not desire to update them after creation,\nfor example because of an external controller is managing them, like an\nautoscaler.",
          "type": "object",
          "properties": {
            "captureDescription": {
              "description": "A capture_description block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "destination": {
                    "description": "A destination block as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "archiveNameFormat": {
                          "description": "The Blob naming convention for archiving. e.g. {Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}. Here all the parameters (Namespace,EventHub .. etc) are mandatory irrespective of order",
                          "type": "string"
                        },
                        "blobContainerName": {
                          "description": "The name of the Container within the Blob Storage Account where messages should be archived.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Specifies the name of the EventHub resource. Changing this forces a new resource to be created.",
                          "type": "string"
                        },
                        "storageAccountId": {
                          "description": "The ID of the Blob Storage Account where messages should be archived.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "enabled": {
                    "description": "Specifies if the Capture Description is Enabled.",
                    "type": "boolean"
                  },
                  "encoding": {
                    "description": "Specifies the Encoding used for the Capture Description. Possible values are Avro and AvroDeflate.",
                    "type": "string"
                  },
                  "intervalInSeconds": {
                    "description": "Specifies the time interval in seconds at which the capture will happen. Values can be between 60 and 900 seconds. Defaults to 300 seconds.",
                    "type": "number"
                  },
                  "sizeLimitInBytes": {
                    "description": "Specifies the amount of data built up in your EventHub before a Capture Operation occurs. Value should be between 10485760 and 524288000 bytes. Defaults to 314572800 bytes.",
                    "type": "number"
                  },
                  "skipEmptyArchives": {
                    "description": "Specifies if empty files should not be emitted if no events occur during the Capture time window. Defaults to false.",
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              }
            },
            "messageRetention": {
              "description": "Specifies the number of days to retain the events for this Event Hub.",
              "type": "number"
            },
            "namespaceId": {
              "description": "Specifies the ID of the EventHub Namespace. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "namespaceIdRef": {
              "description": "Reference to a EventHubNamespace in eventhub to populate namespaceId.",
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the referenced object.",
                  "type": "string"
                },
                "policy": {
                  "description": "Policies for referencing.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "namespaceIdSelector": {
              "description": "Selector for a EventHubNamespace in eventhub to populate namespaceId.",
              "type": "object",
              "properties": {
                "matchControllerRef": {
                  "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                  "type": "boolean"
                },
                "matchLabels": {
                  "description": "MatchLabels ensures an object with matching labels is selected.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "policy": {
                  "description": "Policies for selection.",
                  "type": "object",
                  "properties": {
                    "resolution": {
                      "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                      "type": "string",
                      "default": "Required",
                      "enum": [
                        "Required",
                        "Optional"
                      ]
                    },
                    "resolve": {
                      "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                      "type": "string",
                      "enum": [
                        "Always",
                        "IfNotPresent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "partitionCount": {
              "description": "Specifies the current number of shards on the Event Hub.",
              "type": "number"
            },
            "status": {
              "description": "Specifies the status of the Event Hub resource. Possible values are Active, Disabled and SendDisabled. Defaults to Active.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "managementPolicies": {
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out\nthrough a Crossplane feature flag.\nManagementPolicies specify the array of actions Crossplane is allowed to\ntake on the managed and external resources.\nThis field is planned to replace the DeletionPolicy field in a future\nrelease. Currently, both could be set independently and non-default\nvalues would be honored if the feature flag is enabled. If both are\ncustom, the DeletionPolicy field will be ignored.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223\nand this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers\ncan take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to\ncreate, observe, update, and delete this managed resource should be\nconfigured.",
          "type": "object",
          "default": {
            "name": "default"
          },
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "type": "object",
              "properties": {
                "resolution": {
                  "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                  "type": "string",
                  "default": "Required",
                  "enum": [
                    "Required",
                    "Optional"
                  ]
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                  "type": "string",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a\nSecret to which any connection details for this managed resource should\nbe written. Connection details frequently include the endpoint, username,\nand password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name",
            "namespace"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false,
      "x-kubernetes-validations": [
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.messageRetention) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.messageRetention))",
          "message": "spec.forProvider.messageRetention is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.partitionCount) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.partitionCount))",
          "message": "spec.forProvider.partitionCount is a required parameter"
        }
      ]
    },
    "status": {
      "description": "EventHubStatus defines the observed state of EventHub.",
      "type": "object",
      "properties": {
        "atProvider": {
          "type": "object",
          "properties": {
            "captureDescription": {
              "description": "A capture_description block as defined below.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "destination": {
                    "description": "A destination block as defined below.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "archiveNameFormat": {
                          "description": "The Blob naming convention for archiving. e.g. {Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}. Here all the parameters (Namespace,EventHub .. etc) are mandatory irrespective of order",
                          "type": "string"
                        },
                        "blobContainerName": {
                          "description": "The name of the Container within the Blob Storage Account where messages should be archived.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Specifies the name of the EventHub resource. Changing this forces a new resource to be created.",
                          "type": "string"
                        },
                        "storageAccountId": {
                          "description": "The ID of the Blob Storage Account where messages should be archived.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "enabled": {
                    "description": "Specifies if the Capture Description is Enabled.",
                    "type": "boolean"
                  },
                  "encoding": {
                    "description": "Specifies the Encoding used for the Capture Description. Possible values are Avro and AvroDeflate.",
                    "type": "string"
                  },
                  "intervalInSeconds": {
                    "description": "Specifies the time interval in seconds at which the capture will happen. Values can be between 60 and 900 seconds. Defaults to 300 seconds.",
                    "type": "number"
                  },
                  "sizeLimitInBytes": {
                    "description": "Specifies the amount of data built up in your EventHub before a Capture Operation occurs. Value should be between 10485760 and 524288000 bytes. Defaults to 314572800 bytes.",
                    "type": "number"
                  },
                  "skipEmptyArchives": {
                    "description": "Specifies if empty files should not be emitted if no events occur during the Capture time window. Defaults to false.",
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              }
            },
            "id": {
              "description": "The ID of the EventHub.",
              "type": "string"
            },
            "messageRetention": {
              "description": "Specifies the number of days to retain the events for this Event Hub.",
              "type": "number"
            },
            "namespaceId": {
              "description": "Specifies the ID of the EventHub Namespace. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "namespaceName": {
              "description": "Specifies the name of the EventHub resource. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "partitionCount": {
              "description": "Specifies the current number of shards on the Event Hub.",
              "type": "number"
            },
            "partitionIds": {
              "description": "The identifiers for partitions created for Event Hubs.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-kubernetes-list-type": "set"
            },
            "resourceGroupName": {
              "description": "Specifies the name of the EventHub resource. Changing this forces a new resource to be created.",
              "type": "string"
            },
            "status": {
              "description": "Specifies the status of the Event Hub resource. Possible values are Active, Disabled and SendDisabled. Defaults to Active.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "type": "array",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one\nstatus to another.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from\none status to another, if any.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to\na resource at any point in time.",
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest metadata.generation\nwhich resulted in either a ready state, or stalled due to error\nit can not recover from without human intervention.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    }
  }
}
