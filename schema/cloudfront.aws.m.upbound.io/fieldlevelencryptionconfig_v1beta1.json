{
  "description": "FieldLevelEncryptionConfig is the Schema for the FieldLevelEncryptionConfigs API. Provides a CloudFront Field-level Encryption Config resource.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "FieldLevelEncryptionConfigSpec defines the desired state of FieldLevelEncryptionConfig",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "forProvider": {
          "type": "object",
          "properties": {
            "comment": {
              "description": "An optional comment about the Field Level Encryption Config.",
              "type": "string"
            },
            "contentTypeProfileConfig": {
              "description": "Content Type Profile Config specifies when to forward content if a content type isn't recognized and profiles to use as by default in a request if a query argument doesn't specify a profile to use.",
              "type": "object",
              "properties": {
                "contentTypeProfiles": {
                  "description": "Object that contains an attribute items that contains the list of configurations for a field-level encryption content type-profile. See Content Type Profile.",
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "contentType": {
                            "description": "he content type for a field-level encryption content type-profile mapping. Valid value is application/x-www-form-urlencoded.",
                            "type": "string"
                          },
                          "format": {
                            "description": "The format for a field-level encryption content type-profile mapping. Valid value is URLEncoded.",
                            "type": "string"
                          },
                          "profileId": {
                            "description": "The profile ID for a field-level encryption content type-profile mapping.",
                            "type": "string"
                          }
                        },
                        "additionalProperties": false
                      }
                    }
                  },
                  "additionalProperties": false
                },
                "forwardWhenContentTypeIsUnknown": {
                  "description": "specifies what to do when an unknown content type is provided for the profile. If true, content is forwarded without being encrypted when the content type is unknown. If false (the default), an error is returned when the content type is unknown.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "queryArgProfileConfig": {
              "description": "Query Arg Profile Config that specifies when to forward content if a profile isn't found and the profile that can be provided as a query argument in a request.",
              "type": "object",
              "properties": {
                "forwardWhenQueryArgProfileIsUnknown": {
                  "description": "Flag to set if you want a request to be forwarded to the origin even if the profile specified by the field-level encryption query argument, fle-profile, is unknown.",
                  "type": "boolean"
                },
                "queryArgProfiles": {
                  "description": "Object that contains an attribute items that contains the list ofrofiles specified for query argument-profile mapping for field-level encryption. see Query Arg Profile.",
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "profileId": {
                            "description": "The profile ID for a field-level encryption content type-profile mapping.",
                            "type": "string"
                          },
                          "profileIdRef": {
                            "description": "Reference to a FieldLevelEncryptionProfile in cloudfront to populate profileId.",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "description": "Name of the referenced object.",
                                "type": "string"
                              },
                              "namespace": {
                                "description": "Namespace of the referenced object",
                                "type": "string"
                              },
                              "policy": {
                                "description": "Policies for referencing.",
                                "type": "object",
                                "properties": {
                                  "resolution": {
                                    "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                                    "type": "string",
                                    "default": "Required",
                                    "enum": [
                                      "Required",
                                      "Optional"
                                    ]
                                  },
                                  "resolve": {
                                    "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                                    "type": "string",
                                    "enum": [
                                      "Always",
                                      "IfNotPresent"
                                    ]
                                  }
                                },
                                "additionalProperties": false
                              }
                            },
                            "additionalProperties": false
                          },
                          "profileIdSelector": {
                            "description": "Selector for a FieldLevelEncryptionProfile in cloudfront to populate profileId.",
                            "type": "object",
                            "properties": {
                              "matchControllerRef": {
                                "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                                "type": "boolean"
                              },
                              "matchLabels": {
                                "description": "MatchLabels ensures an object with matching labels is selected.",
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              },
                              "namespace": {
                                "description": "Namespace for the selector",
                                "type": "string"
                              },
                              "policy": {
                                "description": "Policies for selection.",
                                "type": "object",
                                "properties": {
                                  "resolution": {
                                    "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                                    "type": "string",
                                    "default": "Required",
                                    "enum": [
                                      "Required",
                                      "Optional"
                                    ]
                                  },
                                  "resolve": {
                                    "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                                    "type": "string",
                                    "enum": [
                                      "Always",
                                      "IfNotPresent"
                                    ]
                                  }
                                },
                                "additionalProperties": false
                              }
                            },
                            "additionalProperties": false
                          },
                          "queryArg": {
                            "description": "Query argument for field-level encryption query argument-profile mapping.",
                            "type": "string"
                          }
                        },
                        "additionalProperties": false
                      }
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored\nunless the Management Policies feature flag is disabled.\nInitProvider holds the same fields as ForProvider, with the exception\nof Identifier and other resource reference fields. The fields that are\nin InitProvider are merged into ForProvider when the resource is created.\nThe same fields are also added to the terraform ignore_changes hook, to\navoid updating them after creation. This is useful for fields that are\nrequired on creation, but we do not desire to update them after creation,\nfor example because of an external controller is managing them, like an\nautoscaler.",
          "type": "object",
          "properties": {
            "comment": {
              "description": "An optional comment about the Field Level Encryption Config.",
              "type": "string"
            },
            "contentTypeProfileConfig": {
              "description": "Content Type Profile Config specifies when to forward content if a content type isn't recognized and profiles to use as by default in a request if a query argument doesn't specify a profile to use.",
              "type": "object",
              "properties": {
                "contentTypeProfiles": {
                  "description": "Object that contains an attribute items that contains the list of configurations for a field-level encryption content type-profile. See Content Type Profile.",
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "contentType": {
                            "description": "he content type for a field-level encryption content type-profile mapping. Valid value is application/x-www-form-urlencoded.",
                            "type": "string"
                          },
                          "format": {
                            "description": "The format for a field-level encryption content type-profile mapping. Valid value is URLEncoded.",
                            "type": "string"
                          },
                          "profileId": {
                            "description": "The profile ID for a field-level encryption content type-profile mapping.",
                            "type": "string"
                          }
                        },
                        "additionalProperties": false
                      }
                    }
                  },
                  "additionalProperties": false
                },
                "forwardWhenContentTypeIsUnknown": {
                  "description": "specifies what to do when an unknown content type is provided for the profile. If true, content is forwarded without being encrypted when the content type is unknown. If false (the default), an error is returned when the content type is unknown.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "queryArgProfileConfig": {
              "description": "Query Arg Profile Config that specifies when to forward content if a profile isn't found and the profile that can be provided as a query argument in a request.",
              "type": "object",
              "properties": {
                "forwardWhenQueryArgProfileIsUnknown": {
                  "description": "Flag to set if you want a request to be forwarded to the origin even if the profile specified by the field-level encryption query argument, fle-profile, is unknown.",
                  "type": "boolean"
                },
                "queryArgProfiles": {
                  "description": "Object that contains an attribute items that contains the list ofrofiles specified for query argument-profile mapping for field-level encryption. see Query Arg Profile.",
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "profileId": {
                            "description": "The profile ID for a field-level encryption content type-profile mapping.",
                            "type": "string"
                          },
                          "profileIdRef": {
                            "description": "Reference to a FieldLevelEncryptionProfile in cloudfront to populate profileId.",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "description": "Name of the referenced object.",
                                "type": "string"
                              },
                              "namespace": {
                                "description": "Namespace of the referenced object",
                                "type": "string"
                              },
                              "policy": {
                                "description": "Policies for referencing.",
                                "type": "object",
                                "properties": {
                                  "resolution": {
                                    "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                                    "type": "string",
                                    "default": "Required",
                                    "enum": [
                                      "Required",
                                      "Optional"
                                    ]
                                  },
                                  "resolve": {
                                    "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                                    "type": "string",
                                    "enum": [
                                      "Always",
                                      "IfNotPresent"
                                    ]
                                  }
                                },
                                "additionalProperties": false
                              }
                            },
                            "additionalProperties": false
                          },
                          "profileIdSelector": {
                            "description": "Selector for a FieldLevelEncryptionProfile in cloudfront to populate profileId.",
                            "type": "object",
                            "properties": {
                              "matchControllerRef": {
                                "description": "MatchControllerRef ensures an object with the same controller reference\nas the selecting object is selected.",
                                "type": "boolean"
                              },
                              "matchLabels": {
                                "description": "MatchLabels ensures an object with matching labels is selected.",
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              },
                              "namespace": {
                                "description": "Namespace for the selector",
                                "type": "string"
                              },
                              "policy": {
                                "description": "Policies for selection.",
                                "type": "object",
                                "properties": {
                                  "resolution": {
                                    "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                                    "type": "string",
                                    "default": "Required",
                                    "enum": [
                                      "Required",
                                      "Optional"
                                    ]
                                  },
                                  "resolve": {
                                    "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                                    "type": "string",
                                    "enum": [
                                      "Always",
                                      "IfNotPresent"
                                    ]
                                  }
                                },
                                "additionalProperties": false
                              }
                            },
                            "additionalProperties": false
                          },
                          "queryArg": {
                            "description": "Query argument for field-level encryption query argument-profile mapping.",
                            "type": "string"
                          }
                        },
                        "additionalProperties": false
                      }
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "managementPolicies": {
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out\nthrough a Crossplane feature flag.\nManagementPolicies specify the array of actions Crossplane is allowed to\ntake on the managed and external resources.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223\nand this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers\ncan take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to\ncreate, observe, update, and delete this managed resource should be\nconfigured.",
          "type": "object",
          "default": {
            "kind": "ClusterProviderConfig",
            "name": "default"
          },
          "required": [
            "kind",
            "name"
          ],
          "properties": {
            "kind": {
              "description": "Kind of the referenced object.",
              "type": "string"
            },
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a\nSecret to which any connection details for this managed resource should\nbe written. Connection details frequently include the endpoint, username,\nand password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false,
      "x-kubernetes-validations": [
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.contentTypeProfileConfig) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.contentTypeProfileConfig))",
          "message": "spec.forProvider.contentTypeProfileConfig is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.queryArgProfileConfig) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.queryArgProfileConfig))",
          "message": "spec.forProvider.queryArgProfileConfig is a required parameter"
        }
      ]
    },
    "status": {
      "description": "FieldLevelEncryptionConfigStatus defines the observed state of FieldLevelEncryptionConfig.",
      "type": "object",
      "properties": {
        "atProvider": {
          "type": "object",
          "properties": {
            "arn": {
              "description": "The Field Level Encryption Config ARN.",
              "type": "string"
            },
            "callerReference": {
              "description": "Internal value used by CloudFront to allow future updates to the Field Level Encryption Config.",
              "type": "string"
            },
            "comment": {
              "description": "An optional comment about the Field Level Encryption Config.",
              "type": "string"
            },
            "contentTypeProfileConfig": {
              "description": "Content Type Profile Config specifies when to forward content if a content type isn't recognized and profiles to use as by default in a request if a query argument doesn't specify a profile to use.",
              "type": "object",
              "properties": {
                "contentTypeProfiles": {
                  "description": "Object that contains an attribute items that contains the list of configurations for a field-level encryption content type-profile. See Content Type Profile.",
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "contentType": {
                            "description": "he content type for a field-level encryption content type-profile mapping. Valid value is application/x-www-form-urlencoded.",
                            "type": "string"
                          },
                          "format": {
                            "description": "The format for a field-level encryption content type-profile mapping. Valid value is URLEncoded.",
                            "type": "string"
                          },
                          "profileId": {
                            "description": "The profile ID for a field-level encryption content type-profile mapping.",
                            "type": "string"
                          }
                        },
                        "additionalProperties": false
                      }
                    }
                  },
                  "additionalProperties": false
                },
                "forwardWhenContentTypeIsUnknown": {
                  "description": "specifies what to do when an unknown content type is provided for the profile. If true, content is forwarded without being encrypted when the content type is unknown. If false (the default), an error is returned when the content type is unknown.",
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "etag": {
              "description": "The current version of the Field Level Encryption Config. For example: E2QWRUHAPOMQZL.",
              "type": "string"
            },
            "id": {
              "description": "The identifier for the Field Level Encryption Config. For example: K3D5EWEUDCCXON.",
              "type": "string"
            },
            "queryArgProfileConfig": {
              "description": "Query Arg Profile Config that specifies when to forward content if a profile isn't found and the profile that can be provided as a query argument in a request.",
              "type": "object",
              "properties": {
                "forwardWhenQueryArgProfileIsUnknown": {
                  "description": "Flag to set if you want a request to be forwarded to the origin even if the profile specified by the field-level encryption query argument, fle-profile, is unknown.",
                  "type": "boolean"
                },
                "queryArgProfiles": {
                  "description": "Object that contains an attribute items that contains the list ofrofiles specified for query argument-profile mapping for field-level encryption. see Query Arg Profile.",
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "profileId": {
                            "description": "The profile ID for a field-level encryption content type-profile mapping.",
                            "type": "string"
                          },
                          "queryArg": {
                            "description": "Query argument for field-level encryption query argument-profile mapping.",
                            "type": "string"
                          }
                        },
                        "additionalProperties": false
                      }
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "type": "array",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one\nstatus to another.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from\none status to another, if any.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to\na resource at any point in time.",
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest metadata.generation\nwhich resulted in either a ready state, or stalled due to error\nit can not recover from without human intervention.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    }
  }
}
