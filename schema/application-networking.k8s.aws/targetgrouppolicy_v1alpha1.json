{
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "TargetGroupPolicySpec defines the desired state of TargetGroupPolicy.",
      "type": "object",
      "required": [
        "targetRef"
      ],
      "properties": {
        "healthCheck": {
          "description": "The health check configuration.\n\nChanges to this value will update VPC Lattice resource in place.",
          "type": "object",
          "properties": {
            "enabled": {
              "description": "Indicates whether health checking is enabled.",
              "type": "boolean"
            },
            "healthyThresholdCount": {
              "description": "The number of consecutive successful health checks required before considering an unhealthy target healthy.",
              "type": "integer",
              "format": "int64",
              "maximum": 10,
              "minimum": 2
            },
            "intervalSeconds": {
              "description": "The approximate amount of time, in seconds, between health checks of an individual target.",
              "type": "integer",
              "format": "int64",
              "maximum": 300,
              "minimum": 5
            },
            "path": {
              "description": "The destination for health checks on the targets.",
              "type": "string"
            },
            "port": {
              "description": "The port used when performing health checks on targets. If not specified, health check defaults to the\nport that a target receives traffic on.",
              "type": "integer",
              "format": "int64",
              "maximum": 65535,
              "minimum": 1
            },
            "protocol": {
              "description": "The protocol used when performing health checks on targets.",
              "type": "string",
              "enum": [
                "HTTP",
                "HTTPS"
              ]
            },
            "protocolVersion": {
              "description": "The protocol version used when performing health checks on targets.",
              "type": "string",
              "enum": [
                "HTTP1",
                "HTTP2"
              ]
            },
            "statusMatch": {
              "description": "A regular expression to match HTTP status codes when checking for successful response from a target.",
              "type": "string"
            },
            "timeoutSeconds": {
              "description": "The amount of time, in seconds, to wait before reporting a target as unhealthy.",
              "type": "integer",
              "format": "int64",
              "maximum": 120,
              "minimum": 1
            },
            "unhealthyThresholdCount": {
              "description": "The number of consecutive failed health checks required before considering a target unhealthy.",
              "type": "integer",
              "format": "int64",
              "maximum": 10,
              "minimum": 2
            }
          },
          "additionalProperties": false
        },
        "protocol": {
          "description": "The protocol to use for routing traffic to the targets. Supported values are HTTP (default), HTTPS and TCP.\n\nChanges to this value results in a replacement of VPC Lattice target group.",
          "type": "string"
        },
        "protocolVersion": {
          "description": "The protocol version to use. Supported values are HTTP1 (default) and HTTP2.\nWhen a policy Protocol is TCP, you should not set this field. Otherwise, the whole TargetGroupPolicy will not take effect.\nWhen a policy is behind GRPCRoute, this field value will be ignored as GRPC is only supported through HTTP/2.\n\nChanges to this value results in a replacement of VPC Lattice target group.",
          "type": "string"
        },
        "targetRef": {
          "description": "TargetRef points to the kubernetes Service resource that will have this policy attached.\n\nThis field is following the guidelines of Kubernetes Gateway API policy attachment.",
          "type": "object",
          "required": [
            "group",
            "kind",
            "name"
          ],
          "properties": {
            "group": {
              "description": "Group is the group of the target resource.",
              "type": "string",
              "maxLength": 253,
              "pattern": "^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
            },
            "kind": {
              "description": "Kind is kind of the target resource.",
              "type": "string",
              "maxLength": 63,
              "minLength": 1,
              "pattern": "^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"
            },
            "name": {
              "description": "Name is the name of the target resource.",
              "type": "string",
              "maxLength": 253,
              "minLength": 1
            },
            "namespace": {
              "description": "Namespace is the namespace of the referent. When unspecified, the local\nnamespace is inferred. Even when policy targets a resource in a different\nnamespace, it MUST only apply to traffic originating from the same\nnamespace as the policy.",
              "type": "string",
              "maxLength": 63,
              "minLength": 1,
              "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "Status defines the current state of TargetGroupPolicy.",
      "type": "object",
      "default": {
        "conditions": [
          {
            "lastTransitionTime": "1970-01-01T00:00:00Z",
            "message": "Waiting for controller",
            "reason": "NotReconciled",
            "status": "Unknown",
            "type": "Accepted"
          }
        ]
      },
      "properties": {
        "conditions": {
          "description": "Conditions describe the current conditions of the TargetGroup.\n\nImplementations should prefer to express Policy conditions\nusing the `PolicyConditionType` and `PolicyConditionReason`\nconstants so that operators and tools can converge on a common\nvocabulary to describe TargetGroup state.\n\nKnown condition types are:\n\n* \"Accepted\"\n* \"Ready\"",
          "type": "array",
          "default": [
            {
              "lastTransitionTime": "1970-01-01T00:00:00Z",
              "message": "Waiting for controller",
              "reason": "Pending",
              "status": "Unknown",
              "type": "Accepted"
            },
            {
              "lastTransitionTime": "1970-01-01T00:00:00Z",
              "message": "Waiting for controller",
              "reason": "Pending",
              "status": "Unknown",
              "type": "Programmed"
            }
          ],
          "maxItems": 8,
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                "type": "string",
                "maxLength": 32768
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64",
                "minimum": 0
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                "type": "string",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "type": "string",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ]
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                "type": "string",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        }
      },
      "additionalProperties": false
    }
  }
}
