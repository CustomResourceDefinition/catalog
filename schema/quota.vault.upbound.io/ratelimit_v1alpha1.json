{
  "description": "RateLimit is the Schema for the RateLimits API. Manage Rate Limit Quota",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "RateLimitSpec defines the desired state of RateLimit",
      "type": "object",
      "required": [
        "forProvider"
      ],
      "properties": {
        "deletionPolicy": {
          "description": "DeletionPolicy specifies what will happen to the underlying external\nwhen this managed resource is deleted - either \"Delete\" or \"Orphan\" the\nexternal resource.\nThis field is planned to be deprecated in favor of the ManagementPolicies\nfield in a future release. Currently, both could be set independently and\nnon-default values would be honored if the feature flag is enabled.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223",
          "type": "string",
          "default": "Delete",
          "enum": [
            "Orphan",
            "Delete"
          ]
        },
        "forProvider": {
          "type": "object",
          "properties": {
            "blockInterval": {
              "description": "If set, when a client reaches a rate limit threshold, the client will\nbe prohibited from any further requests until after the 'block_interval' in seconds has elapsed.\nIf set, when a client reaches a rate limit threshold, the client will be prohibited from any further requests until after the 'block_interval' in seconds has elapsed.",
              "type": "number"
            },
            "groupBy": {
              "description": "Attribute used to group requests for rate limiting. Limits are enforced independently for each\ngroup. Valid group_by modes are: 1) ip that groups requests by their source IP address (group_by defaults to\nip if unset, which is the only supported mode in community edition); 2) none that groups together all requests\nthat match the rate limit quota rule; 3) entity_then_ip that groups requests by their entity ID for authenticated\nrequests that carry one, or by their IP for unauthenticated requests (or requests whose authentication is not\nconnected to an entity); and 4) entity_then_none which also groups requests by their entity ID when available, but\nthe rest is all grouped together (i.e. unauthenticated or with authentication not connected to an entity).\nAttribute used to group requests for rate limiting. Limits are enforced independently for each group. Valid group_by modes are: 1) \"ip\" that groups requests by their source IP address (group_by defaults to ip if unset); 2) \"none\" that groups all requests that match the rate limit quota rule together; 3) \"entity_then_ip\" that groups requests by their entity ID for authenticated requests that carry one, or by their IP for unauthenticated requests (or requests whose authentication is not connected to an entity); and 4) \"entity_then_none\" which also groups requests by their entity ID when available, but the rest is all grouped together (i.e. unauthenticated or with authentication not connected to an entity).",
              "type": "string"
            },
            "inheritable": {
              "description": "If set to true on a quota where path is set to a namespace, the same quota will be cumulatively applied to all child namespace. The inheritable parameter cannot be set to true if the path does not specify a namespace. Only the quotas associated with the root namespace are inheritable by default. Requires Vault 1.15+.\nIf set to true on a quota where path is set to a namespace, the same quota will be cumulatively applied to all child namespace. The inheritable parameter cannot be set to true if the path does not specify a namespace. Only the quotas associated with the root namespace are inheritable by default.",
              "type": "boolean"
            },
            "interval": {
              "description": "The duration in seconds to enforce rate limiting for.\nThe duration in seconds to enforce rate limiting for.",
              "type": "number"
            },
            "name": {
              "description": "Name of the rate limit quota\nThe name of the quota.",
              "type": "string"
            },
            "namespace": {
              "description": "The namespace to provision the resource in.\nThe value should not contain leading or trailing forward slashes.\nThe namespace is always relative to the provider's configured namespace.\nAvailable only for Vault Enterprise.\nTarget namespace. (requires Enterprise)",
              "type": "string"
            },
            "path": {
              "description": "Path of the mount or namespace to apply the quota. A blank path configures a\nglobal rate limit quota. For example namespace1/ adds a quota to a full namespace,\nnamespace1/auth/userpass adds a quota to userpass in namespace1.\nUpdating this field on an existing quota can have \"moving\" effects. For example, updating\nauth/userpass to namespace1/auth/userpass moves this quota from being a global mount quota to\na namespace specific mount quota. Note, namespaces are supported in Enterprise only.\nPath of the mount or namespace to apply the quota. A blank path configures a global rate limit quota.",
              "type": "string"
            },
            "rate": {
              "description": "The maximum number of requests at any given second to be allowed by the quota\nrule. The rate must be positive.\nThe maximum number of requests at any given second to be allowed by the quota rule. The rate must be positive.",
              "type": "number"
            },
            "role": {
              "description": "If set on a quota where path is set to an auth mount with a concept of roles (such as /auth/approle/), this will make the quota restrict login requests to that mount that are made with the specified role.\nIf set on a quota where path is set to an auth mount with a concept of roles (such as /auth/approle/), this will make the quota restrict login requests to that mount that are made with the specified role.",
              "type": "string"
            },
            "secondaryRate": {
              "description": "Can only be set for the group_by modes entity_then_ip or entity_then_none. This is\nthe rate limit applied to the requests that fall under the \"ip\" or \"none\" groupings, while the authenticated requests\nthat contain an entity ID are subject to the rate field instead. Defaults to the same value as rate.\nOnly available when using the \"entity_then_ip\" or \"entity_then_none\" group_by modes. This is the rate limit applied to the requests that fall under the \"ip\" or \"none\" groupings, while the authenticated requests that contain an entity ID are subject to the \"rate\" field instead. Defaults to the same value as \"rate\".",
              "type": "number"
            }
          },
          "additionalProperties": false
        },
        "initProvider": {
          "description": "THIS IS A BETA FIELD. It will be honored\nunless the Management Policies feature flag is disabled.\nInitProvider holds the same fields as ForProvider, with the exception\nof Identifier and other resource reference fields. The fields that are\nin InitProvider are merged into ForProvider when the resource is created.\nThe same fields are also added to the terraform ignore_changes hook, to\navoid updating them after creation. This is useful for fields that are\nrequired on creation, but we do not desire to update them after creation,\nfor example because of an external controller is managing them, like an\nautoscaler.",
          "type": "object",
          "properties": {
            "blockInterval": {
              "description": "If set, when a client reaches a rate limit threshold, the client will\nbe prohibited from any further requests until after the 'block_interval' in seconds has elapsed.\nIf set, when a client reaches a rate limit threshold, the client will be prohibited from any further requests until after the 'block_interval' in seconds has elapsed.",
              "type": "number"
            },
            "groupBy": {
              "description": "Attribute used to group requests for rate limiting. Limits are enforced independently for each\ngroup. Valid group_by modes are: 1) ip that groups requests by their source IP address (group_by defaults to\nip if unset, which is the only supported mode in community edition); 2) none that groups together all requests\nthat match the rate limit quota rule; 3) entity_then_ip that groups requests by their entity ID for authenticated\nrequests that carry one, or by their IP for unauthenticated requests (or requests whose authentication is not\nconnected to an entity); and 4) entity_then_none which also groups requests by their entity ID when available, but\nthe rest is all grouped together (i.e. unauthenticated or with authentication not connected to an entity).\nAttribute used to group requests for rate limiting. Limits are enforced independently for each group. Valid group_by modes are: 1) \"ip\" that groups requests by their source IP address (group_by defaults to ip if unset); 2) \"none\" that groups all requests that match the rate limit quota rule together; 3) \"entity_then_ip\" that groups requests by their entity ID for authenticated requests that carry one, or by their IP for unauthenticated requests (or requests whose authentication is not connected to an entity); and 4) \"entity_then_none\" which also groups requests by their entity ID when available, but the rest is all grouped together (i.e. unauthenticated or with authentication not connected to an entity).",
              "type": "string"
            },
            "inheritable": {
              "description": "If set to true on a quota where path is set to a namespace, the same quota will be cumulatively applied to all child namespace. The inheritable parameter cannot be set to true if the path does not specify a namespace. Only the quotas associated with the root namespace are inheritable by default. Requires Vault 1.15+.\nIf set to true on a quota where path is set to a namespace, the same quota will be cumulatively applied to all child namespace. The inheritable parameter cannot be set to true if the path does not specify a namespace. Only the quotas associated with the root namespace are inheritable by default.",
              "type": "boolean"
            },
            "interval": {
              "description": "The duration in seconds to enforce rate limiting for.\nThe duration in seconds to enforce rate limiting for.",
              "type": "number"
            },
            "name": {
              "description": "Name of the rate limit quota\nThe name of the quota.",
              "type": "string"
            },
            "namespace": {
              "description": "The namespace to provision the resource in.\nThe value should not contain leading or trailing forward slashes.\nThe namespace is always relative to the provider's configured namespace.\nAvailable only for Vault Enterprise.\nTarget namespace. (requires Enterprise)",
              "type": "string"
            },
            "path": {
              "description": "Path of the mount or namespace to apply the quota. A blank path configures a\nglobal rate limit quota. For example namespace1/ adds a quota to a full namespace,\nnamespace1/auth/userpass adds a quota to userpass in namespace1.\nUpdating this field on an existing quota can have \"moving\" effects. For example, updating\nauth/userpass to namespace1/auth/userpass moves this quota from being a global mount quota to\na namespace specific mount quota. Note, namespaces are supported in Enterprise only.\nPath of the mount or namespace to apply the quota. A blank path configures a global rate limit quota.",
              "type": "string"
            },
            "rate": {
              "description": "The maximum number of requests at any given second to be allowed by the quota\nrule. The rate must be positive.\nThe maximum number of requests at any given second to be allowed by the quota rule. The rate must be positive.",
              "type": "number"
            },
            "role": {
              "description": "If set on a quota where path is set to an auth mount with a concept of roles (such as /auth/approle/), this will make the quota restrict login requests to that mount that are made with the specified role.\nIf set on a quota where path is set to an auth mount with a concept of roles (such as /auth/approle/), this will make the quota restrict login requests to that mount that are made with the specified role.",
              "type": "string"
            },
            "secondaryRate": {
              "description": "Can only be set for the group_by modes entity_then_ip or entity_then_none. This is\nthe rate limit applied to the requests that fall under the \"ip\" or \"none\" groupings, while the authenticated requests\nthat contain an entity ID are subject to the rate field instead. Defaults to the same value as rate.\nOnly available when using the \"entity_then_ip\" or \"entity_then_none\" group_by modes. This is the rate limit applied to the requests that fall under the \"ip\" or \"none\" groupings, while the authenticated requests that contain an entity ID are subject to the \"rate\" field instead. Defaults to the same value as \"rate\".",
              "type": "number"
            }
          },
          "additionalProperties": false
        },
        "managementPolicies": {
          "description": "THIS IS A BETA FIELD. It is on by default but can be opted out\nthrough a Crossplane feature flag.\nManagementPolicies specify the array of actions Crossplane is allowed to\ntake on the managed and external resources.\nThis field is planned to replace the DeletionPolicy field in a future\nrelease. Currently, both could be set independently and non-default\nvalues would be honored if the feature flag is enabled. If both are\ncustom, the DeletionPolicy field will be ignored.\nSee the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223\nand this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md",
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "description": "A ManagementAction represents an action that the Crossplane controllers\ncan take on an external resource.",
            "type": "string",
            "enum": [
              "Observe",
              "Create",
              "Update",
              "Delete",
              "LateInitialize",
              "*"
            ]
          }
        },
        "providerConfigRef": {
          "description": "ProviderConfigReference specifies how the provider that will be used to\ncreate, observe, update, and delete this managed resource should be\nconfigured.",
          "type": "object",
          "default": {
            "name": "default"
          },
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name of the referenced object.",
              "type": "string"
            },
            "policy": {
              "description": "Policies for referencing.",
              "type": "object",
              "properties": {
                "resolution": {
                  "description": "Resolution specifies whether resolution of this reference is required.\nThe default is 'Required', which means the reconcile will fail if the\nreference cannot be resolved. 'Optional' means this reference will be\na no-op if it cannot be resolved.",
                  "type": "string",
                  "default": "Required",
                  "enum": [
                    "Required",
                    "Optional"
                  ]
                },
                "resolve": {
                  "description": "Resolve specifies when this reference should be resolved. The default\nis 'IfNotPresent', which will attempt to resolve the reference only when\nthe corresponding field is not present. Use 'Always' to resolve the\nreference on every reconcile.",
                  "type": "string",
                  "enum": [
                    "Always",
                    "IfNotPresent"
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "writeConnectionSecretToRef": {
          "description": "WriteConnectionSecretToReference specifies the namespace and name of a\nSecret to which any connection details for this managed resource should\nbe written. Connection details frequently include the endpoint, username,\nand password required to connect to the managed resource.",
          "type": "object",
          "required": [
            "name",
            "namespace"
          ],
          "properties": {
            "name": {
              "description": "Name of the secret.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the secret.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false,
      "x-kubernetes-validations": [
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.name))",
          "message": "spec.forProvider.name is a required parameter"
        },
        {
          "rule": "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.rate) || (has(self.initProvider) \u0026\u0026 has(self.initProvider.rate))",
          "message": "spec.forProvider.rate is a required parameter"
        }
      ]
    },
    "status": {
      "description": "RateLimitStatus defines the observed state of RateLimit.",
      "type": "object",
      "properties": {
        "atProvider": {
          "type": "object",
          "properties": {
            "blockInterval": {
              "description": "If set, when a client reaches a rate limit threshold, the client will\nbe prohibited from any further requests until after the 'block_interval' in seconds has elapsed.\nIf set, when a client reaches a rate limit threshold, the client will be prohibited from any further requests until after the 'block_interval' in seconds has elapsed.",
              "type": "number"
            },
            "groupBy": {
              "description": "Attribute used to group requests for rate limiting. Limits are enforced independently for each\ngroup. Valid group_by modes are: 1) ip that groups requests by their source IP address (group_by defaults to\nip if unset, which is the only supported mode in community edition); 2) none that groups together all requests\nthat match the rate limit quota rule; 3) entity_then_ip that groups requests by their entity ID for authenticated\nrequests that carry one, or by their IP for unauthenticated requests (or requests whose authentication is not\nconnected to an entity); and 4) entity_then_none which also groups requests by their entity ID when available, but\nthe rest is all grouped together (i.e. unauthenticated or with authentication not connected to an entity).\nAttribute used to group requests for rate limiting. Limits are enforced independently for each group. Valid group_by modes are: 1) \"ip\" that groups requests by their source IP address (group_by defaults to ip if unset); 2) \"none\" that groups all requests that match the rate limit quota rule together; 3) \"entity_then_ip\" that groups requests by their entity ID for authenticated requests that carry one, or by their IP for unauthenticated requests (or requests whose authentication is not connected to an entity); and 4) \"entity_then_none\" which also groups requests by their entity ID when available, but the rest is all grouped together (i.e. unauthenticated or with authentication not connected to an entity).",
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "inheritable": {
              "description": "If set to true on a quota where path is set to a namespace, the same quota will be cumulatively applied to all child namespace. The inheritable parameter cannot be set to true if the path does not specify a namespace. Only the quotas associated with the root namespace are inheritable by default. Requires Vault 1.15+.\nIf set to true on a quota where path is set to a namespace, the same quota will be cumulatively applied to all child namespace. The inheritable parameter cannot be set to true if the path does not specify a namespace. Only the quotas associated with the root namespace are inheritable by default.",
              "type": "boolean"
            },
            "interval": {
              "description": "The duration in seconds to enforce rate limiting for.\nThe duration in seconds to enforce rate limiting for.",
              "type": "number"
            },
            "name": {
              "description": "Name of the rate limit quota\nThe name of the quota.",
              "type": "string"
            },
            "namespace": {
              "description": "The namespace to provision the resource in.\nThe value should not contain leading or trailing forward slashes.\nThe namespace is always relative to the provider's configured namespace.\nAvailable only for Vault Enterprise.\nTarget namespace. (requires Enterprise)",
              "type": "string"
            },
            "path": {
              "description": "Path of the mount or namespace to apply the quota. A blank path configures a\nglobal rate limit quota. For example namespace1/ adds a quota to a full namespace,\nnamespace1/auth/userpass adds a quota to userpass in namespace1.\nUpdating this field on an existing quota can have \"moving\" effects. For example, updating\nauth/userpass to namespace1/auth/userpass moves this quota from being a global mount quota to\na namespace specific mount quota. Note, namespaces are supported in Enterprise only.\nPath of the mount or namespace to apply the quota. A blank path configures a global rate limit quota.",
              "type": "string"
            },
            "rate": {
              "description": "The maximum number of requests at any given second to be allowed by the quota\nrule. The rate must be positive.\nThe maximum number of requests at any given second to be allowed by the quota rule. The rate must be positive.",
              "type": "number"
            },
            "role": {
              "description": "If set on a quota where path is set to an auth mount with a concept of roles (such as /auth/approle/), this will make the quota restrict login requests to that mount that are made with the specified role.\nIf set on a quota where path is set to an auth mount with a concept of roles (such as /auth/approle/), this will make the quota restrict login requests to that mount that are made with the specified role.",
              "type": "string"
            },
            "secondaryRate": {
              "description": "Can only be set for the group_by modes entity_then_ip or entity_then_none. This is\nthe rate limit applied to the requests that fall under the \"ip\" or \"none\" groupings, while the authenticated requests\nthat contain an entity ID are subject to the rate field instead. Defaults to the same value as rate.\nOnly available when using the \"entity_then_ip\" or \"entity_then_none\" group_by modes. This is the rate limit applied to the requests that fall under the \"ip\" or \"none\" groupings, while the authenticated requests that contain an entity ID are subject to the \"rate\" field instead. Defaults to the same value as \"rate\".",
              "type": "number"
            }
          },
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions of the resource.",
          "type": "array",
          "items": {
            "description": "A Condition that may apply to a resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time this condition transitioned from one\nstatus to another.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "A Message containing details about this condition's last transition from\none status to another, if any.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64"
              },
              "reason": {
                "description": "A Reason for this condition's last transition from one status to another.",
                "type": "string"
              },
              "status": {
                "description": "Status of this condition; is it currently True, False, or Unknown?",
                "type": "string"
              },
              "type": {
                "description": "Type of this condition. At most one of each condition type may apply to\na resource at any point in time.",
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest metadata.generation\nwhich resulted in either a ready state, or stalled due to error\nit can not recover from without human intervention.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    }
  }
}
