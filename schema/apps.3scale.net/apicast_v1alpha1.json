{
  "description": "APIcast is the Schema for the apicasts API.",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "APIcastSpec defines the desired state of APIcast.",
      "type": "object",
      "anyOf": [
        {
          "required": [
            "adminPortalCredentialsRef"
          ]
        },
        {
          "required": [
            "embeddedConfigurationSecretRef"
          ]
        }
      ],
      "properties": {
        "adminPortalCredentialsRef": {
          "description": "Secret reference to a Kubernetes Secret containing the admin portal endpoint URL. The Secret must be located in the same namespace.",
          "type": "object",
          "properties": {
            "name": {
              "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
              "type": "string"
            }
          },
          "additionalProperties": false,
          "x-kubernetes-map-type": "atomic"
        },
        "allProxy": {
          "description": "AllProxy specifies a HTTP(S) proxy to be used for connecting to services if a protocol-specific proxy is not specified. Authentication is not supported. Format is \u003cscheme\u003e://\u003chost\u003e:\u003cport\u003e",
          "type": "string"
        },
        "cacheConfigurationSeconds": {
          "description": "The period (in seconds) that the APIcast configuration will be stored in APIcast's cache.",
          "type": "integer",
          "format": "int64"
        },
        "cacheMaxTime": {
          "description": "CacheMaxTime indicates the maximum time to be cached. If cache-control header is not set, the time to be cached will be the defined one.",
          "type": "string"
        },
        "cacheStatusCodes": {
          "description": "CacheStatusCodes defines the status codes for which the response content will be cached.",
          "type": "string"
        },
        "configurationLoadMode": {
          "description": "ConfigurationLoadMode can be used to set APIcast's configuration load mode.",
          "type": "string",
          "enum": [
            "boot",
            "lazy"
          ]
        },
        "customEnvironments": {
          "description": "CustomEnvironments specifies an array of defined custome environments to be loaded",
          "type": "array",
          "items": {
            "description": "CustomEnvironmentSpec contains or has reference to an APIcast custom environment",
            "type": "object",
            "required": [
              "secretRef"
            ],
            "properties": {
              "secretRef": {
                "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                    "type": "string"
                  }
                },
                "additionalProperties": false,
                "x-kubernetes-map-type": "atomic"
              }
            },
            "additionalProperties": false
          }
        },
        "customPolicies": {
          "description": "CustomPolicies specifies an array of defined custome policies to be loaded",
          "type": "array",
          "items": {
            "description": "CustomPolicySpec contains or has reference to an APIcast custom policy",
            "type": "object",
            "required": [
              "name",
              "secretRef",
              "version"
            ],
            "properties": {
              "name": {
                "description": "Name specifies the name of the custom policy",
                "type": "string"
              },
              "secretRef": {
                "description": "SecretRef specifies the secret holding the custom policy metadata and lua code",
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                    "type": "string"
                  }
                },
                "additionalProperties": false,
                "x-kubernetes-map-type": "atomic"
              },
              "version": {
                "description": "Version specifies the name of the custom policy",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "deploymentEnvironment": {
          "description": "DeploymentEnvironment is the environment for which the configuration will be downloaded from 3scale (Staging or Production), when using APIcast. The value will also be used in the header X-3scale-User-Agent in the authorize/report requests made to 3scale Service Management API. It is used by 3scale for statistics.",
          "type": "string"
        },
        "dnsResolverAddress": {
          "description": "DNSResolverAddress can be used to specify a custom DNS resolver address to be used by OpenResty.",
          "type": "string"
        },
        "embeddedConfigurationSecretRef": {
          "description": "Secret reference to a Kubernetes secret containing the gateway configuration. The Secret must be located in the same namespace.",
          "type": "object",
          "properties": {
            "name": {
              "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
              "type": "string"
            }
          },
          "additionalProperties": false,
          "x-kubernetes-map-type": "atomic"
        },
        "enabledServices": {
          "description": "EnabledServices can be used to specify a list of service IDs used to filter the configured services.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "exposedHost": {
          "description": "ExposedHost is the domain name used for external access. By default no external access is configured.",
          "type": "object",
          "required": [
            "host"
          ],
          "properties": {
            "host": {
              "type": "string"
            },
            "tls": {
              "type": "array",
              "items": {
                "description": "IngressTLS describes the transport layer security associated with an ingress.",
                "type": "object",
                "properties": {
                  "hosts": {
                    "description": "hosts is a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "x-kubernetes-list-type": "atomic"
                  },
                  "secretName": {
                    "description": "secretName is the name of the secret used to terminate TLS traffic on port 443. Field is left optional to allow TLS routing based on SNI hostname alone. If the SNI host in a listener conflicts with the \"Host\" header field used by an IngressRule, the SNI host is used for termination and value of the \"Host\" header is used for routing.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "additionalProperties": false
        },
        "extendedMetrics": {
          "description": "ExtendedMetrics enables additional information on Prometheus metrics; some labels will be used with specific information that will provide more in-depth details about APIcast.",
          "type": "boolean"
        },
        "hpa": {
          "description": "Enables/disables HPA",
          "type": "boolean"
        },
        "httpProxy": {
          "description": "HTTPProxy specifies a HTTP(S) Proxy to be used for connecting to HTTP services. Authentication is not supported. Format is \u003cscheme\u003e://\u003chost\u003e:\u003cport\u003e",
          "type": "string"
        },
        "httpsCertificateSecretRef": {
          "description": "HTTPSCertificateSecretRef references secret containing the X.509 certificate in the PEM format and the X.509 certificate secret key.",
          "type": "object",
          "properties": {
            "name": {
              "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
              "type": "string"
            }
          },
          "additionalProperties": false,
          "x-kubernetes-map-type": "atomic"
        },
        "httpsPort": {
          "description": "HttpsPort controls on which port APIcast should start listening for HTTPS connections. If this clashes with HTTP port it will be used only for HTTPS.",
          "type": "integer",
          "format": "int32"
        },
        "httpsProxy": {
          "description": "HTTPSProxy specifies a HTTP(S) Proxy to be used for connecting to HTTPS services. Authentication is not supported. Format is \u003cscheme\u003e://\u003chost\u003e:\u003cport\u003e",
          "type": "string"
        },
        "httpsVerifyDepth": {
          "description": "HTTPSVerifyDepth defines the maximum length of the client certificate chain.",
          "type": "integer",
          "format": "int64",
          "minimum": 0
        },
        "image": {
          "description": "Image allows overriding the default APIcast gateway container image. This setting should only be used for dev/testing purposes. Setting this disables automated upgrades of the image.",
          "type": "string"
        },
        "loadServicesWhenNeeded": {
          "description": "LoadServicesWhenNeeded makes the configurations to be loaded lazily. APIcast will only load the ones configured for the host specified in the host header of the request.",
          "type": "boolean"
        },
        "logLevel": {
          "description": "LogLevel controls the log level of APIcast's OpenResty logs.",
          "type": "string",
          "enum": [
            "debug",
            "info",
            "notice",
            "warn",
            "error",
            "crit",
            "alert",
            "emerg"
          ]
        },
        "managementAPIScope": {
          "description": "ManagementAPIScope controls APIcast Management API scope. The Management API is powerful and can control the APIcast configuration. debug level should only be enabled for debugging purposes.",
          "type": "string",
          "enum": [
            "disabled",
            "status",
            "policies",
            "debug"
          ]
        },
        "noProxy": {
          "description": "NoProxy specifies a comma-separated list of hostnames and domain names for which the requests should not be proxied. Setting to a single * character, which matches all hosts, effectively disables the proxy.",
          "type": "string"
        },
        "oidcLogLevel": {
          "description": "OidcLogLevel allows to set the log level for the logs related to OpenID Connect integration.",
          "type": "string",
          "enum": [
            "debug",
            "info",
            "notice",
            "warn",
            "error",
            "crit",
            "alert",
            "emerg"
          ]
        },
        "openSSLPeerVerificationEnabled": {
          "description": "OpenSSLPeerVerificationEnabled controls OpenSSL peer verification.",
          "type": "boolean"
        },
        "openTelemetry": {
          "description": "OpenTelemetry contains the gateway instrumentation configuration with APIcast.",
          "type": "object",
          "properties": {
            "enabled": {
              "description": "Enabled controls whether OpenTelemetry integration with APIcast is enabled. By default it is not enabled.",
              "type": "boolean"
            },
            "tracingConfigSecretKey": {
              "description": "TracingConfigSecretKey contains the key of the secret to select the configuration from. if unspecified, the first secret key in lexicographical order will be selected.",
              "type": "string"
            },
            "tracingConfigSecretRef": {
              "description": "TracingConfigSecretRef contains a Secret reference the Opentelemetry configuration. The configuration file specification is defined in the Nginx instrumentation library repo https://github.com/open-telemetry/opentelemetry-cpp-contrib/tree/main/instrumentation/nginx",
              "type": "object",
              "properties": {
                "name": {
                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                  "type": "string"
                }
              },
              "additionalProperties": false,
              "x-kubernetes-map-type": "atomic"
            }
          },
          "additionalProperties": false
        },
        "openTracing": {
          "description": "OpenTracingSpec contains the OpenTracing integration configuration with APIcast. Deprecated",
          "type": "object",
          "properties": {
            "enabled": {
              "description": "Enabled controls whether OpenTracing integration with APIcast is enabled. By default it is not enabled.",
              "type": "boolean"
            },
            "tracingConfigSecretRef": {
              "description": "TracingConfigSecretRef contains a Secret reference the OpenTracing configuration. Each supported tracing library provides a default configuration file that is used if TracingConfig is not specified.",
              "type": "object",
              "properties": {
                "name": {
                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                  "type": "string"
                }
              },
              "additionalProperties": false,
              "x-kubernetes-map-type": "atomic"
            },
            "tracingLibrary": {
              "description": "TracingLibrary controls which OpenTracing library is loaded. At the moment the only supported tracer is `jaeger`. If not set, `jaeger` will be used.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "pathRoutingEnabled": {
          "description": "PathRoutingEnabled can be used to enable APIcast's path-based routing in addition to to the default host-based routing.",
          "type": "boolean"
        },
        "replicas": {
          "description": "Number of replicas of the APIcast Deployment.",
          "type": "integer",
          "format": "int64"
        },
        "resources": {
          "description": "Resources can be used to set custom compute Kubernetes Resource Requirements for the APIcast deployment.",
          "type": "object",
          "properties": {
            "claims": {
              "description": "Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. \n This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. \n This field is immutable. It can only be set for containers.",
              "type": "array",
              "items": {
                "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              },
              "x-kubernetes-list-map-keys": [
                "name"
              ],
              "x-kubernetes-list-type": "map"
            },
            "limits": {
              "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
              "type": "object",
              "additionalProperties": {
                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "string"
                  }
                ],
                "x-kubernetes-int-or-string": true
              }
            },
            "requests": {
              "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
              "type": "object",
              "additionalProperties": {
                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "string"
                  }
                ],
                "x-kubernetes-int-or-string": true
              }
            }
          },
          "additionalProperties": false
        },
        "responseCodesIncluded": {
          "description": "ResponseCodesIncluded can be set to log the response codes of the responses in Apisonator, so they can then be visualized in the 3scale admin portal.",
          "type": "boolean"
        },
        "serviceAccount": {
          "description": "Kubernetes Service Account name to be used for the APIcast Deployment. The Service Account must exist beforehand.",
          "type": "string"
        },
        "serviceCacheSize": {
          "description": "ServiceCacheSize specifies the number of services that APICast can store in the internal cache",
          "type": "integer",
          "format": "int32"
        },
        "serviceConfigurationVersionOverride": {
          "description": "ServiceConfigurationVersionOverride contains service configuration version map to prevent it from auto-updating.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "servicesFilterByURL": {
          "description": "ServicesFilterByURL is used to filter the service configured in the 3scale API Manager, the filter matches with the public base URL (Staging or production).",
          "type": "string"
        },
        "timezone": {
          "description": "Timezone specifies the local timezone of the APIcast deployment pods. A timezone value available in the TZ database must be set.",
          "type": "string"
        },
        "upstreamRetryCases": {
          "description": "UpstreamRetryCases Used only when the retry policy is configured. Specified in which cases a request to the upstream API should be retried.",
          "type": "string",
          "enum": [
            "error",
            "timeout",
            "invalid_header",
            "http_500",
            "http_502",
            "http_503",
            "http_504",
            "http_403",
            "http_404",
            "http_429",
            "non_idempotent",
            "off"
          ]
        },
        "workers": {
          "description": "Workers defines the number of APIcast's worker processes per pod.",
          "type": "integer",
          "format": "int32",
          "minimum": 1
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "APIcastStatus defines the observed state of APIcast.",
      "type": "object",
      "properties": {
        "conditions": {
          "description": "Represents the observations of a foo's current state. Known .status.conditions.type are: \"Available\"",
          "type": "array",
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
                "type": "string",
                "maxLength": 32768
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
                "type": "integer",
                "format": "int64",
                "minimum": 0
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
                "type": "string",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "type": "string",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ]
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                "type": "string",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "image": {
          "description": "The image being used in the APIcast deployment.",
          "type": "string"
        },
        "observedGeneration": {
          "description": "ObservedGeneration reflects the generation of the most recently observed spec.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    }
  }
}
