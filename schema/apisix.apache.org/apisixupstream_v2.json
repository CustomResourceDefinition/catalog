{
  "description": "ApisixUpstream is the Schema for the apisixupstreams API.",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "ApisixUpstreamSpec describes the specification of ApisixUpstream.",
      "type": "object",
      "properties": {
        "discovery": {
          "description": "Deprecated: this is no longer support on standalone mode.\nDiscovery is used to configure service discovery for upstream.",
          "type": "object",
          "required": [
            "serviceName",
            "type"
          ],
          "properties": {
            "args": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "serviceName": {
              "type": "string"
            },
            "type": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "externalNodes": {
          "description": "ExternalNodes contains external nodes the Upstream should use\nIf this field is set, the upstream will use these nodes directly without any further resolves",
          "type": "array",
          "minItems": 1,
          "items": {
            "description": "ApisixUpstreamExternalNode is the external node conf",
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "port": {
                "description": "Port defines the port of the external node",
                "type": "integer"
              },
              "type": {
                "description": "ApisixUpstreamExternalType is the external service type",
                "type": "string"
              },
              "weight": {
                "type": "integer"
              }
            },
            "additionalProperties": false
          }
        },
        "healthCheck": {
          "description": "Deprecated: this is no longer support on standalone mode.\nThe health check configurations for the upstream.",
          "type": "object",
          "required": [
            "active"
          ],
          "properties": {
            "active": {
              "description": "ActiveHealthCheck defines the active kind of upstream health check.",
              "type": "object",
              "properties": {
                "concurrency": {
                  "type": "integer",
                  "minimum": 0
                },
                "healthy": {
                  "description": "ActiveHealthCheckHealthy defines the conditions to judge whether\nan upstream node is healthy with the active manner.",
                  "type": "object",
                  "properties": {
                    "httpCodes": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "integer"
                      }
                    },
                    "interval": {
                      "type": "string"
                    },
                    "successes": {
                      "type": "integer",
                      "maximum": 254,
                      "minimum": 0
                    }
                  },
                  "additionalProperties": false
                },
                "host": {
                  "type": "string"
                },
                "httpPath": {
                  "type": "string"
                },
                "port": {
                  "type": "integer",
                  "format": "int32",
                  "maximum": 65535,
                  "minimum": 0
                },
                "requestHeaders": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "strictTLS": {
                  "type": "boolean"
                },
                "timeout": {
                  "description": "A Duration represents the elapsed time between two instants\nas an int64 nanosecond count. The representation limits the\nlargest representable duration to approximately 290 years.",
                  "type": "integer",
                  "format": "int64"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "http",
                    "https",
                    "tcp"
                  ]
                },
                "unhealthy": {
                  "description": "ActiveHealthCheckUnhealthy defines the conditions to judge whether\nan upstream node is unhealthy with the active manager.",
                  "type": "object",
                  "properties": {
                    "httpCodes": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "integer"
                      }
                    },
                    "httpFailures": {
                      "type": "integer",
                      "maximum": 254,
                      "minimum": 0
                    },
                    "interval": {
                      "type": "string"
                    },
                    "tcpFailures": {
                      "type": "integer",
                      "maximum": 254,
                      "minimum": 0
                    },
                    "timeout": {
                      "type": "integer"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "passive": {
              "description": "PassiveHealthCheck defines the conditions to judge whether\nan upstream node is healthy with the passive manager.",
              "type": "object",
              "properties": {
                "healthy": {
                  "description": "PassiveHealthCheckHealthy defines the conditions to judge whether\nan upstream node is healthy with the passive manner.",
                  "type": "object",
                  "properties": {
                    "httpCodes": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "integer"
                      }
                    },
                    "successes": {
                      "type": "integer",
                      "maximum": 254,
                      "minimum": 0
                    }
                  },
                  "additionalProperties": false
                },
                "type": {
                  "type": "string"
                },
                "unhealthy": {
                  "description": "PassiveHealthCheckUnhealthy defines the conditions to judge whether\nan upstream node is unhealthy with the passive manager.",
                  "type": "object",
                  "properties": {
                    "httpCodes": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "integer"
                      }
                    },
                    "httpFailures": {
                      "type": "integer",
                      "maximum": 254,
                      "minimum": 0
                    },
                    "tcpFailures": {
                      "type": "integer",
                      "maximum": 254,
                      "minimum": 0
                    },
                    "timeout": {
                      "type": "integer"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "ingressClassName": {
          "description": "IngressClassName is the name of an IngressClass cluster resource.\ncontroller implementations use this field to know whether they should be\nserving this ApisixUpstream resource, by a transitive connection\n(controller -\u003e IngressClass -\u003e ApisixUpstream resource).",
          "type": "string"
        },
        "loadbalancer": {
          "description": "LoadBalancer represents the load balancer configuration for Kubernetes Service.\nThe default strategy is round robin.",
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "hashOn": {
              "description": "The HashOn and Key fields are required when Type is \"chash\".\nHashOn represents the key fetching scope.",
              "type": "string"
            },
            "key": {
              "description": "Key represents the hash key.",
              "type": "string"
            },
            "type": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "passHost": {
          "description": "Configures the host when the request is forwarded to the upstream.\nCan be one of pass, node or rewrite.",
          "type": "string",
          "enum": [
            "pass",
            "node",
            "rewrite"
          ]
        },
        "portLevelSettings": {
          "type": "array",
          "items": {
            "description": "PortLevelSettings configures the ApisixUpstreamConfig for each individual port. It inherits\nconfigurations from the outer level (the whole Kubernetes Service) and overrides some of\nthem if they are set on the port level.",
            "type": "object",
            "required": [
              "port"
            ],
            "properties": {
              "discovery": {
                "description": "Deprecated: this is no longer support on standalone mode.\nDiscovery is used to configure service discovery for upstream.",
                "type": "object",
                "required": [
                  "serviceName",
                  "type"
                ],
                "properties": {
                  "args": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "serviceName": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              },
              "healthCheck": {
                "description": "Deprecated: this is no longer support on standalone mode.\nThe health check configurations for the upstream.",
                "type": "object",
                "required": [
                  "active"
                ],
                "properties": {
                  "active": {
                    "description": "ActiveHealthCheck defines the active kind of upstream health check.",
                    "type": "object",
                    "properties": {
                      "concurrency": {
                        "type": "integer",
                        "minimum": 0
                      },
                      "healthy": {
                        "description": "ActiveHealthCheckHealthy defines the conditions to judge whether\nan upstream node is healthy with the active manner.",
                        "type": "object",
                        "properties": {
                          "httpCodes": {
                            "type": "array",
                            "minItems": 1,
                            "items": {
                              "type": "integer"
                            }
                          },
                          "interval": {
                            "type": "string"
                          },
                          "successes": {
                            "type": "integer",
                            "maximum": 254,
                            "minimum": 0
                          }
                        },
                        "additionalProperties": false
                      },
                      "host": {
                        "type": "string"
                      },
                      "httpPath": {
                        "type": "string"
                      },
                      "port": {
                        "type": "integer",
                        "format": "int32",
                        "maximum": 65535,
                        "minimum": 0
                      },
                      "requestHeaders": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "strictTLS": {
                        "type": "boolean"
                      },
                      "timeout": {
                        "description": "A Duration represents the elapsed time between two instants\nas an int64 nanosecond count. The representation limits the\nlargest representable duration to approximately 290 years.",
                        "type": "integer",
                        "format": "int64"
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "http",
                          "https",
                          "tcp"
                        ]
                      },
                      "unhealthy": {
                        "description": "ActiveHealthCheckUnhealthy defines the conditions to judge whether\nan upstream node is unhealthy with the active manager.",
                        "type": "object",
                        "properties": {
                          "httpCodes": {
                            "type": "array",
                            "minItems": 1,
                            "items": {
                              "type": "integer"
                            }
                          },
                          "httpFailures": {
                            "type": "integer",
                            "maximum": 254,
                            "minimum": 0
                          },
                          "interval": {
                            "type": "string"
                          },
                          "tcpFailures": {
                            "type": "integer",
                            "maximum": 254,
                            "minimum": 0
                          },
                          "timeout": {
                            "type": "integer"
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  },
                  "passive": {
                    "description": "PassiveHealthCheck defines the conditions to judge whether\nan upstream node is healthy with the passive manager.",
                    "type": "object",
                    "properties": {
                      "healthy": {
                        "description": "PassiveHealthCheckHealthy defines the conditions to judge whether\nan upstream node is healthy with the passive manner.",
                        "type": "object",
                        "properties": {
                          "httpCodes": {
                            "type": "array",
                            "minItems": 1,
                            "items": {
                              "type": "integer"
                            }
                          },
                          "successes": {
                            "type": "integer",
                            "maximum": 254,
                            "minimum": 0
                          }
                        },
                        "additionalProperties": false
                      },
                      "type": {
                        "type": "string"
                      },
                      "unhealthy": {
                        "description": "PassiveHealthCheckUnhealthy defines the conditions to judge whether\nan upstream node is unhealthy with the passive manager.",
                        "type": "object",
                        "properties": {
                          "httpCodes": {
                            "type": "array",
                            "minItems": 1,
                            "items": {
                              "type": "integer"
                            }
                          },
                          "httpFailures": {
                            "type": "integer",
                            "maximum": 254,
                            "minimum": 0
                          },
                          "tcpFailures": {
                            "type": "integer",
                            "maximum": 254,
                            "minimum": 0
                          },
                          "timeout": {
                            "type": "integer"
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              },
              "loadbalancer": {
                "description": "LoadBalancer represents the load balancer configuration for Kubernetes Service.\nThe default strategy is round robin.",
                "type": "object",
                "required": [
                  "type"
                ],
                "properties": {
                  "hashOn": {
                    "description": "The HashOn and Key fields are required when Type is \"chash\".\nHashOn represents the key fetching scope.",
                    "type": "string"
                  },
                  "key": {
                    "description": "Key represents the hash key.",
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              },
              "passHost": {
                "description": "Configures the host when the request is forwarded to the upstream.\nCan be one of pass, node or rewrite.",
                "type": "string",
                "enum": [
                  "pass",
                  "node",
                  "rewrite"
                ]
              },
              "port": {
                "description": "Port is a Kubernetes Service port, it should be already defined.",
                "type": "integer",
                "format": "int32"
              },
              "retries": {
                "description": "How many times that the proxy (Apache APISIX) should do when\nerrors occur (error, timeout or bad http status codes like 500, 502).",
                "type": "integer",
                "format": "int64"
              },
              "scheme": {
                "description": "The scheme used to talk with the upstream.\nNow value can be http, grpc.",
                "type": "string",
                "enum": [
                  "http",
                  "https",
                  "grpc",
                  "grpcs"
                ]
              },
              "subsets": {
                "description": "Subsets groups the service endpoints by their labels. Usually used to differentiate\nservice versions.",
                "type": "array",
                "items": {
                  "description": "ApisixUpstreamSubset defines a single endpoints group of one Service.",
                  "type": "object",
                  "required": [
                    "labels",
                    "name"
                  ],
                  "properties": {
                    "labels": {
                      "description": "Labels is the label set of this subset.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "name": {
                      "description": "Name is the name of subset.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "timeout": {
                "description": "Timeout settings for the read, send and connect to the upstream.",
                "type": "object",
                "properties": {
                  "connect": {
                    "type": "string"
                  },
                  "read": {
                    "type": "string"
                  },
                  "send": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              },
              "tlsSecret": {
                "description": "Set the client certificate when connecting to TLS upstream.",
                "type": "object",
                "required": [
                  "name",
                  "namespace"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1
                  },
                  "namespace": {
                    "type": "string",
                    "minLength": 1
                  }
                },
                "additionalProperties": false
              },
              "upstreamHost": {
                "description": "Specifies the host of the Upstream request. This is only valid if\nthe pass_host is set to rewrite",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "retries": {
          "description": "How many times that the proxy (Apache APISIX) should do when\nerrors occur (error, timeout or bad http status codes like 500, 502).",
          "type": "integer",
          "format": "int64"
        },
        "scheme": {
          "description": "The scheme used to talk with the upstream.\nNow value can be http, grpc.",
          "type": "string",
          "enum": [
            "http",
            "https",
            "grpc",
            "grpcs"
          ]
        },
        "subsets": {
          "description": "Subsets groups the service endpoints by their labels. Usually used to differentiate\nservice versions.",
          "type": "array",
          "items": {
            "description": "ApisixUpstreamSubset defines a single endpoints group of one Service.",
            "type": "object",
            "required": [
              "labels",
              "name"
            ],
            "properties": {
              "labels": {
                "description": "Labels is the label set of this subset.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "name": {
                "description": "Name is the name of subset.",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "timeout": {
          "description": "Timeout settings for the read, send and connect to the upstream.",
          "type": "object",
          "properties": {
            "connect": {
              "type": "string"
            },
            "read": {
              "type": "string"
            },
            "send": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "tlsSecret": {
          "description": "Set the client certificate when connecting to TLS upstream.",
          "type": "object",
          "required": [
            "name",
            "namespace"
          ],
          "properties": {
            "name": {
              "type": "string",
              "minLength": 1
            },
            "namespace": {
              "type": "string",
              "minLength": 1
            }
          },
          "additionalProperties": false
        },
        "upstreamHost": {
          "description": "Specifies the host of the Upstream request. This is only valid if\nthe pass_host is set to rewrite",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "ApisixStatus is the status report for Apisix ingress Resources",
      "type": "object",
      "properties": {
        "conditions": {
          "type": "array",
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource.",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                "type": "string",
                "maxLength": 32768
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64",
                "minimum": 0
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                "type": "string",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "type": "string",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ]
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                "type": "string",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
              }
            },
            "additionalProperties": false
          }
        }
      },
      "additionalProperties": false
    }
  }
}
